{
    "name": "rootly",
    "displayName": "Rootly",
    "description": "A Pulumi package for creating and managing Rootly cloud resources.",
    "keywords": [
        "pulumi",
        "rootly",
        "category/cloud"
    ],
    "homepage": "https://rootly.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`rootly` Terraform Provider](https://github.com/rootlyhq/terraform-provider-rootly).",
    "repository": "https://github.com/rootlyhq/pulumi-rootly",
    "logoUrl": "https://raw.githubusercontent.com/rootlyhq/pulumi-rootly/v0.0.3/rootly.svg",
    "pluginDownloadURL": "https://github.com/rootlyhq/pulumi-rootly/releases/v${VERSION}",
    "publisher": "Rootly",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "apiHost": {
                "type": "string",
                "description": "The Rootly API host. Defaults to https://api.rootly.com\n"
            },
            "apiToken": {
                "type": "string",
                "description": "The Rootly API Token. Generate it from your account at https://rootly.com/account\n"
            }
        }
    },
    "types": {
        "rootly:index/DashboardPanelParams:DashboardPanelParams": {
            "properties": {
                "datasets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/DashboardPanelParamsDataset:DashboardPanelParamsDataset"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "display": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "display"
            ]
        },
        "rootly:index/DashboardPanelParamsDataset:DashboardPanelParamsDataset": {
            "properties": {
                "aggregate": {
                    "$ref": "#/types/rootly:index/DashboardPanelParamsDatasetAggregate:DashboardPanelParamsDatasetAggregate",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "collection": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/DashboardPanelParamsDatasetFilter:DashboardPanelParamsDatasetFilter"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "collection"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "collection",
                        "groupBy",
                        "name"
                    ]
                }
            }
        },
        "rootly:index/DashboardPanelParamsDatasetAggregate:DashboardPanelParamsDatasetAggregate": {
            "properties": {
                "cumulative": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operation": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cumulative",
                "key",
                "operation"
            ]
        },
        "rootly:index/DashboardPanelParamsDatasetFilter:DashboardPanelParamsDatasetFilter": {
            "properties": {
                "operation": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/DashboardPanelParamsDatasetFilterRule:DashboardPanelParamsDatasetFilterRule"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "operation"
            ]
        },
        "rootly:index/DashboardPanelParamsDatasetFilterRule:DashboardPanelParamsDatasetFilterRule": {
            "properties": {
                "condition": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "key": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operation": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "condition",
                "key",
                "operation",
                "value"
            ]
        },
        "rootly:index/EnvironmentSlackAlias:EnvironmentSlackAlias": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/EnvironmentSlackChannel:EnvironmentSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/FunctionalitySlackAlias:FunctionalitySlackAlias": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/FunctionalitySlackChannel:FunctionalitySlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/IncidentTypeSlackAlias:IncidentTypeSlackAlias": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/IncidentTypeSlackChannel:IncidentTypeSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/ServiceSlackAlias:ServiceSlackAlias": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/ServiceSlackChannel:ServiceSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/SeveritySlackAlias:SeveritySlackAlias": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/SeveritySlackChannel:SeveritySlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/TeamSlackAlias:TeamSlackAlias": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/TeamSlackChannel:TeamSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowActionItemTriggerParams:WorkflowActionItemTriggerParams": {
            "properties": {
                "incidentActionItemCondition": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentActionItemConditionGroup": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentActionItemConditionKind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentActionItemConditionPriority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentActionItemConditionStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentActionItemGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentActionItemKinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentActionItemPriorities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentActionItemStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentCondition": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionAcknowledgedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionDetectedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionEnvironment": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionFunctionality": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionGroup": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionIncidentRoles": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionIncidentType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionKind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionMitigatedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionResolvedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionService": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionSeverity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionStartedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionSummary": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionVisibility": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionalInactivity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentKinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentVisibilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggerType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "incidentActionItemGroupIds",
                        "incidentActionItemKinds",
                        "incidentActionItemPriorities",
                        "incidentActionItemStatuses",
                        "incidentConditionAcknowledgedAt",
                        "incidentConditionDetectedAt",
                        "incidentConditionMitigatedAt",
                        "incidentConditionResolvedAt",
                        "incidentConditionStartedAt",
                        "incidentConditionSummary",
                        "incidentConditionalInactivity",
                        "incidentKinds",
                        "incidentStatuses",
                        "incidentVisibilities",
                        "triggers"
                    ]
                }
            }
        },
        "rootly:index/WorkflowAlertTriggerParams:WorkflowAlertTriggerParams": {
            "properties": {
                "alertCondition": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alertConditionLabel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alertConditionLabelUseRegexp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alertConditionPayload": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alertConditionPayloadUseRegexp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alertConditionSource": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alertConditionSourceUseRegexp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alertLabels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alertPayloads": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alertQueryPayload": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "alertSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggerType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "alertConditionLabelUseRegexp",
                        "alertConditionPayloadUseRegexp",
                        "alertConditionSourceUseRegexp",
                        "alertLabels",
                        "alertPayloads",
                        "alertQueryPayload",
                        "alertSources",
                        "triggers"
                    ]
                }
            }
        },
        "rootly:index/WorkflowIncidentTriggerParams:WorkflowIncidentTriggerParams": {
            "properties": {
                "incidentCondition": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionAcknowledgedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionDetectedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionEnvironment": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionFunctionality": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionGroup": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionIncidentRoles": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionIncidentType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionKind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionMitigatedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionResolvedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionService": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionSeverity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionStartedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionSummary": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionVisibility": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionalInactivity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentKinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentVisibilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggerType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "incidentConditionAcknowledgedAt",
                        "incidentConditionDetectedAt",
                        "incidentConditionMitigatedAt",
                        "incidentConditionResolvedAt",
                        "incidentConditionStartedAt",
                        "incidentConditionSummary",
                        "incidentConditionalInactivity",
                        "incidentKinds",
                        "incidentStatuses",
                        "incidentVisibilities",
                        "triggers"
                    ]
                }
            }
        },
        "rootly:index/WorkflowPostMortemTriggerParams:WorkflowPostMortemTriggerParams": {
            "properties": {
                "incidentCondition": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionAcknowledgedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionDetectedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionEnvironment": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionFunctionality": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionGroup": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionIncidentRoles": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionIncidentType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionKind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionMitigatedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionResolvedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionService": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionSeverity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionStartedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionSummary": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionVisibility": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentConditionalInactivity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentKinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentPostMortemCauseIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentPostMortemCondition": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentPostMortemConditionCause": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentPostMortemConditionStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentPostMortemStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentVisibilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggerType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "incidentConditionAcknowledgedAt",
                        "incidentConditionDetectedAt",
                        "incidentConditionMitigatedAt",
                        "incidentConditionResolvedAt",
                        "incidentConditionStartedAt",
                        "incidentConditionSummary",
                        "incidentConditionalInactivity",
                        "incidentKinds",
                        "incidentPostMortemCauseIds",
                        "incidentPostMortemStatuses",
                        "incidentStatuses",
                        "incidentVisibilities",
                        "triggers"
                    ]
                }
            }
        },
        "rootly:index/WorkflowPulseTriggerParams:WorkflowPulseTriggerParams": {
            "properties": {
                "pulseCondition": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pulseConditionLabel": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pulseConditionLabelUseRegexp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pulseConditionPayload": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pulseConditionPayloadUseRegexp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pulseConditionSource": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pulseConditionSourceUseRegexp": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pulseLabels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pulsePayloads": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pulseQueryPayload": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pulseSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggerType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "pulseConditionLabelUseRegexp",
                        "pulseConditionPayloadUseRegexp",
                        "pulseConditionSourceUseRegexp",
                        "pulseLabels",
                        "pulsePayloads",
                        "pulseQueryPayload",
                        "pulseSources",
                        "triggers"
                    ]
                }
            }
        },
        "rootly:index/WorkflowSimpleTriggerParams:WorkflowSimpleTriggerParams": {
            "properties": {
                "triggerType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "triggers"
                    ]
                }
            }
        },
        "rootly:index/WorkflowTaskAddActionItemTaskParams:WorkflowTaskAddActionItemTaskParams": {
            "properties": {
                "assignedToUserId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentRoleId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAddActionItemTaskParamsPostToSlackChannel:WorkflowTaskAddActionItemTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "summary": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "priority",
                "status",
                "summary"
            ]
        },
        "rootly:index/WorkflowTaskAddActionItemTaskParamsPostToSlackChannel:WorkflowTaskAddActionItemTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskAddRoleTaskParams:WorkflowTaskAddRoleTaskParams": {
            "properties": {
                "assignedToUserId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentRoleId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "incidentRoleId"
            ]
        },
        "rootly:index/WorkflowTaskAddSlackBookmarkTaskParams:WorkflowTaskAddSlackBookmarkTaskParams": {
            "properties": {
                "channel": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "emoji": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "link": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "playbookId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "channel"
            ]
        },
        "rootly:index/WorkflowTaskAddTeamTaskParams:WorkflowTaskAddTeamTaskParams": {
            "properties": {
                "groupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "groupId"
            ]
        },
        "rootly:index/WorkflowTaskAddToTimelineTaskParams:WorkflowTaskAddToTimelineTaskParams": {
            "properties": {
                "event": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAddToTimelineTaskParamsPostToSlackChannel:WorkflowTaskAddToTimelineTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "event"
            ]
        },
        "rootly:index/WorkflowTaskAddToTimelineTaskParamsPostToSlackChannel:WorkflowTaskAddToTimelineTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskArchiveSlackChannelsTaskParams:WorkflowTaskArchiveSlackChannelsTaskParams": {
            "properties": {
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskArchiveSlackChannelsTaskParamsChannel:WorkflowTaskArchiveSlackChannelsTaskParamsChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "channels"
            ]
        },
        "rootly:index/WorkflowTaskArchiveSlackChannelsTaskParamsChannel:WorkflowTaskArchiveSlackChannelsTaskParamsChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskAttachDatadogDashboardsTaskParams:WorkflowTaskAttachDatadogDashboardsTaskParams": {
            "properties": {
                "dashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAttachDatadogDashboardsTaskParamsDashboard:WorkflowTaskAttachDatadogDashboardsTaskParamsDashboard"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAttachDatadogDashboardsTaskParamsPostToSlackChannel:WorkflowTaskAttachDatadogDashboardsTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dashboards"
            ]
        },
        "rootly:index/WorkflowTaskAttachDatadogDashboardsTaskParamsDashboard:WorkflowTaskAttachDatadogDashboardsTaskParamsDashboard": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskAttachDatadogDashboardsTaskParamsPostToSlackChannel:WorkflowTaskAttachDatadogDashboardsTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskAutoAssignRoleOpsgenieTaskParams:WorkflowTaskAutoAssignRoleOpsgenieTaskParams": {
            "properties": {
                "incidentRoleId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schedule": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "incidentRoleId",
                "schedule"
            ]
        },
        "rootly:index/WorkflowTaskAutoAssignRolePagerdutyTaskParams:WorkflowTaskAutoAssignRolePagerdutyTaskParams": {
            "properties": {
                "escalationPolicy": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentRoleId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schedule": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "incidentRoleId"
            ]
        },
        "rootly:index/WorkflowTaskAutoAssignRoleVictorOpsTaskParams:WorkflowTaskAutoAssignRoleVictorOpsTaskParams": {
            "properties": {
                "incidentRoleId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schedule": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "incidentRoleId",
                "schedule"
            ]
        },
        "rootly:index/WorkflowTaskCallPeopleTaskParams:WorkflowTaskCallPeopleTaskParams": {
            "properties": {
                "content": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phoneNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "content",
                "name",
                "phoneNumbers"
            ]
        },
        "rootly:index/WorkflowTaskCreateAirtableTableRecordTaskParams:WorkflowTaskCreateAirtableTableRecordTaskParams": {
            "properties": {
                "base": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customFieldsMapping": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "table": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "base",
                "table"
            ]
        },
        "rootly:index/WorkflowTaskCreateAsanaSubtaskTaskParams:WorkflowTaskCreateAsanaSubtaskTaskParams": {
            "properties": {
                "assignUserEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customFieldsMapping": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dependencyDirection": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dependentTaskIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parentTaskId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "completion",
                "parentTaskId",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateAsanaTaskTaskParams:WorkflowTaskCreateAsanaTaskTaskParams": {
            "properties": {
                "assignUserEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customFieldsMapping": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dependencyDirection": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dependentTaskIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notes": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateAsanaTaskTaskParamsProject:WorkflowTaskCreateAsanaTaskTaskParamsProject"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workspace": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "completion",
                "projects",
                "title",
                "workspace"
            ]
        },
        "rootly:index/WorkflowTaskCreateAsanaTaskTaskParamsProject:WorkflowTaskCreateAsanaTaskTaskParamsProject": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateConfluencePageTaskParams:WorkflowTaskCreateConfluencePageTaskParams": {
            "properties": {
                "ancestor": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "content": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "markPostMortemAsPublished": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postMortemTemplateId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "space": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "template": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "space",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateDatadogNotebookTaskParams:WorkflowTaskCreateDatadogNotebookTaskParams": {
            "properties": {
                "content": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "markPostMortemAsPublished": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postMortemTemplateId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "template": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateDropboxPaperPageTaskParams:WorkflowTaskCreateDropboxPaperPageTaskParams": {
            "properties": {
                "content": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "markPostMortemAsPublished": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "namespace": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parentFolder": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postMortemTemplateId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateGithubIssueTaskParams:WorkflowTaskCreateGithubIssueTaskParams": {
            "properties": {
                "body": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "repository": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "repository",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateGoToMeetingTaskParams:WorkflowTaskCreateGoToMeetingTaskParams": {
            "properties": {
                "conferenceCallInfo": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "passwordRequired": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateGoToMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateGoToMeetingTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subject": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "subject"
            ]
        },
        "rootly:index/WorkflowTaskCreateGoToMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateGoToMeetingTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateGoogleCalendarEventTaskParams:WorkflowTaskCreateGoogleCalendarEventTaskParams": {
            "properties": {
                "attendees": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canGuestsInviteOthers": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canGuestsModifyEvent": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canGuestsSeeOtherGuests": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "conferenceSolutionKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "daysUntilMeeting": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "excludeWeekends": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "meetingDuration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleCalendarEventTaskParamsPostToSlackChannel:WorkflowTaskCreateGoogleCalendarEventTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendUpdates": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "summary": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeOfMeeting": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeZone": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attendees",
                "daysUntilMeeting",
                "description",
                "meetingDuration",
                "summary",
                "timeOfMeeting"
            ]
        },
        "rootly:index/WorkflowTaskCreateGoogleCalendarEventTaskParamsPostToSlackChannel:WorkflowTaskCreateGoogleCalendarEventTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateGoogleDocsPageTaskParams:WorkflowTaskCreateGoogleDocsPageTaskParams": {
            "properties": {
                "content": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "drive": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "markPostMortemAsPublished": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parentFolder": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postMortemTemplateId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "templateId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateGoogleDocsPermissionsTaskParams:WorkflowTaskCreateGoogleDocsPermissionsTaskParams": {
            "properties": {
                "emailMessage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "permissions": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendNotificationEmail": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fileId",
                "permissions"
            ]
        },
        "rootly:index/WorkflowTaskCreateGoogleMeetingTaskParams:WorkflowTaskCreateGoogleMeetingTaskParams": {
            "properties": {
                "conferenceSolutionKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateGoogleMeetingTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "summary": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "summary"
            ]
        },
        "rootly:index/WorkflowTaskCreateGoogleMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateGoogleMeetingTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateIncidentTaskParams:WorkflowTaskCreateIncidentTaskParams": {
            "properties": {
                "customFieldsMapping": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "private": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severityId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "summary": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateJiraIssueTaskParams:WorkflowTaskCreateJiraIssueTaskParams": {
            "properties": {
                "assignUserEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customFieldsMapping": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dueDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issueType": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reporterUserEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatePayload": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "issueType",
                "projectKey",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateJiraSubtaskTaskParams:WorkflowTaskCreateJiraSubtaskTaskParams": {
            "properties": {
                "assignUserEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customFieldsMapping": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dueDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parentIssueId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reporterUserEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subtaskIssueType": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatePayload": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "parentIssueId",
                "projectKey",
                "subtaskIssueType",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateLinearIssueCommentTaskParams:WorkflowTaskCreateLinearIssueCommentTaskParams": {
            "properties": {
                "body": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issueId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "body",
                "issueId"
            ]
        },
        "rootly:index/WorkflowTaskCreateLinearIssueTaskParams:WorkflowTaskCreateLinearIssueTaskParams": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearIssueTaskParamsLabel:WorkflowTaskCreateLinearIssueTaskParamsLabel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "project": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "team": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "state",
                "team",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateLinearIssueTaskParamsLabel:WorkflowTaskCreateLinearIssueTaskParamsLabel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateLinearSubtaskIssueTaskParams:WorkflowTaskCreateLinearSubtaskIssueTaskParams": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parentIssueId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "parentIssueId",
                "state",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateMicrosoftTeamsMeetingTaskParams:WorkflowTaskCreateMicrosoftTeamsMeetingTaskParams": {
            "properties": {
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subject": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "name",
                "subject"
            ]
        },
        "rootly:index/WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateNotionPageTaskParams:WorkflowTaskCreateNotionPageTaskParams": {
            "properties": {
                "markPostMortemAsPublished": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parentPage": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postMortemTemplateId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "showActionItemsAsTable": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "showTimelineAsTable": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "parentPage"
            ]
        },
        "rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParams:WorkflowTaskCreateOpsgenieAlertTaskParams": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "escalations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParamsEscalation:WorkflowTaskCreateOpsgenieAlertTaskParamsEscalation"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParamsSchedule:WorkflowTaskCreateOpsgenieAlertTaskParamsSchedule"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParamsTeam:WorkflowTaskCreateOpsgenieAlertTaskParamsTeam"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParamsUser:WorkflowTaskCreateOpsgenieAlertTaskParamsUser"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "message"
            ]
        },
        "rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParamsEscalation:WorkflowTaskCreateOpsgenieAlertTaskParamsEscalation": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParamsSchedule:WorkflowTaskCreateOpsgenieAlertTaskParamsSchedule": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParamsTeam:WorkflowTaskCreateOpsgenieAlertTaskParamsTeam": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParamsUser:WorkflowTaskCreateOpsgenieAlertTaskParamsUser": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreatePagertreeAlertTaskParams:WorkflowTaskCreatePagertreeAlertTaskParams": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incident": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreatePagertreeAlertTaskParamsTeam:WorkflowTaskCreatePagertreeAlertTaskParamsTeam"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "urgency": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreatePagertreeAlertTaskParamsUser:WorkflowTaskCreatePagertreeAlertTaskParamsUser"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rootly:index/WorkflowTaskCreatePagertreeAlertTaskParamsTeam:WorkflowTaskCreatePagertreeAlertTaskParamsTeam": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreatePagertreeAlertTaskParamsUser:WorkflowTaskCreatePagertreeAlertTaskParamsUser": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateQuipPageTaskParams:WorkflowTaskCreateQuipPageTaskParams": {
            "properties": {
                "content": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parentFolderId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postMortemTemplateId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "templateId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateServiceNowIncidentTaskParams:WorkflowTaskCreateServiceNowIncidentTaskParams": {
            "properties": {
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customFieldsMapping": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateShortcutStoryTaskParams:WorkflowTaskCreateShortcutStoryTaskParams": {
            "properties": {
                "archivation": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dueDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "project": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "archivation",
                "kind",
                "project",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateShortcutTaskTaskParams:WorkflowTaskCreateShortcutTaskTaskParams": {
            "properties": {
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parentStoryId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "completion",
                "description",
                "parentStoryId"
            ]
        },
        "rootly:index/WorkflowTaskCreateSlackChannelTaskParams:WorkflowTaskCreateSlackChannelTaskParams": {
            "properties": {
                "private": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workspace": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "title",
                "workspace"
            ]
        },
        "rootly:index/WorkflowTaskCreateTrelloCardTaskParams:WorkflowTaskCreateTrelloCardTaskParams": {
            "properties": {
                "archivation": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "board": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dueDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateTrelloCardTaskParamsLabel:WorkflowTaskCreateTrelloCardTaskParamsLabel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "list": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "board",
                "list",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateTrelloCardTaskParamsLabel:WorkflowTaskCreateTrelloCardTaskParamsLabel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateWebexMeetingTaskParams:WorkflowTaskCreateWebexMeetingTaskParams": {
            "properties": {
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateWebexMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateWebexMeetingTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topic": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "topic"
            ]
        },
        "rootly:index/WorkflowTaskCreateWebexMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateWebexMeetingTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateZendeskTicketTaskParams:WorkflowTaskCreateZendeskTicketTaskParams": {
            "properties": {
                "comment": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customFieldsMapping": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subject": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "subject"
            ]
        },
        "rootly:index/WorkflowTaskCreateZoomMeetingTaskParams:WorkflowTaskCreateZoomMeetingTaskParams": {
            "properties": {
                "alternativeHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoRecording": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createAsEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "password": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateZoomMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateZoomMeetingTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topic": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "topic"
            ]
        },
        "rootly:index/WorkflowTaskCreateZoomMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateZoomMeetingTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskGetAlertsTaskParams:WorkflowTaskGetAlertsTaskParams": {
            "properties": {
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pastDuration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskGetAlertsTaskParamsPostToSlackChannel:WorkflowTaskGetAlertsTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "pastDuration"
            ]
        },
        "rootly:index/WorkflowTaskGetAlertsTaskParamsPostToSlackChannel:WorkflowTaskGetAlertsTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskGetGithubCommitsTaskParams:WorkflowTaskGetGithubCommitsTaskParams": {
            "properties": {
                "branch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "githubRepositoryNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pastDuration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskGetGithubCommitsTaskParamsPostToSlackChannel:WorkflowTaskGetGithubCommitsTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "branch",
                "pastDuration"
            ]
        },
        "rootly:index/WorkflowTaskGetGithubCommitsTaskParamsPostToSlackChannel:WorkflowTaskGetGithubCommitsTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskGetGitlabCommitsTaskParams:WorkflowTaskGetGitlabCommitsTaskParams": {
            "properties": {
                "branch": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gitlabRepositoryNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pastDuration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskGetGitlabCommitsTaskParamsPostToSlackChannel:WorkflowTaskGetGitlabCommitsTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "branch",
                "pastDuration"
            ]
        },
        "rootly:index/WorkflowTaskGetGitlabCommitsTaskParamsPostToSlackChannel:WorkflowTaskGetGitlabCommitsTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskGetPulsesTaskParams:WorkflowTaskGetPulsesTaskParams": {
            "properties": {
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pastDuration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskGetPulsesTaskParamsPostToSlackChannel:WorkflowTaskGetPulsesTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "refs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "pastDuration"
            ]
        },
        "rootly:index/WorkflowTaskGetPulsesTaskParamsPostToSlackChannel:WorkflowTaskGetPulsesTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskHTTPClientTaskParams:WorkflowTaskHTTPClientTaskParams": {
            "properties": {
                "body": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eventMessage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eventUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "headers": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "method": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "params": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskHTTPClientTaskParamsPostToSlackChannel:WorkflowTaskHTTPClientTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "succeedOnStatus": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "succeedOnStatus"
            ]
        },
        "rootly:index/WorkflowTaskHTTPClientTaskParamsPostToSlackChannel:WorkflowTaskHTTPClientTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskInviteToSlackChannelOpsgenieTaskParams:WorkflowTaskInviteToSlackChannelOpsgenieTaskParams": {
            "properties": {
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelOpsgenieTaskParamsChannel:WorkflowTaskInviteToSlackChannelOpsgenieTaskParamsChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schedule": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "schedule"
            ]
        },
        "rootly:index/WorkflowTaskInviteToSlackChannelOpsgenieTaskParamsChannel:WorkflowTaskInviteToSlackChannelOpsgenieTaskParamsChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskInviteToSlackChannelPagerdutyTaskParams:WorkflowTaskInviteToSlackChannelPagerdutyTaskParams": {
            "properties": {
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelPagerdutyTaskParamsChannel:WorkflowTaskInviteToSlackChannelPagerdutyTaskParamsChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "escalationPolicy": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schedule": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rootly:index/WorkflowTaskInviteToSlackChannelPagerdutyTaskParamsChannel:WorkflowTaskInviteToSlackChannelPagerdutyTaskParamsChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskInviteToSlackChannelTaskParams:WorkflowTaskInviteToSlackChannelTaskParams": {
            "properties": {
                "channel": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slackUserGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelTaskParamsSlackUserGroup:WorkflowTaskInviteToSlackChannelTaskParamsSlackUserGroup"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slackUsers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelTaskParamsSlackUser:WorkflowTaskInviteToSlackChannelTaskParamsSlackUser"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "channel"
            ]
        },
        "rootly:index/WorkflowTaskInviteToSlackChannelTaskParamsSlackUser:WorkflowTaskInviteToSlackChannelTaskParamsSlackUser": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskInviteToSlackChannelTaskParamsSlackUserGroup:WorkflowTaskInviteToSlackChannelTaskParamsSlackUserGroup": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskInviteToSlackChannelVictorOpsTaskParams:WorkflowTaskInviteToSlackChannelVictorOpsTaskParams": {
            "properties": {
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelVictorOpsTaskParamsChannel:WorkflowTaskInviteToSlackChannelVictorOpsTaskParamsChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "schedule": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "schedule"
            ]
        },
        "rootly:index/WorkflowTaskInviteToSlackChannelVictorOpsTaskParamsChannel:WorkflowTaskInviteToSlackChannelVictorOpsTaskParamsChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskPageOpsgenieOnCallRespondersTaskParams:WorkflowTaskPageOpsgenieOnCallRespondersTaskParams": {
            "properties": {
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsTeam:WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsTeam"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsUser:WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsUser"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rootly:index/WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsTeam:WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsTeam": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsUser:WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsUser": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskPagePagerdutyOnCallRespondersTaskParams:WorkflowTaskPagePagerdutyOnCallRespondersTaskParams": {
            "properties": {
                "escalationPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsEscalationPolicy:WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsEscalationPolicy"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "service": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "urgency": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsUser:WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsUser"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "service"
            ]
        },
        "rootly:index/WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsEscalationPolicy:WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsEscalationPolicy": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsUser:WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsUser": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskPageVictorOpsOnCallRespondersTaskParams:WorkflowTaskPageVictorOpsOnCallRespondersTaskParams": {
            "properties": {
                "escalationPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsEscalationPolicy:WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsEscalationPolicy"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsUser:WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsUser"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rootly:index/WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsEscalationPolicy:WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsEscalationPolicy": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsUser:WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsUser": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskPrintTaskParams:WorkflowTaskPrintTaskParams": {
            "properties": {
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "message"
            ]
        },
        "rootly:index/WorkflowTaskPublishIncidentTaskParams:WorkflowTaskPublishIncidentTaskParams": {
            "properties": {
                "event": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incident": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicTitle": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusPageId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusPageTemplate": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "incident",
                "publicTitle",
                "statusPageId"
            ]
        },
        "rootly:index/WorkflowTaskRedisClientTaskParams:WorkflowTaskRedisClientTaskParams": {
            "properties": {
                "commands": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eventMessage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eventUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskRedisClientTaskParamsPostToSlackChannel:WorkflowTaskRedisClientTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "url": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "commands",
                "url"
            ]
        },
        "rootly:index/WorkflowTaskRedisClientTaskParamsPostToSlackChannel:WorkflowTaskRedisClientTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskRemoveGoogleDocsPermissionsTaskParams:WorkflowTaskRemoveGoogleDocsPermissionsTaskParams": {
            "properties": {
                "attributeToQueryBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attributeToQueryBy",
                "fileId",
                "value"
            ]
        },
        "rootly:index/WorkflowTaskRenameSlackChannelTaskParams:WorkflowTaskRenameSlackChannelTaskParams": {
            "properties": {
                "channel": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "title"
            ]
        },
        "rootly:index/WorkflowTaskRunCommandHerokuTaskParams:WorkflowTaskRunCommandHerokuTaskParams": {
            "properties": {
                "appName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "command": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskRunCommandHerokuTaskParamsPostToSlackChannel:WorkflowTaskRunCommandHerokuTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "size": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "appName",
                "command",
                "size"
            ]
        },
        "rootly:index/WorkflowTaskRunCommandHerokuTaskParamsPostToSlackChannel:WorkflowTaskRunCommandHerokuTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSendDashboardReportTaskParams:WorkflowTaskSendDashboardReportTaskParams": {
            "properties": {
                "body": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dashboardIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preheader": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subject": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "body",
                "dashboardIds",
                "subject",
                "tos"
            ]
        },
        "rootly:index/WorkflowTaskSendEmailTaskParams:WorkflowTaskSendEmailTaskParams": {
            "properties": {
                "body": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customLogoUrl": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "from": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeFooter": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "includeHeader": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "preheader": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subject": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "body",
                "subject",
                "tos"
            ]
        },
        "rootly:index/WorkflowTaskSendSlackBlocksTaskParams:WorkflowTaskSendSlackBlocksTaskParams": {
            "properties": {
                "attachments": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "blocks": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "broadcastThreadReplyToChannel": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendSlackBlocksTaskParamsChannel:WorkflowTaskSendSlackBlocksTaskParamsChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parentMessageThreadTask": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pinToChannel": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendAsEphemeral": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slackUserGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendSlackBlocksTaskParamsSlackUserGroup:WorkflowTaskSendSlackBlocksTaskParamsSlackUserGroup"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slackUsers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendSlackBlocksTaskParamsSlackUser:WorkflowTaskSendSlackBlocksTaskParamsSlackUser"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "blocks"
            ]
        },
        "rootly:index/WorkflowTaskSendSlackBlocksTaskParamsChannel:WorkflowTaskSendSlackBlocksTaskParamsChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSendSlackBlocksTaskParamsSlackUser:WorkflowTaskSendSlackBlocksTaskParamsSlackUser": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSendSlackBlocksTaskParamsSlackUserGroup:WorkflowTaskSendSlackBlocksTaskParamsSlackUserGroup": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSendSlackMessageTaskParams:WorkflowTaskSendSlackMessageTaskParams": {
            "properties": {
                "actionables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "broadcastThreadReplyToChannel": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendSlackMessageTaskParamsChannel:WorkflowTaskSendSlackMessageTaskParamsChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "color": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parentMessageThreadTask": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pinToChannel": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendAsEphemeral": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slackUserGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendSlackMessageTaskParamsSlackUserGroup:WorkflowTaskSendSlackMessageTaskParamsSlackUserGroup"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slackUsers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendSlackMessageTaskParamsSlackUser:WorkflowTaskSendSlackMessageTaskParamsSlackUser"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "text": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "text"
            ]
        },
        "rootly:index/WorkflowTaskSendSlackMessageTaskParamsChannel:WorkflowTaskSendSlackMessageTaskParamsChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSendSlackMessageTaskParamsSlackUser:WorkflowTaskSendSlackMessageTaskParamsSlackUser": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSendSlackMessageTaskParamsSlackUserGroup:WorkflowTaskSendSlackMessageTaskParamsSlackUserGroup": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSendSmsTaskParams:WorkflowTaskSendSmsTaskParams": {
            "properties": {
                "content": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "phoneNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "content",
                "name",
                "phoneNumbers"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotDatadogGraphTaskParams:WorkflowTaskSnapshotDatadogGraphTaskParams": {
            "properties": {
                "dashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotDatadogGraphTaskParamsDashboard:WorkflowTaskSnapshotDatadogGraphTaskParamsDashboard"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricQueries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pastDuration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotDatadogGraphTaskParamsPostToSlackChannel:WorkflowTaskSnapshotDatadogGraphTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "pastDuration"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotDatadogGraphTaskParamsDashboard:WorkflowTaskSnapshotDatadogGraphTaskParamsDashboard": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotDatadogGraphTaskParamsPostToSlackChannel:WorkflowTaskSnapshotDatadogGraphTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotGrafanaDashboardTaskParams:WorkflowTaskSnapshotGrafanaDashboardTaskParams": {
            "properties": {
                "dashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotGrafanaDashboardTaskParamsDashboard:WorkflowTaskSnapshotGrafanaDashboardTaskParamsDashboard"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotGrafanaDashboardTaskParamsPostToSlackChannel:WorkflowTaskSnapshotGrafanaDashboardTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dashboards"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotGrafanaDashboardTaskParamsDashboard:WorkflowTaskSnapshotGrafanaDashboardTaskParamsDashboard": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotGrafanaDashboardTaskParamsPostToSlackChannel:WorkflowTaskSnapshotGrafanaDashboardTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotLookerLookTaskParams:WorkflowTaskSnapshotLookerLookTaskParams": {
            "properties": {
                "dashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotLookerLookTaskParamsDashboard:WorkflowTaskSnapshotLookerLookTaskParamsDashboard"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotLookerLookTaskParamsPostToSlackChannel:WorkflowTaskSnapshotLookerLookTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "dashboards"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotLookerLookTaskParamsDashboard:WorkflowTaskSnapshotLookerLookTaskParamsDashboard": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotLookerLookTaskParamsPostToSlackChannel:WorkflowTaskSnapshotLookerLookTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotNewRelicGraphTaskParams:WorkflowTaskSnapshotNewRelicGraphTaskParams": {
            "properties": {
                "metricQuery": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "metricType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotNewRelicGraphTaskParamsPostToSlackChannel:WorkflowTaskSnapshotNewRelicGraphTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "metricQuery",
                "metricType"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotNewRelicGraphTaskParamsPostToSlackChannel:WorkflowTaskSnapshotNewRelicGraphTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskTriggerWorkflowTaskParams:WorkflowTaskTriggerWorkflowTaskParams": {
            "properties": {
                "checkWorkflowConditions": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resource": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "workflow": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "kind",
                "resource",
                "workflow"
            ]
        },
        "rootly:index/WorkflowTaskTweetTwitterMessageTaskParams:WorkflowTaskTweetTwitterMessageTaskParams": {
            "properties": {
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "message"
            ]
        },
        "rootly:index/WorkflowTaskUpdateActionItemTaskParams:WorkflowTaskUpdateActionItemTaskParams": {
            "properties": {
                "assignedToUserId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "attributeToQueryBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "queryValue": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "summary": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "attributeToQueryBy",
                "queryValue"
            ]
        },
        "rootly:index/WorkflowTaskUpdateAirtableTableRecordTaskParams:WorkflowTaskUpdateAirtableTableRecordTaskParams": {
            "properties": {
                "baseKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customFieldsMapping": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "recordId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tableName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "baseKey",
                "recordId",
                "tableName"
            ]
        },
        "rootly:index/WorkflowTaskUpdateAsanaTaskTaskParams:WorkflowTaskUpdateAsanaTaskTaskParams": {
            "properties": {
                "assignUserEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customFieldsMapping": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dependencyDirection": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dependentTaskIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "completion",
                "taskId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateGithubIssueTaskParams:WorkflowTaskUpdateGithubIssueTaskParams": {
            "properties": {
                "body": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issueId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "completion",
                "issueId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateGoogleCalendarEventTaskParams:WorkflowTaskUpdateGoogleCalendarEventTaskParams": {
            "properties": {
                "adjustmentDays": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "attendees": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canGuestsInviteOthers": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canGuestsModifyEvent": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "canGuestsSeeOtherGuests": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "conferenceSolutionKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "eventId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "meetingDuration": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateGoogleCalendarEventTaskParamsPostToSlackChannel:WorkflowTaskUpdateGoogleCalendarEventTaskParamsPostToSlackChannel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replaceAttendees": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sendUpdates": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "summary": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timeOfMeeting": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "eventId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateGoogleCalendarEventTaskParamsPostToSlackChannel:WorkflowTaskUpdateGoogleCalendarEventTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskUpdateGoogleDocsPageTaskParams:WorkflowTaskUpdateGoogleDocsPageTaskParams": {
            "properties": {
                "content": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "emailMessage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "fileId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "postMortemTemplateId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fileId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateIncidentPostmortemTaskParams:WorkflowTaskUpdateIncidentPostmortemTaskParams": {
            "properties": {
                "postmortemId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rootly:index/WorkflowTaskUpdateIncidentTaskParams:WorkflowTaskUpdateIncidentTaskParams": {
            "properties": {
                "acknowledgedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "attributeToQueryBy": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customFieldsMapping": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "detectedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mitigatedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "private": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resolvedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severityId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "startedAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "summary": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rootly:index/WorkflowTaskUpdateJiraIssueTaskParams:WorkflowTaskUpdateJiraIssueTaskParams": {
            "properties": {
                "assignUserEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customFieldsMapping": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issueId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectKey": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "reporterUserEmail": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updatePayload": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "issueId",
                "projectKey"
            ]
        },
        "rootly:index/WorkflowTaskUpdateLinearIssueTaskParams:WorkflowTaskUpdateLinearIssueTaskParams": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "issueId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateLinearIssueTaskParamsLabel:WorkflowTaskUpdateLinearIssueTaskParamsLabel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "project": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "state": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "issueId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateLinearIssueTaskParamsLabel:WorkflowTaskUpdateLinearIssueTaskParamsLabel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskUpdateOpsgenieAlertTaskParams:WorkflowTaskUpdateOpsgenieAlertTaskParams": {
            "properties": {
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "completion",
                "priority"
            ]
        },
        "rootly:index/WorkflowTaskUpdateOpsgenieIncidentTaskParams:WorkflowTaskUpdateOpsgenieIncidentTaskParams": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "message": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "opsgenieIncidentId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "opsgenieIncidentId"
            ]
        },
        "rootly:index/WorkflowTaskUpdatePagerdutyIncidentTaskParams:WorkflowTaskUpdatePagerdutyIncidentTaskParams": {
            "properties": {
                "escalationLevel": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pagerdutyIncidentId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resolution": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "urgency": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "pagerdutyIncidentId"
            ]
        },
        "rootly:index/WorkflowTaskUpdatePagertreeAlertTaskParams:WorkflowTaskUpdatePagertreeAlertTaskParams": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incident": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pagertreeAlertId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdatePagertreeAlertTaskParamsTeam:WorkflowTaskUpdatePagertreeAlertTaskParamsTeam"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "urgency": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdatePagertreeAlertTaskParamsUser:WorkflowTaskUpdatePagertreeAlertTaskParamsUser"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "rootly:index/WorkflowTaskUpdatePagertreeAlertTaskParamsTeam:WorkflowTaskUpdatePagertreeAlertTaskParamsTeam": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskUpdatePagertreeAlertTaskParamsUser:WorkflowTaskUpdatePagertreeAlertTaskParamsUser": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskUpdateServiceNowIncidentTaskParams:WorkflowTaskUpdateServiceNowIncidentTaskParams": {
            "properties": {
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customFieldsMapping": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "incidentId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "incidentId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateShortcutStoryTaskParams:WorkflowTaskUpdateShortcutStoryTaskParams": {
            "properties": {
                "archivation": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dueDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storyId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "archivation",
                "storyId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateShortcutTaskTaskParams:WorkflowTaskUpdateShortcutTaskTaskParams": {
            "properties": {
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "parentStoryId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "completion",
                "parentStoryId",
                "taskId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateSlackChannelTopicTaskParams:WorkflowTaskUpdateSlackChannelTopicTaskParams": {
            "properties": {
                "channel": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "topic": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "channel",
                "topic"
            ]
        },
        "rootly:index/WorkflowTaskUpdateStatusTaskParams:WorkflowTaskUpdateStatusTaskParams": {
            "properties": {
                "inactivityTimeout": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "status"
            ]
        },
        "rootly:index/WorkflowTaskUpdateTrelloCardTaskParams:WorkflowTaskUpdateTrelloCardTaskParams": {
            "properties": {
                "archivation": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "board": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "cardId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "dueDate": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateTrelloCardTaskParamsLabel:WorkflowTaskUpdateTrelloCardTaskParamsLabel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "list": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "title": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "archivation",
                "cardId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateTrelloCardTaskParamsLabel:WorkflowTaskUpdateTrelloCardTaskParamsLabel": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskUpdateVictorOpsIncidentTaskParams:WorkflowTaskUpdateVictorOpsIncidentTaskParams": {
            "properties": {
                "resolutionMessage": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "victorOpsIncidentId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "status",
                "victorOpsIncidentId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateZendeskTicketTaskParams:WorkflowTaskUpdateZendeskTicketTaskParams": {
            "properties": {
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customFieldsMapping": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subject": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "tags": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "taskType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "ticketId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "ticketId"
            ]
        },
        "rootly:index/getCausesCause:getCausesCause": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slug": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "name",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rootly:index/getCustomFieldOptionsCustomFieldOption:getCustomFieldOptionsCustomFieldOption": {
            "properties": {
                "color": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customFieldId": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "position": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "color",
                "customFieldId",
                "id",
                "position",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rootly:index/getCustomFieldsCustomField:getCustomFieldsCustomField": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "kind": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "label": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "requireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "showns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slug": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "enabled",
                "id",
                "kind",
                "label",
                "requireds",
                "showns",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rootly:index/getEnvironmentsEnvironment:getEnvironmentsEnvironment": {
            "properties": {
                "color": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slug": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "color",
                "description",
                "id",
                "name",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rootly:index/getFunctionalitiesFunctionality:getFunctionalitiesFunctionality": {
            "properties": {
                "color": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slug": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "color",
                "description",
                "id",
                "name",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rootly:index/getIncidentRolesIncidentRole:getIncidentRolesIncidentRole": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "enabled": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slug": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "summary": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "enabled",
                "id",
                "name",
                "slug",
                "summary"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rootly:index/getIncidentTypesIncidentType:getIncidentTypesIncidentType": {
            "properties": {
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slug": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "name",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rootly:index/getServicesService:getServicesService": {
            "properties": {
                "color": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "publicDescription": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slug": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "color",
                "description",
                "id",
                "name",
                "publicDescription",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rootly:index/getSeveritiesSeverity:getSeveritiesSeverity": {
            "properties": {
                "color": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "severity": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slug": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "color",
                "description",
                "id",
                "name",
                "severity",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rootly:index/getTeamsTeam:getTeamsTeam": {
            "properties": {
                "color": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "slug": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "color",
                "description",
                "id",
                "name",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the rootly package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiHost": {
                "type": "string",
                "description": "The Rootly API host. Defaults to https://api.rootly.com\n"
            },
            "apiToken": {
                "type": "string",
                "description": "The Rootly API Token. Generate it from your account at https://rootly.com/account\n"
            }
        },
        "inputProperties": {
            "apiHost": {
                "type": "string",
                "description": "The Rootly API host. Defaults to https://api.rootly.com\n"
            },
            "apiToken": {
                "type": "string",
                "description": "The Rootly API Token. Generate it from your account at https://rootly.com/account\n"
            }
        }
    },
    "resources": {
        "rootly:index/cause:Cause": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the cause\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cause\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the cause\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the cause\n"
                }
            },
            "required": [
                "description",
                "name",
                "position",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the cause\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cause\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the cause\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the cause\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cause resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the cause\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cause\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position of the cause\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the cause\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/customField:CustomField": {
            "description": "DEPRECATED: Please use `rootly.FormField` resource instead.\n",
            "properties": {
                "default": {
                    "type": "string",
                    "description": "The default value for text field kinds.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the custom_field\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the custom_field\n"
                },
                "label": {
                    "type": "string",
                    "description": "The name of the custom_field\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the custom_field\n"
                },
                "requireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "showns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the custom_field\n"
                }
            },
            "required": [
                "default",
                "description",
                "kind",
                "label",
                "position",
                "requireds",
                "showns",
                "slug"
            ],
            "inputProperties": {
                "default": {
                    "type": "string",
                    "description": "The default value for text field kinds.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the custom_field\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the custom_field\n"
                },
                "label": {
                    "type": "string",
                    "description": "The name of the custom_field\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the custom_field\n"
                },
                "requireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "showns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the custom_field\n"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomField resources.\n",
                "properties": {
                    "default": {
                        "type": "string",
                        "description": "The default value for text field kinds.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the custom_field\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "kind": {
                        "type": "string",
                        "description": "The kind of the custom_field\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The name of the custom_field\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the custom_field\n"
                    },
                    "requireds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "showns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the custom_field\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/customFieldOption:CustomFieldOption": {
            "description": "DEPRECATED: Please use `rootly.FormField` and `rootly.FormFieldOption` resources instead.\n",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The hex color of the custom_field_option\n"
                },
                "customFieldId": {
                    "type": "integer",
                    "description": "The ID of the parent custom field\n"
                },
                "default": {
                    "type": "boolean"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the custom_field_option\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the custom_field_option\n"
                }
            },
            "required": [
                "color",
                "customFieldId",
                "default",
                "position",
                "value"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The hex color of the custom_field_option\n"
                },
                "customFieldId": {
                    "type": "integer",
                    "description": "The ID of the parent custom field\n"
                },
                "default": {
                    "type": "boolean"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the custom_field_option\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the custom_field_option\n"
                }
            },
            "requiredInputs": [
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomFieldOption resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The hex color of the custom_field_option\n"
                    },
                    "customFieldId": {
                        "type": "integer",
                        "description": "The ID of the parent custom field\n"
                    },
                    "default": {
                        "type": "boolean"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the custom_field_option\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the custom_field_option\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/dashboard:Dashboard": {
            "description": "Manages dashboards.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst overview = new rootly.Dashboard(\"overview\", {});\nconst incidentsBySeverity = new rootly.DashboardPanel(\"incidentsBySeverity\", {\n    dashboardId: rootly_dashboard.foo.id,\n    params: {\n        display: \"line_chart\",\n        datasets: [{\n            collection: \"incidents\",\n            filters: [{\n                operation: \"and\",\n                rules: [{\n                    operation: \"and\",\n                    condition: \"=\",\n                    key: \"status\",\n                    value: \"started\",\n                }],\n            }],\n            groupBy: \"severity\",\n            aggregate: {\n                cumulative: false,\n                key: \"results\",\n                operation: \"count\",\n            },\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\noverview = rootly.Dashboard(\"overview\")\nincidents_by_severity = rootly.DashboardPanel(\"incidentsBySeverity\",\n    dashboard_id=rootly_dashboard[\"foo\"][\"id\"],\n    params=rootly.DashboardPanelParamsArgs(\n        display=\"line_chart\",\n        datasets=[rootly.DashboardPanelParamsDatasetArgs(\n            collection=\"incidents\",\n            filters=[rootly.DashboardPanelParamsDatasetFilterArgs(\n                operation=\"and\",\n                rules=[rootly.DashboardPanelParamsDatasetFilterRuleArgs(\n                    operation=\"and\",\n                    condition=\"=\",\n                    key=\"status\",\n                    value=\"started\",\n                )],\n            )],\n            group_by=\"severity\",\n            aggregate=rootly.DashboardPanelParamsDatasetAggregateArgs(\n                cumulative=False,\n                key=\"results\",\n                operation=\"count\",\n            ),\n        )],\n    ))\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var overview = new Rootly.Dashboard(\"overview\", new Rootly.DashboardArgs\n        {\n        });\n        var incidentsBySeverity = new Rootly.DashboardPanel(\"incidentsBySeverity\", new Rootly.DashboardPanelArgs\n        {\n            DashboardId = rootly_dashboard.Foo.Id,\n            Params = new Rootly.Inputs.DashboardPanelParamsArgs\n            {\n                Display = \"line_chart\",\n                Datasets = \n                {\n                    new Rootly.Inputs.DashboardPanelParamsDatasetArgs\n                    {\n                        Collection = \"incidents\",\n                        Filters = \n                        {\n                            new Rootly.Inputs.DashboardPanelParamsDatasetFilterArgs\n                            {\n                                Operation = \"and\",\n                                Rules = \n                                {\n                                    new Rootly.Inputs.DashboardPanelParamsDatasetFilterRuleArgs\n                                    {\n                                        Operation = \"and\",\n                                        Condition = \"=\",\n                                        Key = \"status\",\n                                        Value = \"started\",\n                                    },\n                                },\n                            },\n                        },\n                        GroupBy = \"severity\",\n                        Aggregate = new Rootly.Inputs.DashboardPanelParamsDatasetAggregateArgs\n                        {\n                            Cumulative = false,\n                            Key = \"results\",\n                            Operation = \"count\",\n                        },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.NewDashboard(ctx, \"overview\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewDashboardPanel(ctx, \"incidentsBySeverity\", \u0026rootly.DashboardPanelArgs{\n\t\t\tDashboardId: pulumi.Any(rootly_dashboard.Foo.Id),\n\t\t\tParams: \u0026DashboardPanelParamsArgs{\n\t\t\t\tDisplay: pulumi.String(\"line_chart\"),\n\t\t\t\tDatasets: DashboardPanelParamsDatasetArray{\n\t\t\t\t\t\u0026DashboardPanelParamsDatasetArgs{\n\t\t\t\t\t\tCollection: pulumi.String(\"incidents\"),\n\t\t\t\t\t\tFilters: DashboardPanelParamsDatasetFilterArray{\n\t\t\t\t\t\t\t\u0026DashboardPanelParamsDatasetFilterArgs{\n\t\t\t\t\t\t\t\tOperation: pulumi.String(\"and\"),\n\t\t\t\t\t\t\t\tRules: DashboardPanelParamsDatasetFilterRuleArray{\n\t\t\t\t\t\t\t\t\t\u0026DashboardPanelParamsDatasetFilterRuleArgs{\n\t\t\t\t\t\t\t\t\t\tOperation: pulumi.String(\"and\"),\n\t\t\t\t\t\t\t\t\t\tCondition: pulumi.String(\"=\"),\n\t\t\t\t\t\t\t\t\t\tKey:       pulumi.String(\"status\"),\n\t\t\t\t\t\t\t\t\t\tValue:     pulumi.String(\"started\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tGroupBy: pulumi.String(\"severity\"),\n\t\t\t\t\t\tAggregate: \u0026DashboardPanelParamsDatasetAggregateArgs{\n\t\t\t\t\t\t\tCumulative: pulumi.Bool(false),\n\t\t\t\t\t\t\tKey:        pulumi.String(\"results\"),\n\t\t\t\t\t\t\tOperation:  pulumi.String(\"count\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the dashboard\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Whether the dashboard is owned by organization or user.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the dashboard is public\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the dashboard\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The user_id of the dashboard, for dashboards with owner == user\n"
                }
            },
            "required": [
                "name",
                "slug",
                "userId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the dashboard\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Whether the dashboard is owned by organization or user.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the dashboard is public\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dashboard resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the dashboard\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Whether the dashboard is owned by organization or user.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Whether the dashboard is public\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the dashboard\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The user_id of the dashboard, for dashboards with owner == user\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/dashboardPanel:DashboardPanel": {
            "description": "Manages dashboard_panels.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst overview = new rootly.Dashboard(\"overview\", {});\nconst incidentsBySeverity = new rootly.DashboardPanel(\"incidentsBySeverity\", {\n    dashboardId: rootly_dashboard.foo.id,\n    params: {\n        display: \"line_chart\",\n        datasets: [{\n            collection: \"incidents\",\n            filters: [{\n                operation: \"and\",\n                rules: [{\n                    operation: \"and\",\n                    condition: \"=\",\n                    key: \"status\",\n                    value: \"started\",\n                }],\n            }],\n            groupBy: \"severity\",\n            aggregate: {\n                cumulative: false,\n                key: \"results\",\n                operation: \"count\",\n            },\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\noverview = rootly.Dashboard(\"overview\")\nincidents_by_severity = rootly.DashboardPanel(\"incidentsBySeverity\",\n    dashboard_id=rootly_dashboard[\"foo\"][\"id\"],\n    params=rootly.DashboardPanelParamsArgs(\n        display=\"line_chart\",\n        datasets=[rootly.DashboardPanelParamsDatasetArgs(\n            collection=\"incidents\",\n            filters=[rootly.DashboardPanelParamsDatasetFilterArgs(\n                operation=\"and\",\n                rules=[rootly.DashboardPanelParamsDatasetFilterRuleArgs(\n                    operation=\"and\",\n                    condition=\"=\",\n                    key=\"status\",\n                    value=\"started\",\n                )],\n            )],\n            group_by=\"severity\",\n            aggregate=rootly.DashboardPanelParamsDatasetAggregateArgs(\n                cumulative=False,\n                key=\"results\",\n                operation=\"count\",\n            ),\n        )],\n    ))\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var overview = new Rootly.Dashboard(\"overview\", new Rootly.DashboardArgs\n        {\n        });\n        var incidentsBySeverity = new Rootly.DashboardPanel(\"incidentsBySeverity\", new Rootly.DashboardPanelArgs\n        {\n            DashboardId = rootly_dashboard.Foo.Id,\n            Params = new Rootly.Inputs.DashboardPanelParamsArgs\n            {\n                Display = \"line_chart\",\n                Datasets = \n                {\n                    new Rootly.Inputs.DashboardPanelParamsDatasetArgs\n                    {\n                        Collection = \"incidents\",\n                        Filters = \n                        {\n                            new Rootly.Inputs.DashboardPanelParamsDatasetFilterArgs\n                            {\n                                Operation = \"and\",\n                                Rules = \n                                {\n                                    new Rootly.Inputs.DashboardPanelParamsDatasetFilterRuleArgs\n                                    {\n                                        Operation = \"and\",\n                                        Condition = \"=\",\n                                        Key = \"status\",\n                                        Value = \"started\",\n                                    },\n                                },\n                            },\n                        },\n                        GroupBy = \"severity\",\n                        Aggregate = new Rootly.Inputs.DashboardPanelParamsDatasetAggregateArgs\n                        {\n                            Cumulative = false,\n                            Key = \"results\",\n                            Operation = \"count\",\n                        },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.NewDashboard(ctx, \"overview\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewDashboardPanel(ctx, \"incidentsBySeverity\", \u0026rootly.DashboardPanelArgs{\n\t\t\tDashboardId: pulumi.Any(rootly_dashboard.Foo.Id),\n\t\t\tParams: \u0026DashboardPanelParamsArgs{\n\t\t\t\tDisplay: pulumi.String(\"line_chart\"),\n\t\t\t\tDatasets: DashboardPanelParamsDatasetArray{\n\t\t\t\t\t\u0026DashboardPanelParamsDatasetArgs{\n\t\t\t\t\t\tCollection: pulumi.String(\"incidents\"),\n\t\t\t\t\t\tFilters: DashboardPanelParamsDatasetFilterArray{\n\t\t\t\t\t\t\t\u0026DashboardPanelParamsDatasetFilterArgs{\n\t\t\t\t\t\t\t\tOperation: pulumi.String(\"and\"),\n\t\t\t\t\t\t\t\tRules: DashboardPanelParamsDatasetFilterRuleArray{\n\t\t\t\t\t\t\t\t\t\u0026DashboardPanelParamsDatasetFilterRuleArgs{\n\t\t\t\t\t\t\t\t\t\tOperation: pulumi.String(\"and\"),\n\t\t\t\t\t\t\t\t\t\tCondition: pulumi.String(\"=\"),\n\t\t\t\t\t\t\t\t\t\tKey:       pulumi.String(\"status\"),\n\t\t\t\t\t\t\t\t\t\tValue:     pulumi.String(\"started\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tGroupBy: pulumi.String(\"severity\"),\n\t\t\t\t\t\tAggregate: \u0026DashboardPanelParamsDatasetAggregateArgs{\n\t\t\t\t\t\t\tCumulative: pulumi.Bool(false),\n\t\t\t\t\t\t\tKey:        pulumi.String(\"results\"),\n\t\t\t\t\t\t\tOperation:  pulumi.String(\"count\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "dashboardId": {
                    "type": "string",
                    "description": "The id of the parent dashboard\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the dashboard_panel\n"
                },
                "params": {
                    "$ref": "#/types/rootly:index/DashboardPanelParams:DashboardPanelParams",
                    "description": "The params JSON of the dashboard_panel. See rootly API docs for schema.\n"
                }
            },
            "required": [
                "dashboardId",
                "name",
                "params"
            ],
            "inputProperties": {
                "dashboardId": {
                    "type": "string",
                    "description": "The id of the parent dashboard\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the dashboard_panel\n"
                },
                "params": {
                    "$ref": "#/types/rootly:index/DashboardPanelParams:DashboardPanelParams",
                    "description": "The params JSON of the dashboard_panel. See rootly API docs for schema.\n"
                }
            },
            "requiredInputs": [
                "dashboardId",
                "params"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardPanel resources.\n",
                "properties": {
                    "dashboardId": {
                        "type": "string",
                        "description": "The id of the parent dashboard\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the dashboard_panel\n"
                    },
                    "params": {
                        "$ref": "#/types/rootly:index/DashboardPanelParams:DashboardPanelParams",
                        "description": "The params JSON of the dashboard_panel. See rootly API docs for schema.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/environment:Environment": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst development = new rootly.Environment(\"development\", {\n    color: \"#FF0000\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\", // Any string really\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\", // Any string really\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\", // Any string really\n        },\n    ],\n});\nconst staging = new rootly.Environment(\"staging\", {\n    color: \"#FFA500\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\", // Any string really\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\", // Any string really\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\", // Any string really\n        },\n    ],\n});\nconst production = new rootly.Environment(\"production\", {\n    color: \"#FFA500\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\", // Any string really\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\", // Any string really\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\", // Any string really\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\ndevelopment = rootly.Environment(\"development\",\n    color=\"#FF0000\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.EnvironmentSlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.EnvironmentSlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.EnvironmentSlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\nstaging = rootly.Environment(\"staging\",\n    color=\"#FFA500\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.EnvironmentSlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.EnvironmentSlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.EnvironmentSlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\nproduction = rootly.Environment(\"production\",\n    color=\"#FFA500\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.EnvironmentSlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.EnvironmentSlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.EnvironmentSlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var development = new Rootly.Environment(\"development\", new Rootly.EnvironmentArgs\n        {\n            Color = \"#FF0000\",\n            NotifyEmails = \n            {\n                \"foo@acme.com\",\n                \"bar@acme.com\",\n            },\n            SlackAliases = \n            {\n                new Rootly.Inputs.EnvironmentSlackAliasArgs\n                {\n                    Id = \"S0614TZR7\",\n                    Name = \"Alias 1\",\n                },\n            },\n            SlackChannels = \n            {\n                new Rootly.Inputs.EnvironmentSlackChannelArgs\n                {\n                    Id = \"C06A4RZR9\",\n                    Name = \"Channel 1\",\n                },\n                new Rootly.Inputs.EnvironmentSlackChannelArgs\n                {\n                    Id = \"C02T4RYR2\",\n                    Name = \"Channel 2\",\n                },\n            },\n        });\n        var staging = new Rootly.Environment(\"staging\", new Rootly.EnvironmentArgs\n        {\n            Color = \"#FFA500\",\n            NotifyEmails = \n            {\n                \"foo@acme.com\",\n                \"bar@acme.com\",\n            },\n            SlackAliases = \n            {\n                new Rootly.Inputs.EnvironmentSlackAliasArgs\n                {\n                    Id = \"S0614TZR7\",\n                    Name = \"Alias 1\",\n                },\n            },\n            SlackChannels = \n            {\n                new Rootly.Inputs.EnvironmentSlackChannelArgs\n                {\n                    Id = \"C06A4RZR9\",\n                    Name = \"Channel 1\",\n                },\n                new Rootly.Inputs.EnvironmentSlackChannelArgs\n                {\n                    Id = \"C02T4RYR2\",\n                    Name = \"Channel 2\",\n                },\n            },\n        });\n        var production = new Rootly.Environment(\"production\", new Rootly.EnvironmentArgs\n        {\n            Color = \"#FFA500\",\n            NotifyEmails = \n            {\n                \"foo@acme.com\",\n                \"bar@acme.com\",\n            },\n            SlackAliases = \n            {\n                new Rootly.Inputs.EnvironmentSlackAliasArgs\n                {\n                    Id = \"S0614TZR7\",\n                    Name = \"Alias 1\",\n                },\n            },\n            SlackChannels = \n            {\n                new Rootly.Inputs.EnvironmentSlackChannelArgs\n                {\n                    Id = \"C06A4RZR9\",\n                    Name = \"Channel 1\",\n                },\n                new Rootly.Inputs.EnvironmentSlackChannelArgs\n                {\n                    Id = \"C02T4RYR2\",\n                    Name = \"Channel 2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.NewEnvironment(ctx, \"development\", \u0026rootly.EnvironmentArgs{\n\t\t\tColor: pulumi.String(\"#FF0000\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: EnvironmentSlackAliasArray{\n\t\t\t\t\u0026EnvironmentSlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: EnvironmentSlackChannelArray{\n\t\t\t\t\u0026EnvironmentSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026EnvironmentSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewEnvironment(ctx, \"staging\", \u0026rootly.EnvironmentArgs{\n\t\t\tColor: pulumi.String(\"#FFA500\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: EnvironmentSlackAliasArray{\n\t\t\t\t\u0026EnvironmentSlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: EnvironmentSlackChannelArray{\n\t\t\t\t\u0026EnvironmentSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026EnvironmentSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewEnvironment(ctx, \"production\", \u0026rootly.EnvironmentArgs{\n\t\t\tColor: pulumi.String(\"#FFA500\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: EnvironmentSlackAliasArray{\n\t\t\t\t\u0026EnvironmentSlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: EnvironmentSlackChannelArray{\n\t\t\t\t\u0026EnvironmentSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026EnvironmentSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the environment\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the environment\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails attached to the environment\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the environment\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/EnvironmentSlackAlias:EnvironmentSlackAlias"
                    },
                    "description": "Slack Aliases associated with this environment\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/EnvironmentSlackChannel:EnvironmentSlackChannel"
                    },
                    "description": "Slack Channels associated with this environment\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the environment\n"
                }
            },
            "required": [
                "color",
                "description",
                "name",
                "notifyEmails",
                "position",
                "slackAliases",
                "slackChannels",
                "slug"
            ],
            "inputProperties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the environment\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the environment\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails attached to the environment\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the environment\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/EnvironmentSlackAlias:EnvironmentSlackAlias"
                    },
                    "description": "Slack Aliases associated with this environment\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/EnvironmentSlackChannel:EnvironmentSlackChannel"
                    },
                    "description": "Slack Channels associated with this environment\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the environment\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the environment\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the environment\n"
                    },
                    "notifyEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Emails attached to the environment\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position of the environment\n"
                    },
                    "slackAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/EnvironmentSlackAlias:EnvironmentSlackAlias"
                        },
                        "description": "Slack Aliases associated with this environment\n"
                    },
                    "slackChannels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/EnvironmentSlackChannel:EnvironmentSlackChannel"
                        },
                        "description": "Slack Channels associated with this environment\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the environment\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/formField:FormField": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst regionsAffected = new rootly.FormField(\"regionsAffected\", {\n    kind: \"custom\",\n    inputKind: \"multi_select\",\n    showns: [\n        \"web_new_incident_form\",\n        \"web_update_incident_form\",\n    ],\n    requireds: [\n        \"web_new_incident_form\",\n        \"web_update_incident_form\",\n    ],\n});\nconst asia = new rootly.FormFieldOption(\"asia\", {\n    formFieldId: regionsAffected.id,\n    value: \"Asia\",\n});\nconst europe = new rootly.FormFieldOption(\"europe\", {\n    formFieldId: regionsAffected.id,\n    value: \"Europe\",\n});\nconst northAmerica = new rootly.FormFieldOption(\"northAmerica\", {\n    formFieldId: regionsAffected.id,\n    value: \"North America\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nregions_affected = rootly.FormField(\"regionsAffected\",\n    kind=\"custom\",\n    input_kind=\"multi_select\",\n    showns=[\n        \"web_new_incident_form\",\n        \"web_update_incident_form\",\n    ],\n    requireds=[\n        \"web_new_incident_form\",\n        \"web_update_incident_form\",\n    ])\nasia = rootly.FormFieldOption(\"asia\",\n    form_field_id=regions_affected.id,\n    value=\"Asia\")\neurope = rootly.FormFieldOption(\"europe\",\n    form_field_id=regions_affected.id,\n    value=\"Europe\")\nnorth_america = rootly.FormFieldOption(\"northAmerica\",\n    form_field_id=regions_affected.id,\n    value=\"North America\")\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var regionsAffected = new Rootly.FormField(\"regionsAffected\", new Rootly.FormFieldArgs\n        {\n            Kind = \"custom\",\n            InputKind = \"multi_select\",\n            Showns = \n            {\n                \"web_new_incident_form\",\n                \"web_update_incident_form\",\n            },\n            Requireds = \n            {\n                \"web_new_incident_form\",\n                \"web_update_incident_form\",\n            },\n        });\n        var asia = new Rootly.FormFieldOption(\"asia\", new Rootly.FormFieldOptionArgs\n        {\n            FormFieldId = regionsAffected.Id,\n            Value = \"Asia\",\n        });\n        var europe = new Rootly.FormFieldOption(\"europe\", new Rootly.FormFieldOptionArgs\n        {\n            FormFieldId = regionsAffected.Id,\n            Value = \"Europe\",\n        });\n        var northAmerica = new Rootly.FormFieldOption(\"northAmerica\", new Rootly.FormFieldOptionArgs\n        {\n            FormFieldId = regionsAffected.Id,\n            Value = \"North America\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tregionsAffected, err := rootly.NewFormField(ctx, \"regionsAffected\", \u0026rootly.FormFieldArgs{\n\t\t\tKind:      pulumi.String(\"custom\"),\n\t\t\tInputKind: pulumi.String(\"multi_select\"),\n\t\t\tShowns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"web_new_incident_form\"),\n\t\t\t\tpulumi.String(\"web_update_incident_form\"),\n\t\t\t},\n\t\t\tRequireds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"web_new_incident_form\"),\n\t\t\t\tpulumi.String(\"web_update_incident_form\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewFormFieldOption(ctx, \"asia\", \u0026rootly.FormFieldOptionArgs{\n\t\t\tFormFieldId: regionsAffected.ID(),\n\t\t\tValue:       pulumi.String(\"Asia\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewFormFieldOption(ctx, \"europe\", \u0026rootly.FormFieldOptionArgs{\n\t\t\tFormFieldId: regionsAffected.ID(),\n\t\t\tValue:       pulumi.String(\"Europe\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewFormFieldOption(ctx, \"northAmerica\", \u0026rootly.FormFieldOptionArgs{\n\t\t\tFormFieldId: regionsAffected.ID(),\n\t\t\tValue:       pulumi.String(\"North America\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "defaultValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the form field\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "inputKind": {
                    "type": "string",
                    "description": "The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multi_select`, `date`, `datetime`,\n`users`, `number`, `checkbox`, `tags`.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the form field. Value must be one of `custom`, `title`, `summary`, `severity`, `environments`, `types`,\n`services`, `functionalities`, `teams`, `visibility`, `mark_as_test`, `mark_as_backfilled`, `labels`, `notify_emails`,\n`trigger_manual_workflows`, `show_ongoing_incidents`, `attach_alerts`, `manual_starting_datetime_field`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the form field\n"
                },
                "requireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `web_new_incident_form`, `web_update_incident_form`, `web_incident_post_mortem_form`,\n`web_incident_mitigation_form`, `web_incident_resolution_form`, `web_scheduled_incident_form`,\n`web_update_scheduled_incident_form`, `slack_new_incident_form`, `slack_update_incident_form`,\n`slack_update_incident_status_form`, `slack_incident_mitigation_form`, `slack_incident_resolution_form`,\n`slack_scheduled_incident_form`, `slack_update_scheduled_incident_form`.\n"
                },
                "showns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `web_new_incident_form`, `web_update_incident_form`, `web_incident_post_mortem_form`,\n`web_incident_mitigation_form`, `web_incident_resolution_form`, `web_scheduled_incident_form`,\n`web_update_scheduled_incident_form`, `incident_post_mortem`, `slack_new_incident_form`, `slack_update_incident_form`,\n`slack_update_incident_status_form`, `slack_incident_mitigation_form`, `slack_incident_resolution_form`,\n`slack_scheduled_incident_form`, `slack_update_scheduled_incident_form`.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the form field\n"
                }
            },
            "required": [
                "defaultValues",
                "description",
                "name",
                "requireds",
                "showns",
                "slug"
            ],
            "inputProperties": {
                "defaultValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the form field\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "inputKind": {
                    "type": "string",
                    "description": "The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multi_select`, `date`, `datetime`,\n`users`, `number`, `checkbox`, `tags`.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the form field. Value must be one of `custom`, `title`, `summary`, `severity`, `environments`, `types`,\n`services`, `functionalities`, `teams`, `visibility`, `mark_as_test`, `mark_as_backfilled`, `labels`, `notify_emails`,\n`trigger_manual_workflows`, `show_ongoing_incidents`, `attach_alerts`, `manual_starting_datetime_field`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the form field\n"
                },
                "requireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `web_new_incident_form`, `web_update_incident_form`, `web_incident_post_mortem_form`,\n`web_incident_mitigation_form`, `web_incident_resolution_form`, `web_scheduled_incident_form`,\n`web_update_scheduled_incident_form`, `slack_new_incident_form`, `slack_update_incident_form`,\n`slack_update_incident_status_form`, `slack_incident_mitigation_form`, `slack_incident_resolution_form`,\n`slack_scheduled_incident_form`, `slack_update_scheduled_incident_form`.\n"
                },
                "showns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `web_new_incident_form`, `web_update_incident_form`, `web_incident_post_mortem_form`,\n`web_incident_mitigation_form`, `web_incident_resolution_form`, `web_scheduled_incident_form`,\n`web_update_scheduled_incident_form`, `incident_post_mortem`, `slack_new_incident_form`, `slack_update_incident_form`,\n`slack_update_incident_status_form`, `slack_incident_mitigation_form`, `slack_incident_resolution_form`,\n`slack_scheduled_incident_form`, `slack_update_scheduled_incident_form`.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the form field\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FormField resources.\n",
                "properties": {
                    "defaultValues": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the form field\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "inputKind": {
                        "type": "string",
                        "description": "The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multi_select`, `date`, `datetime`,\n`users`, `number`, `checkbox`, `tags`.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "The kind of the form field. Value must be one of `custom`, `title`, `summary`, `severity`, `environments`, `types`,\n`services`, `functionalities`, `teams`, `visibility`, `mark_as_test`, `mark_as_backfilled`, `labels`, `notify_emails`,\n`trigger_manual_workflows`, `show_ongoing_incidents`, `attach_alerts`, `manual_starting_datetime_field`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the form field\n"
                    },
                    "requireds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `web_new_incident_form`, `web_update_incident_form`, `web_incident_post_mortem_form`,\n`web_incident_mitigation_form`, `web_incident_resolution_form`, `web_scheduled_incident_form`,\n`web_update_scheduled_incident_form`, `slack_new_incident_form`, `slack_update_incident_form`,\n`slack_update_incident_status_form`, `slack_incident_mitigation_form`, `slack_incident_resolution_form`,\n`slack_scheduled_incident_form`, `slack_update_scheduled_incident_form`.\n"
                    },
                    "showns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `web_new_incident_form`, `web_update_incident_form`, `web_incident_post_mortem_form`,\n`web_incident_mitigation_form`, `web_incident_resolution_form`, `web_scheduled_incident_form`,\n`web_update_scheduled_incident_form`, `incident_post_mortem`, `slack_new_incident_form`, `slack_update_incident_form`,\n`slack_update_incident_status_form`, `slack_incident_mitigation_form`, `slack_incident_resolution_form`,\n`slack_scheduled_incident_form`, `slack_update_scheduled_incident_form`.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the form field\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/formFieldOption:FormFieldOption": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst regionsAffected = new rootly.FormField(\"regionsAffected\", {\n    kind: \"custom\",\n    inputKind: \"multi_select\",\n    showns: [\n        \"web_new_incident_form\",\n        \"web_update_incident_form\",\n    ],\n    requireds: [\n        \"web_new_incident_form\",\n        \"web_update_incident_form\",\n    ],\n});\nconst asia = new rootly.FormFieldOption(\"asia\", {\n    formFieldId: regionsAffected.id,\n    value: \"Asia\",\n});\nconst europe = new rootly.FormFieldOption(\"europe\", {\n    formFieldId: regionsAffected.id,\n    value: \"Europe\",\n});\nconst northAmerica = new rootly.FormFieldOption(\"northAmerica\", {\n    formFieldId: regionsAffected.id,\n    value: \"North America\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nregions_affected = rootly.FormField(\"regionsAffected\",\n    kind=\"custom\",\n    input_kind=\"multi_select\",\n    showns=[\n        \"web_new_incident_form\",\n        \"web_update_incident_form\",\n    ],\n    requireds=[\n        \"web_new_incident_form\",\n        \"web_update_incident_form\",\n    ])\nasia = rootly.FormFieldOption(\"asia\",\n    form_field_id=regions_affected.id,\n    value=\"Asia\")\neurope = rootly.FormFieldOption(\"europe\",\n    form_field_id=regions_affected.id,\n    value=\"Europe\")\nnorth_america = rootly.FormFieldOption(\"northAmerica\",\n    form_field_id=regions_affected.id,\n    value=\"North America\")\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var regionsAffected = new Rootly.FormField(\"regionsAffected\", new Rootly.FormFieldArgs\n        {\n            Kind = \"custom\",\n            InputKind = \"multi_select\",\n            Showns = \n            {\n                \"web_new_incident_form\",\n                \"web_update_incident_form\",\n            },\n            Requireds = \n            {\n                \"web_new_incident_form\",\n                \"web_update_incident_form\",\n            },\n        });\n        var asia = new Rootly.FormFieldOption(\"asia\", new Rootly.FormFieldOptionArgs\n        {\n            FormFieldId = regionsAffected.Id,\n            Value = \"Asia\",\n        });\n        var europe = new Rootly.FormFieldOption(\"europe\", new Rootly.FormFieldOptionArgs\n        {\n            FormFieldId = regionsAffected.Id,\n            Value = \"Europe\",\n        });\n        var northAmerica = new Rootly.FormFieldOption(\"northAmerica\", new Rootly.FormFieldOptionArgs\n        {\n            FormFieldId = regionsAffected.Id,\n            Value = \"North America\",\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tregionsAffected, err := rootly.NewFormField(ctx, \"regionsAffected\", \u0026rootly.FormFieldArgs{\n\t\t\tKind:      pulumi.String(\"custom\"),\n\t\t\tInputKind: pulumi.String(\"multi_select\"),\n\t\t\tShowns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"web_new_incident_form\"),\n\t\t\t\tpulumi.String(\"web_update_incident_form\"),\n\t\t\t},\n\t\t\tRequireds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"web_new_incident_form\"),\n\t\t\t\tpulumi.String(\"web_update_incident_form\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewFormFieldOption(ctx, \"asia\", \u0026rootly.FormFieldOptionArgs{\n\t\t\tFormFieldId: regionsAffected.ID(),\n\t\t\tValue:       pulumi.String(\"Asia\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewFormFieldOption(ctx, \"europe\", \u0026rootly.FormFieldOptionArgs{\n\t\t\tFormFieldId: regionsAffected.ID(),\n\t\t\tValue:       pulumi.String(\"Europe\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewFormFieldOption(ctx, \"northAmerica\", \u0026rootly.FormFieldOptionArgs{\n\t\t\tFormFieldId: regionsAffected.ID(),\n\t\t\tValue:       pulumi.String(\"North America\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The hex color of the form_field_option\n"
                },
                "default": {
                    "type": "boolean"
                },
                "formFieldId": {
                    "type": "string",
                    "description": "The ID of the parent custom field\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the form_field_option\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the form_field_option\n"
                }
            },
            "required": [
                "color",
                "default",
                "formFieldId",
                "position",
                "value"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The hex color of the form_field_option\n"
                },
                "default": {
                    "type": "boolean"
                },
                "formFieldId": {
                    "type": "string",
                    "description": "The ID of the parent custom field\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the form_field_option\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the form_field_option\n"
                }
            },
            "requiredInputs": [
                "formFieldId",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FormFieldOption resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The hex color of the form_field_option\n"
                    },
                    "default": {
                        "type": "boolean"
                    },
                    "formFieldId": {
                        "type": "string",
                        "description": "The ID of the parent custom field\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the form_field_option\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the form_field_option\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/formFieldPosition:FormFieldPosition": {
            "properties": {
                "form": {
                    "type": "string",
                    "description": "The form for the position. Value must be one of `web_new_incident_form`, `web_update_incident_form`,\n`web_incident_post_mortem_form`, `web_incident_mitigation_form`, `web_incident_resolution_form`,\n`web_scheduled_incident_form`, `web_update_scheduled_incident_form`, `incident_post_mortem`, `slack_new_incident_form`,\n`slack_update_incident_form`, `slack_update_incident_status_form`, `slack_incident_mitigation_form`,\n`slack_incident_resolution_form`, `slack_scheduled_incident_form`, `slack_update_scheduled_incident_form`.\n"
                },
                "formFieldId": {
                    "type": "string",
                    "description": "The ID of the form field.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the form_field_position\n"
                }
            },
            "required": [
                "formFieldId",
                "position"
            ],
            "inputProperties": {
                "form": {
                    "type": "string",
                    "description": "The form for the position. Value must be one of `web_new_incident_form`, `web_update_incident_form`,\n`web_incident_post_mortem_form`, `web_incident_mitigation_form`, `web_incident_resolution_form`,\n`web_scheduled_incident_form`, `web_update_scheduled_incident_form`, `incident_post_mortem`, `slack_new_incident_form`,\n`slack_update_incident_form`, `slack_update_incident_status_form`, `slack_incident_mitigation_form`,\n`slack_incident_resolution_form`, `slack_scheduled_incident_form`, `slack_update_scheduled_incident_form`.\n"
                },
                "formFieldId": {
                    "type": "string",
                    "description": "The ID of the form field.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the form_field_position\n"
                }
            },
            "requiredInputs": [
                "formFieldId",
                "position"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FormFieldPosition resources.\n",
                "properties": {
                    "form": {
                        "type": "string",
                        "description": "The form for the position. Value must be one of `web_new_incident_form`, `web_update_incident_form`,\n`web_incident_post_mortem_form`, `web_incident_mitigation_form`, `web_incident_resolution_form`,\n`web_scheduled_incident_form`, `web_update_scheduled_incident_form`, `incident_post_mortem`, `slack_new_incident_form`,\n`slack_update_incident_form`, `slack_update_incident_status_form`, `slack_incident_mitigation_form`,\n`slack_incident_resolution_form`, `slack_scheduled_incident_form`, `slack_update_scheduled_incident_form`.\n"
                    },
                    "formFieldId": {
                        "type": "string",
                        "description": "The ID of the form field.\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the form_field_position\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/functionality:Functionality": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst addItemsToCard = new rootly.Functionality(\"add_items_to_card\", {\n    color: \"#800080\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\", // Any string really\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\", // Any string really\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\", // Any string really\n        },\n    ],\n});\nconst loggingIn = new rootly.Functionality(\"logging_in\", {\n    color: \"#800080\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\", // Any string really\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\", // Any string really\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\", // Any string really\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nadd_items_to_card = rootly.Functionality(\"addItemsToCard\",\n    color=\"#800080\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.FunctionalitySlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.FunctionalitySlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.FunctionalitySlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\nlogging_in = rootly.Functionality(\"loggingIn\",\n    color=\"#800080\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.FunctionalitySlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.FunctionalitySlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.FunctionalitySlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var addItemsToCard = new Rootly.Functionality(\"addItemsToCard\", new Rootly.FunctionalityArgs\n        {\n            Color = \"#800080\",\n            NotifyEmails = \n            {\n                \"foo@acme.com\",\n                \"bar@acme.com\",\n            },\n            SlackAliases = \n            {\n                new Rootly.Inputs.FunctionalitySlackAliasArgs\n                {\n                    Id = \"S0614TZR7\",\n                    Name = \"Alias 1\",\n                },\n            },\n            SlackChannels = \n            {\n                new Rootly.Inputs.FunctionalitySlackChannelArgs\n                {\n                    Id = \"C06A4RZR9\",\n                    Name = \"Channel 1\",\n                },\n                new Rootly.Inputs.FunctionalitySlackChannelArgs\n                {\n                    Id = \"C02T4RYR2\",\n                    Name = \"Channel 2\",\n                },\n            },\n        });\n        var loggingIn = new Rootly.Functionality(\"loggingIn\", new Rootly.FunctionalityArgs\n        {\n            Color = \"#800080\",\n            NotifyEmails = \n            {\n                \"foo@acme.com\",\n                \"bar@acme.com\",\n            },\n            SlackAliases = \n            {\n                new Rootly.Inputs.FunctionalitySlackAliasArgs\n                {\n                    Id = \"S0614TZR7\",\n                    Name = \"Alias 1\",\n                },\n            },\n            SlackChannels = \n            {\n                new Rootly.Inputs.FunctionalitySlackChannelArgs\n                {\n                    Id = \"C06A4RZR9\",\n                    Name = \"Channel 1\",\n                },\n                new Rootly.Inputs.FunctionalitySlackChannelArgs\n                {\n                    Id = \"C02T4RYR2\",\n                    Name = \"Channel 2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.NewFunctionality(ctx, \"addItemsToCard\", \u0026rootly.FunctionalityArgs{\n\t\t\tColor: pulumi.String(\"#800080\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: FunctionalitySlackAliasArray{\n\t\t\t\t\u0026FunctionalitySlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: FunctionalitySlackChannelArray{\n\t\t\t\t\u0026FunctionalitySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026FunctionalitySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewFunctionality(ctx, \"loggingIn\", \u0026rootly.FunctionalityArgs{\n\t\t\tColor: pulumi.String(\"#800080\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: FunctionalitySlackAliasArray{\n\t\t\t\t\u0026FunctionalitySlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: FunctionalitySlackChannelArray{\n\t\t\t\t\u0026FunctionalitySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026FunctionalitySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the functionality\n"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Environments associated with this functionality\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the functionality\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails attached to the functionality\n"
                },
                "ownersGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Owner Teams associated with this functionality\n"
                },
                "ownersUserIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Owner Users associated with this service\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the functionality\n"
                },
                "publicDescription": {
                    "type": "string",
                    "description": "The public description of the functionality\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Services associated with this functionality\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/FunctionalitySlackAlias:FunctionalitySlackAlias"
                    },
                    "description": "Slack Aliases associated with this service\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/FunctionalitySlackChannel:FunctionalitySlackChannel"
                    },
                    "description": "Slack Channels associated with this service\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the functionality\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the functionality. Value must be one of `operational`, `impacted`, `outage`, `partial_outage`,\n`major_outage`.\n"
                }
            },
            "required": [
                "color",
                "description",
                "environmentIds",
                "name",
                "notifyEmails",
                "ownersGroupIds",
                "ownersUserIds",
                "position",
                "publicDescription",
                "serviceIds",
                "slackAliases",
                "slackChannels",
                "slug"
            ],
            "inputProperties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the functionality\n"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Environments associated with this functionality\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the functionality\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails attached to the functionality\n"
                },
                "ownersGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Owner Teams associated with this functionality\n"
                },
                "ownersUserIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Owner Users associated with this service\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the functionality\n"
                },
                "publicDescription": {
                    "type": "string",
                    "description": "The public description of the functionality\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Services associated with this functionality\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/FunctionalitySlackAlias:FunctionalitySlackAlias"
                    },
                    "description": "Slack Aliases associated with this service\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/FunctionalitySlackChannel:FunctionalitySlackChannel"
                    },
                    "description": "Slack Channels associated with this service\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the functionality\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the functionality. Value must be one of `operational`, `impacted`, `outage`, `partial_outage`,\n`major_outage`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Functionality resources.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the functionality\n"
                    },
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Environments associated with this functionality\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the functionality\n"
                    },
                    "notifyEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Emails attached to the functionality\n"
                    },
                    "ownersGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Owner Teams associated with this functionality\n"
                    },
                    "ownersUserIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Owner Users associated with this service\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position of the functionality\n"
                    },
                    "publicDescription": {
                        "type": "string",
                        "description": "The public description of the functionality\n"
                    },
                    "serviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Services associated with this functionality\n"
                    },
                    "slackAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/FunctionalitySlackAlias:FunctionalitySlackAlias"
                        },
                        "description": "Slack Aliases associated with this service\n"
                    },
                    "slackChannels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/FunctionalitySlackChannel:FunctionalitySlackChannel"
                        },
                        "description": "Slack Channels associated with this service\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the functionality\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the functionality. Value must be one of `operational`, `impacted`, `outage`, `partial_outage`,\n`major_outage`.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/incidentRole:IncidentRole": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the incident role\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the incident role\n"
                },
                "optional": {
                    "type": "boolean"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the incident role\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the incident role\n"
                },
                "summary": {
                    "type": "string",
                    "description": "The summary of the incident role\n"
                }
            },
            "required": [
                "description",
                "name",
                "optional",
                "position",
                "slug",
                "summary"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the incident role\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the incident role\n"
                },
                "optional": {
                    "type": "boolean"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the incident role\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the incident role\n"
                },
                "summary": {
                    "type": "string",
                    "description": "The summary of the incident role\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IncidentRole resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the incident role\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the incident role\n"
                    },
                    "optional": {
                        "type": "boolean"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position of the incident role\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the incident role\n"
                    },
                    "summary": {
                        "type": "string",
                        "description": "The summary of the incident role\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/incidentRoleTask:IncidentRoleTask": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of incident task\n"
                },
                "incidentRoleId": {
                    "type": "string"
                },
                "priority": {
                    "type": "string",
                    "description": "The priority of the incident task. Value must be one of `high`, `medium`, `low`.\n"
                },
                "task": {
                    "type": "string",
                    "description": "The task of the incident task\n"
                }
            },
            "required": [
                "description",
                "incidentRoleId",
                "task"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of incident task\n"
                },
                "incidentRoleId": {
                    "type": "string"
                },
                "priority": {
                    "type": "string",
                    "description": "The priority of the incident task. Value must be one of `high`, `medium`, `low`.\n"
                },
                "task": {
                    "type": "string",
                    "description": "The task of the incident task\n"
                }
            },
            "requiredInputs": [
                "task"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IncidentRoleTask resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of incident task\n"
                    },
                    "incidentRoleId": {
                        "type": "string"
                    },
                    "priority": {
                        "type": "string",
                        "description": "The priority of the incident task. Value must be one of `high`, `medium`, `low`.\n"
                    },
                    "task": {
                        "type": "string",
                        "description": "The task of the incident task\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/incidentType:IncidentType": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the incident type\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the incident type\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails to attach to the incident type\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the incident type\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/IncidentTypeSlackAlias:IncidentTypeSlackAlias"
                    },
                    "description": "Slack Aliases associated with this incident type\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/IncidentTypeSlackChannel:IncidentTypeSlackChannel"
                    },
                    "description": "Slack Channels associated with this incident type\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the incident type\n"
                }
            },
            "required": [
                "color",
                "description",
                "name",
                "notifyEmails",
                "position",
                "slackAliases",
                "slackChannels",
                "slug"
            ],
            "inputProperties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the incident type\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the incident type\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails to attach to the incident type\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the incident type\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/IncidentTypeSlackAlias:IncidentTypeSlackAlias"
                    },
                    "description": "Slack Aliases associated with this incident type\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/IncidentTypeSlackChannel:IncidentTypeSlackChannel"
                    },
                    "description": "Slack Channels associated with this incident type\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the incident type\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IncidentType resources.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the incident type\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the incident type\n"
                    },
                    "notifyEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Emails to attach to the incident type\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position of the incident type\n"
                    },
                    "slackAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/IncidentTypeSlackAlias:IncidentTypeSlackAlias"
                        },
                        "description": "Slack Aliases associated with this incident type\n"
                    },
                    "slackChannels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/IncidentTypeSlackChannel:IncidentTypeSlackChannel"
                        },
                        "description": "Slack Channels associated with this incident type\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the incident type\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/playbook:Playbook": {
            "properties": {
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Environment ID's to attach to the incident\n"
                },
                "externalUrl": {
                    "type": "string",
                    "description": "The external url of the playbook\n"
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Functionality ID's to attach to the incident\n"
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Team ID's to attach to the incident\n"
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Incident Type ID's to attach to the incident\n"
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Severity ID's to attach to the incident\n"
                },
                "summary": {
                    "type": "string",
                    "description": "The summary of the playbook\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the playbook\n"
                }
            },
            "required": [
                "environmentIds",
                "externalUrl",
                "functionalityIds",
                "groupIds",
                "incidentTypeIds",
                "severityIds",
                "summary",
                "title"
            ],
            "inputProperties": {
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Environment ID's to attach to the incident\n"
                },
                "externalUrl": {
                    "type": "string",
                    "description": "The external url of the playbook\n"
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Functionality ID's to attach to the incident\n"
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Team ID's to attach to the incident\n"
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Incident Type ID's to attach to the incident\n"
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Severity ID's to attach to the incident\n"
                },
                "summary": {
                    "type": "string",
                    "description": "The summary of the playbook\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the playbook\n"
                }
            },
            "requiredInputs": [
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Playbook resources.\n",
                "properties": {
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Environment ID's to attach to the incident\n"
                    },
                    "externalUrl": {
                        "type": "string",
                        "description": "The external url of the playbook\n"
                    },
                    "functionalityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Functionality ID's to attach to the incident\n"
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Team ID's to attach to the incident\n"
                    },
                    "incidentTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Incident Type ID's to attach to the incident\n"
                    },
                    "severityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Severity ID's to attach to the incident\n"
                    },
                    "summary": {
                        "type": "string",
                        "description": "The summary of the playbook\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the playbook\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/playbookTask:PlaybookTask": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of incident task\n"
                },
                "playbookId": {
                    "type": "string"
                },
                "task": {
                    "type": "string",
                    "description": "The task of the incident task\n"
                }
            },
            "required": [
                "description",
                "playbookId",
                "task"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of incident task\n"
                },
                "playbookId": {
                    "type": "string"
                },
                "task": {
                    "type": "string",
                    "description": "The task of the incident task\n"
                }
            },
            "requiredInputs": [
                "task"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PlaybookTask resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of incident task\n"
                    },
                    "playbookId": {
                        "type": "string"
                    },
                    "task": {
                        "type": "string",
                        "description": "The task of the incident task\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/postMortemTemplate:PostMortemTemplate": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The postmortem template. Liquid syntax and markdown are supported.\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Default selected template when editing a postmortem\n"
                },
                "format": {
                    "type": "string",
                    "description": "The format of the input.. Value must be one of `html`, `markdown`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the postmortem template\n"
                }
            },
            "required": [
                "content",
                "default",
                "name"
            ],
            "inputProperties": {
                "content": {
                    "type": "string",
                    "description": "The postmortem template. Liquid syntax and markdown are supported.\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Default selected template when editing a postmortem\n"
                },
                "format": {
                    "type": "string",
                    "description": "The format of the input.. Value must be one of `html`, `markdown`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the postmortem template\n"
                }
            },
            "requiredInputs": [
                "content"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PostMortemTemplate resources.\n",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "The postmortem template. Liquid syntax and markdown are supported.\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Default selected template when editing a postmortem\n"
                    },
                    "format": {
                        "type": "string",
                        "description": "The format of the input.. Value must be one of `html`, `markdown`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the postmortem template\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/secret:Secret": {
            "properties": {
                "hashicorpVaultMount": {
                    "type": "string",
                    "description": "The HashiCorp Vault secret mount path\n"
                },
                "hashicorpVaultPath": {
                    "type": "string",
                    "description": "The HashiCorp Vault secret path\n"
                },
                "hashicorpVaultVersion": {
                    "type": "integer",
                    "description": "The HashiCorp Vault secret version\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The redacted secret\n",
                    "language": {
                        "csharp": {
                            "name": "rootly_secret"
                        }
                    }
                }
            },
            "required": [
                "hashicorpVaultMount",
                "hashicorpVaultPath",
                "hashicorpVaultVersion",
                "name",
                "secret"
            ],
            "inputProperties": {
                "hashicorpVaultMount": {
                    "type": "string",
                    "description": "The HashiCorp Vault secret mount path\n"
                },
                "hashicorpVaultPath": {
                    "type": "string",
                    "description": "The HashiCorp Vault secret path\n"
                },
                "hashicorpVaultVersion": {
                    "type": "integer",
                    "description": "The HashiCorp Vault secret version\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The redacted secret\n",
                    "language": {
                        "csharp": {
                            "name": "rootly_secret"
                        }
                    }
                }
            },
            "requiredInputs": [
                "secret"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Secret resources.\n",
                "properties": {
                    "hashicorpVaultMount": {
                        "type": "string",
                        "description": "The HashiCorp Vault secret mount path\n"
                    },
                    "hashicorpVaultPath": {
                        "type": "string",
                        "description": "The HashiCorp Vault secret path\n"
                    },
                    "hashicorpVaultVersion": {
                        "type": "integer",
                        "description": "The HashiCorp Vault secret version\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "The redacted secret\n",
                        "language": {
                            "csharp": {
                                "name": "rootly_secret"
                            }
                        }
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/service:Service": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst elasticsearchProd = new rootly.Service(\"elasticsearch_prod\", {\n    color: \"#800080\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\", // Any string really\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\", // Any string really\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\", // Any string really\n        },\n    ],\n});\nconst customerPostgresqlProd = new rootly.Service(\"customer_postgresql_prod\", {\n    color: \"#800080\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\", // Any string really\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\", // Any string really\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\", // Any string really\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nelasticsearch_prod = rootly.Service(\"elasticsearchProd\",\n    color=\"#800080\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.ServiceSlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.ServiceSlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.ServiceSlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\ncustomer_postgresql_prod = rootly.Service(\"customerPostgresqlProd\",\n    color=\"#800080\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.ServiceSlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.ServiceSlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.ServiceSlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var elasticsearchProd = new Rootly.Service(\"elasticsearchProd\", new Rootly.ServiceArgs\n        {\n            Color = \"#800080\",\n            NotifyEmails = \n            {\n                \"foo@acme.com\",\n                \"bar@acme.com\",\n            },\n            SlackAliases = \n            {\n                new Rootly.Inputs.ServiceSlackAliasArgs\n                {\n                    Id = \"S0614TZR7\",\n                    Name = \"Alias 1\",\n                },\n            },\n            SlackChannels = \n            {\n                new Rootly.Inputs.ServiceSlackChannelArgs\n                {\n                    Id = \"C06A4RZR9\",\n                    Name = \"Channel 1\",\n                },\n                new Rootly.Inputs.ServiceSlackChannelArgs\n                {\n                    Id = \"C02T4RYR2\",\n                    Name = \"Channel 2\",\n                },\n            },\n        });\n        var customerPostgresqlProd = new Rootly.Service(\"customerPostgresqlProd\", new Rootly.ServiceArgs\n        {\n            Color = \"#800080\",\n            NotifyEmails = \n            {\n                \"foo@acme.com\",\n                \"bar@acme.com\",\n            },\n            SlackAliases = \n            {\n                new Rootly.Inputs.ServiceSlackAliasArgs\n                {\n                    Id = \"S0614TZR7\",\n                    Name = \"Alias 1\",\n                },\n            },\n            SlackChannels = \n            {\n                new Rootly.Inputs.ServiceSlackChannelArgs\n                {\n                    Id = \"C06A4RZR9\",\n                    Name = \"Channel 1\",\n                },\n                new Rootly.Inputs.ServiceSlackChannelArgs\n                {\n                    Id = \"C02T4RYR2\",\n                    Name = \"Channel 2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.NewService(ctx, \"elasticsearchProd\", \u0026rootly.ServiceArgs{\n\t\t\tColor: pulumi.String(\"#800080\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: ServiceSlackAliasArray{\n\t\t\t\t\u0026ServiceSlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: ServiceSlackChannelArray{\n\t\t\t\t\u0026ServiceSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026ServiceSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewService(ctx, \"customerPostgresqlProd\", \u0026rootly.ServiceArgs{\n\t\t\tColor: pulumi.String(\"#800080\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: ServiceSlackAliasArray{\n\t\t\t\t\u0026ServiceSlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: ServiceSlackChannelArray{\n\t\t\t\t\u0026ServiceSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026ServiceSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "backstageId": {
                    "type": "string",
                    "description": "The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name\n"
                },
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the service\n"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Environments associated with this service\n"
                },
                "githubRepositoryBranch": {
                    "type": "string",
                    "description": "The GitHub repository branch associated to this service. eg: main\n"
                },
                "githubRepositoryName": {
                    "type": "string",
                    "description": "The GitHub repository name associated to this service. eg: rootlyhq/my-service\n"
                },
                "gitlabRepositoryBranch": {
                    "type": "string",
                    "description": "The Gitlab repository branch associated to this service. eg: main\n"
                },
                "gitlabRepositoryName": {
                    "type": "string",
                    "description": "The Gitlab repository name associated to this service. eg: rootlyhq/my-service\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails attached to the service\n"
                },
                "opsgenieId": {
                    "type": "string",
                    "description": "The Opsgenie service id associated to this service\n"
                },
                "ownersGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Owner Teams associated with this service\n"
                },
                "ownersUserIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Owner Users associated with this service\n"
                },
                "pagerdutyId": {
                    "type": "string",
                    "description": "The PagerDuty service id associated to this service\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the service\n"
                },
                "publicDescription": {
                    "type": "string",
                    "description": "The public description of the service\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Services dependent on this service\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/ServiceSlackAlias:ServiceSlackAlias"
                    },
                    "description": "Slack Aliases associated with this service\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/ServiceSlackChannel:ServiceSlackChannel"
                    },
                    "description": "Slack Channels associated with this service\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the service\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the service. Value must be one of `operational`, `impacted`, `outage`, `partial_outage`, `major_outage`.\n"
                }
            },
            "required": [
                "backstageId",
                "color",
                "description",
                "environmentIds",
                "githubRepositoryBranch",
                "githubRepositoryName",
                "gitlabRepositoryBranch",
                "gitlabRepositoryName",
                "name",
                "notifyEmails",
                "opsgenieId",
                "ownersGroupIds",
                "ownersUserIds",
                "pagerdutyId",
                "position",
                "publicDescription",
                "serviceIds",
                "slackAliases",
                "slackChannels",
                "slug"
            ],
            "inputProperties": {
                "backstageId": {
                    "type": "string",
                    "description": "The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name\n"
                },
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the service\n"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Environments associated with this service\n"
                },
                "githubRepositoryBranch": {
                    "type": "string",
                    "description": "The GitHub repository branch associated to this service. eg: main\n"
                },
                "githubRepositoryName": {
                    "type": "string",
                    "description": "The GitHub repository name associated to this service. eg: rootlyhq/my-service\n"
                },
                "gitlabRepositoryBranch": {
                    "type": "string",
                    "description": "The Gitlab repository branch associated to this service. eg: main\n"
                },
                "gitlabRepositoryName": {
                    "type": "string",
                    "description": "The Gitlab repository name associated to this service. eg: rootlyhq/my-service\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails attached to the service\n"
                },
                "opsgenieId": {
                    "type": "string",
                    "description": "The Opsgenie service id associated to this service\n"
                },
                "ownersGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Owner Teams associated with this service\n"
                },
                "ownersUserIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Owner Users associated with this service\n"
                },
                "pagerdutyId": {
                    "type": "string",
                    "description": "The PagerDuty service id associated to this service\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the service\n"
                },
                "publicDescription": {
                    "type": "string",
                    "description": "The public description of the service\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Services dependent on this service\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/ServiceSlackAlias:ServiceSlackAlias"
                    },
                    "description": "Slack Aliases associated with this service\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/ServiceSlackChannel:ServiceSlackChannel"
                    },
                    "description": "Slack Channels associated with this service\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the service\n"
                },
                "status": {
                    "type": "string",
                    "description": "The status of the service. Value must be one of `operational`, `impacted`, `outage`, `partial_outage`, `major_outage`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Service resources.\n",
                "properties": {
                    "backstageId": {
                        "type": "string",
                        "description": "The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name\n"
                    },
                    "color": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the service\n"
                    },
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Environments associated with this service\n"
                    },
                    "githubRepositoryBranch": {
                        "type": "string",
                        "description": "The GitHub repository branch associated to this service. eg: main\n"
                    },
                    "githubRepositoryName": {
                        "type": "string",
                        "description": "The GitHub repository name associated to this service. eg: rootlyhq/my-service\n"
                    },
                    "gitlabRepositoryBranch": {
                        "type": "string",
                        "description": "The Gitlab repository branch associated to this service. eg: main\n"
                    },
                    "gitlabRepositoryName": {
                        "type": "string",
                        "description": "The Gitlab repository name associated to this service. eg: rootlyhq/my-service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service\n"
                    },
                    "notifyEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Emails attached to the service\n"
                    },
                    "opsgenieId": {
                        "type": "string",
                        "description": "The Opsgenie service id associated to this service\n"
                    },
                    "ownersGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Owner Teams associated with this service\n"
                    },
                    "ownersUserIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Owner Users associated with this service\n"
                    },
                    "pagerdutyId": {
                        "type": "string",
                        "description": "The PagerDuty service id associated to this service\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position of the service\n"
                    },
                    "publicDescription": {
                        "type": "string",
                        "description": "The public description of the service\n"
                    },
                    "serviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Services dependent on this service\n"
                    },
                    "slackAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/ServiceSlackAlias:ServiceSlackAlias"
                        },
                        "description": "Slack Aliases associated with this service\n"
                    },
                    "slackChannels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/ServiceSlackChannel:ServiceSlackChannel"
                        },
                        "description": "Slack Channels associated with this service\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the service\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "The status of the service. Value must be one of `operational`, `impacted`, `outage`, `partial_outage`, `major_outage`.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/severity:Severity": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst sev0 = new rootly.Severity(\"sev0\", {\n    color: \"#FF0000\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\", // Any string really\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\", // Any string really\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\", // Any string really\n        },\n    ],\n});\nconst sev1 = new rootly.Severity(\"sev1\", {\n    color: \"#FFA500\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\", // Any string really\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\", // Any string really\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\", // Any string really\n        },\n    ],\n});\nconst sev2 = new rootly.Severity(\"sev2\", {\n    color: \"#FFA500\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\", // Any string really\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\", // Any string really\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\", // Any string really\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nsev0 = rootly.Severity(\"sev0\",\n    color=\"#FF0000\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.SeveritySlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.SeveritySlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.SeveritySlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\nsev1 = rootly.Severity(\"sev1\",\n    color=\"#FFA500\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.SeveritySlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.SeveritySlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.SeveritySlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\nsev2 = rootly.Severity(\"sev2\",\n    color=\"#FFA500\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.SeveritySlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.SeveritySlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.SeveritySlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var sev0 = new Rootly.Severity(\"sev0\", new Rootly.SeverityArgs\n        {\n            Color = \"#FF0000\",\n            NotifyEmails = \n            {\n                \"foo@acme.com\",\n                \"bar@acme.com\",\n            },\n            SlackAliases = \n            {\n                new Rootly.Inputs.SeveritySlackAliasArgs\n                {\n                    Id = \"S0614TZR7\",\n                    Name = \"Alias 1\",\n                },\n            },\n            SlackChannels = \n            {\n                new Rootly.Inputs.SeveritySlackChannelArgs\n                {\n                    Id = \"C06A4RZR9\",\n                    Name = \"Channel 1\",\n                },\n                new Rootly.Inputs.SeveritySlackChannelArgs\n                {\n                    Id = \"C02T4RYR2\",\n                    Name = \"Channel 2\",\n                },\n            },\n        });\n        var sev1 = new Rootly.Severity(\"sev1\", new Rootly.SeverityArgs\n        {\n            Color = \"#FFA500\",\n            NotifyEmails = \n            {\n                \"foo@acme.com\",\n                \"bar@acme.com\",\n            },\n            SlackAliases = \n            {\n                new Rootly.Inputs.SeveritySlackAliasArgs\n                {\n                    Id = \"S0614TZR7\",\n                    Name = \"Alias 1\",\n                },\n            },\n            SlackChannels = \n            {\n                new Rootly.Inputs.SeveritySlackChannelArgs\n                {\n                    Id = \"C06A4RZR9\",\n                    Name = \"Channel 1\",\n                },\n                new Rootly.Inputs.SeveritySlackChannelArgs\n                {\n                    Id = \"C02T4RYR2\",\n                    Name = \"Channel 2\",\n                },\n            },\n        });\n        var sev2 = new Rootly.Severity(\"sev2\", new Rootly.SeverityArgs\n        {\n            Color = \"#FFA500\",\n            NotifyEmails = \n            {\n                \"foo@acme.com\",\n                \"bar@acme.com\",\n            },\n            SlackAliases = \n            {\n                new Rootly.Inputs.SeveritySlackAliasArgs\n                {\n                    Id = \"S0614TZR7\",\n                    Name = \"Alias 1\",\n                },\n            },\n            SlackChannels = \n            {\n                new Rootly.Inputs.SeveritySlackChannelArgs\n                {\n                    Id = \"C06A4RZR9\",\n                    Name = \"Channel 1\",\n                },\n                new Rootly.Inputs.SeveritySlackChannelArgs\n                {\n                    Id = \"C02T4RYR2\",\n                    Name = \"Channel 2\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.NewSeverity(ctx, \"sev0\", \u0026rootly.SeverityArgs{\n\t\t\tColor: pulumi.String(\"#FF0000\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: SeveritySlackAliasArray{\n\t\t\t\t\u0026SeveritySlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: SeveritySlackChannelArray{\n\t\t\t\t\u0026SeveritySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026SeveritySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewSeverity(ctx, \"sev1\", \u0026rootly.SeverityArgs{\n\t\t\tColor: pulumi.String(\"#FFA500\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: SeveritySlackAliasArray{\n\t\t\t\t\u0026SeveritySlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: SeveritySlackChannelArray{\n\t\t\t\t\u0026SeveritySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026SeveritySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewSeverity(ctx, \"sev2\", \u0026rootly.SeverityArgs{\n\t\t\tColor: pulumi.String(\"#FFA500\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: SeveritySlackAliasArray{\n\t\t\t\t\u0026SeveritySlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: SeveritySlackChannelArray{\n\t\t\t\t\u0026SeveritySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026SeveritySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the severity\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the severity\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails to attach to the severity\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the severity\n"
                },
                "severity": {
                    "type": "string",
                    "description": "The severity of the severity. Value must be one of `critical`, `high`, `medium`, `low`.\n",
                    "language": {
                        "csharp": {
                            "name": "rootly_severity"
                        }
                    }
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/SeveritySlackAlias:SeveritySlackAlias"
                    },
                    "description": "Slack Aliases associated with this severity\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/SeveritySlackChannel:SeveritySlackChannel"
                    },
                    "description": "Slack Channels associated with this severity\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the severity\n"
                }
            },
            "required": [
                "color",
                "description",
                "name",
                "notifyEmails",
                "position",
                "slackAliases",
                "slackChannels",
                "slug"
            ],
            "inputProperties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the severity\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the severity\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails to attach to the severity\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the severity\n"
                },
                "severity": {
                    "type": "string",
                    "description": "The severity of the severity. Value must be one of `critical`, `high`, `medium`, `low`.\n",
                    "language": {
                        "csharp": {
                            "name": "rootly_severity"
                        }
                    }
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/SeveritySlackAlias:SeveritySlackAlias"
                    },
                    "description": "Slack Aliases associated with this severity\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/SeveritySlackChannel:SeveritySlackChannel"
                    },
                    "description": "Slack Channels associated with this severity\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the severity\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Severity resources.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the severity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the severity\n"
                    },
                    "notifyEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Emails to attach to the severity\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position of the severity\n"
                    },
                    "severity": {
                        "type": "string",
                        "description": "The severity of the severity. Value must be one of `critical`, `high`, `medium`, `low`.\n",
                        "language": {
                            "csharp": {
                                "name": "rootly_severity"
                            }
                        }
                    },
                    "slackAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/SeveritySlackAlias:SeveritySlackAlias"
                        },
                        "description": "Slack Aliases associated with this severity\n"
                    },
                    "slackChannels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/SeveritySlackChannel:SeveritySlackChannel"
                        },
                        "description": "Slack Channels associated with this severity\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the severity\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/statusPage:StatusPage": {
            "properties": {
                "allowSearchEngineIndex": {
                    "type": "boolean",
                    "description": "Allow search engines to include your public status page in search results.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the status page\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "failureMessage": {
                    "type": "string",
                    "description": "Message showing when at least one component is not operational\n"
                },
                "footerColor": {
                    "type": "string",
                    "description": "The color of the footer. Eg. \"#1F2F41\"\n"
                },
                "headerColor": {
                    "type": "string",
                    "description": "The color of the header. Eg. \"#0061F2\"\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Make the status page accessible to the public\n"
                },
                "showUptime": {
                    "type": "boolean",
                    "description": "Show uptime\n"
                },
                "showUptimeLastDays": {
                    "type": "integer",
                    "description": "Show uptime over x days. Value must be one of `30`, `60`, `90`.\n"
                },
                "successMessage": {
                    "type": "string",
                    "description": "Message showing when all components are operational\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the status page\n"
                }
            },
            "required": [
                "allowSearchEngineIndex",
                "description",
                "failureMessage",
                "footerColor",
                "headerColor",
                "public",
                "showUptime",
                "showUptimeLastDays",
                "successMessage",
                "title"
            ],
            "inputProperties": {
                "allowSearchEngineIndex": {
                    "type": "boolean",
                    "description": "Allow search engines to include your public status page in search results.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the status page\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "failureMessage": {
                    "type": "string",
                    "description": "Message showing when at least one component is not operational\n"
                },
                "footerColor": {
                    "type": "string",
                    "description": "The color of the footer. Eg. \"#1F2F41\"\n"
                },
                "headerColor": {
                    "type": "string",
                    "description": "The color of the header. Eg. \"#0061F2\"\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Make the status page accessible to the public\n"
                },
                "showUptime": {
                    "type": "boolean",
                    "description": "Show uptime\n"
                },
                "showUptimeLastDays": {
                    "type": "integer",
                    "description": "Show uptime over x days. Value must be one of `30`, `60`, `90`.\n"
                },
                "successMessage": {
                    "type": "string",
                    "description": "Message showing when all components are operational\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the status page\n"
                }
            },
            "requiredInputs": [
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StatusPage resources.\n",
                "properties": {
                    "allowSearchEngineIndex": {
                        "type": "boolean",
                        "description": "Allow search engines to include your public status page in search results.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the status page\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "failureMessage": {
                        "type": "string",
                        "description": "Message showing when at least one component is not operational\n"
                    },
                    "footerColor": {
                        "type": "string",
                        "description": "The color of the footer. Eg. \"#1F2F41\"\n"
                    },
                    "headerColor": {
                        "type": "string",
                        "description": "The color of the header. Eg. \"#0061F2\"\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Make the status page accessible to the public\n"
                    },
                    "showUptime": {
                        "type": "boolean",
                        "description": "Show uptime\n"
                    },
                    "showUptimeLastDays": {
                        "type": "integer",
                        "description": "Show uptime over x days. Value must be one of `30`, `60`, `90`.\n"
                    },
                    "successMessage": {
                        "type": "string",
                        "description": "Message showing when all components are operational\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the status page\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/statusPageTemplate:StatusPageTemplate": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "Description of the event the template will populate\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the workflow task\n"
                },
                "shouldNotifySubscribers": {
                    "type": "boolean",
                    "description": "Controls if incident subscribers should be notified\n"
                },
                "statusPageId": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "Title of the template\n"
                },
                "updateStatus": {
                    "type": "string",
                    "description": "Status of the event the template will populate\n"
                }
            },
            "required": [
                "body",
                "position",
                "shouldNotifySubscribers",
                "statusPageId",
                "title",
                "updateStatus"
            ],
            "inputProperties": {
                "body": {
                    "type": "string",
                    "description": "Description of the event the template will populate\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the workflow task\n"
                },
                "shouldNotifySubscribers": {
                    "type": "boolean",
                    "description": "Controls if incident subscribers should be notified\n"
                },
                "statusPageId": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "Title of the template\n"
                },
                "updateStatus": {
                    "type": "string",
                    "description": "Status of the event the template will populate\n"
                }
            },
            "requiredInputs": [
                "body",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StatusPageTemplate resources.\n",
                "properties": {
                    "body": {
                        "type": "string",
                        "description": "Description of the event the template will populate\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position of the workflow task\n"
                    },
                    "shouldNotifySubscribers": {
                        "type": "boolean",
                        "description": "Controls if incident subscribers should be notified\n"
                    },
                    "statusPageId": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the template\n"
                    },
                    "updateStatus": {
                        "type": "string",
                        "description": "Status of the event the template will populate\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/team:Team": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the team\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the team\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails to attach to the team\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the team\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/TeamSlackAlias:TeamSlackAlias"
                    },
                    "description": "Slack Aliases associated with this service\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/TeamSlackChannel:TeamSlackChannel"
                    },
                    "description": "Slack Channels associated with this service\n"
                },
                "slug": {
                    "type": "string"
                }
            },
            "required": [
                "color",
                "description",
                "name",
                "notifyEmails",
                "position",
                "slackAliases",
                "slackChannels",
                "slug"
            ],
            "inputProperties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the team\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the team\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails to attach to the team\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the team\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/TeamSlackAlias:TeamSlackAlias"
                    },
                    "description": "Slack Aliases associated with this service\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/TeamSlackChannel:TeamSlackChannel"
                    },
                    "description": "Slack Channels associated with this service\n"
                },
                "slug": {
                    "type": "string"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the team\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the team\n"
                    },
                    "notifyEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Emails to attach to the team\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position of the team\n"
                    },
                    "slackAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/TeamSlackAlias:TeamSlackAlias"
                        },
                        "description": "Slack Aliases associated with this service\n"
                    },
                    "slackChannels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/TeamSlackChannel:TeamSlackChannel"
                        },
                        "description": "Slack Channels associated with this service\n"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/webhooksEndpoint:WebhooksEndpoint": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `incident.created`, `incident.updated`, `incident.mitigated`, `incident.resolved`,\n`incident.cancelled`, `incident.deleted`, `incident.scheduled.created`, `incident.scheduled.updated`,\n`incident.scheduled.in_progress`, `incident.scheduled.completed`, `incident.scheduled.deleted`,\n`incident_post_mortem.created`, `incident_post_mortem.updated`, `incident_post_mortem.published`,\n`incident_post_mortem.deleted`, `alert.created`, `pulse.created`, `genius_workflow_run.queued`,\n`genius_workflow_run.started`, `genius_workflow_run.completed`, `genius_workflow_run.failed`,\n`genius_workflow_run.canceled`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the endpoint\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The webhook signing secret used to verify webhook requests.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the endpoint\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the endpoint.\n"
                }
            },
            "required": [
                "eventTypes",
                "name",
                "secret",
                "slug",
                "url"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `incident.created`, `incident.updated`, `incident.mitigated`, `incident.resolved`,\n`incident.cancelled`, `incident.deleted`, `incident.scheduled.created`, `incident.scheduled.updated`,\n`incident.scheduled.in_progress`, `incident.scheduled.completed`, `incident.scheduled.deleted`,\n`incident_post_mortem.created`, `incident_post_mortem.updated`, `incident_post_mortem.published`,\n`incident_post_mortem.deleted`, `alert.created`, `pulse.created`, `genius_workflow_run.queued`,\n`genius_workflow_run.started`, `genius_workflow_run.completed`, `genius_workflow_run.failed`,\n`genius_workflow_run.canceled`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the endpoint\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The webhook signing secret used to verify webhook requests.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the endpoint\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the endpoint.\n"
                }
            },
            "requiredInputs": [
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebhooksEndpoint resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "eventTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `incident.created`, `incident.updated`, `incident.mitigated`, `incident.resolved`,\n`incident.cancelled`, `incident.deleted`, `incident.scheduled.created`, `incident.scheduled.updated`,\n`incident.scheduled.in_progress`, `incident.scheduled.completed`, `incident.scheduled.deleted`,\n`incident_post_mortem.created`, `incident_post_mortem.updated`, `incident_post_mortem.published`,\n`incident_post_mortem.deleted`, `alert.created`, `pulse.created`, `genius_workflow_run.queued`,\n`genius_workflow_run.started`, `genius_workflow_run.completed`, `genius_workflow_run.failed`,\n`genius_workflow_run.canceled`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the endpoint\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "The webhook signing secret used to verify webhook requests.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the endpoint\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the endpoint.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowActionItem:WorkflowActionItem": {
            "properties": {
                "command": {
                    "type": "string",
                    "description": "Workflow command.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration.\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowActionItemTriggerParams:WorkflowActionItemTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing.\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "required": [
                "command",
                "description",
                "environmentIds",
                "groupIds",
                "incidentRoleIds",
                "incidentTypeIds",
                "name",
                "position",
                "repeatEveryDuration",
                "repeatOns",
                "serviceIds",
                "severityIds",
                "slug",
                "triggerParams",
                "wait",
                "workflowGroupId"
            ],
            "inputProperties": {
                "command": {
                    "type": "string",
                    "description": "Workflow command.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration.\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowActionItemTriggerParams:WorkflowActionItemTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing.\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowActionItem resources.\n",
                "properties": {
                    "command": {
                        "type": "string",
                        "description": "Workflow command.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the workflow\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentRoleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the workflow\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The order which the workflow should run with other workflows.\n"
                    },
                    "repeatEveryDuration": {
                        "type": "string",
                        "description": "Repeat workflow every duration.\n"
                    },
                    "repeatOns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                    },
                    "serviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "severityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the workflow\n"
                    },
                    "triggerParams": {
                        "$ref": "#/types/rootly:index/WorkflowActionItemTriggerParams:WorkflowActionItemTriggerParams"
                    },
                    "wait": {
                        "type": "string",
                        "description": "Wait this duration before executing.\n"
                    },
                    "workflowGroupId": {
                        "type": "string",
                        "description": "The group this workflow belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowAlert:WorkflowAlert": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst my_workflow = new rootly.WorkflowAlert(\"my-workflow\", {\n    description: \"This workflow will trigger when an alert is created\",\n    enabled: true,\n    triggerParams: {\n        triggers: [\"alert_created\"],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nmy_workflow = rootly.WorkflowAlert(\"my-workflow\",\n    description=\"This workflow will trigger when an alert is created\",\n    enabled=True,\n    trigger_params=rootly.WorkflowAlertTriggerParamsArgs(\n        triggers=[\"alert_created\"],\n    ))\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var my_workflow = new Rootly.WorkflowAlert(\"my-workflow\", new Rootly.WorkflowAlertArgs\n        {\n            Description = \"This workflow will trigger when an alert is created\",\n            Enabled = true,\n            TriggerParams = new Rootly.Inputs.WorkflowAlertTriggerParamsArgs\n            {\n                Triggers = \n                {\n                    \"alert_created\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.NewWorkflowAlert(ctx, \"my-workflow\", \u0026rootly.WorkflowAlertArgs{\n\t\t\tDescription: pulumi.String(\"This workflow will trigger when an alert is created\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tTriggerParams: \u0026WorkflowAlertTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"alert_created\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "command": {
                    "type": "string",
                    "description": "Workflow command.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration.\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowAlertTriggerParams:WorkflowAlertTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing.\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "required": [
                "command",
                "description",
                "environmentIds",
                "groupIds",
                "incidentRoleIds",
                "incidentTypeIds",
                "name",
                "position",
                "repeatEveryDuration",
                "repeatOns",
                "serviceIds",
                "severityIds",
                "slug",
                "triggerParams",
                "wait",
                "workflowGroupId"
            ],
            "inputProperties": {
                "command": {
                    "type": "string",
                    "description": "Workflow command.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration.\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowAlertTriggerParams:WorkflowAlertTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing.\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowAlert resources.\n",
                "properties": {
                    "command": {
                        "type": "string",
                        "description": "Workflow command.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the workflow\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentRoleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the workflow\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The order which the workflow should run with other workflows.\n"
                    },
                    "repeatEveryDuration": {
                        "type": "string",
                        "description": "Repeat workflow every duration.\n"
                    },
                    "repeatOns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                    },
                    "serviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "severityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the workflow\n"
                    },
                    "triggerParams": {
                        "$ref": "#/types/rootly:index/WorkflowAlertTriggerParams:WorkflowAlertTriggerParams"
                    },
                    "wait": {
                        "type": "string",
                        "description": "Wait this duration before executing.\n"
                    },
                    "workflowGroupId": {
                        "type": "string",
                        "description": "The group this workflow belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowCustomFieldSelection:WorkflowCustomFieldSelection": {
            "properties": {
                "customFieldId": {
                    "type": "integer",
                    "description": "The custom field for this selection\n"
                },
                "incidentCondition": {
                    "type": "string",
                    "description": "The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `NONE`, `SET`, `UNSET`.\n"
                },
                "selectedOptionIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "workflowId": {
                    "type": "string",
                    "description": "The workflow for this selection\n"
                }
            },
            "required": [
                "customFieldId",
                "selectedOptionIds",
                "values",
                "workflowId"
            ],
            "inputProperties": {
                "customFieldId": {
                    "type": "integer",
                    "description": "The custom field for this selection\n"
                },
                "incidentCondition": {
                    "type": "string",
                    "description": "The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `NONE`, `SET`, `UNSET`.\n"
                },
                "selectedOptionIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "workflowId": {
                    "type": "string",
                    "description": "The workflow for this selection\n"
                }
            },
            "requiredInputs": [
                "customFieldId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowCustomFieldSelection resources.\n",
                "properties": {
                    "customFieldId": {
                        "type": "integer",
                        "description": "The custom field for this selection\n"
                    },
                    "incidentCondition": {
                        "type": "string",
                        "description": "The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `NONE`, `SET`, `UNSET`.\n"
                    },
                    "selectedOptionIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The workflow for this selection\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowFormFieldCondition:WorkflowFormFieldCondition": {
            "properties": {
                "formFieldId": {
                    "type": "string",
                    "description": "The custom field for this condition\n"
                },
                "incidentCondition": {
                    "type": "string",
                    "description": "The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `NONE`, `SET`, `UNSET`.\n"
                },
                "selectedOptionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "selectedUserIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "workflowId": {
                    "type": "string",
                    "description": "The workflow for this condition\n"
                }
            },
            "required": [
                "formFieldId",
                "selectedOptionIds",
                "selectedUserIds",
                "values",
                "workflowId"
            ],
            "inputProperties": {
                "formFieldId": {
                    "type": "string",
                    "description": "The custom field for this condition\n"
                },
                "incidentCondition": {
                    "type": "string",
                    "description": "The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `NONE`, `SET`, `UNSET`.\n"
                },
                "selectedOptionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "selectedUserIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "workflowId": {
                    "type": "string",
                    "description": "The workflow for this condition\n"
                }
            },
            "requiredInputs": [
                "formFieldId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowFormFieldCondition resources.\n",
                "properties": {
                    "formFieldId": {
                        "type": "string",
                        "description": "The custom field for this condition\n"
                    },
                    "incidentCondition": {
                        "type": "string",
                        "description": "The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `NONE`, `SET`, `UNSET`.\n"
                    },
                    "selectedOptionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "selectedUserIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The workflow for this condition\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowGroup:WorkflowGroup": {
            "properties": {
                "expanded": {
                    "type": "boolean",
                    "description": "Whether the group is expanded or collapsed.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the workflow group.. Value must be one of `simple`, `incident`, `post_mortem`, `action_item`, `pulse`,\n`alert`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workflow group.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow group\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow group.\n"
                }
            },
            "required": [
                "expanded",
                "name",
                "position",
                "slug"
            ],
            "inputProperties": {
                "expanded": {
                    "type": "boolean",
                    "description": "Whether the group is expanded or collapsed.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the workflow group.. Value must be one of `simple`, `incident`, `post_mortem`, `action_item`, `pulse`,\n`alert`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workflow group.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow group\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow group.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowGroup resources.\n",
                "properties": {
                    "expanded": {
                        "type": "boolean",
                        "description": "Whether the group is expanded or collapsed.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "The kind of the workflow group.. Value must be one of `simple`, `incident`, `post_mortem`, `action_item`, `pulse`,\n`alert`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the workflow group.\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow group\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the workflow group.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowIncident:WorkflowIncident": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst critical = rootly.getSeverity({\n    slug: \"sev0\",\n});\nconst my_workflow = new rootly.WorkflowIncident(\"my-workflow\", {\n    description: \"This workflow will trigger when an incident is created and severity is critical\",\n    triggerParams: {\n        triggers: [\"incident_created\"],\n        incidentConditionKind: \"IS\",\n        incidentKinds: [\"normal\"],\n        incidentConditionStatus: \"IS\",\n        incidentStatuses: [\"started\"],\n        incidentConditionSeverity: \"IS\",\n    },\n    severityIds: [critical.then(critical =\u003e critical.id)],\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\ncritical = rootly.get_severity(slug=\"sev0\")\nmy_workflow = rootly.WorkflowIncident(\"my-workflow\",\n    description=\"This workflow will trigger when an incident is created and severity is critical\",\n    trigger_params=rootly.WorkflowIncidentTriggerParamsArgs(\n        triggers=[\"incident_created\"],\n        incident_condition_kind=\"IS\",\n        incident_kinds=[\"normal\"],\n        incident_condition_status=\"IS\",\n        incident_statuses=[\"started\"],\n        incident_condition_severity=\"IS\",\n    ),\n    severity_ids=[critical.id],\n    enabled=True)\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var critical = Output.Create(Rootly.GetSeverity.InvokeAsync(new Rootly.GetSeverityArgs\n        {\n            Slug = \"sev0\",\n        }));\n        var my_workflow = new Rootly.WorkflowIncident(\"my-workflow\", new Rootly.WorkflowIncidentArgs\n        {\n            Description = \"This workflow will trigger when an incident is created and severity is critical\",\n            TriggerParams = new Rootly.Inputs.WorkflowIncidentTriggerParamsArgs\n            {\n                Triggers = \n                {\n                    \"incident_created\",\n                },\n                IncidentConditionKind = \"IS\",\n                IncidentKinds = \n                {\n                    \"normal\",\n                },\n                IncidentConditionStatus = \"IS\",\n                IncidentStatuses = \n                {\n                    \"started\",\n                },\n                IncidentConditionSeverity = \"IS\",\n            },\n            SeverityIds = \n            {\n                critical.Apply(critical =\u003e critical.Id),\n            },\n            Enabled = true,\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcritical, err := rootly.LookupSeverity(ctx, \u0026GetSeverityArgs{\n\t\t\tSlug: pulumi.StringRef(\"sev0\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewWorkflowIncident(ctx, \"my-workflow\", \u0026rootly.WorkflowIncidentArgs{\n\t\t\tDescription: pulumi.String(\"This workflow will trigger when an incident is created and severity is critical\"),\n\t\t\tTriggerParams: \u0026WorkflowIncidentTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"incident_created\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionKind: pulumi.String(\"IS\"),\n\t\t\t\tIncidentKinds: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"normal\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionStatus: pulumi.String(\"IS\"),\n\t\t\t\tIncidentStatuses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"started\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionSeverity: pulumi.String(\"IS\"),\n\t\t\t},\n\t\t\tSeverityIds: pulumi.StringArray{\n\t\t\t\tpulumi.String(critical.Id),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "command": {
                    "type": "string",
                    "description": "Workflow command.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration.\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowIncidentTriggerParams:WorkflowIncidentTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing.\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "required": [
                "command",
                "description",
                "environmentIds",
                "groupIds",
                "incidentRoleIds",
                "incidentTypeIds",
                "name",
                "position",
                "repeatEveryDuration",
                "repeatOns",
                "serviceIds",
                "severityIds",
                "slug",
                "triggerParams",
                "wait",
                "workflowGroupId"
            ],
            "inputProperties": {
                "command": {
                    "type": "string",
                    "description": "Workflow command.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration.\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowIncidentTriggerParams:WorkflowIncidentTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing.\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowIncident resources.\n",
                "properties": {
                    "command": {
                        "type": "string",
                        "description": "Workflow command.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the workflow\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentRoleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the workflow\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The order which the workflow should run with other workflows.\n"
                    },
                    "repeatEveryDuration": {
                        "type": "string",
                        "description": "Repeat workflow every duration.\n"
                    },
                    "repeatOns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                    },
                    "serviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "severityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the workflow\n"
                    },
                    "triggerParams": {
                        "$ref": "#/types/rootly:index/WorkflowIncidentTriggerParams:WorkflowIncidentTriggerParams"
                    },
                    "wait": {
                        "type": "string",
                        "description": "Wait this duration before executing.\n"
                    },
                    "workflowGroupId": {
                        "type": "string",
                        "description": "The group this workflow belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowPostMortem:WorkflowPostMortem": {
            "properties": {
                "command": {
                    "type": "string",
                    "description": "Workflow command.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration.\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowPostMortemTriggerParams:WorkflowPostMortemTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing.\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "required": [
                "command",
                "description",
                "environmentIds",
                "groupIds",
                "incidentRoleIds",
                "incidentTypeIds",
                "name",
                "position",
                "repeatEveryDuration",
                "repeatOns",
                "serviceIds",
                "severityIds",
                "slug",
                "triggerParams",
                "wait",
                "workflowGroupId"
            ],
            "inputProperties": {
                "command": {
                    "type": "string",
                    "description": "Workflow command.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration.\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowPostMortemTriggerParams:WorkflowPostMortemTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing.\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowPostMortem resources.\n",
                "properties": {
                    "command": {
                        "type": "string",
                        "description": "Workflow command.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the workflow\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentRoleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the workflow\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The order which the workflow should run with other workflows.\n"
                    },
                    "repeatEveryDuration": {
                        "type": "string",
                        "description": "Repeat workflow every duration.\n"
                    },
                    "repeatOns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                    },
                    "serviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "severityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the workflow\n"
                    },
                    "triggerParams": {
                        "$ref": "#/types/rootly:index/WorkflowPostMortemTriggerParams:WorkflowPostMortemTriggerParams"
                    },
                    "wait": {
                        "type": "string",
                        "description": "Wait this duration before executing.\n"
                    },
                    "workflowGroupId": {
                        "type": "string",
                        "description": "The group this workflow belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowPulse:WorkflowPulse": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst my_workflow = new rootly.WorkflowPulse(\"my-workflow\", {\n    description: \"This workflow will trigger when a pulse is created\",\n    enabled: true,\n    triggerParams: {\n        triggers: [\"pulse_created\"],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nmy_workflow = rootly.WorkflowPulse(\"my-workflow\",\n    description=\"This workflow will trigger when a pulse is created\",\n    enabled=True,\n    trigger_params=rootly.WorkflowPulseTriggerParamsArgs(\n        triggers=[\"pulse_created\"],\n    ))\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var my_workflow = new Rootly.WorkflowPulse(\"my-workflow\", new Rootly.WorkflowPulseArgs\n        {\n            Description = \"This workflow will trigger when a pulse is created\",\n            Enabled = true,\n            TriggerParams = new Rootly.Inputs.WorkflowPulseTriggerParamsArgs\n            {\n                Triggers = \n                {\n                    \"pulse_created\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.NewWorkflowPulse(ctx, \"my-workflow\", \u0026rootly.WorkflowPulseArgs{\n\t\t\tDescription: pulumi.String(\"This workflow will trigger when a pulse is created\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tTriggerParams: \u0026WorkflowPulseTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"pulse_created\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "command": {
                    "type": "string",
                    "description": "Workflow command.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration.\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowPulseTriggerParams:WorkflowPulseTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing.\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "required": [
                "command",
                "description",
                "environmentIds",
                "groupIds",
                "incidentRoleIds",
                "incidentTypeIds",
                "name",
                "position",
                "repeatEveryDuration",
                "repeatOns",
                "serviceIds",
                "severityIds",
                "slug",
                "triggerParams",
                "wait",
                "workflowGroupId"
            ],
            "inputProperties": {
                "command": {
                    "type": "string",
                    "description": "Workflow command.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration.\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowPulseTriggerParams:WorkflowPulseTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing.\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowPulse resources.\n",
                "properties": {
                    "command": {
                        "type": "string",
                        "description": "Workflow command.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the workflow\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentRoleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the workflow\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The order which the workflow should run with other workflows.\n"
                    },
                    "repeatEveryDuration": {
                        "type": "string",
                        "description": "Repeat workflow every duration.\n"
                    },
                    "repeatOns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                    },
                    "serviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "severityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the workflow\n"
                    },
                    "triggerParams": {
                        "$ref": "#/types/rootly:index/WorkflowPulseTriggerParams:WorkflowPulseTriggerParams"
                    },
                    "wait": {
                        "type": "string",
                        "description": "Wait this duration before executing.\n"
                    },
                    "workflowGroupId": {
                        "type": "string",
                        "description": "The group this workflow belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowSimple:WorkflowSimple": {
            "properties": {
                "command": {
                    "type": "string",
                    "description": "Workflow command.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration.\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowSimpleTriggerParams:WorkflowSimpleTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing.\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "required": [
                "command",
                "description",
                "environmentIds",
                "groupIds",
                "incidentRoleIds",
                "incidentTypeIds",
                "name",
                "position",
                "repeatEveryDuration",
                "repeatOns",
                "serviceIds",
                "severityIds",
                "slug",
                "triggerParams",
                "wait",
                "workflowGroupId"
            ],
            "inputProperties": {
                "command": {
                    "type": "string",
                    "description": "Workflow command.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration.\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowSimpleTriggerParams:WorkflowSimpleTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing.\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowSimple resources.\n",
                "properties": {
                    "command": {
                        "type": "string",
                        "description": "Workflow command.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the workflow\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentRoleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the workflow\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The order which the workflow should run with other workflows.\n"
                    },
                    "repeatEveryDuration": {
                        "type": "string",
                        "description": "Repeat workflow every duration.\n"
                    },
                    "repeatOns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                    },
                    "serviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "severityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the workflow\n"
                    },
                    "triggerParams": {
                        "$ref": "#/types/rootly:index/WorkflowSimpleTriggerParams:WorkflowSimpleTriggerParams"
                    },
                    "wait": {
                        "type": "string",
                        "description": "Wait this duration before executing.\n"
                    },
                    "workflowGroupId": {
                        "type": "string",
                        "description": "The group this workflow belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskAddActionItem:WorkflowTaskAddActionItem": {
            "description": "Manages workflow add_action_item task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddActionItemTaskParams:WorkflowTaskAddActionItemTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddActionItemTaskParams:WorkflowTaskAddActionItemTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskAddActionItem resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAddActionItemTaskParams:WorkflowTaskAddActionItemTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskAddRole:WorkflowTaskAddRole": {
            "description": "Manages workflow add_role task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddRoleTaskParams:WorkflowTaskAddRoleTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddRoleTaskParams:WorkflowTaskAddRoleTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskAddRole resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAddRoleTaskParams:WorkflowTaskAddRoleTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskAddSlackBookmark:WorkflowTaskAddSlackBookmark": {
            "description": "Manages workflow add_slack_bookmark task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddSlackBookmarkTaskParams:WorkflowTaskAddSlackBookmarkTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddSlackBookmarkTaskParams:WorkflowTaskAddSlackBookmarkTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskAddSlackBookmark resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAddSlackBookmarkTaskParams:WorkflowTaskAddSlackBookmarkTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskAddTeam:WorkflowTaskAddTeam": {
            "description": "Manages workflow add_team task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddTeamTaskParams:WorkflowTaskAddTeamTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddTeamTaskParams:WorkflowTaskAddTeamTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskAddTeam resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAddTeamTaskParams:WorkflowTaskAddTeamTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskAddToTimeline:WorkflowTaskAddToTimeline": {
            "description": "Manages workflow add_to_timeline task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddToTimelineTaskParams:WorkflowTaskAddToTimelineTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddToTimelineTaskParams:WorkflowTaskAddToTimelineTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskAddToTimeline resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAddToTimelineTaskParams:WorkflowTaskAddToTimelineTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskArchiveSlackChannels:WorkflowTaskArchiveSlackChannels": {
            "description": "Manages workflow archive_slack_channels task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst autoArchiveIncident = new rootly.WorkflowIncident(\"autoArchiveIncident\", {\n    description: \"After an incident has been resolved, automatically archive the channel after 48 hours.\",\n    triggerParams: {\n        triggers: [\"status_updated\"],\n        wait: \"2 days\",\n        incidentStatuses: [\"resolved\"],\n        incidentConditionStatus: \"IS\",\n    },\n    enabled: true,\n});\nconst archiveSlackChannels = new rootly.WorkflowTaskArchiveSlackChannels(\"archiveSlackChannels\", {\n    workflowId: autoArchiveIncident.id,\n    skipOnFailure: false,\n    enabled: true,\n    taskParams: {\n        name: \"Archive Slack channels\",\n        channels: [{\n            id: \"{{ incident.slack_channel_id }}\",\n            name: \"{{ incident.slack_channel_id }}\",\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nauto_archive_incident = rootly.WorkflowIncident(\"autoArchiveIncident\",\n    description=\"After an incident has been resolved, automatically archive the channel after 48 hours.\",\n    trigger_params=rootly.WorkflowIncidentTriggerParamsArgs(\n        triggers=[\"status_updated\"],\n        wait=\"2 days\",\n        incident_statuses=[\"resolved\"],\n        incident_condition_status=\"IS\",\n    ),\n    enabled=True)\narchive_slack_channels = rootly.WorkflowTaskArchiveSlackChannels(\"archiveSlackChannels\",\n    workflow_id=auto_archive_incident.id,\n    skip_on_failure=False,\n    enabled=True,\n    task_params=rootly.WorkflowTaskArchiveSlackChannelsTaskParamsArgs(\n        name=\"Archive Slack channels\",\n        channels=[rootly.WorkflowTaskArchiveSlackChannelsTaskParamsChannelArgs(\n            id=\"{{ incident.slack_channel_id }}\",\n            name=\"{{ incident.slack_channel_id }}\",\n        )],\n    ))\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var autoArchiveIncident = new Rootly.WorkflowIncident(\"autoArchiveIncident\", new Rootly.WorkflowIncidentArgs\n        {\n            Description = \"After an incident has been resolved, automatically archive the channel after 48 hours.\",\n            TriggerParams = new Rootly.Inputs.WorkflowIncidentTriggerParamsArgs\n            {\n                Triggers = \n                {\n                    \"status_updated\",\n                },\n                Wait = \"2 days\",\n                IncidentStatuses = \n                {\n                    \"resolved\",\n                },\n                IncidentConditionStatus = \"IS\",\n            },\n            Enabled = true,\n        });\n        var archiveSlackChannels = new Rootly.WorkflowTaskArchiveSlackChannels(\"archiveSlackChannels\", new Rootly.WorkflowTaskArchiveSlackChannelsArgs\n        {\n            WorkflowId = autoArchiveIncident.Id,\n            SkipOnFailure = false,\n            Enabled = true,\n            TaskParams = new Rootly.Inputs.WorkflowTaskArchiveSlackChannelsTaskParamsArgs\n            {\n                Name = \"Archive Slack channels\",\n                Channels = \n                {\n                    new Rootly.Inputs.WorkflowTaskArchiveSlackChannelsTaskParamsChannelArgs\n                    {\n                        Id = \"{{ incident.slack_channel_id }}\",\n                        Name = \"{{ incident.slack_channel_id }}\",\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tautoArchiveIncident, err := rootly.NewWorkflowIncident(ctx, \"autoArchiveIncident\", \u0026rootly.WorkflowIncidentArgs{\n\t\t\tDescription: pulumi.String(\"After an incident has been resolved, automatically archive the channel after 48 hours.\"),\n\t\t\tTriggerParams: \u0026WorkflowIncidentTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"status_updated\"),\n\t\t\t\t},\n\t\t\t\tWait: \"2 days\",\n\t\t\t\tIncidentStatuses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resolved\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionStatus: pulumi.String(\"IS\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewWorkflowTaskArchiveSlackChannels(ctx, \"archiveSlackChannels\", \u0026rootly.WorkflowTaskArchiveSlackChannelsArgs{\n\t\t\tWorkflowId:    autoArchiveIncident.ID(),\n\t\t\tSkipOnFailure: pulumi.Bool(false),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tTaskParams: \u0026WorkflowTaskArchiveSlackChannelsTaskParamsArgs{\n\t\t\t\tName: \"Archive Slack channels\",\n\t\t\t\tChannels: WorkflowTaskArchiveSlackChannelsTaskParamsChannelArray{\n\t\t\t\t\t\u0026WorkflowTaskArchiveSlackChannelsTaskParamsChannelArgs{\n\t\t\t\t\t\tId:   pulumi.String(\"{{ incident.slack_channel_id }}\"),\n\t\t\t\t\t\tName: pulumi.String(\"{{ incident.slack_channel_id }}\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskArchiveSlackChannelsTaskParams:WorkflowTaskArchiveSlackChannelsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskArchiveSlackChannelsTaskParams:WorkflowTaskArchiveSlackChannelsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskArchiveSlackChannels resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskArchiveSlackChannelsTaskParams:WorkflowTaskArchiveSlackChannelsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskAttachDatadogDashboards:WorkflowTaskAttachDatadogDashboards": {
            "description": "Manages workflow attach_datadog_dashboards task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAttachDatadogDashboardsTaskParams:WorkflowTaskAttachDatadogDashboardsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAttachDatadogDashboardsTaskParams:WorkflowTaskAttachDatadogDashboardsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskAttachDatadogDashboards resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAttachDatadogDashboardsTaskParams:WorkflowTaskAttachDatadogDashboardsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskAutoAssignRoleOpsgenie:WorkflowTaskAutoAssignRoleOpsgenie": {
            "description": "Manages workflow auto_assign_role_opsgenie task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAutoAssignRoleOpsgenieTaskParams:WorkflowTaskAutoAssignRoleOpsgenieTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAutoAssignRoleOpsgenieTaskParams:WorkflowTaskAutoAssignRoleOpsgenieTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskAutoAssignRoleOpsgenie resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAutoAssignRoleOpsgenieTaskParams:WorkflowTaskAutoAssignRoleOpsgenieTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskAutoAssignRolePagerduty:WorkflowTaskAutoAssignRolePagerduty": {
            "description": "Manages workflow auto_assign_role_pagerduty task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAutoAssignRolePagerdutyTaskParams:WorkflowTaskAutoAssignRolePagerdutyTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAutoAssignRolePagerdutyTaskParams:WorkflowTaskAutoAssignRolePagerdutyTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskAutoAssignRolePagerduty resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAutoAssignRolePagerdutyTaskParams:WorkflowTaskAutoAssignRolePagerdutyTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskAutoAssignRoleVictorOps:WorkflowTaskAutoAssignRoleVictorOps": {
            "description": "Manages workflow auto_assign_role_victor_ops task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAutoAssignRoleVictorOpsTaskParams:WorkflowTaskAutoAssignRoleVictorOpsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAutoAssignRoleVictorOpsTaskParams:WorkflowTaskAutoAssignRoleVictorOpsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskAutoAssignRoleVictorOps resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAutoAssignRoleVictorOpsTaskParams:WorkflowTaskAutoAssignRoleVictorOpsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCallPeople:WorkflowTaskCallPeople": {
            "description": "Manages workflow call_people task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst callPeopleWorkflowIncident = new rootly.WorkflowIncident(\"callPeopleWorkflowIncident\", {\n    description: \"Automatically call a specific teammate.\",\n    triggerParams: {\n        triggers: [\"incident_created\"],\n        incidentStatuses: [\"started\"],\n        incidentConditionStatus: \"IS\",\n    },\n    enabled: true,\n});\nconst callPeopleWorkflowTaskCallPeople = new rootly.WorkflowTaskCallPeople(\"callPeopleWorkflowTaskCallPeople\", {\n    workflowId: callPeopleWorkflowIncident.id,\n    skipOnFailure: false,\n    enabled: true,\n    taskParams: {\n        name: \"Call people\",\n        content: \"We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\",\n    },\n});\n// TODO\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\ncall_people_workflow_incident = rootly.WorkflowIncident(\"callPeopleWorkflowIncident\",\n    description=\"Automatically call a specific teammate.\",\n    trigger_params=rootly.WorkflowIncidentTriggerParamsArgs(\n        triggers=[\"incident_created\"],\n        incident_statuses=[\"started\"],\n        incident_condition_status=\"IS\",\n    ),\n    enabled=True)\ncall_people_workflow_task_call_people = rootly.WorkflowTaskCallPeople(\"callPeopleWorkflowTaskCallPeople\",\n    workflow_id=call_people_workflow_incident.id,\n    skip_on_failure=False,\n    enabled=True,\n    task_params=rootly.WorkflowTaskCallPeopleTaskParamsArgs(\n        name=\"Call people\",\n        content=\"We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\",\n    ))\n# TODO\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var callPeopleWorkflowIncident = new Rootly.WorkflowIncident(\"callPeopleWorkflowIncident\", new Rootly.WorkflowIncidentArgs\n        {\n            Description = \"Automatically call a specific teammate.\",\n            TriggerParams = new Rootly.Inputs.WorkflowIncidentTriggerParamsArgs\n            {\n                Triggers = \n                {\n                    \"incident_created\",\n                },\n                IncidentStatuses = \n                {\n                    \"started\",\n                },\n                IncidentConditionStatus = \"IS\",\n            },\n            Enabled = true,\n        });\n        var callPeopleWorkflowTaskCallPeople = new Rootly.WorkflowTaskCallPeople(\"callPeopleWorkflowTaskCallPeople\", new Rootly.WorkflowTaskCallPeopleArgs\n        {\n            WorkflowId = callPeopleWorkflowIncident.Id,\n            SkipOnFailure = false,\n            Enabled = true,\n            TaskParams = new Rootly.Inputs.WorkflowTaskCallPeopleTaskParamsArgs\n            {\n                Name = \"Call people\",\n                Content = \"We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\",\n            },\n        });\n        // TODO\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcallPeopleWorkflowIncident, err := rootly.NewWorkflowIncident(ctx, \"callPeopleWorkflowIncident\", \u0026rootly.WorkflowIncidentArgs{\n\t\t\tDescription: pulumi.String(\"Automatically call a specific teammate.\"),\n\t\t\tTriggerParams: \u0026WorkflowIncidentTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"incident_created\"),\n\t\t\t\t},\n\t\t\t\tIncidentStatuses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"started\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionStatus: pulumi.String(\"IS\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewWorkflowTaskCallPeople(ctx, \"callPeopleWorkflowTaskCallPeople\", \u0026rootly.WorkflowTaskCallPeopleArgs{\n\t\t\tWorkflowId:    callPeopleWorkflowIncident.ID(),\n\t\t\tSkipOnFailure: pulumi.Bool(false),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tTaskParams: \u0026WorkflowTaskCallPeopleTaskParamsArgs{\n\t\t\t\tName:    pulumi.String(\"Call people\"),\n\t\t\t\tContent: pulumi.String(\"We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCallPeopleTaskParams:WorkflowTaskCallPeopleTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCallPeopleTaskParams:WorkflowTaskCallPeopleTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCallPeople resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCallPeopleTaskParams:WorkflowTaskCallPeopleTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateAirtableTableRecord:WorkflowTaskCreateAirtableTableRecord": {
            "description": "Manages workflow create_airtable_table_record task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateAirtableTableRecordTaskParams:WorkflowTaskCreateAirtableTableRecordTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateAirtableTableRecordTaskParams:WorkflowTaskCreateAirtableTableRecordTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateAirtableTableRecord resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateAirtableTableRecordTaskParams:WorkflowTaskCreateAirtableTableRecordTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateAsanaSubtask:WorkflowTaskCreateAsanaSubtask": {
            "description": "Manages workflow create_asana_subtask task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateAsanaSubtaskTaskParams:WorkflowTaskCreateAsanaSubtaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateAsanaSubtaskTaskParams:WorkflowTaskCreateAsanaSubtaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateAsanaSubtask resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateAsanaSubtaskTaskParams:WorkflowTaskCreateAsanaSubtaskTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateAsanaTask:WorkflowTaskCreateAsanaTask": {
            "description": "Manages workflow create_asana_task task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateAsanaTaskTaskParams:WorkflowTaskCreateAsanaTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateAsanaTaskTaskParams:WorkflowTaskCreateAsanaTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateAsanaTask resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateAsanaTaskTaskParams:WorkflowTaskCreateAsanaTaskTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateConfluencePage:WorkflowTaskCreateConfluencePage": {
            "description": "Manages workflow create_confluence_page task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateConfluencePageTaskParams:WorkflowTaskCreateConfluencePageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateConfluencePageTaskParams:WorkflowTaskCreateConfluencePageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateConfluencePage resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateConfluencePageTaskParams:WorkflowTaskCreateConfluencePageTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateDatadogNotebook:WorkflowTaskCreateDatadogNotebook": {
            "description": "Manages workflow create_datadog_notebook task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateDatadogNotebookTaskParams:WorkflowTaskCreateDatadogNotebookTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateDatadogNotebookTaskParams:WorkflowTaskCreateDatadogNotebookTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateDatadogNotebook resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateDatadogNotebookTaskParams:WorkflowTaskCreateDatadogNotebookTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateDropboxPaperPage:WorkflowTaskCreateDropboxPaperPage": {
            "description": "Manages workflow create_dropbox_paper_page task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateDropboxPaperPageTaskParams:WorkflowTaskCreateDropboxPaperPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateDropboxPaperPageTaskParams:WorkflowTaskCreateDropboxPaperPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateDropboxPaperPage resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateDropboxPaperPageTaskParams:WorkflowTaskCreateDropboxPaperPageTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateGithubIssue:WorkflowTaskCreateGithubIssue": {
            "description": "Manages workflow create_github_issue task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGithubIssueTaskParams:WorkflowTaskCreateGithubIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGithubIssueTaskParams:WorkflowTaskCreateGithubIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateGithubIssue resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateGithubIssueTaskParams:WorkflowTaskCreateGithubIssueTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateGoToMeeting:WorkflowTaskCreateGoToMeeting": {
            "description": "Manages workflow create_go_to_meeting task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoToMeetingTaskParams:WorkflowTaskCreateGoToMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoToMeetingTaskParams:WorkflowTaskCreateGoToMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateGoToMeeting resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateGoToMeetingTaskParams:WorkflowTaskCreateGoToMeetingTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateGoogleCalendarEvent:WorkflowTaskCreateGoogleCalendarEvent": {
            "description": "Manages workflow create_google_calendar_event task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst schedulePostmortemReviewMeeting = new rootly.WorkflowIncident(\"schedulePostmortemReviewMeeting\", {\n    description: \"Automatically schedule a Google Calendar meeting to review the postmortem.\",\n    triggerParams: {\n        triggers: [\"status_updated\"],\n        incidentStatuses: [\"resolved\"],\n        incidentConditionStatus: \"IS\",\n    },\n    enabled: true,\n});\nconst createGoogleCalendarEvent = new rootly.WorkflowTaskCreateGoogleCalendarEvent(\"createGoogleCalendarEvent\", {\n    workflowId: schedulePostmortemReviewMeeting.id,\n    skipOnFailure: false,\n    enabled: true,\n    taskParams: {\n        name: \"Schedule Postmortem Review Meeting\",\n        daysUntilMeeting: 7,\n        meetingDuration: \"60min\",\n        summary: \"#{{ incident.sequential_id }} {{ incident.title }} Postmortem Review\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nschedule_postmortem_review_meeting = rootly.WorkflowIncident(\"schedulePostmortemReviewMeeting\",\n    description=\"Automatically schedule a Google Calendar meeting to review the postmortem.\",\n    trigger_params=rootly.WorkflowIncidentTriggerParamsArgs(\n        triggers=[\"status_updated\"],\n        incident_statuses=[\"resolved\"],\n        incident_condition_status=\"IS\",\n    ),\n    enabled=True)\ncreate_google_calendar_event = rootly.WorkflowTaskCreateGoogleCalendarEvent(\"createGoogleCalendarEvent\",\n    workflow_id=schedule_postmortem_review_meeting.id,\n    skip_on_failure=False,\n    enabled=True,\n    task_params=rootly.WorkflowTaskCreateGoogleCalendarEventTaskParamsArgs(\n        name=\"Schedule Postmortem Review Meeting\",\n        days_until_meeting=7,\n        meeting_duration=\"60min\",\n        summary=\"#{{ incident.sequential_id }} {{ incident.title }} Postmortem Review\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var schedulePostmortemReviewMeeting = new Rootly.WorkflowIncident(\"schedulePostmortemReviewMeeting\", new Rootly.WorkflowIncidentArgs\n        {\n            Description = \"Automatically schedule a Google Calendar meeting to review the postmortem.\",\n            TriggerParams = new Rootly.Inputs.WorkflowIncidentTriggerParamsArgs\n            {\n                Triggers = \n                {\n                    \"status_updated\",\n                },\n                IncidentStatuses = \n                {\n                    \"resolved\",\n                },\n                IncidentConditionStatus = \"IS\",\n            },\n            Enabled = true,\n        });\n        var createGoogleCalendarEvent = new Rootly.WorkflowTaskCreateGoogleCalendarEvent(\"createGoogleCalendarEvent\", new Rootly.WorkflowTaskCreateGoogleCalendarEventArgs\n        {\n            WorkflowId = schedulePostmortemReviewMeeting.Id,\n            SkipOnFailure = false,\n            Enabled = true,\n            TaskParams = new Rootly.Inputs.WorkflowTaskCreateGoogleCalendarEventTaskParamsArgs\n            {\n                Name = \"Schedule Postmortem Review Meeting\",\n                DaysUntilMeeting = 7,\n                MeetingDuration = \"60min\",\n                Summary = \"#{{ incident.sequential_id }} {{ incident.title }} Postmortem Review\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tschedulePostmortemReviewMeeting, err := rootly.NewWorkflowIncident(ctx, \"schedulePostmortemReviewMeeting\", \u0026rootly.WorkflowIncidentArgs{\n\t\t\tDescription: pulumi.String(\"Automatically schedule a Google Calendar meeting to review the postmortem.\"),\n\t\t\tTriggerParams: \u0026WorkflowIncidentTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"status_updated\"),\n\t\t\t\t},\n\t\t\t\tIncidentStatuses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resolved\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionStatus: pulumi.String(\"IS\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewWorkflowTaskCreateGoogleCalendarEvent(ctx, \"createGoogleCalendarEvent\", \u0026rootly.WorkflowTaskCreateGoogleCalendarEventArgs{\n\t\t\tWorkflowId:    schedulePostmortemReviewMeeting.ID(),\n\t\t\tSkipOnFailure: pulumi.Bool(false),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tTaskParams: \u0026WorkflowTaskCreateGoogleCalendarEventTaskParamsArgs{\n\t\t\t\tName:             \"Schedule Postmortem Review Meeting\",\n\t\t\t\tDaysUntilMeeting: pulumi.Int(7),\n\t\t\t\tMeetingDuration:  pulumi.String(\"60min\"),\n\t\t\t\tSummary:          pulumi.String(\"#{{ incident.sequential_id }} {{ incident.title }} Postmortem Review\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleCalendarEventTaskParams:WorkflowTaskCreateGoogleCalendarEventTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleCalendarEventTaskParams:WorkflowTaskCreateGoogleCalendarEventTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateGoogleCalendarEvent resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleCalendarEventTaskParams:WorkflowTaskCreateGoogleCalendarEventTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateGoogleDocsPage:WorkflowTaskCreateGoogleDocsPage": {
            "description": "Manages workflow create_google_docs_page task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleDocsPageTaskParams:WorkflowTaskCreateGoogleDocsPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleDocsPageTaskParams:WorkflowTaskCreateGoogleDocsPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateGoogleDocsPage resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleDocsPageTaskParams:WorkflowTaskCreateGoogleDocsPageTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateGoogleDocsPermissions:WorkflowTaskCreateGoogleDocsPermissions": {
            "description": "Manages workflow create_google_docs_permissions task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleDocsPermissionsTaskParams:WorkflowTaskCreateGoogleDocsPermissionsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleDocsPermissionsTaskParams:WorkflowTaskCreateGoogleDocsPermissionsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateGoogleDocsPermissions resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleDocsPermissionsTaskParams:WorkflowTaskCreateGoogleDocsPermissionsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateGoogleMeeting:WorkflowTaskCreateGoogleMeeting": {
            "description": "Manages workflow create_google_meeting task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleMeetingTaskParams:WorkflowTaskCreateGoogleMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleMeetingTaskParams:WorkflowTaskCreateGoogleMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateGoogleMeeting resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleMeetingTaskParams:WorkflowTaskCreateGoogleMeetingTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateIncident:WorkflowTaskCreateIncident": {
            "description": "Manages workflow create_incident task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateIncidentTaskParams:WorkflowTaskCreateIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateIncidentTaskParams:WorkflowTaskCreateIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateIncident resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateIncidentTaskParams:WorkflowTaskCreateIncidentTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateJiraIssue:WorkflowTaskCreateJiraIssue": {
            "description": "Manages workflow create_jira_issue task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst jiraWorkflowIncident = new rootly.WorkflowIncident(\"jiraWorkflowIncident\", {\n    description: \"Open Jira ticket whenever incident starts\",\n    triggerParams: {\n        triggers: [\"incident_created\"],\n        incidentConditionKind: \"IS\",\n        incidentKinds: [\"normal\"],\n        incidentConditionStatus: \"IS\",\n        incidentStatuses: [\"started\"],\n    },\n    enabled: true,\n});\nconst jiraWorkflowTaskCreateJiraIssue = new rootly.WorkflowTaskCreateJiraIssue(\"jiraWorkflowTaskCreateJiraIssue\", {\n    workflowId: jiraWorkflowIncident.id,\n    skipOnFailure: false,\n    enabled: true,\n    taskParams: {\n        title: \"{{ incident.title }}\",\n        description: \"{{ incident.summary }}\",\n        projectKey: \"ROOT\",\n        issueType: {\n            id: \"10001\",\n            name: \"Task\",\n        },\n        status: {\n            id: \"10000\",\n            name: \"To Do\",\n        },\n        labels: \"{{ incident.environment_slugs | concat: incident.service_slugs | concat: incident.functionality_slugs | concat: incident.group_slugs | join: \\\",\\\" }}\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\njira_workflow_incident = rootly.WorkflowIncident(\"jiraWorkflowIncident\",\n    description=\"Open Jira ticket whenever incident starts\",\n    trigger_params=rootly.WorkflowIncidentTriggerParamsArgs(\n        triggers=[\"incident_created\"],\n        incident_condition_kind=\"IS\",\n        incident_kinds=[\"normal\"],\n        incident_condition_status=\"IS\",\n        incident_statuses=[\"started\"],\n    ),\n    enabled=True)\njira_workflow_task_create_jira_issue = rootly.WorkflowTaskCreateJiraIssue(\"jiraWorkflowTaskCreateJiraIssue\",\n    workflow_id=jira_workflow_incident.id,\n    skip_on_failure=False,\n    enabled=True,\n    task_params=rootly.WorkflowTaskCreateJiraIssueTaskParamsArgs(\n        title=\"{{ incident.title }}\",\n        description=\"{{ incident.summary }}\",\n        project_key=\"ROOT\",\n        issue_type={\n            \"id\": \"10001\",\n            \"name\": \"Task\",\n        },\n        status={\n            \"id\": \"10000\",\n            \"name\": \"To Do\",\n        },\n        labels=\"{{ incident.environment_slugs | concat: incident.service_slugs | concat: incident.functionality_slugs | concat: incident.group_slugs | join: \\\",\\\" }}\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var jiraWorkflowIncident = new Rootly.WorkflowIncident(\"jiraWorkflowIncident\", new Rootly.WorkflowIncidentArgs\n        {\n            Description = \"Open Jira ticket whenever incident starts\",\n            TriggerParams = new Rootly.Inputs.WorkflowIncidentTriggerParamsArgs\n            {\n                Triggers = \n                {\n                    \"incident_created\",\n                },\n                IncidentConditionKind = \"IS\",\n                IncidentKinds = \n                {\n                    \"normal\",\n                },\n                IncidentConditionStatus = \"IS\",\n                IncidentStatuses = \n                {\n                    \"started\",\n                },\n            },\n            Enabled = true,\n        });\n        var jiraWorkflowTaskCreateJiraIssue = new Rootly.WorkflowTaskCreateJiraIssue(\"jiraWorkflowTaskCreateJiraIssue\", new Rootly.WorkflowTaskCreateJiraIssueArgs\n        {\n            WorkflowId = jiraWorkflowIncident.Id,\n            SkipOnFailure = false,\n            Enabled = true,\n            TaskParams = new Rootly.Inputs.WorkflowTaskCreateJiraIssueTaskParamsArgs\n            {\n                Title = \"{{ incident.title }}\",\n                Description = \"{{ incident.summary }}\",\n                ProjectKey = \"ROOT\",\n                IssueType = \n                {\n                    { \"id\", \"10001\" },\n                    { \"name\", \"Task\" },\n                },\n                Status = \n                {\n                    { \"id\", \"10000\" },\n                    { \"name\", \"To Do\" },\n                },\n                Labels = \"{{ incident.environment_slugs | concat: incident.service_slugs | concat: incident.functionality_slugs | concat: incident.group_slugs | join: \\\",\\\" }}\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tjiraWorkflowIncident, err := rootly.NewWorkflowIncident(ctx, \"jiraWorkflowIncident\", \u0026rootly.WorkflowIncidentArgs{\n\t\t\tDescription: pulumi.String(\"Open Jira ticket whenever incident starts\"),\n\t\t\tTriggerParams: \u0026WorkflowIncidentTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"incident_created\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionKind: pulumi.String(\"IS\"),\n\t\t\t\tIncidentKinds: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"normal\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionStatus: pulumi.String(\"IS\"),\n\t\t\t\tIncidentStatuses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"started\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewWorkflowTaskCreateJiraIssue(ctx, \"jiraWorkflowTaskCreateJiraIssue\", \u0026rootly.WorkflowTaskCreateJiraIssueArgs{\n\t\t\tWorkflowId:    jiraWorkflowIncident.ID(),\n\t\t\tSkipOnFailure: pulumi.Bool(false),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tTaskParams: \u0026WorkflowTaskCreateJiraIssueTaskParamsArgs{\n\t\t\t\tTitle:       pulumi.String(\"{{ incident.title }}\"),\n\t\t\t\tDescription: pulumi.String(\"{{ incident.summary }}\"),\n\t\t\t\tProjectKey:  pulumi.String(\"ROOT\"),\n\t\t\t\tIssueType: pulumi.AnyMap{\n\t\t\t\t\t\"id\":   pulumi.Any(\"10001\"),\n\t\t\t\t\t\"name\": pulumi.Any(\"Task\"),\n\t\t\t\t},\n\t\t\t\tStatus: pulumi.AnyMap{\n\t\t\t\t\t\"id\":   pulumi.Any(\"10000\"),\n\t\t\t\t\t\"name\": pulumi.Any(\"To Do\"),\n\t\t\t\t},\n\t\t\t\tLabels: pulumi.String(\"{{ incident.environment_slugs | concat: incident.service_slugs | concat: incident.functionality_slugs | concat: incident.group_slugs | join: \\\",\\\" }}\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateJiraIssueTaskParams:WorkflowTaskCreateJiraIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateJiraIssueTaskParams:WorkflowTaskCreateJiraIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateJiraIssue resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateJiraIssueTaskParams:WorkflowTaskCreateJiraIssueTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateJiraSubtask:WorkflowTaskCreateJiraSubtask": {
            "description": "Manages workflow create_jira_subtask task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateJiraSubtaskTaskParams:WorkflowTaskCreateJiraSubtaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateJiraSubtaskTaskParams:WorkflowTaskCreateJiraSubtaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateJiraSubtask resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateJiraSubtaskTaskParams:WorkflowTaskCreateJiraSubtaskTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateLinearIssue:WorkflowTaskCreateLinearIssue": {
            "description": "Manages workflow create_linear_issue task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearIssueTaskParams:WorkflowTaskCreateLinearIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearIssueTaskParams:WorkflowTaskCreateLinearIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateLinearIssue resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearIssueTaskParams:WorkflowTaskCreateLinearIssueTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateLinearIssueComment:WorkflowTaskCreateLinearIssueComment": {
            "description": "Manages workflow create_linear_issue_comment task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearIssueCommentTaskParams:WorkflowTaskCreateLinearIssueCommentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearIssueCommentTaskParams:WorkflowTaskCreateLinearIssueCommentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateLinearIssueComment resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearIssueCommentTaskParams:WorkflowTaskCreateLinearIssueCommentTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateLinearSubtaskIssue:WorkflowTaskCreateLinearSubtaskIssue": {
            "description": "Manages workflow create_linear_subtask_issue task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearSubtaskIssueTaskParams:WorkflowTaskCreateLinearSubtaskIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearSubtaskIssueTaskParams:WorkflowTaskCreateLinearSubtaskIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateLinearSubtaskIssue resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearSubtaskIssueTaskParams:WorkflowTaskCreateLinearSubtaskIssueTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateMicrosoftTeamsMeeting:WorkflowTaskCreateMicrosoftTeamsMeeting": {
            "description": "Manages workflow create_microsoft_teams_meeting task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateMicrosoftTeamsMeetingTaskParams:WorkflowTaskCreateMicrosoftTeamsMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateMicrosoftTeamsMeetingTaskParams:WorkflowTaskCreateMicrosoftTeamsMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateMicrosoftTeamsMeeting resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateMicrosoftTeamsMeetingTaskParams:WorkflowTaskCreateMicrosoftTeamsMeetingTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateNotionPage:WorkflowTaskCreateNotionPage": {
            "description": "Manages workflow create_notion_page task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateNotionPageTaskParams:WorkflowTaskCreateNotionPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateNotionPageTaskParams:WorkflowTaskCreateNotionPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateNotionPage resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateNotionPageTaskParams:WorkflowTaskCreateNotionPageTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateOpsgenieAlert:WorkflowTaskCreateOpsgenieAlert": {
            "description": "Manages workflow create_opsgenie_alert task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParams:WorkflowTaskCreateOpsgenieAlertTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParams:WorkflowTaskCreateOpsgenieAlertTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateOpsgenieAlert resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParams:WorkflowTaskCreateOpsgenieAlertTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreatePagertreeAlert:WorkflowTaskCreatePagertreeAlert": {
            "description": "Manages workflow create_pagertree_alert task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreatePagertreeAlertTaskParams:WorkflowTaskCreatePagertreeAlertTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreatePagertreeAlertTaskParams:WorkflowTaskCreatePagertreeAlertTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreatePagertreeAlert resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreatePagertreeAlertTaskParams:WorkflowTaskCreatePagertreeAlertTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateQuipPage:WorkflowTaskCreateQuipPage": {
            "description": "Manages workflow create_quip_page task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateQuipPageTaskParams:WorkflowTaskCreateQuipPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateQuipPageTaskParams:WorkflowTaskCreateQuipPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateQuipPage resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateQuipPageTaskParams:WorkflowTaskCreateQuipPageTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateServiceNowIncident:WorkflowTaskCreateServiceNowIncident": {
            "description": "Manages workflow create_service_now_incident task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateServiceNowIncidentTaskParams:WorkflowTaskCreateServiceNowIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateServiceNowIncidentTaskParams:WorkflowTaskCreateServiceNowIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateServiceNowIncident resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateServiceNowIncidentTaskParams:WorkflowTaskCreateServiceNowIncidentTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateShortcutStory:WorkflowTaskCreateShortcutStory": {
            "description": "Manages workflow create_shortcut_story task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateShortcutStoryTaskParams:WorkflowTaskCreateShortcutStoryTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateShortcutStoryTaskParams:WorkflowTaskCreateShortcutStoryTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateShortcutStory resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateShortcutStoryTaskParams:WorkflowTaskCreateShortcutStoryTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateShortcutTask:WorkflowTaskCreateShortcutTask": {
            "description": "Manages workflow create_shortcut_task task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateShortcutTaskTaskParams:WorkflowTaskCreateShortcutTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateShortcutTaskTaskParams:WorkflowTaskCreateShortcutTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateShortcutTask resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateShortcutTaskTaskParams:WorkflowTaskCreateShortcutTaskTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateSlackChannel:WorkflowTaskCreateSlackChannel": {
            "description": "Manages workflow create_slack_channel task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateSlackChannelTaskParams:WorkflowTaskCreateSlackChannelTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateSlackChannelTaskParams:WorkflowTaskCreateSlackChannelTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateSlackChannel resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateSlackChannelTaskParams:WorkflowTaskCreateSlackChannelTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateTrelloCard:WorkflowTaskCreateTrelloCard": {
            "description": "Manages workflow create_trello_card task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateTrelloCardTaskParams:WorkflowTaskCreateTrelloCardTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateTrelloCardTaskParams:WorkflowTaskCreateTrelloCardTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateTrelloCard resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateTrelloCardTaskParams:WorkflowTaskCreateTrelloCardTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateWebexMeeting:WorkflowTaskCreateWebexMeeting": {
            "description": "Manages workflow create_webex_meeting task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateWebexMeetingTaskParams:WorkflowTaskCreateWebexMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateWebexMeetingTaskParams:WorkflowTaskCreateWebexMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateWebexMeeting resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateWebexMeetingTaskParams:WorkflowTaskCreateWebexMeetingTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateZendeskTicket:WorkflowTaskCreateZendeskTicket": {
            "description": "Manages workflow create_zendesk_ticket task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateZendeskTicketTaskParams:WorkflowTaskCreateZendeskTicketTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateZendeskTicketTaskParams:WorkflowTaskCreateZendeskTicketTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateZendeskTicket resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateZendeskTicketTaskParams:WorkflowTaskCreateZendeskTicketTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateZoomMeeting:WorkflowTaskCreateZoomMeeting": {
            "description": "Manages workflow create_zoom_meeting task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateZoomMeetingTaskParams:WorkflowTaskCreateZoomMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateZoomMeetingTaskParams:WorkflowTaskCreateZoomMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateZoomMeeting resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateZoomMeetingTaskParams:WorkflowTaskCreateZoomMeetingTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskGetAlerts:WorkflowTaskGetAlerts": {
            "description": "Manages workflow get_alerts task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskGetAlertsTaskParams:WorkflowTaskGetAlertsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskGetAlertsTaskParams:WorkflowTaskGetAlertsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskGetAlerts resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskGetAlertsTaskParams:WorkflowTaskGetAlertsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskGetGithubCommits:WorkflowTaskGetGithubCommits": {
            "description": "Manages workflow get_github_commits task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskGetGithubCommitsTaskParams:WorkflowTaskGetGithubCommitsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskGetGithubCommitsTaskParams:WorkflowTaskGetGithubCommitsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskGetGithubCommits resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskGetGithubCommitsTaskParams:WorkflowTaskGetGithubCommitsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskGetGitlabCommits:WorkflowTaskGetGitlabCommits": {
            "description": "Manages workflow get_gitlab_commits task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskGetGitlabCommitsTaskParams:WorkflowTaskGetGitlabCommitsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskGetGitlabCommitsTaskParams:WorkflowTaskGetGitlabCommitsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskGetGitlabCommits resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskGetGitlabCommitsTaskParams:WorkflowTaskGetGitlabCommitsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskGetPulses:WorkflowTaskGetPulses": {
            "description": "Manages workflow get_pulses task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskGetPulsesTaskParams:WorkflowTaskGetPulsesTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskGetPulsesTaskParams:WorkflowTaskGetPulsesTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskGetPulses resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskGetPulsesTaskParams:WorkflowTaskGetPulsesTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskHTTPClient:WorkflowTaskHTTPClient": {
            "description": "Manages workflow http_client task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskHTTPClientTaskParams:WorkflowTaskHTTPClientTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskHTTPClientTaskParams:WorkflowTaskHTTPClientTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskHTTPClient resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskHTTPClientTaskParams:WorkflowTaskHTTPClientTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskInviteToSlackChannel:WorkflowTaskInviteToSlackChannel": {
            "description": "Manages workflow invite_to_slack_channel task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst inviteToIncidentChannel = new rootly.WorkflowIncident(\"inviteToIncidentChannel\", {\n    description: \"Invite Slack User Groups e.g. @oncall-infra to the incident channel.\",\n    triggerParams: {\n        triggers: [\"incident_created\"],\n        incidentStatuses: [\"started\"],\n        incidentConditionStatus: \"IS\",\n    },\n    enabled: true,\n});\nconst inviteToSlackChannel = new rootly.WorkflowTaskInviteToSlackChannel(\"inviteToSlackChannel\", {\n    workflowId: inviteToIncidentChannel.id,\n    skipOnFailure: false,\n    enabled: true,\n    taskParams: {\n        name: \"Invite to Slack channel\",\n        channel: {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\ninvite_to_incident_channel = rootly.WorkflowIncident(\"inviteToIncidentChannel\",\n    description=\"Invite Slack User Groups e.g. @oncall-infra to the incident channel.\",\n    trigger_params=rootly.WorkflowIncidentTriggerParamsArgs(\n        triggers=[\"incident_created\"],\n        incident_statuses=[\"started\"],\n        incident_condition_status=\"IS\",\n    ),\n    enabled=True)\ninvite_to_slack_channel = rootly.WorkflowTaskInviteToSlackChannel(\"inviteToSlackChannel\",\n    workflow_id=invite_to_incident_channel.id,\n    skip_on_failure=False,\n    enabled=True,\n    task_params=rootly.WorkflowTaskInviteToSlackChannelTaskParamsArgs(\n        name=\"Invite to Slack channel\",\n        channel={\n            \"id\": \"C06A4RZR9\",\n            \"name\": \"Channel 1\",\n        },\n    ))\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var inviteToIncidentChannel = new Rootly.WorkflowIncident(\"inviteToIncidentChannel\", new Rootly.WorkflowIncidentArgs\n        {\n            Description = \"Invite Slack User Groups e.g. @oncall-infra to the incident channel.\",\n            TriggerParams = new Rootly.Inputs.WorkflowIncidentTriggerParamsArgs\n            {\n                Triggers = \n                {\n                    \"incident_created\",\n                },\n                IncidentStatuses = \n                {\n                    \"started\",\n                },\n                IncidentConditionStatus = \"IS\",\n            },\n            Enabled = true,\n        });\n        var inviteToSlackChannel = new Rootly.WorkflowTaskInviteToSlackChannel(\"inviteToSlackChannel\", new Rootly.WorkflowTaskInviteToSlackChannelArgs\n        {\n            WorkflowId = inviteToIncidentChannel.Id,\n            SkipOnFailure = false,\n            Enabled = true,\n            TaskParams = new Rootly.Inputs.WorkflowTaskInviteToSlackChannelTaskParamsArgs\n            {\n                Name = \"Invite to Slack channel\",\n                Channel = \n                {\n                    { \"id\", \"C06A4RZR9\" },\n                    { \"name\", \"Channel 1\" },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tinviteToIncidentChannel, err := rootly.NewWorkflowIncident(ctx, \"inviteToIncidentChannel\", \u0026rootly.WorkflowIncidentArgs{\n\t\t\tDescription: pulumi.String(\"Invite Slack User Groups e.g. @oncall-infra to the incident channel.\"),\n\t\t\tTriggerParams: \u0026WorkflowIncidentTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"incident_created\"),\n\t\t\t\t},\n\t\t\t\tIncidentStatuses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"started\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionStatus: pulumi.String(\"IS\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewWorkflowTaskInviteToSlackChannel(ctx, \"inviteToSlackChannel\", \u0026rootly.WorkflowTaskInviteToSlackChannelArgs{\n\t\t\tWorkflowId:    inviteToIncidentChannel.ID(),\n\t\t\tSkipOnFailure: pulumi.Bool(false),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tTaskParams: \u0026WorkflowTaskInviteToSlackChannelTaskParamsArgs{\n\t\t\t\tName: \"Invite to Slack channel\",\n\t\t\t\tChannel: pulumi.AnyMap{\n\t\t\t\t\t\"id\":   pulumi.Any(\"C06A4RZR9\"),\n\t\t\t\t\t\"name\": pulumi.Any(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelTaskParams:WorkflowTaskInviteToSlackChannelTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelTaskParams:WorkflowTaskInviteToSlackChannelTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskInviteToSlackChannel resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelTaskParams:WorkflowTaskInviteToSlackChannelTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskInviteToSlackChannelOpsgenie:WorkflowTaskInviteToSlackChannelOpsgenie": {
            "description": "Manages workflow invite_to_slack_channel_opsgenie task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelOpsgenieTaskParams:WorkflowTaskInviteToSlackChannelOpsgenieTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelOpsgenieTaskParams:WorkflowTaskInviteToSlackChannelOpsgenieTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskInviteToSlackChannelOpsgenie resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelOpsgenieTaskParams:WorkflowTaskInviteToSlackChannelOpsgenieTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskInviteToSlackChannelPagerduty:WorkflowTaskInviteToSlackChannelPagerduty": {
            "description": "Manages workflow invite_to_slack_channel_pagerduty task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelPagerdutyTaskParams:WorkflowTaskInviteToSlackChannelPagerdutyTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelPagerdutyTaskParams:WorkflowTaskInviteToSlackChannelPagerdutyTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskInviteToSlackChannelPagerduty resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelPagerdutyTaskParams:WorkflowTaskInviteToSlackChannelPagerdutyTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskInviteToSlackChannelVictorOps:WorkflowTaskInviteToSlackChannelVictorOps": {
            "description": "Manages workflow invite_to_slack_channel_victor_ops task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelVictorOpsTaskParams:WorkflowTaskInviteToSlackChannelVictorOpsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelVictorOpsTaskParams:WorkflowTaskInviteToSlackChannelVictorOpsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskInviteToSlackChannelVictorOps resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelVictorOpsTaskParams:WorkflowTaskInviteToSlackChannelVictorOpsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskPageOpsgenieOnCallResponders:WorkflowTaskPageOpsgenieOnCallResponders": {
            "description": "Manages workflow page_opsgenie_on_call_responders task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPageOpsgenieOnCallRespondersTaskParams:WorkflowTaskPageOpsgenieOnCallRespondersTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPageOpsgenieOnCallRespondersTaskParams:WorkflowTaskPageOpsgenieOnCallRespondersTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskPageOpsgenieOnCallResponders resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPageOpsgenieOnCallRespondersTaskParams:WorkflowTaskPageOpsgenieOnCallRespondersTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskPagePagerdutyOnCallResponders:WorkflowTaskPagePagerdutyOnCallResponders": {
            "description": "Manages workflow page_pagerduty_on_call_responders task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst pagePagerdutyResponders = new rootly.WorkflowIncident(\"pagePagerdutyResponders\", {\n    description: \"Automatically page responders to join the incident depending on what's been impacted (see conditions).\",\n    triggerParams: {\n        triggers: [\"incident_created\"],\n        incidentStatuses: [\"started\"],\n        incidentConditionStatus: \"IS\",\n    },\n    enabled: true,\n});\nconst pagePagerdutyOnCallResponders = new rootly.WorkflowTaskPagePagerdutyOnCallResponders(\"pagePagerdutyOnCallResponders\", {\n    workflowId: pagePagerdutyResponders.id,\n    skipOnFailure: false,\n    enabled: true,\n    taskParams: {\n        name: \"Page PagerDuty on-call responders\",\n        service: {\n            id: \"PWIXJZS\",\n            name: \"Service A\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\npage_pagerduty_responders = rootly.WorkflowIncident(\"pagePagerdutyResponders\",\n    description=\"Automatically page responders to join the incident depending on what's been impacted (see conditions).\",\n    trigger_params=rootly.WorkflowIncidentTriggerParamsArgs(\n        triggers=[\"incident_created\"],\n        incident_statuses=[\"started\"],\n        incident_condition_status=\"IS\",\n    ),\n    enabled=True)\npage_pagerduty_on_call_responders = rootly.WorkflowTaskPagePagerdutyOnCallResponders(\"pagePagerdutyOnCallResponders\",\n    workflow_id=page_pagerduty_responders.id,\n    skip_on_failure=False,\n    enabled=True,\n    task_params=rootly.WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsArgs(\n        name=\"Page PagerDuty on-call responders\",\n        service={\n            \"id\": \"PWIXJZS\",\n            \"name\": \"Service A\",\n        },\n    ))\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var pagePagerdutyResponders = new Rootly.WorkflowIncident(\"pagePagerdutyResponders\", new Rootly.WorkflowIncidentArgs\n        {\n            Description = \"Automatically page responders to join the incident depending on what's been impacted (see conditions).\",\n            TriggerParams = new Rootly.Inputs.WorkflowIncidentTriggerParamsArgs\n            {\n                Triggers = \n                {\n                    \"incident_created\",\n                },\n                IncidentStatuses = \n                {\n                    \"started\",\n                },\n                IncidentConditionStatus = \"IS\",\n            },\n            Enabled = true,\n        });\n        var pagePagerdutyOnCallResponders = new Rootly.WorkflowTaskPagePagerdutyOnCallResponders(\"pagePagerdutyOnCallResponders\", new Rootly.WorkflowTaskPagePagerdutyOnCallRespondersArgs\n        {\n            WorkflowId = pagePagerdutyResponders.Id,\n            SkipOnFailure = false,\n            Enabled = true,\n            TaskParams = new Rootly.Inputs.WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsArgs\n            {\n                Name = \"Page PagerDuty on-call responders\",\n                Service = \n                {\n                    { \"id\", \"PWIXJZS\" },\n                    { \"name\", \"Service A\" },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tpagePagerdutyResponders, err := rootly.NewWorkflowIncident(ctx, \"pagePagerdutyResponders\", \u0026rootly.WorkflowIncidentArgs{\n\t\t\tDescription: pulumi.String(\"Automatically page responders to join the incident depending on what's been impacted (see conditions).\"),\n\t\t\tTriggerParams: \u0026WorkflowIncidentTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"incident_created\"),\n\t\t\t\t},\n\t\t\t\tIncidentStatuses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"started\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionStatus: pulumi.String(\"IS\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewWorkflowTaskPagePagerdutyOnCallResponders(ctx, \"pagePagerdutyOnCallResponders\", \u0026rootly.WorkflowTaskPagePagerdutyOnCallRespondersArgs{\n\t\t\tWorkflowId:    pagePagerdutyResponders.ID(),\n\t\t\tSkipOnFailure: pulumi.Bool(false),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tTaskParams: \u0026WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsArgs{\n\t\t\t\tName: \"Page PagerDuty on-call responders\",\n\t\t\t\tService: pulumi.AnyMap{\n\t\t\t\t\t\"id\":   pulumi.Any(\"PWIXJZS\"),\n\t\t\t\t\t\"name\": pulumi.Any(\"Service A\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPagePagerdutyOnCallRespondersTaskParams:WorkflowTaskPagePagerdutyOnCallRespondersTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPagePagerdutyOnCallRespondersTaskParams:WorkflowTaskPagePagerdutyOnCallRespondersTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskPagePagerdutyOnCallResponders resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPagePagerdutyOnCallRespondersTaskParams:WorkflowTaskPagePagerdutyOnCallRespondersTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskPageVictorOpsOnCallResponders:WorkflowTaskPageVictorOpsOnCallResponders": {
            "description": "Manages workflow page_victor_ops_on_call_responders task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPageVictorOpsOnCallRespondersTaskParams:WorkflowTaskPageVictorOpsOnCallRespondersTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPageVictorOpsOnCallRespondersTaskParams:WorkflowTaskPageVictorOpsOnCallRespondersTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskPageVictorOpsOnCallResponders resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPageVictorOpsOnCallRespondersTaskParams:WorkflowTaskPageVictorOpsOnCallRespondersTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskPrint:WorkflowTaskPrint": {
            "description": "Manages workflow print task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPrintTaskParams:WorkflowTaskPrintTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPrintTaskParams:WorkflowTaskPrintTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskPrint resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPrintTaskParams:WorkflowTaskPrintTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskPublishIncident:WorkflowTaskPublishIncident": {
            "description": "Manages workflow publish_incident task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPublishIncidentTaskParams:WorkflowTaskPublishIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPublishIncidentTaskParams:WorkflowTaskPublishIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskPublishIncident resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPublishIncidentTaskParams:WorkflowTaskPublishIncidentTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskRedisClient:WorkflowTaskRedisClient": {
            "description": "Manages workflow redis_client task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskRedisClientTaskParams:WorkflowTaskRedisClientTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskRedisClientTaskParams:WorkflowTaskRedisClientTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskRedisClient resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskRedisClientTaskParams:WorkflowTaskRedisClientTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskRemoveGoogleDocsPermissions:WorkflowTaskRemoveGoogleDocsPermissions": {
            "description": "Manages workflow remove_google_docs_permissions task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskRemoveGoogleDocsPermissionsTaskParams:WorkflowTaskRemoveGoogleDocsPermissionsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskRemoveGoogleDocsPermissionsTaskParams:WorkflowTaskRemoveGoogleDocsPermissionsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskRemoveGoogleDocsPermissions resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskRemoveGoogleDocsPermissionsTaskParams:WorkflowTaskRemoveGoogleDocsPermissionsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskRenameSlackChannel:WorkflowTaskRenameSlackChannel": {
            "description": "Manages workflow rename_slack_channel task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst renamingSlackChannelToJiraTicketNumber = new rootly.WorkflowIncident(\"renamingSlackChannelToJiraTicketNumber\", {\n    description: \"Automatically renames Slack channel to attached Jira ticket number.\",\n    triggerParams: {\n        triggers: [\"incident_created\"],\n        incidentStatuses: [\"started\"],\n        wait: \"30 seconds\",\n        incidentConditionStatus: \"IS\",\n    },\n    enabled: true,\n});\nconst renameSlackChannel = new rootly.WorkflowTaskRenameSlackChannel(\"renameSlackChannel\", {\n    workflowId: renamingSlackChannelToJiraTicketNumber.id,\n    skipOnFailure: false,\n    enabled: true,\n    taskParams: {\n        name: \"Rename a Slack channel to Jira ticket slug\",\n        channel: {\n            id: \"{{ incident.slack_channel_id }}\",\n            name: \"{{ incident.slack_channel_id }}\",\n        },\n        title: \"incident-{{ incident.jira_issue_key }}\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nrenaming_slack_channel_to_jira_ticket_number = rootly.WorkflowIncident(\"renamingSlackChannelToJiraTicketNumber\",\n    description=\"Automatically renames Slack channel to attached Jira ticket number.\",\n    trigger_params=rootly.WorkflowIncidentTriggerParamsArgs(\n        triggers=[\"incident_created\"],\n        incident_statuses=[\"started\"],\n        wait=\"30 seconds\",\n        incident_condition_status=\"IS\",\n    ),\n    enabled=True)\nrename_slack_channel = rootly.WorkflowTaskRenameSlackChannel(\"renameSlackChannel\",\n    workflow_id=renaming_slack_channel_to_jira_ticket_number.id,\n    skip_on_failure=False,\n    enabled=True,\n    task_params=rootly.WorkflowTaskRenameSlackChannelTaskParamsArgs(\n        name=\"Rename a Slack channel to Jira ticket slug\",\n        channel={\n            \"id\": \"{{ incident.slack_channel_id }}\",\n            \"name\": \"{{ incident.slack_channel_id }}\",\n        },\n        title=\"incident-{{ incident.jira_issue_key }}\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var renamingSlackChannelToJiraTicketNumber = new Rootly.WorkflowIncident(\"renamingSlackChannelToJiraTicketNumber\", new Rootly.WorkflowIncidentArgs\n        {\n            Description = \"Automatically renames Slack channel to attached Jira ticket number.\",\n            TriggerParams = new Rootly.Inputs.WorkflowIncidentTriggerParamsArgs\n            {\n                Triggers = \n                {\n                    \"incident_created\",\n                },\n                IncidentStatuses = \n                {\n                    \"started\",\n                },\n                Wait = \"30 seconds\",\n                IncidentConditionStatus = \"IS\",\n            },\n            Enabled = true,\n        });\n        var renameSlackChannel = new Rootly.WorkflowTaskRenameSlackChannel(\"renameSlackChannel\", new Rootly.WorkflowTaskRenameSlackChannelArgs\n        {\n            WorkflowId = renamingSlackChannelToJiraTicketNumber.Id,\n            SkipOnFailure = false,\n            Enabled = true,\n            TaskParams = new Rootly.Inputs.WorkflowTaskRenameSlackChannelTaskParamsArgs\n            {\n                Name = \"Rename a Slack channel to Jira ticket slug\",\n                Channel = \n                {\n                    { \"id\", \"{{ incident.slack_channel_id }}\" },\n                    { \"name\", \"{{ incident.slack_channel_id }}\" },\n                },\n                Title = \"incident-{{ incident.jira_issue_key }}\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\trenamingSlackChannelToJiraTicketNumber, err := rootly.NewWorkflowIncident(ctx, \"renamingSlackChannelToJiraTicketNumber\", \u0026rootly.WorkflowIncidentArgs{\n\t\t\tDescription: pulumi.String(\"Automatically renames Slack channel to attached Jira ticket number.\"),\n\t\t\tTriggerParams: \u0026WorkflowIncidentTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"incident_created\"),\n\t\t\t\t},\n\t\t\t\tIncidentStatuses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"started\"),\n\t\t\t\t},\n\t\t\t\tWait:                    \"30 seconds\",\n\t\t\t\tIncidentConditionStatus: pulumi.String(\"IS\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewWorkflowTaskRenameSlackChannel(ctx, \"renameSlackChannel\", \u0026rootly.WorkflowTaskRenameSlackChannelArgs{\n\t\t\tWorkflowId:    renamingSlackChannelToJiraTicketNumber.ID(),\n\t\t\tSkipOnFailure: pulumi.Bool(false),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tTaskParams: \u0026WorkflowTaskRenameSlackChannelTaskParamsArgs{\n\t\t\t\tName: \"Rename a Slack channel to Jira ticket slug\",\n\t\t\t\tChannel: pulumi.AnyMap{\n\t\t\t\t\t\"id\":   pulumi.Any(\"{{ incident.slack_channel_id }}\"),\n\t\t\t\t\t\"name\": pulumi.Any(\"{{ incident.slack_channel_id }}\"),\n\t\t\t\t},\n\t\t\t\tTitle: pulumi.String(\"incident-{{ incident.jira_issue_key }}\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskRenameSlackChannelTaskParams:WorkflowTaskRenameSlackChannelTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskRenameSlackChannelTaskParams:WorkflowTaskRenameSlackChannelTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskRenameSlackChannel resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskRenameSlackChannelTaskParams:WorkflowTaskRenameSlackChannelTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskRunCommandHeroku:WorkflowTaskRunCommandHeroku": {
            "description": "Manages workflow run_command_heroku task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskRunCommandHerokuTaskParams:WorkflowTaskRunCommandHerokuTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskRunCommandHerokuTaskParams:WorkflowTaskRunCommandHerokuTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskRunCommandHeroku resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskRunCommandHerokuTaskParams:WorkflowTaskRunCommandHerokuTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskSendDashboardReport:WorkflowTaskSendDashboardReport": {
            "description": "Manages workflow send_dashboard_report task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendDashboardReportTaskParams:WorkflowTaskSendDashboardReportTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendDashboardReportTaskParams:WorkflowTaskSendDashboardReportTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskSendDashboardReport resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendDashboardReportTaskParams:WorkflowTaskSendDashboardReportTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskSendEmail:WorkflowTaskSendEmail": {
            "description": "Manages workflow send_email task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendEmailTaskParams:WorkflowTaskSendEmailTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendEmailTaskParams:WorkflowTaskSendEmailTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskSendEmail resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendEmailTaskParams:WorkflowTaskSendEmailTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskSendSlackBlocks:WorkflowTaskSendSlackBlocks": {
            "description": "Manages workflow send_slack_blocks task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst sendMessageInIncidentChannel = new rootly.WorkflowIncident(\"sendMessageInIncidentChannel\", {\n    description: \"Send a message in the incident channel\",\n    triggerParams: {\n        triggers: [\"incident_created\"],\n        incidentStatuses: [\"started\"],\n        incidentConditionStatus: \"IS\",\n    },\n    enabled: true,\n});\nconst sendSlackBlocks = new rootly.WorkflowTaskSendSlackBlocks(\"sendSlackBlocks\", {\n    workflowId: sendMessageInIncidentChannel.id,\n    skipOnFailure: false,\n    enabled: true,\n    taskParams: {\n        name: \"Send Slack message\",\n        message: \":boom: New incident!\",\n        channels: [{\n            name: \"{{ incident.slack_channel_id }}\",\n            id: \"{{ incident.slack_channel_id }}\",\n        }],\n        blocks: JSON.stringify([{\n            text: {\n                emoji: true,\n                text: \"This is the incident title: {{ incident.title }}\",\n                type: \"plain_text\",\n            },\n            type: \"header\",\n        }]),\n    },\n});\n```\n```python\nimport pulumi\nimport json\nimport pulumi_rootly as rootly\n\nsend_message_in_incident_channel = rootly.WorkflowIncident(\"sendMessageInIncidentChannel\",\n    description=\"Send a message in the incident channel\",\n    trigger_params=rootly.WorkflowIncidentTriggerParamsArgs(\n        triggers=[\"incident_created\"],\n        incident_statuses=[\"started\"],\n        incident_condition_status=\"IS\",\n    ),\n    enabled=True)\nsend_slack_blocks = rootly.WorkflowTaskSendSlackBlocks(\"sendSlackBlocks\",\n    workflow_id=send_message_in_incident_channel.id,\n    skip_on_failure=False,\n    enabled=True,\n    task_params=rootly.WorkflowTaskSendSlackBlocksTaskParamsArgs(\n        name=\"Send Slack message\",\n        message=\":boom: New incident!\",\n        channels=[rootly.WorkflowTaskSendSlackBlocksTaskParamsChannelArgs(\n            name=\"{{ incident.slack_channel_id }}\",\n            id=\"{{ incident.slack_channel_id }}\",\n        )],\n        blocks=json.dumps([{\n            \"text\": {\n                \"emoji\": True,\n                \"text\": \"This is the incident title: {{ incident.title }}\",\n                \"type\": \"plain_text\",\n            },\n            \"type\": \"header\",\n        }]),\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Text.Json;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var sendMessageInIncidentChannel = new Rootly.WorkflowIncident(\"sendMessageInIncidentChannel\", new Rootly.WorkflowIncidentArgs\n        {\n            Description = \"Send a message in the incident channel\",\n            TriggerParams = new Rootly.Inputs.WorkflowIncidentTriggerParamsArgs\n            {\n                Triggers = \n                {\n                    \"incident_created\",\n                },\n                IncidentStatuses = \n                {\n                    \"started\",\n                },\n                IncidentConditionStatus = \"IS\",\n            },\n            Enabled = true,\n        });\n        var sendSlackBlocks = new Rootly.WorkflowTaskSendSlackBlocks(\"sendSlackBlocks\", new Rootly.WorkflowTaskSendSlackBlocksArgs\n        {\n            WorkflowId = sendMessageInIncidentChannel.Id,\n            SkipOnFailure = false,\n            Enabled = true,\n            TaskParams = new Rootly.Inputs.WorkflowTaskSendSlackBlocksTaskParamsArgs\n            {\n                Name = \"Send Slack message\",\n                Message = \":boom: New incident!\",\n                Channels = \n                {\n                    new Rootly.Inputs.WorkflowTaskSendSlackBlocksTaskParamsChannelArgs\n                    {\n                        Name = \"{{ incident.slack_channel_id }}\",\n                        Id = \"{{ incident.slack_channel_id }}\",\n                    },\n                },\n                Blocks = JsonSerializer.Serialize(new[]\n                    {\n                        new Dictionary\u003cstring, object?\u003e\n                        {\n                            { \"text\", new Dictionary\u003cstring, object?\u003e\n                            {\n                                { \"emoji\", true },\n                                { \"text\", \"This is the incident title: {{ incident.title }}\" },\n                                { \"type\", \"plain_text\" },\n                            } },\n                            { \"type\", \"header\" },\n                        },\n                    }\n                ),\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsendMessageInIncidentChannel, err := rootly.NewWorkflowIncident(ctx, \"sendMessageInIncidentChannel\", \u0026rootly.WorkflowIncidentArgs{\n\t\t\tDescription: pulumi.String(\"Send a message in the incident channel\"),\n\t\t\tTriggerParams: \u0026WorkflowIncidentTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"incident_created\"),\n\t\t\t\t},\n\t\t\t\tIncidentStatuses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"started\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionStatus: pulumi.String(\"IS\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\ttmpJSON0, err := json.Marshal([]map[string]interface{}{\n\t\t\tmap[string]interface{}{\n\t\t\t\t\"text\": map[string]interface{}{\n\t\t\t\t\t\"emoji\": true,\n\t\t\t\t\t\"text\":  \"This is the incident title: {{ incident.title }}\",\n\t\t\t\t\t\"type\":  \"plain_text\",\n\t\t\t\t},\n\t\t\t\t\"type\": \"header\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tjson0 := string(tmpJSON0)\n\t\t_, err = rootly.NewWorkflowTaskSendSlackBlocks(ctx, \"sendSlackBlocks\", \u0026rootly.WorkflowTaskSendSlackBlocksArgs{\n\t\t\tWorkflowId:    sendMessageInIncidentChannel.ID(),\n\t\t\tSkipOnFailure: pulumi.Bool(false),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tTaskParams: \u0026WorkflowTaskSendSlackBlocksTaskParamsArgs{\n\t\t\t\tName:    \"Send Slack message\",\n\t\t\t\tMessage: pulumi.String(\":boom: New incident!\"),\n\t\t\t\tChannels: WorkflowTaskSendSlackBlocksTaskParamsChannelArray{\n\t\t\t\t\t\u0026WorkflowTaskSendSlackBlocksTaskParamsChannelArgs{\n\t\t\t\t\t\tName: pulumi.String(\"{{ incident.slack_channel_id }}\"),\n\t\t\t\t\t\tId:   pulumi.String(\"{{ incident.slack_channel_id }}\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tBlocks: pulumi.String(json0),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendSlackBlocksTaskParams:WorkflowTaskSendSlackBlocksTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendSlackBlocksTaskParams:WorkflowTaskSendSlackBlocksTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskSendSlackBlocks resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendSlackBlocksTaskParams:WorkflowTaskSendSlackBlocksTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskSendSlackMessage:WorkflowTaskSendSlackMessage": {
            "description": "Manages workflow send_slack_message task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst notifySlackChannels = new rootly.WorkflowIncident(\"notifySlackChannels\", {\n    description: \"Send a message to specific teams on Slack regarding the incident.\",\n    triggerParams: {\n        triggers: [\"incident_created\"],\n        incidentStatuses: [\"started\"],\n        incidentConditionStatus: \"IS\",\n    },\n    enabled: true,\n});\nconst sendSlackMessage = new rootly.WorkflowTaskSendSlackMessage(\"sendSlackMessage\", {\n    workflowId: notifySlackChannels.id,\n    skipOnFailure: false,\n    enabled: true,\n    taskParams: {\n        name: \"Notify team about incident\",\n        channels: [{\n            id: \"{{ incident.slack_channel_id }}\",\n            name: \"{{ incident.slack_channel_id }}\",\n        }],\n        text: \"Heads up - wanted to let your team know we have an active incident.\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nnotify_slack_channels = rootly.WorkflowIncident(\"notifySlackChannels\",\n    description=\"Send a message to specific teams on Slack regarding the incident.\",\n    trigger_params=rootly.WorkflowIncidentTriggerParamsArgs(\n        triggers=[\"incident_created\"],\n        incident_statuses=[\"started\"],\n        incident_condition_status=\"IS\",\n    ),\n    enabled=True)\nsend_slack_message = rootly.WorkflowTaskSendSlackMessage(\"sendSlackMessage\",\n    workflow_id=notify_slack_channels.id,\n    skip_on_failure=False,\n    enabled=True,\n    task_params=rootly.WorkflowTaskSendSlackMessageTaskParamsArgs(\n        name=\"Notify team about incident\",\n        channels=[rootly.WorkflowTaskSendSlackMessageTaskParamsChannelArgs(\n            id=\"{{ incident.slack_channel_id }}\",\n            name=\"{{ incident.slack_channel_id }}\",\n        )],\n        text=\"Heads up - wanted to let your team know we have an active incident.\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var notifySlackChannels = new Rootly.WorkflowIncident(\"notifySlackChannels\", new Rootly.WorkflowIncidentArgs\n        {\n            Description = \"Send a message to specific teams on Slack regarding the incident.\",\n            TriggerParams = new Rootly.Inputs.WorkflowIncidentTriggerParamsArgs\n            {\n                Triggers = \n                {\n                    \"incident_created\",\n                },\n                IncidentStatuses = \n                {\n                    \"started\",\n                },\n                IncidentConditionStatus = \"IS\",\n            },\n            Enabled = true,\n        });\n        var sendSlackMessage = new Rootly.WorkflowTaskSendSlackMessage(\"sendSlackMessage\", new Rootly.WorkflowTaskSendSlackMessageArgs\n        {\n            WorkflowId = notifySlackChannels.Id,\n            SkipOnFailure = false,\n            Enabled = true,\n            TaskParams = new Rootly.Inputs.WorkflowTaskSendSlackMessageTaskParamsArgs\n            {\n                Name = \"Notify team about incident\",\n                Channels = \n                {\n                    new Rootly.Inputs.WorkflowTaskSendSlackMessageTaskParamsChannelArgs\n                    {\n                        Id = \"{{ incident.slack_channel_id }}\",\n                        Name = \"{{ incident.slack_channel_id }}\",\n                    },\n                },\n                Text = \"Heads up - wanted to let your team know we have an active incident.\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tnotifySlackChannels, err := rootly.NewWorkflowIncident(ctx, \"notifySlackChannels\", \u0026rootly.WorkflowIncidentArgs{\n\t\t\tDescription: pulumi.String(\"Send a message to specific teams on Slack regarding the incident.\"),\n\t\t\tTriggerParams: \u0026WorkflowIncidentTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"incident_created\"),\n\t\t\t\t},\n\t\t\t\tIncidentStatuses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"started\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionStatus: pulumi.String(\"IS\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewWorkflowTaskSendSlackMessage(ctx, \"sendSlackMessage\", \u0026rootly.WorkflowTaskSendSlackMessageArgs{\n\t\t\tWorkflowId:    notifySlackChannels.ID(),\n\t\t\tSkipOnFailure: pulumi.Bool(false),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tTaskParams: \u0026WorkflowTaskSendSlackMessageTaskParamsArgs{\n\t\t\t\tName: \"Notify team about incident\",\n\t\t\t\tChannels: WorkflowTaskSendSlackMessageTaskParamsChannelArray{\n\t\t\t\t\t\u0026WorkflowTaskSendSlackMessageTaskParamsChannelArgs{\n\t\t\t\t\t\tId:   pulumi.String(\"{{ incident.slack_channel_id }}\"),\n\t\t\t\t\t\tName: pulumi.String(\"{{ incident.slack_channel_id }}\"),\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\tText: pulumi.String(\"Heads up - wanted to let your team know we have an active incident.\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendSlackMessageTaskParams:WorkflowTaskSendSlackMessageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendSlackMessageTaskParams:WorkflowTaskSendSlackMessageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskSendSlackMessage resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendSlackMessageTaskParams:WorkflowTaskSendSlackMessageTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskSendSms:WorkflowTaskSendSms": {
            "description": "Manages workflow send_sms task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst sendSmsWorkflowIncident = new rootly.WorkflowIncident(\"sendSmsWorkflowIncident\", {\n    description: \"Automatically send SMS to a specific teammate.\",\n    triggerParams: {\n        triggers: [\"incident_created\"],\n        incidentStatuses: [\"started\"],\n        incidentConditionStatus: \"IS\",\n    },\n    enabled: true,\n});\nconst sendSmsWorkflowTaskSendSms = new rootly.WorkflowTaskSendSms(\"sendSmsWorkflowTaskSendSms\", {\n    workflowId: sendSmsWorkflowIncident.id,\n    skipOnFailure: false,\n    enabled: true,\n    taskParams: {\n        name: \"Send SMS\",\n        content: \"We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\",\n        phoneNumbers: [\n            \"+11231231231\",\n            \"+11231231232\",\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nsend_sms_workflow_incident = rootly.WorkflowIncident(\"sendSmsWorkflowIncident\",\n    description=\"Automatically send SMS to a specific teammate.\",\n    trigger_params=rootly.WorkflowIncidentTriggerParamsArgs(\n        triggers=[\"incident_created\"],\n        incident_statuses=[\"started\"],\n        incident_condition_status=\"IS\",\n    ),\n    enabled=True)\nsend_sms_workflow_task_send_sms = rootly.WorkflowTaskSendSms(\"sendSmsWorkflowTaskSendSms\",\n    workflow_id=send_sms_workflow_incident.id,\n    skip_on_failure=False,\n    enabled=True,\n    task_params=rootly.WorkflowTaskSendSmsTaskParamsArgs(\n        name=\"Send SMS\",\n        content=\"We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\",\n        phone_numbers=[\n            \"+11231231231\",\n            \"+11231231232\",\n        ],\n    ))\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var sendSmsWorkflowIncident = new Rootly.WorkflowIncident(\"sendSmsWorkflowIncident\", new Rootly.WorkflowIncidentArgs\n        {\n            Description = \"Automatically send SMS to a specific teammate.\",\n            TriggerParams = new Rootly.Inputs.WorkflowIncidentTriggerParamsArgs\n            {\n                Triggers = \n                {\n                    \"incident_created\",\n                },\n                IncidentStatuses = \n                {\n                    \"started\",\n                },\n                IncidentConditionStatus = \"IS\",\n            },\n            Enabled = true,\n        });\n        var sendSmsWorkflowTaskSendSms = new Rootly.WorkflowTaskSendSms(\"sendSmsWorkflowTaskSendSms\", new Rootly.WorkflowTaskSendSmsArgs\n        {\n            WorkflowId = sendSmsWorkflowIncident.Id,\n            SkipOnFailure = false,\n            Enabled = true,\n            TaskParams = new Rootly.Inputs.WorkflowTaskSendSmsTaskParamsArgs\n            {\n                Name = \"Send SMS\",\n                Content = \"We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\",\n                PhoneNumbers = \n                {\n                    \"+11231231231\",\n                    \"+11231231232\",\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsendSmsWorkflowIncident, err := rootly.NewWorkflowIncident(ctx, \"sendSmsWorkflowIncident\", \u0026rootly.WorkflowIncidentArgs{\n\t\t\tDescription: pulumi.String(\"Automatically send SMS to a specific teammate.\"),\n\t\t\tTriggerParams: \u0026WorkflowIncidentTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"incident_created\"),\n\t\t\t\t},\n\t\t\t\tIncidentStatuses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"started\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionStatus: pulumi.String(\"IS\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewWorkflowTaskSendSms(ctx, \"sendSmsWorkflowTaskSendSms\", \u0026rootly.WorkflowTaskSendSmsArgs{\n\t\t\tWorkflowId:    sendSmsWorkflowIncident.ID(),\n\t\t\tSkipOnFailure: pulumi.Bool(false),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tTaskParams: \u0026WorkflowTaskSendSmsTaskParamsArgs{\n\t\t\t\tName:    pulumi.String(\"Send SMS\"),\n\t\t\t\tContent: pulumi.String(\"We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\"),\n\t\t\t\tPhoneNumbers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"+11231231231\"),\n\t\t\t\t\tpulumi.String(\"+11231231232\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendSmsTaskParams:WorkflowTaskSendSmsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendSmsTaskParams:WorkflowTaskSendSmsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskSendSms resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendSmsTaskParams:WorkflowTaskSendSmsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskSnapshotDatadogGraph:WorkflowTaskSnapshotDatadogGraph": {
            "description": "Manages workflow snapshot_datadog_graph task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSnapshotDatadogGraphTaskParams:WorkflowTaskSnapshotDatadogGraphTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSnapshotDatadogGraphTaskParams:WorkflowTaskSnapshotDatadogGraphTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskSnapshotDatadogGraph resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotDatadogGraphTaskParams:WorkflowTaskSnapshotDatadogGraphTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskSnapshotGrafanaDashboard:WorkflowTaskSnapshotGrafanaDashboard": {
            "description": "Manages workflow snapshot_grafana_dashboard task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSnapshotGrafanaDashboardTaskParams:WorkflowTaskSnapshotGrafanaDashboardTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSnapshotGrafanaDashboardTaskParams:WorkflowTaskSnapshotGrafanaDashboardTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskSnapshotGrafanaDashboard resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotGrafanaDashboardTaskParams:WorkflowTaskSnapshotGrafanaDashboardTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskSnapshotLookerLook:WorkflowTaskSnapshotLookerLook": {
            "description": "Manages workflow snapshot_looker_look task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSnapshotLookerLookTaskParams:WorkflowTaskSnapshotLookerLookTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSnapshotLookerLookTaskParams:WorkflowTaskSnapshotLookerLookTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskSnapshotLookerLook resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotLookerLookTaskParams:WorkflowTaskSnapshotLookerLookTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskSnapshotNewRelicGraph:WorkflowTaskSnapshotNewRelicGraph": {
            "description": "Manages workflow snapshot_new_relic_graph task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSnapshotNewRelicGraphTaskParams:WorkflowTaskSnapshotNewRelicGraphTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSnapshotNewRelicGraphTaskParams:WorkflowTaskSnapshotNewRelicGraphTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskSnapshotNewRelicGraph resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotNewRelicGraphTaskParams:WorkflowTaskSnapshotNewRelicGraphTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskTriggerWorkflow:WorkflowTaskTriggerWorkflow": {
            "description": "Manages workflow trigger_workflow task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst triggerAnotherWorkflow = new rootly.WorkflowIncident(\"triggerAnotherWorkflow\", {\n    description: \"Trigger another workflow\",\n    triggerParams: {\n        triggers: [\"incident_created\"],\n        incidentStatuses: [\"started\"],\n        incidentConditionStatus: \"IS\",\n    },\n    enabled: true,\n});\nconst triggerAnotherWorkflowTask = new rootly.WorkflowTaskTriggerWorkflow(\"triggerAnotherWorkflowTask\", {\n    position: 1,\n    workflowId: triggerAnotherWorkflow.id,\n    taskParams: {\n        kind: \"incident\",\n        workflow: {\n            id: rootly_workflow_incident.another_workflow.id,\n            name: \"Trigger another workflow\",\n        },\n        resource: {\n            id: \"{{ incident.id }}\",\n            name: \"{{ incident.id }}\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\ntrigger_another_workflow = rootly.WorkflowIncident(\"triggerAnotherWorkflow\",\n    description=\"Trigger another workflow\",\n    trigger_params=rootly.WorkflowIncidentTriggerParamsArgs(\n        triggers=[\"incident_created\"],\n        incident_statuses=[\"started\"],\n        incident_condition_status=\"IS\",\n    ),\n    enabled=True)\ntrigger_another_workflow_task = rootly.WorkflowTaskTriggerWorkflow(\"triggerAnotherWorkflowTask\",\n    position=1,\n    workflow_id=trigger_another_workflow.id,\n    task_params=rootly.WorkflowTaskTriggerWorkflowTaskParamsArgs(\n        kind=\"incident\",\n        workflow={\n            \"id\": rootly_workflow_incident[\"another_workflow\"][\"id\"],\n            \"name\": \"Trigger another workflow\",\n        },\n        resource={\n            \"id\": \"{{ incident.id }}\",\n            \"name\": \"{{ incident.id }}\",\n        },\n    ))\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var triggerAnotherWorkflow = new Rootly.WorkflowIncident(\"triggerAnotherWorkflow\", new Rootly.WorkflowIncidentArgs\n        {\n            Description = \"Trigger another workflow\",\n            TriggerParams = new Rootly.Inputs.WorkflowIncidentTriggerParamsArgs\n            {\n                Triggers = \n                {\n                    \"incident_created\",\n                },\n                IncidentStatuses = \n                {\n                    \"started\",\n                },\n                IncidentConditionStatus = \"IS\",\n            },\n            Enabled = true,\n        });\n        var triggerAnotherWorkflowTask = new Rootly.WorkflowTaskTriggerWorkflow(\"triggerAnotherWorkflowTask\", new Rootly.WorkflowTaskTriggerWorkflowArgs\n        {\n            Position = 1,\n            WorkflowId = triggerAnotherWorkflow.Id,\n            TaskParams = new Rootly.Inputs.WorkflowTaskTriggerWorkflowTaskParamsArgs\n            {\n                Kind = \"incident\",\n                Workflow = \n                {\n                    { \"id\", rootly_workflow_incident.Another_workflow.Id },\n                    { \"name\", \"Trigger another workflow\" },\n                },\n                Resource = \n                {\n                    { \"id\", \"{{ incident.id }}\" },\n                    { \"name\", \"{{ incident.id }}\" },\n                },\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttriggerAnotherWorkflow, err := rootly.NewWorkflowIncident(ctx, \"triggerAnotherWorkflow\", \u0026rootly.WorkflowIncidentArgs{\n\t\t\tDescription: pulumi.String(\"Trigger another workflow\"),\n\t\t\tTriggerParams: \u0026WorkflowIncidentTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"incident_created\"),\n\t\t\t\t},\n\t\t\t\tIncidentStatuses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"started\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionStatus: pulumi.String(\"IS\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewWorkflowTaskTriggerWorkflow(ctx, \"triggerAnotherWorkflowTask\", \u0026rootly.WorkflowTaskTriggerWorkflowArgs{\n\t\t\tPosition:   pulumi.Int(1),\n\t\t\tWorkflowId: triggerAnotherWorkflow.ID(),\n\t\t\tTaskParams: \u0026WorkflowTaskTriggerWorkflowTaskParamsArgs{\n\t\t\t\tKind: pulumi.String(\"incident\"),\n\t\t\t\tWorkflow: pulumi.AnyMap{\n\t\t\t\t\t\"id\":   pulumi.Any(rootly_workflow_incident.Another_workflow.Id),\n\t\t\t\t\t\"name\": pulumi.Any(\"Trigger another workflow\"),\n\t\t\t\t},\n\t\t\t\tResource: pulumi.AnyMap{\n\t\t\t\t\t\"id\":   pulumi.Any(\"{{ incident.id }}\"),\n\t\t\t\t\t\"name\": pulumi.Any(\"{{ incident.id }}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskTriggerWorkflowTaskParams:WorkflowTaskTriggerWorkflowTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskTriggerWorkflowTaskParams:WorkflowTaskTriggerWorkflowTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskTriggerWorkflow resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskTriggerWorkflowTaskParams:WorkflowTaskTriggerWorkflowTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskTweetTwitterMessage:WorkflowTaskTweetTwitterMessage": {
            "description": "Manages workflow tweet_twitter_message task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskTweetTwitterMessageTaskParams:WorkflowTaskTweetTwitterMessageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskTweetTwitterMessageTaskParams:WorkflowTaskTweetTwitterMessageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskTweetTwitterMessage resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskTweetTwitterMessageTaskParams:WorkflowTaskTweetTwitterMessageTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateActionItem:WorkflowTaskUpdateActionItem": {
            "description": "Manages workflow update_action_item task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateActionItemTaskParams:WorkflowTaskUpdateActionItemTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateActionItemTaskParams:WorkflowTaskUpdateActionItemTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateActionItem resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateActionItemTaskParams:WorkflowTaskUpdateActionItemTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateAirtableTableRecord:WorkflowTaskUpdateAirtableTableRecord": {
            "description": "Manages workflow update_airtable_table_record task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateAirtableTableRecordTaskParams:WorkflowTaskUpdateAirtableTableRecordTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateAirtableTableRecordTaskParams:WorkflowTaskUpdateAirtableTableRecordTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateAirtableTableRecord resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateAirtableTableRecordTaskParams:WorkflowTaskUpdateAirtableTableRecordTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateAsanaTask:WorkflowTaskUpdateAsanaTask": {
            "description": "Manages workflow update_asana_task task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateAsanaTaskTaskParams:WorkflowTaskUpdateAsanaTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateAsanaTaskTaskParams:WorkflowTaskUpdateAsanaTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateAsanaTask resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateAsanaTaskTaskParams:WorkflowTaskUpdateAsanaTaskTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateGithubIssue:WorkflowTaskUpdateGithubIssue": {
            "description": "Manages workflow update_github_issue task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateGithubIssueTaskParams:WorkflowTaskUpdateGithubIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateGithubIssueTaskParams:WorkflowTaskUpdateGithubIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateGithubIssue resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateGithubIssueTaskParams:WorkflowTaskUpdateGithubIssueTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateGoogleCalendarEvent:WorkflowTaskUpdateGoogleCalendarEvent": {
            "description": "Manages workflow update_google_calendar_event task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateGoogleCalendarEventTaskParams:WorkflowTaskUpdateGoogleCalendarEventTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateGoogleCalendarEventTaskParams:WorkflowTaskUpdateGoogleCalendarEventTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateGoogleCalendarEvent resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateGoogleCalendarEventTaskParams:WorkflowTaskUpdateGoogleCalendarEventTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateGoogleDocsPage:WorkflowTaskUpdateGoogleDocsPage": {
            "description": "Manages workflow update_google_docs_page task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateGoogleDocsPageTaskParams:WorkflowTaskUpdateGoogleDocsPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateGoogleDocsPageTaskParams:WorkflowTaskUpdateGoogleDocsPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateGoogleDocsPage resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateGoogleDocsPageTaskParams:WorkflowTaskUpdateGoogleDocsPageTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateIncident:WorkflowTaskUpdateIncident": {
            "description": "Manages workflow update_incident task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateIncidentTaskParams:WorkflowTaskUpdateIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateIncidentTaskParams:WorkflowTaskUpdateIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateIncident resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateIncidentTaskParams:WorkflowTaskUpdateIncidentTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateIncidentPostmortem:WorkflowTaskUpdateIncidentPostmortem": {
            "description": "Manages workflow update_incident_postmortem task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateIncidentPostmortemTaskParams:WorkflowTaskUpdateIncidentPostmortemTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateIncidentPostmortemTaskParams:WorkflowTaskUpdateIncidentPostmortemTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateIncidentPostmortem resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateIncidentPostmortemTaskParams:WorkflowTaskUpdateIncidentPostmortemTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateJiraIssue:WorkflowTaskUpdateJiraIssue": {
            "description": "Manages workflow update_jira_issue task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateJiraIssueTaskParams:WorkflowTaskUpdateJiraIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateJiraIssueTaskParams:WorkflowTaskUpdateJiraIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateJiraIssue resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateJiraIssueTaskParams:WorkflowTaskUpdateJiraIssueTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateLinearIssue:WorkflowTaskUpdateLinearIssue": {
            "description": "Manages workflow update_linear_issue task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateLinearIssueTaskParams:WorkflowTaskUpdateLinearIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateLinearIssueTaskParams:WorkflowTaskUpdateLinearIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateLinearIssue resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateLinearIssueTaskParams:WorkflowTaskUpdateLinearIssueTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateOpsgenieAlert:WorkflowTaskUpdateOpsgenieAlert": {
            "description": "Manages workflow update_opsgenie_alert task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateOpsgenieAlertTaskParams:WorkflowTaskUpdateOpsgenieAlertTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateOpsgenieAlertTaskParams:WorkflowTaskUpdateOpsgenieAlertTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateOpsgenieAlert resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateOpsgenieAlertTaskParams:WorkflowTaskUpdateOpsgenieAlertTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateOpsgenieIncident:WorkflowTaskUpdateOpsgenieIncident": {
            "description": "Manages workflow update_opsgenie_incident task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateOpsgenieIncidentTaskParams:WorkflowTaskUpdateOpsgenieIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateOpsgenieIncidentTaskParams:WorkflowTaskUpdateOpsgenieIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateOpsgenieIncident resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateOpsgenieIncidentTaskParams:WorkflowTaskUpdateOpsgenieIncidentTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdatePagerdutyIncident:WorkflowTaskUpdatePagerdutyIncident": {
            "description": "Manages workflow update_pagerduty_incident task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdatePagerdutyIncidentTaskParams:WorkflowTaskUpdatePagerdutyIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdatePagerdutyIncidentTaskParams:WorkflowTaskUpdatePagerdutyIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdatePagerdutyIncident resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdatePagerdutyIncidentTaskParams:WorkflowTaskUpdatePagerdutyIncidentTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdatePagertreeAlert:WorkflowTaskUpdatePagertreeAlert": {
            "description": "Manages workflow update_pagertree_alert task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdatePagertreeAlertTaskParams:WorkflowTaskUpdatePagertreeAlertTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdatePagertreeAlertTaskParams:WorkflowTaskUpdatePagertreeAlertTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdatePagertreeAlert resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdatePagertreeAlertTaskParams:WorkflowTaskUpdatePagertreeAlertTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateServiceNowIncident:WorkflowTaskUpdateServiceNowIncident": {
            "description": "Manages workflow update_service_now_incident task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateServiceNowIncidentTaskParams:WorkflowTaskUpdateServiceNowIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateServiceNowIncidentTaskParams:WorkflowTaskUpdateServiceNowIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateServiceNowIncident resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateServiceNowIncidentTaskParams:WorkflowTaskUpdateServiceNowIncidentTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateShortcutStory:WorkflowTaskUpdateShortcutStory": {
            "description": "Manages workflow update_shortcut_story task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateShortcutStoryTaskParams:WorkflowTaskUpdateShortcutStoryTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateShortcutStoryTaskParams:WorkflowTaskUpdateShortcutStoryTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateShortcutStory resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateShortcutStoryTaskParams:WorkflowTaskUpdateShortcutStoryTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateShortcutTask:WorkflowTaskUpdateShortcutTask": {
            "description": "Manages workflow update_shortcut_task task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateShortcutTaskTaskParams:WorkflowTaskUpdateShortcutTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateShortcutTaskTaskParams:WorkflowTaskUpdateShortcutTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateShortcutTask resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateShortcutTaskTaskParams:WorkflowTaskUpdateShortcutTaskTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateSlackChannelTopic:WorkflowTaskUpdateSlackChannelTopic": {
            "description": "Manages workflow update_slack_channel_topic task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateSlackChannelTopicTaskParams:WorkflowTaskUpdateSlackChannelTopicTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateSlackChannelTopicTaskParams:WorkflowTaskUpdateSlackChannelTopicTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateSlackChannelTopic resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateSlackChannelTopicTaskParams:WorkflowTaskUpdateSlackChannelTopicTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateStatus:WorkflowTaskUpdateStatus": {
            "description": "Manages workflow update_status task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst autoResolveIncident = new rootly.WorkflowIncident(\"autoResolveIncident\", {\n    description: \"After an incident has been inactive for 24 hrs, automatically mark it as resolved.\",\n    triggerParams: {\n        triggers: [\"incident_created\"],\n        wait: \"24 hours\",\n        incidentStatuses: [\n            \"resolved\",\n            \"mitigated\",\n        ],\n        incidentConditionStatus: \"ANY\",\n    },\n    enabled: true,\n});\nconst updateStatus = new rootly.WorkflowTaskUpdateStatus(\"updateStatus\", {\n    workflowId: autoResolveIncident.id,\n    skipOnFailure: false,\n    enabled: true,\n    taskParams: {\n        status: \"resolved\",\n        message: \"Automatically marked as resolved due to inactivity\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nauto_resolve_incident = rootly.WorkflowIncident(\"autoResolveIncident\",\n    description=\"After an incident has been inactive for 24 hrs, automatically mark it as resolved.\",\n    trigger_params=rootly.WorkflowIncidentTriggerParamsArgs(\n        triggers=[\"incident_created\"],\n        wait=\"24 hours\",\n        incident_statuses=[\n            \"resolved\",\n            \"mitigated\",\n        ],\n        incident_condition_status=\"ANY\",\n    ),\n    enabled=True)\nupdate_status = rootly.WorkflowTaskUpdateStatus(\"updateStatus\",\n    workflow_id=auto_resolve_incident.id,\n    skip_on_failure=False,\n    enabled=True,\n    task_params=rootly.WorkflowTaskUpdateStatusTaskParamsArgs(\n        status=\"resolved\",\n        message=\"Automatically marked as resolved due to inactivity\",\n    ))\n```\n```csharp\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var autoResolveIncident = new Rootly.WorkflowIncident(\"autoResolveIncident\", new Rootly.WorkflowIncidentArgs\n        {\n            Description = \"After an incident has been inactive for 24 hrs, automatically mark it as resolved.\",\n            TriggerParams = new Rootly.Inputs.WorkflowIncidentTriggerParamsArgs\n            {\n                Triggers = \n                {\n                    \"incident_created\",\n                },\n                Wait = \"24 hours\",\n                IncidentStatuses = \n                {\n                    \"resolved\",\n                    \"mitigated\",\n                },\n                IncidentConditionStatus = \"ANY\",\n            },\n            Enabled = true,\n        });\n        var updateStatus = new Rootly.WorkflowTaskUpdateStatus(\"updateStatus\", new Rootly.WorkflowTaskUpdateStatusArgs\n        {\n            WorkflowId = autoResolveIncident.Id,\n            SkipOnFailure = false,\n            Enabled = true,\n            TaskParams = new Rootly.Inputs.WorkflowTaskUpdateStatusTaskParamsArgs\n            {\n                Status = \"resolved\",\n                Message = \"Automatically marked as resolved due to inactivity\",\n            },\n        });\n    }\n\n}\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tautoResolveIncident, err := rootly.NewWorkflowIncident(ctx, \"autoResolveIncident\", \u0026rootly.WorkflowIncidentArgs{\n\t\t\tDescription: pulumi.String(\"After an incident has been inactive for 24 hrs, automatically mark it as resolved.\"),\n\t\t\tTriggerParams: \u0026WorkflowIncidentTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"incident_created\"),\n\t\t\t\t},\n\t\t\t\tWait: \"24 hours\",\n\t\t\t\tIncidentStatuses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"resolved\"),\n\t\t\t\t\tpulumi.String(\"mitigated\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionStatus: pulumi.String(\"ANY\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewWorkflowTaskUpdateStatus(ctx, \"updateStatus\", \u0026rootly.WorkflowTaskUpdateStatusArgs{\n\t\t\tWorkflowId:    autoResolveIncident.ID(),\n\t\t\tSkipOnFailure: pulumi.Bool(false),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tTaskParams: \u0026WorkflowTaskUpdateStatusTaskParamsArgs{\n\t\t\t\tStatus:  pulumi.String(\"resolved\"),\n\t\t\t\tMessage: \"Automatically marked as resolved due to inactivity\",\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateStatusTaskParams:WorkflowTaskUpdateStatusTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateStatusTaskParams:WorkflowTaskUpdateStatusTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateStatus resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateStatusTaskParams:WorkflowTaskUpdateStatusTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateTrelloCard:WorkflowTaskUpdateTrelloCard": {
            "description": "Manages workflow update_trello_card task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateTrelloCardTaskParams:WorkflowTaskUpdateTrelloCardTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateTrelloCardTaskParams:WorkflowTaskUpdateTrelloCardTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateTrelloCard resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateTrelloCardTaskParams:WorkflowTaskUpdateTrelloCardTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateVictorOpsIncident:WorkflowTaskUpdateVictorOpsIncident": {
            "description": "Manages workflow update_victor_ops_incident task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateVictorOpsIncidentTaskParams:WorkflowTaskUpdateVictorOpsIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateVictorOpsIncidentTaskParams:WorkflowTaskUpdateVictorOpsIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateVictorOpsIncident resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateVictorOpsIncidentTaskParams:WorkflowTaskUpdateVictorOpsIncidentTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateZendeskTicket:WorkflowTaskUpdateZendeskTicket": {
            "description": "Manages workflow update_zendesk_ticket task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateZendeskTicketTaskParams:WorkflowTaskUpdateZendeskTicketTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateZendeskTicketTaskParams:WorkflowTaskUpdateZendeskTicketTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateZendeskTicket resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateZendeskTicketTaskParams:WorkflowTaskUpdateZendeskTicketTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "rootly:index/getCause:getCause": {
            "inputs": {
                "description": "A collection of arguments for invoking getCause.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCause.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getCauses:getCauses": {
            "inputs": {
                "description": "A collection of arguments for invoking getCauses.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCauses.\n",
                "properties": {
                    "causes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getCausesCause:getCausesCause"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "causes",
                    "id"
                ]
            }
        },
        "rootly:index/getCustomField:getCustomField": {
            "description": "DEPRECATED: Please use `form_field` data source instead.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomField.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCustomField.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "kind",
                    "label",
                    "slug"
                ]
            }
        },
        "rootly:index/getCustomFieldOption:getCustomFieldOption": {
            "description": "DEPRECATED: Please use `form_field` and `form_field_option` data sources instead.\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFieldOption.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFieldOption.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "id",
                    "value"
                ]
            }
        },
        "rootly:index/getCustomFieldOptions:getCustomFieldOptions": {
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFieldOptions.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "customFieldId": {
                        "type": "integer"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "customFieldId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFieldOptions.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "customFieldId": {
                        "type": "integer"
                    },
                    "customFieldOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getCustomFieldOptionsCustomFieldOption:getCustomFieldOptionsCustomFieldOption"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "customFieldId",
                    "customFieldOptions",
                    "id"
                ]
            }
        },
        "rootly:index/getCustomFields:getCustomFields": {
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFields.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFields.\n",
                "properties": {
                    "customFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getCustomFieldsCustomField:getCustomFieldsCustomField"
                        }
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "customFields",
                    "id"
                ]
            }
        },
        "rootly:index/getEnvironment:getEnvironment": {
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironment.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironment.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getEnvironments:getEnvironments": {
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironments.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironments.\n",
                "properties": {
                    "environments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getEnvironmentsEnvironment:getEnvironmentsEnvironment"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "environments",
                    "id"
                ]
            }
        },
        "rootly:index/getFormField:getFormField": {
            "inputs": {
                "description": "A collection of arguments for invoking getFormField.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFormField.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "kind",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getFormFieldOption:getFormFieldOption": {
            "inputs": {
                "description": "A collection of arguments for invoking getFormFieldOption.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFormFieldOption.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "id",
                    "value"
                ]
            }
        },
        "rootly:index/getFormFieldPosition:getFormFieldPosition": {
            "inputs": {
                "description": "A collection of arguments for invoking getFormFieldPosition.\n",
                "properties": {
                    "form": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFormFieldPosition.\n",
                "properties": {
                    "form": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "form",
                    "id"
                ]
            }
        },
        "rootly:index/getFunctionalities:getFunctionalities": {
            "inputs": {
                "description": "A collection of arguments for invoking getFunctionalities.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "opsgenieId": {
                        "type": "string"
                    },
                    "pagerdutyId": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFunctionalities.\n",
                "properties": {
                    "functionalities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getFunctionalitiesFunctionality:getFunctionalitiesFunctionality"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "opsgenieId": {
                        "type": "string"
                    },
                    "pagerdutyId": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "functionalities",
                    "id"
                ]
            }
        },
        "rootly:index/getFunctionality:getFunctionality": {
            "inputs": {
                "description": "A collection of arguments for invoking getFunctionality.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFunctionality.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getIncidentRole:getIncidentRole": {
            "inputs": {
                "description": "A collection of arguments for invoking getIncidentRole.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIncidentRole.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getIncidentRoles:getIncidentRoles": {
            "inputs": {
                "description": "A collection of arguments for invoking getIncidentRoles.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIncidentRoles.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "incidentRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getIncidentRolesIncidentRole:getIncidentRolesIncidentRole"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "incidentRoles",
                    "id"
                ]
            }
        },
        "rootly:index/getIncidentType:getIncidentType": {
            "inputs": {
                "description": "A collection of arguments for invoking getIncidentType.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIncidentType.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getIncidentTypes:getIncidentTypes": {
            "inputs": {
                "description": "A collection of arguments for invoking getIncidentTypes.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIncidentTypes.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "incidentTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getIncidentTypesIncidentType:getIncidentTypesIncidentType"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "incidentTypes",
                    "id"
                ]
            }
        },
        "rootly:index/getService:getService": {
            "inputs": {
                "description": "A collection of arguments for invoking getService.\n",
                "properties": {
                    "backstageId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getService.\n",
                "properties": {
                    "backstageId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "backstageId",
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getServices:getServices": {
            "inputs": {
                "description": "A collection of arguments for invoking getServices.\n",
                "properties": {
                    "backstageId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "opsgenieId": {
                        "type": "string"
                    },
                    "pagerdutyId": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServices.\n",
                "properties": {
                    "backstageId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "opsgenieId": {
                        "type": "string"
                    },
                    "pagerdutyId": {
                        "type": "string"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getServicesService:getServicesService"
                        }
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "services",
                    "id"
                ]
            }
        },
        "rootly:index/getSeverities:getSeverities": {
            "inputs": {
                "description": "A collection of arguments for invoking getSeverities.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSeverities.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "severities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getSeveritiesSeverity:getSeveritiesSeverity"
                        }
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "severities",
                    "id"
                ]
            }
        },
        "rootly:index/getSeverity:getSeverity": {
            "inputs": {
                "description": "A collection of arguments for invoking getSeverity.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "severity": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSeverity.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "severity": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "id",
                    "name",
                    "severity",
                    "slug"
                ]
            }
        },
        "rootly:index/getTeam:getTeam": {
            "inputs": {
                "description": "A collection of arguments for invoking getTeam.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTeam.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        }
                    },
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getTeams:getTeams": {
            "inputs": {
                "description": "A collection of arguments for invoking getTeams.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTeams.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getTeamsTeam:getTeamsTeam"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "teams",
                    "id"
                ]
            }
        },
        "rootly:index/getWebhooksEndpoint:getWebhooksEndpoint": {
            "inputs": {
                "description": "A collection of arguments for invoking getWebhooksEndpoint.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getWebhooksEndpoint.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getWorkflow:getWorkflow": {
            "inputs": {
                "description": "A collection of arguments for invoking getWorkflow.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getWorkflow.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getWorkflowGroup:getWorkflowGroup": {
            "inputs": {
                "description": "A collection of arguments for invoking getWorkflowGroup.\n",
                "properties": {
                    "expanded": {
                        "type": "boolean"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "position": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getWorkflowGroup.\n",
                "properties": {
                    "expanded": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "position": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "expanded",
                    "id",
                    "kind",
                    "name",
                    "position",
                    "slug"
                ]
            }
        },
        "rootly:index/getWorkflowTask:getWorkflowTask": {
            "inputs": {
                "description": "A collection of arguments for invoking getWorkflowTask.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "workflowId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "workflowId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getWorkflowTask.\n",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "workflowId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "slug",
                    "workflowId"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "compatibility": "tfbridge20",
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "3.*"
            }
        },
        "go": {
            "generateExtraInputTypes": true,
            "generateResourceContainerTypes": true,
            "importBasePath": "github.com/pulumi/pulumi-rootly/sdk/go/rootly"
        },
        "nodejs": {
            "compatibility": "tfbridge20",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing Rootly cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/rootlyhq/terraform-provider-rootly)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-rootly` repo](https://github.com/pulumi/pulumi-rootly/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`rootlyhq/terraform-provider-rootly` repo](https://github.com/rootlyhq/terraform-provider-rootly/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "compatibility": "tfbridge20",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/rootlyhq/terraform-provider-rootly)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-rootly` repo](https://github.com/pulumi/pulumi-rootly/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`rootlyhq/terraform-provider-rootly` repo](https://github.com/rootlyhq/terraform-provider-rootly/issues).",
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            }
        }
    }
}