{
    "name": "rootly",
    "displayName": "Rootly",
    "description": "A Pulumi package for creating and managing Rootly cloud resources.",
    "keywords": [
        "pulumi",
        "rootly",
        "category/cloud"
    ],
    "homepage": "https://rootly.com",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`rootly` Terraform Provider](https://github.com/rootlyhq/terraform-provider-rootly).",
    "repository": "https://github.com/rootlyhq/pulumi-rootly",
    "logoUrl": "https://raw.githubusercontent.com/rootlyhq/pulumi-rootly/v0.0.3/rootly.svg",
    "pluginDownloadURL": "https://github.com/rootlyhq/pulumi-rootly/releases/v${VERSION}",
    "publisher": "Rootly",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "language": {
        "csharp": {
            "packageReferences": {
                "Pulumi": "3.*"
            },
            "compatibility": "tfbridge20"
        },
        "go": {
            "importBasePath": "github.com/pulumi/pulumi-rootly/sdk/go/rootly",
            "generateResourceContainerTypes": true,
            "generateExtraInputTypes": true
        },
        "nodejs": {
            "packageDescription": "A Pulumi package for creating and managing Rootly cloud resources.",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/rootlyhq/terraform-provider-rootly)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-rootly` repo](https://github.com/rootlyhq/pulumi-rootly/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-rootly` repo](https://github.com/rootlyhq/terraform-provider-rootly/issues).",
            "dependencies": {
                "@pulumi/pulumi": "^3.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^10.0.0"
            },
            "compatibility": "tfbridge20",
            "disableUnionOutputTypes": true
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=3.0.0,\u003c4.0.0"
            },
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/rootlyhq/terraform-provider-rootly)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi-rootly` repo](https://github.com/rootlyhq/pulumi-rootly/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-provider-rootly` repo](https://github.com/rootlyhq/terraform-provider-rootly/issues).",
            "compatibility": "tfbridge20",
            "pyproject": {}
        }
    },
    "config": {
        "variables": {
            "apiHost": {
                "type": "string",
                "description": "The Rootly API host. Defaults to https://api.rootly.com. Can also be sourced from the ROOTLY_API_URL environment\nvariable.\n"
            },
            "apiToken": {
                "type": "string",
                "description": "The Rootly API Token. Generate it from your account at https://rootly.com/account. It must be provided but can also be\nsourced from the ROOTLY_API_TOKEN environment variable.\n",
                "secret": true
            }
        }
    },
    "types": {
        "rootly:index/DashboardPanelParams:DashboardPanelParams": {
            "properties": {
                "datasets": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/DashboardPanelParamsDataset:DashboardPanelParamsDataset"
                    }
                },
                "display": {
                    "type": "string"
                },
                "legend": {
                    "$ref": "#/types/rootly:index/DashboardPanelParamsLegend:DashboardPanelParamsLegend"
                }
            },
            "type": "object",
            "required": [
                "display"
            ]
        },
        "rootly:index/DashboardPanelParamsDataset:DashboardPanelParamsDataset": {
            "properties": {
                "aggregate": {
                    "$ref": "#/types/rootly:index/DashboardPanelParamsDatasetAggregate:DashboardPanelParamsDatasetAggregate"
                },
                "collection": {
                    "type": "string"
                },
                "filters": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/DashboardPanelParamsDatasetFilter:DashboardPanelParamsDatasetFilter"
                    }
                },
                "groupBy": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "collection"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "collection",
                        "groupBy",
                        "name"
                    ]
                }
            }
        },
        "rootly:index/DashboardPanelParamsDatasetAggregate:DashboardPanelParamsDatasetAggregate": {
            "properties": {
                "cumulative": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "operation": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "cumulative",
                "key",
                "operation"
            ]
        },
        "rootly:index/DashboardPanelParamsDatasetFilter:DashboardPanelParamsDatasetFilter": {
            "properties": {
                "operation": {
                    "type": "string"
                },
                "rules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/DashboardPanelParamsDatasetFilterRule:DashboardPanelParamsDatasetFilterRule"
                    }
                }
            },
            "type": "object",
            "required": [
                "operation"
            ]
        },
        "rootly:index/DashboardPanelParamsDatasetFilterRule:DashboardPanelParamsDatasetFilterRule": {
            "properties": {
                "condition": {
                    "type": "string"
                },
                "key": {
                    "type": "string"
                },
                "operation": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "condition",
                "key",
                "operation",
                "value"
            ]
        },
        "rootly:index/DashboardPanelParamsLegend:DashboardPanelParamsLegend": {
            "properties": {
                "groups": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "groups"
            ]
        },
        "rootly:index/DashboardPanelPosition:DashboardPanelPosition": {
            "properties": {
                "h": {
                    "type": "integer"
                },
                "w": {
                    "type": "integer"
                },
                "x": {
                    "type": "integer"
                },
                "y": {
                    "type": "integer"
                }
            },
            "type": "object",
            "required": [
                "h",
                "w",
                "x",
                "y"
            ]
        },
        "rootly:index/EnvironmentSlackAlias:EnvironmentSlackAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/EnvironmentSlackChannel:EnvironmentSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/FunctionalitySlackAlias:FunctionalitySlackAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/FunctionalitySlackChannel:FunctionalitySlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/IncidentTypeSlackAlias:IncidentTypeSlackAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/IncidentTypeSlackChannel:IncidentTypeSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/RetrospectiveProcessRetrospectiveProcessMatchingCriteria:RetrospectiveProcessRetrospectiveProcessMatchingCriteria": {
            "properties": {
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Teams for process matching criteria.\n"
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Incident types for process matching criteria.\n"
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Severities for process matching criteria.\n"
                }
            },
            "type": "object"
        },
        "rootly:index/ServiceSlackAlias:ServiceSlackAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/ServiceSlackChannel:ServiceSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/SeveritySlackAlias:SeveritySlackAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/SeveritySlackChannel:SeveritySlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/TeamSlackAlias:TeamSlackAlias": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/TeamSlackChannel:TeamSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowActionItemTriggerParams:WorkflowActionItemTriggerParams": {
            "properties": {
                "incidentActionItemCondition": {
                    "type": "string",
                    "description": "Value must be one off `ALL`, `ANY`, `NONE`.\n"
                },
                "incidentActionItemConditionGroup": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentActionItemConditionKind": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentActionItemConditionPriority": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentActionItemConditionStatus": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentActionItemGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentActionItemKinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `task`, `follow_up`.\n"
                },
                "incidentActionItemPriorities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `high`, `medium`, `low`.\n"
                },
                "incidentActionItemStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `open`, `in_progress`, `cancelled`, `done`.\n"
                },
                "incidentCondition": {
                    "type": "string",
                    "description": "Value must be one off `ALL`, `ANY`, `NONE`.\n"
                },
                "incidentConditionAcknowledgedAt": {
                    "type": "string"
                },
                "incidentConditionDetectedAt": {
                    "type": "string"
                },
                "incidentConditionEnvironment": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionFunctionality": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionGroup": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionIncidentRoles": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionIncidentType": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionKind": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionMitigatedAt": {
                    "type": "string"
                },
                "incidentConditionResolvedAt": {
                    "type": "string"
                },
                "incidentConditionService": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionSeverity": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionStartedAt": {
                    "type": "string"
                },
                "incidentConditionStatus": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionSummary": {
                    "type": "string"
                },
                "incidentConditionVisibility": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionalInactivity": {
                    "type": "string"
                },
                "incidentInactivityDuration": {
                    "type": "string",
                    "description": "ex. 10 min, 1h, 3 days, 2 weeks\n"
                },
                "incidentKinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `test`, `test_sub`, `example`, `example_sub`, `normal`, `normal_sub`, `backfilled`, `scheduled`.\n"
                },
                "incidentStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `in_triage`, `started`, `detected`, `acknowledged`, `mitigated`, `resolved`, `cancelled`, `scheduled`, `in_progress`, `completed`.\n"
                },
                "incidentVisibilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "triggerType": {
                    "type": "string",
                    "description": "Value must be one off `action_item`.\n"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Actions that trigger the workflow. One of custom*fields.\\n\\n.updated, incident*updated, action*item*created, action*item*updated, assigned*user*updated, summary*updated, description*updated, status*updated, priority*updated, due*date*updated, teams*updated, slack*command\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "incidentActionItemGroupIds",
                        "incidentActionItemKinds",
                        "incidentActionItemPriorities",
                        "incidentActionItemStatuses",
                        "incidentConditionAcknowledgedAt",
                        "incidentConditionDetectedAt",
                        "incidentConditionMitigatedAt",
                        "incidentConditionResolvedAt",
                        "incidentConditionStartedAt",
                        "incidentConditionSummary",
                        "incidentConditionalInactivity",
                        "incidentInactivityDuration",
                        "incidentKinds",
                        "incidentStatuses",
                        "incidentVisibilities",
                        "triggers"
                    ]
                }
            }
        },
        "rootly:index/WorkflowAlertTriggerParams:WorkflowAlertTriggerParams": {
            "properties": {
                "alertCondition": {
                    "type": "string",
                    "description": "Value must be one off `ALL`, `ANY`, `NONE`.\n"
                },
                "alertConditionLabel": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "alertConditionLabelUseRegexp": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "alertConditionPayload": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "alertConditionPayloadUseRegexp": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "alertConditionSource": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "alertConditionSourceUseRegexp": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "alertLabels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "alertPayloads": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "alertQueryPayload": {
                    "type": "string",
                    "description": "You can use jsonpath syntax. eg: $.incident.teams[*]\n"
                },
                "alertSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "triggerType": {
                    "type": "string",
                    "description": "Value must be one off `alert`.\n"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Actions that trigger the workflow. Value must be one of `alert_created`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "alertConditionLabelUseRegexp",
                        "alertConditionPayloadUseRegexp",
                        "alertConditionSourceUseRegexp",
                        "alertLabels",
                        "alertPayloads",
                        "alertQueryPayload",
                        "alertSources",
                        "triggers"
                    ]
                }
            }
        },
        "rootly:index/WorkflowIncidentTriggerParams:WorkflowIncidentTriggerParams": {
            "properties": {
                "incidentCondition": {
                    "type": "string",
                    "description": "Value must be one off `ALL`, `ANY`, `NONE`.\n"
                },
                "incidentConditionAcknowledgedAt": {
                    "type": "string"
                },
                "incidentConditionCause": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionDetectedAt": {
                    "type": "string"
                },
                "incidentConditionEnvironment": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionFunctionality": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionGroup": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionIncidentRoles": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionIncidentType": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionKind": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionMitigatedAt": {
                    "type": "string"
                },
                "incidentConditionResolvedAt": {
                    "type": "string"
                },
                "incidentConditionService": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionSeverity": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionStartedAt": {
                    "type": "string"
                },
                "incidentConditionStatus": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionSummary": {
                    "type": "string"
                },
                "incidentConditionVisibility": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionalInactivity": {
                    "type": "string"
                },
                "incidentInactivityDuration": {
                    "type": "string",
                    "description": "ex. 10 min, 1h, 3 days, 2 weeks\n"
                },
                "incidentKinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `test`, `test_sub`, `example`, `example_sub`, `normal`, `normal_sub`, `backfilled`, `scheduled`.\n"
                },
                "incidentPostMortemConditionCause": {
                    "type": "string",
                    "description": "[DEPRECATED] Use incident*condition*cause instead. Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `in_triage`, `started`, `detected`, `acknowledged`, `mitigated`, `resolved`, `cancelled`, `scheduled`, `in_progress`, `completed`.\n"
                },
                "incidentVisibilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "triggerType": {
                    "type": "string",
                    "description": "Value must be one off `incident`.\n"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Actions that trigger the workflow. One of custom*fields.\\n\\n.updated, incident*in*triage, incident*created, incident*started, incident*updated, title*updated, summary*updated, status*updated, severity*updated, environments*added, environments*removed, environments*updated, incident*types*added, incident*types*removed, incident*types*updated, services*added, services*removed, services*updated, functionalities*added, functionalities*removed, functionalities*updated, teams*added, teams*removed, teams*updated, causes*added, causes*removed, causes*updated, timeline*updated, status*page*timeline*updated, role*assignments*updated, role*assignments*added, role*assignments*removed, slack*command, slack*channel*created, slack*channel*converted, subscribers*updated, subscribers*added, subscribers*removed, user*joined*slack*channel, user*left*slack_channel\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "incidentConditionAcknowledgedAt",
                        "incidentConditionDetectedAt",
                        "incidentConditionMitigatedAt",
                        "incidentConditionResolvedAt",
                        "incidentConditionStartedAt",
                        "incidentConditionSummary",
                        "incidentConditionalInactivity",
                        "incidentInactivityDuration",
                        "incidentKinds",
                        "incidentStatuses",
                        "incidentVisibilities",
                        "triggers"
                    ]
                }
            }
        },
        "rootly:index/WorkflowPostMortemTriggerParams:WorkflowPostMortemTriggerParams": {
            "properties": {
                "incidentCondition": {
                    "type": "string",
                    "description": "Value must be one off `ALL`, `ANY`, `NONE`.\n"
                },
                "incidentConditionAcknowledgedAt": {
                    "type": "string"
                },
                "incidentConditionCause": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionDetectedAt": {
                    "type": "string"
                },
                "incidentConditionEnvironment": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionFunctionality": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionGroup": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionIncidentRoles": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionIncidentType": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionKind": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionMitigatedAt": {
                    "type": "string"
                },
                "incidentConditionResolvedAt": {
                    "type": "string"
                },
                "incidentConditionService": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionSeverity": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionStartedAt": {
                    "type": "string"
                },
                "incidentConditionStatus": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionSummary": {
                    "type": "string"
                },
                "incidentConditionVisibility": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentConditionalInactivity": {
                    "type": "string"
                },
                "incidentInactivityDuration": {
                    "type": "string",
                    "description": "ex. 10 min, 1h, 3 days, 2 weeks\n"
                },
                "incidentKinds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `test`, `test_sub`, `example`, `example_sub`, `normal`, `normal_sub`, `backfilled`, `scheduled`.\n"
                },
                "incidentPostMortemCondition": {
                    "type": "string",
                    "description": "Value must be one off `ALL`, `ANY`, `NONE`.\n"
                },
                "incidentPostMortemConditionCause": {
                    "type": "string",
                    "description": "[DEPRECATED] Use incident*condition*cause instead. Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentPostMortemConditionStatus": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "incidentPostMortemStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `draft`, `published`.\n"
                },
                "incidentStatuses": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `in_triage`, `started`, `detected`, `acknowledged`, `mitigated`, `resolved`, `cancelled`, `scheduled`, `in_progress`, `completed`.\n"
                },
                "incidentVisibilities": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "triggerType": {
                    "type": "string",
                    "description": "Value must be one off `post_mortem`.\n"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Actions that trigger the workflow. One of custom*fields.\\n\\n.updated, post*mortem*created, post*mortem*updated, status*updated, slack_command\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "incidentConditionAcknowledgedAt",
                        "incidentConditionDetectedAt",
                        "incidentConditionMitigatedAt",
                        "incidentConditionResolvedAt",
                        "incidentConditionStartedAt",
                        "incidentConditionSummary",
                        "incidentConditionalInactivity",
                        "incidentInactivityDuration",
                        "incidentKinds",
                        "incidentPostMortemStatuses",
                        "incidentStatuses",
                        "incidentVisibilities",
                        "triggers"
                    ]
                }
            }
        },
        "rootly:index/WorkflowPulseTriggerParams:WorkflowPulseTriggerParams": {
            "properties": {
                "pulseCondition": {
                    "type": "string",
                    "description": "Value must be one off `ALL`, `ANY`, `NONE`.\n"
                },
                "pulseConditionLabel": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "pulseConditionLabelUseRegexp": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "pulseConditionPayload": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "pulseConditionPayloadUseRegexp": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "pulseConditionSource": {
                    "type": "string",
                    "description": "Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "pulseConditionSourceUseRegexp": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "pulseLabels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pulsePayloads": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pulseQueryPayload": {
                    "type": "string",
                    "description": "You can use jsonpath syntax. eg: $.incident.teams[*]\n"
                },
                "pulseSources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "triggerType": {
                    "type": "string",
                    "description": "Value must be one off `pulse`.\n"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Actions that trigger the workflow. Value must be one of `pulse_created`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "pulseConditionLabelUseRegexp",
                        "pulseConditionPayloadUseRegexp",
                        "pulseConditionSourceUseRegexp",
                        "pulseLabels",
                        "pulsePayloads",
                        "pulseQueryPayload",
                        "pulseSources",
                        "triggers"
                    ]
                }
            }
        },
        "rootly:index/WorkflowSimpleTriggerParams:WorkflowSimpleTriggerParams": {
            "properties": {
                "triggerType": {
                    "type": "string",
                    "description": "Value must be one off `simple`.\n"
                },
                "triggers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Actions that trigger the workflow. Value must be one of `slack_command`.\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "triggers"
                    ]
                }
            }
        },
        "rootly:index/WorkflowTaskAddActionItemTaskParams:WorkflowTaskAddActionItemTaskParams": {
            "properties": {
                "assignedToUser": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.  The user this action item is assigned to\n"
                },
                "assignedToUserId": {
                    "type": "string",
                    "description": "[DEPRECATED] Use assigned*to*user attribute instead. The user id this action item is assigned to\n"
                },
                "description": {
                    "type": "string",
                    "description": "The action item description\n"
                },
                "incidentRoleId": {
                    "type": "string",
                    "description": "The role id this action item is associated with\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The action item kind\n"
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAddActionItemTaskParamsPostToSlackChannel:WorkflowTaskAddActionItemTaskParamsPostToSlackChannel"
                    }
                },
                "priority": {
                    "type": "string",
                    "description": "The action item priority. Value must be one of `high`, `medium`, `low`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "The action item status. Value must be one of `open`, `in_progress`, `cancelled`, `done`.\n"
                },
                "summary": {
                    "type": "string",
                    "description": "The action item summary\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "priority",
                "status",
                "summary"
            ]
        },
        "rootly:index/WorkflowTaskAddActionItemTaskParamsPostToSlackChannel:WorkflowTaskAddActionItemTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskAddRoleTaskParams:WorkflowTaskAddRoleTaskParams": {
            "properties": {
                "assignedToUser": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.  The user this role is assigned to\n"
                },
                "assignedToUserId": {
                    "type": "string",
                    "description": "[DEPRECATED] Use assigned*to*user attribute instead. The user id this role is assigned to\n"
                },
                "incidentRoleId": {
                    "type": "string",
                    "description": "The role id to add to the incident\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "incidentRoleId"
            ]
        },
        "rootly:index/WorkflowTaskAddSlackBookmarkTaskParams:WorkflowTaskAddSlackBookmarkTaskParams": {
            "properties": {
                "channel": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "emoji": {
                    "type": "string",
                    "description": "The bookmark emoji\n"
                },
                "link": {
                    "type": "string",
                    "description": "The bookmark link. Required if not a playbook bookmark\n"
                },
                "playbookId": {
                    "type": "string",
                    "description": "The playbook id if bookmark is of an incident playbook\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The bookmark title. Required if not a playbook bookmark\n"
                }
            },
            "type": "object",
            "required": [
                "channel"
            ]
        },
        "rootly:index/WorkflowTaskAddTeamTaskParams:WorkflowTaskAddTeamTaskParams": {
            "properties": {
                "groupId": {
                    "type": "string",
                    "description": "The team id\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "groupId"
            ]
        },
        "rootly:index/WorkflowTaskAddToTimelineTaskParams:WorkflowTaskAddToTimelineTaskParams": {
            "properties": {
                "event": {
                    "type": "string",
                    "description": "The timeline event description\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAddToTimelineTaskParamsPostToSlackChannel:WorkflowTaskAddToTimelineTaskParamsPostToSlackChannel"
                    }
                },
                "taskType": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "A URL for the timeline event\n"
                }
            },
            "type": "object",
            "required": [
                "event"
            ]
        },
        "rootly:index/WorkflowTaskAddToTimelineTaskParamsPostToSlackChannel:WorkflowTaskAddToTimelineTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskArchiveSlackChannelsTaskParams:WorkflowTaskArchiveSlackChannelsTaskParams": {
            "properties": {
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskArchiveSlackChannelsTaskParamsChannel:WorkflowTaskArchiveSlackChannelsTaskParamsChannel"
                    }
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "channels"
            ]
        },
        "rootly:index/WorkflowTaskArchiveSlackChannelsTaskParamsChannel:WorkflowTaskArchiveSlackChannelsTaskParamsChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskAttachDatadogDashboardsTaskParams:WorkflowTaskAttachDatadogDashboardsTaskParams": {
            "properties": {
                "dashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAttachDatadogDashboardsTaskParamsDashboard:WorkflowTaskAttachDatadogDashboardsTaskParamsDashboard"
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAttachDatadogDashboardsTaskParamsPostToSlackChannel:WorkflowTaskAttachDatadogDashboardsTaskParamsPostToSlackChannel"
                    }
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dashboards"
            ]
        },
        "rootly:index/WorkflowTaskAttachDatadogDashboardsTaskParamsDashboard:WorkflowTaskAttachDatadogDashboardsTaskParamsDashboard": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskAttachDatadogDashboardsTaskParamsPostToSlackChannel:WorkflowTaskAttachDatadogDashboardsTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskAutoAssignRoleOpsgenieTaskParams:WorkflowTaskAutoAssignRoleOpsgenieTaskParams": {
            "properties": {
                "incidentRoleId": {
                    "type": "string",
                    "description": "The role id\n"
                },
                "schedule": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "incidentRoleId",
                "schedule"
            ]
        },
        "rootly:index/WorkflowTaskAutoAssignRolePagerdutyTaskParams:WorkflowTaskAutoAssignRolePagerdutyTaskParams": {
            "properties": {
                "escalationPolicy": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "incidentRoleId": {
                    "type": "string",
                    "description": "The role id\n"
                },
                "schedule": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "service": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "incidentRoleId"
            ]
        },
        "rootly:index/WorkflowTaskAutoAssignRoleVictorOpsTaskParams:WorkflowTaskAutoAssignRoleVictorOpsTaskParams": {
            "properties": {
                "incidentRoleId": {
                    "type": "string",
                    "description": "The role id\n"
                },
                "taskType": {
                    "type": "string"
                },
                "team": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                }
            },
            "type": "object",
            "required": [
                "incidentRoleId",
                "team"
            ]
        },
        "rootly:index/WorkflowTaskCallPeopleTaskParams:WorkflowTaskCallPeopleTaskParams": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The message to be read by text-to-voice\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name\n"
                },
                "phoneNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "content",
                "name",
                "phoneNumbers"
            ]
        },
        "rootly:index/WorkflowTaskChangeSlackChannelPrivacyTaskParams:WorkflowTaskChangeSlackChannelPrivacyTaskParams": {
            "properties": {
                "channel": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "privacy": {
                    "type": "string",
                    "description": "Value must be one of `private`, `public`.\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "privacy"
            ]
        },
        "rootly:index/WorkflowTaskCreateAirtableTableRecordTaskParams:WorkflowTaskCreateAirtableTableRecordTaskParams": {
            "properties": {
                "base": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "customFieldsMapping": {
                    "type": "string",
                    "description": "Custom field mappings. Can contain liquid markup and need to be valid JSON\n"
                },
                "table": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "base",
                "table"
            ]
        },
        "rootly:index/WorkflowTaskCreateAsanaSubtaskTaskParams:WorkflowTaskCreateAsanaSubtaskTaskParams": {
            "properties": {
                "assignUserEmail": {
                    "type": "string",
                    "description": "The assigned user's email\n"
                },
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "customFieldsMapping": {
                    "type": "string",
                    "description": "Custom field mappings. Can contain liquid markup and need to be valid JSON\n"
                },
                "dependencyDirection": {
                    "type": "string",
                    "description": "Value must be one of `blocking`, `blocked_by`.\n"
                },
                "dependentTaskIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Dependent task ids. Supports liquid syntax\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The due date\n"
                },
                "notes": {
                    "type": "string"
                },
                "parentTaskId": {
                    "type": "string",
                    "description": "The parent task id\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The subtask title\n"
                }
            },
            "type": "object",
            "required": [
                "completion",
                "parentTaskId",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateAsanaTaskTaskParams:WorkflowTaskCreateAsanaTaskTaskParams": {
            "properties": {
                "assignUserEmail": {
                    "type": "string",
                    "description": "The assigned user's email\n"
                },
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "customFieldsMapping": {
                    "type": "string",
                    "description": "Custom field mappings. Can contain liquid markup and need to be valid JSON\n"
                },
                "dependencyDirection": {
                    "type": "string",
                    "description": "Value must be one of `blocking`, `blocked_by`.\n"
                },
                "dependentTaskIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Dependent task ids. Supports liquid syntax\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The due date\n"
                },
                "notes": {
                    "type": "string"
                },
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateAsanaTaskTaskParamsProject:WorkflowTaskCreateAsanaTaskTaskParamsProject"
                    }
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The task title\n"
                },
                "workspace": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                }
            },
            "type": "object",
            "required": [
                "completion",
                "projects",
                "title",
                "workspace"
            ]
        },
        "rootly:index/WorkflowTaskCreateAsanaTaskTaskParamsProject:WorkflowTaskCreateAsanaTaskTaskParamsProject": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateClickupTaskTaskParams:WorkflowTaskCreateClickupTaskTaskParams": {
            "properties": {
                "customFieldsMapping": {
                    "type": "string",
                    "description": "Custom field mappings. Can contain liquid markup and need to be valid JSON\n"
                },
                "description": {
                    "type": "string",
                    "description": "The task description\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The due date\n"
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The priority id and display name\n"
                },
                "tags": {
                    "type": "string",
                    "description": "The task tags\n"
                },
                "taskPayload": {
                    "type": "string",
                    "description": "Additional ClickUp task attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The task title\n"
                }
            },
            "type": "object",
            "required": [
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateConfluencePageTaskParams:WorkflowTaskCreateConfluencePageTaskParams": {
            "properties": {
                "ancestor": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "content": {
                    "type": "string",
                    "description": "The page content\n"
                },
                "integration": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. Specify integration id if you have more than one Confluence instance\n"
                },
                "markPostMortemAsPublished": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postMortemTemplateId": {
                    "type": "string",
                    "description": "The Retrospective template to use\n"
                },
                "space": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "taskType": {
                    "type": "string"
                },
                "template": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The page title\n"
                }
            },
            "type": "object",
            "required": [
                "space",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateDatadogNotebookTaskParams:WorkflowTaskCreateDatadogNotebookTaskParams": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The notebook content\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The notebook kind. Value must be one of `postmortem`, `runbook`, `investigation`, `documentation`, `report`.\n"
                },
                "markPostMortemAsPublished": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postMortemTemplateId": {
                    "type": "string",
                    "description": "Retrospective template to use when creating notebook, if desired\n"
                },
                "taskType": {
                    "type": "string"
                },
                "template": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The notebook title\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateDropboxPaperPageTaskParams:WorkflowTaskCreateDropboxPaperPageTaskParams": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The page content\n"
                },
                "markPostMortemAsPublished": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "namespace": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "parentFolder": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "postMortemTemplateId": {
                    "type": "string",
                    "description": "Retrospective template to use when creating page task, if desired\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The page task title\n"
                }
            },
            "type": "object",
            "required": [
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateGithubIssueTaskParams:WorkflowTaskCreateGithubIssueTaskParams": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The issue body\n"
                },
                "repository": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The issue title\n"
                }
            },
            "type": "object",
            "required": [
                "repository",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateGitlabIssueTaskParams:WorkflowTaskCreateGitlabIssueTaskParams": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The issue description\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The due date\n"
                },
                "issueType": {
                    "type": "string",
                    "description": "The issue type. Value must be one of `issue`, `incident`, `test_case`, `task`.\n"
                },
                "labels": {
                    "type": "string",
                    "description": "The issue labels\n"
                },
                "repository": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The issue title\n"
                }
            },
            "type": "object",
            "required": [
                "repository",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateGoToMeetingTaskParams:WorkflowTaskCreateGoToMeetingTaskParams": {
            "properties": {
                "conferenceCallInfo": {
                    "type": "string",
                    "description": "Value must be one of `ptsn`, `free`, `hyrid`, `voip`.\n"
                },
                "passwordRequired": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateGoToMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateGoToMeetingTaskParamsPostToSlackChannel"
                    }
                },
                "subject": {
                    "type": "string",
                    "description": "The meeting subject\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "subject"
            ]
        },
        "rootly:index/WorkflowTaskCreateGoToMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateGoToMeetingTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateGoogleCalendarEventTaskParams:WorkflowTaskCreateGoogleCalendarEventTaskParams": {
            "properties": {
                "attendees": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails of attendees\n"
                },
                "canGuestsInviteOthers": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "canGuestsModifyEvent": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "canGuestsSeeOtherGuests": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "conferenceSolutionKey": {
                    "type": "string",
                    "description": "Sets the video conference type attached to the meeting. Value must be one of `eventHangout`, `eventNamedHangout`, `hangoutsMeet`, `addOn`.\n"
                },
                "daysUntilMeeting": {
                    "type": "integer",
                    "description": "The days until meeting\n"
                },
                "description": {
                    "type": "string",
                    "description": "The event description\n"
                },
                "excludeWeekends": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "meetingDuration": {
                    "type": "string",
                    "description": "Meeting duration in format like '1 hour', '30 minutes'\n"
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleCalendarEventTaskParamsPostToSlackChannel:WorkflowTaskCreateGoogleCalendarEventTaskParamsPostToSlackChannel"
                    }
                },
                "sendUpdates": {
                    "type": "boolean",
                    "description": "Send an email to the attendees notifying them of the event. Value must be one of true or false\n"
                },
                "summary": {
                    "type": "string",
                    "description": "The event summary\n"
                },
                "taskType": {
                    "type": "string"
                },
                "timeOfMeeting": {
                    "type": "string",
                    "description": "Time of meeting in format HH:MM\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Value must be one of `International Date Line West`, `American Samoa`, `Midway Island`, `Hawaii`, `Alaska`, `Pacific Time (US \u0026 Canada)`, `Tijuana`, `Arizona`, `Mazatlan`, `Mountain Time (US \u0026 Canada)`, `Central America`, `Central Time (US \u0026 Canada)`, `Chihuahua`, `Guadalajara`, `Mexico City`, `Monterrey`, `Saskatchewan`, `Bogota`, `Eastern Time (US \u0026 Canada)`, `Indiana (East)`, `Lima`, `Quito`, `Atlantic Time (Canada)`, `Caracas`, `Georgetown`, `La Paz`, `Puerto Rico`, `Santiago`, `Newfoundland`, `Brasilia`, `Buenos Aires`, `Montevideo`, `Greenland`, `Mid-Atlantic`, `Azores`, `Cape Verde Is.`, `Edinburgh`, `Lisbon`, `London`, `Monrovia`, `UTC`, `Amsterdam`, `Belgrade`, `Berlin`, `Bern`, `Bratislava`, `Brussels`, `Budapest`, `Casablanca`, `Copenhagen`, `Dublin`, `Ljubljana`, `Madrid`, `Paris`, `Prague`, `Rome`, `Sarajevo`, `Skopje`, `Stockholm`, `Vienna`, `Warsaw`, `West Central Africa`, `Zagreb`, `Zurich`, `Athens`, `Bucharest`, `Cairo`, `Harare`, `Helsinki`, `Jerusalem`, `Kaliningrad`, `Kyiv`, `Pretoria`, `Riga`, `Sofia`, `Tallinn`, `Vilnius`, `Baghdad`, `Istanbul`, `Kuwait`, `Minsk`, `Moscow`, `Nairobi`, `Riyadh`, `St. Petersburg`, `Volgograd`, `Tehran`, `Abu Dhabi`, `Baku`, `Muscat`, `Samara`, `Tbilisi`, `Yerevan`, `Kabul`, `Almaty`, `Ekaterinburg`, `Islamabad`, `Karachi`, `Tashkent`, `Chennai`, `Kolkata`, `Mumbai`, `New Delhi`, `Sri Jayawardenepura`, `Kathmandu`, `Astana`, `Dhaka`, `Urumqi`, `Rangoon`, `Bangkok`, `Hanoi`, `Jakarta`, `Krasnoyarsk`, `Novosibirsk`, `Beijing`, `Chongqing`, `Hong Kong`, `Irkutsk`, `Kuala Lumpur`, `Perth`, `Singapore`, `Taipei`, `Ulaanbaatar`, `Osaka`, `Sapporo`, `Seoul`, `Tokyo`, `Yakutsk`, `Adelaide`, `Darwin`, `Brisbane`, `Canberra`, `Guam`, `Hobart`, `Melbourne`, `Port Moresby`, `Sydney`, `Vladivostok`, `Magadan`, `New Caledonia`, `Solomon Is.`, `Srednekolymsk`, `Auckland`, `Fiji`, `Kamchatka`, `Marshall Is.`, `Wellington`, `Chatham Is.`, `Nuku'alofa`, `Samoa`, `Tokelau Is.`.\n"
                }
            },
            "type": "object",
            "required": [
                "attendees",
                "daysUntilMeeting",
                "description",
                "meetingDuration",
                "summary",
                "timeOfMeeting"
            ]
        },
        "rootly:index/WorkflowTaskCreateGoogleCalendarEventTaskParamsPostToSlackChannel:WorkflowTaskCreateGoogleCalendarEventTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateGoogleDocsPageTaskParams:WorkflowTaskCreateGoogleDocsPageTaskParams": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The page content\n"
                },
                "drive": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "markPostMortemAsPublished": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "parentFolder": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "Page permissions JSON\n"
                },
                "postMortemTemplateId": {
                    "type": "string",
                    "description": "Retrospective template to use when creating page, if desired\n"
                },
                "taskType": {
                    "type": "string"
                },
                "templateId": {
                    "type": "string",
                    "description": "The Google Doc file ID to use as a template\n"
                },
                "title": {
                    "type": "string",
                    "description": "The page title\n"
                }
            },
            "type": "object",
            "required": [
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateGoogleDocsPermissionsTaskParams:WorkflowTaskCreateGoogleDocsPermissionsTaskParams": {
            "properties": {
                "emailMessage": {
                    "type": "string",
                    "description": "Email message notification\n"
                },
                "fileId": {
                    "type": "string",
                    "description": "The Google Doc file ID\n"
                },
                "permissions": {
                    "type": "string",
                    "description": "Page permissions JSON\n"
                },
                "sendNotificationEmail": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "fileId",
                "permissions"
            ]
        },
        "rootly:index/WorkflowTaskCreateGoogleMeetingTaskParams:WorkflowTaskCreateGoogleMeetingTaskParams": {
            "properties": {
                "conferenceSolutionKey": {
                    "type": "string",
                    "description": "Sets the video conference type attached to the meeting. Value must be one of `eventHangout`, `eventNamedHangout`, `hangoutsMeet`, `addOn`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The meeting description\n"
                },
                "inviteRootlyBot": {
                    "type": "boolean",
                    "description": "We will invite Rootly Bot to your call and make the transcript available to you. Value must be one of true or false\n"
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateGoogleMeetingTaskParamsPostToSlackChannel"
                    }
                },
                "summary": {
                    "type": "string",
                    "description": "The meeting summary\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "summary"
            ]
        },
        "rootly:index/WorkflowTaskCreateGoogleMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateGoogleMeetingTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateIncidentPostmortemTaskParams:WorkflowTaskCreateIncidentPostmortemTaskParams": {
            "properties": {
                "incidentId": {
                    "type": "string",
                    "description": "UUID of the incident that needs a retrospective\n"
                },
                "status": {
                    "type": "string"
                },
                "taskType": {
                    "type": "string"
                },
                "template": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. Retrospective template to use\n"
                },
                "title": {
                    "type": "string",
                    "description": "The retrospective title\n"
                }
            },
            "type": "object",
            "required": [
                "incidentId",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateIncidentTaskParams:WorkflowTaskCreateIncidentTaskParams": {
            "properties": {
                "customFieldsMapping": {
                    "type": "string",
                    "description": "Custom field mappings. Can contain liquid markup and need to be valid JSON\n"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "private": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityId": {
                    "type": "string"
                },
                "summary": {
                    "type": "string",
                    "description": "The incident summary\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The incident title\n"
                }
            },
            "type": "object",
            "required": [
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateJiraIssueTaskParams:WorkflowTaskCreateJiraIssueTaskParams": {
            "properties": {
                "assignUserEmail": {
                    "type": "string",
                    "description": "The assigned user's email\n"
                },
                "customFieldsMapping": {
                    "type": "string",
                    "description": "Custom field mappings. Can contain liquid markup and need to be valid JSON\n"
                },
                "description": {
                    "type": "string",
                    "description": "The issue description\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The due date\n"
                },
                "integration": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. Specify integration id if you have more than one Jira instance\n"
                },
                "issueType": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The issue type id and display name\n"
                },
                "labels": {
                    "type": "string",
                    "description": "The issue labels\n"
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The priority id and display name\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "The project key\n"
                },
                "reporterUserEmail": {
                    "type": "string",
                    "description": "The reporter user's email\n"
                },
                "status": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The status id and display name\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The issue title\n"
                },
                "updatePayload": {
                    "type": "string",
                    "description": "Update payload. Can contain liquid markup and need to be valid JSON\n"
                }
            },
            "type": "object",
            "required": [
                "issueType",
                "projectKey",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateJiraSubtaskTaskParams:WorkflowTaskCreateJiraSubtaskTaskParams": {
            "properties": {
                "assignUserEmail": {
                    "type": "string",
                    "description": "The assigned user's email\n"
                },
                "customFieldsMapping": {
                    "type": "string",
                    "description": "Custom field mappings. Can contain liquid markup and need to be valid JSON\n"
                },
                "description": {
                    "type": "string",
                    "description": "The issue description\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The due date\n"
                },
                "integration": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. Specify integration id if you have more than one Jira instance\n"
                },
                "labels": {
                    "type": "string",
                    "description": "The issue labels\n"
                },
                "parentIssueId": {
                    "type": "string",
                    "description": "The parent issue\n"
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The priority id and display name\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "The project key\n"
                },
                "reporterUserEmail": {
                    "type": "string",
                    "description": "The reporter user's email\n"
                },
                "status": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The status id and display name\n"
                },
                "subtaskIssueType": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The issue type id and display name\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The issue title\n"
                },
                "updatePayload": {
                    "type": "string",
                    "description": "Update payload. Can contain liquid markup and need to be valid JSON\n"
                }
            },
            "type": "object",
            "required": [
                "parentIssueId",
                "projectKey",
                "subtaskIssueType",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateLinearIssueCommentTaskParams:WorkflowTaskCreateLinearIssueCommentTaskParams": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The issue description\n"
                },
                "issueId": {
                    "type": "string",
                    "description": "The issue id\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "body",
                "issueId"
            ]
        },
        "rootly:index/WorkflowTaskCreateLinearIssueTaskParams:WorkflowTaskCreateLinearIssueTaskParams": {
            "properties": {
                "assignUserEmail": {
                    "type": "string",
                    "description": "The assigned user's email\n"
                },
                "description": {
                    "type": "string",
                    "description": "The issue description\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearIssueTaskParamsLabel:WorkflowTaskCreateLinearIssueTaskParamsLabel"
                    }
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The priority id and display name\n"
                },
                "project": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The project id and display name\n"
                },
                "state": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The state id and display name\n"
                },
                "taskType": {
                    "type": "string"
                },
                "team": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The team id and display name\n"
                },
                "title": {
                    "type": "string",
                    "description": "The issue title\n"
                }
            },
            "type": "object",
            "required": [
                "state",
                "team",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateLinearIssueTaskParamsLabel:WorkflowTaskCreateLinearIssueTaskParamsLabel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateLinearSubtaskIssueTaskParams:WorkflowTaskCreateLinearSubtaskIssueTaskParams": {
            "properties": {
                "assignUserEmail": {
                    "type": "string",
                    "description": "The assigned user's email\n"
                },
                "description": {
                    "type": "string",
                    "description": "The issue description\n"
                },
                "parentIssueId": {
                    "type": "string",
                    "description": "The parent issue\n"
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The priority id and display name\n"
                },
                "state": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The state id and display name\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The issue title\n"
                }
            },
            "type": "object",
            "required": [
                "parentIssueId",
                "state",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateMicrosoftTeamsMeetingTaskParams:WorkflowTaskCreateMicrosoftTeamsMeetingTaskParams": {
            "properties": {
                "inviteRootlyBot": {
                    "type": "boolean",
                    "description": "We will invite Rootly Bot to your call and make the transcript available to you. Value must be one of true or false\n"
                },
                "name": {
                    "type": "string",
                    "description": "The meeting name\n"
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsPostToSlackChannel"
                    }
                },
                "subject": {
                    "type": "string",
                    "description": "The meeting subject\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "name",
                "subject"
            ]
        },
        "rootly:index/WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string",
                    "description": "The meeting name\n"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateNotionPageTaskParams:WorkflowTaskCreateNotionPageTaskParams": {
            "properties": {
                "markPostMortemAsPublished": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "parentPage": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The parent page id and display name\n"
                },
                "postMortemTemplateId": {
                    "type": "string",
                    "description": "Retrospective template to use when creating page task, if desired\n"
                },
                "showActionItemsAsTable": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "showTimelineAsTable": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The Notion page title\n"
                }
            },
            "type": "object",
            "required": [
                "parentPage",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParams:WorkflowTaskCreateOpsgenieAlertTaskParams": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description field of the alert that is generally used to provide a detailed information about the alert\n"
                },
                "escalations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParamsEscalation:WorkflowTaskCreateOpsgenieAlertTaskParamsEscalation"
                    }
                },
                "message": {
                    "type": "string",
                    "description": "Message of the alert\n"
                },
                "priority": {
                    "type": "string",
                    "description": "Value must be one of `P1`, `P2`, `P3`, `P4`, `P5`, `auto`.\n"
                },
                "schedules": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParamsSchedule:WorkflowTaskCreateOpsgenieAlertTaskParamsSchedule"
                    }
                },
                "taskType": {
                    "type": "string"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParamsTeam:WorkflowTaskCreateOpsgenieAlertTaskParamsTeam"
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParamsUser:WorkflowTaskCreateOpsgenieAlertTaskParamsUser"
                    }
                }
            },
            "type": "object",
            "required": [
                "message"
            ]
        },
        "rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParamsEscalation:WorkflowTaskCreateOpsgenieAlertTaskParamsEscalation": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParamsSchedule:WorkflowTaskCreateOpsgenieAlertTaskParamsSchedule": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParamsTeam:WorkflowTaskCreateOpsgenieAlertTaskParamsTeam": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParamsUser:WorkflowTaskCreateOpsgenieAlertTaskParamsUser": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreatePagertreeAlertTaskParams:WorkflowTaskCreatePagertreeAlertTaskParams": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of alert as text\n"
                },
                "incident": {
                    "type": "boolean",
                    "description": "Setting to true makes an alert a Pagertree incident. Value must be one of true or false\n"
                },
                "severity": {
                    "type": "string",
                    "description": "Value must be one of `auto`, `SEV-1`, `SEV-2`, `SEV-3`, `SEV-4`.\n"
                },
                "taskType": {
                    "type": "string"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreatePagertreeAlertTaskParamsTeam:WorkflowTaskCreatePagertreeAlertTaskParamsTeam"
                    }
                },
                "title": {
                    "type": "string",
                    "description": "Title of alert as text\n"
                },
                "urgency": {
                    "type": "string",
                    "description": "Value must be one of `auto`, `critical`, `high`, `medium`, `low`.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreatePagertreeAlertTaskParamsUser:WorkflowTaskCreatePagertreeAlertTaskParamsUser"
                    }
                }
            },
            "type": "object"
        },
        "rootly:index/WorkflowTaskCreatePagertreeAlertTaskParamsTeam:WorkflowTaskCreatePagertreeAlertTaskParamsTeam": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreatePagertreeAlertTaskParamsUser:WorkflowTaskCreatePagertreeAlertTaskParamsUser": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateQuipPageTaskParams:WorkflowTaskCreateQuipPageTaskParams": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The page content\n"
                },
                "markPostMortemAsPublished": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "parentFolderId": {
                    "type": "string",
                    "description": "The parent folder id\n"
                },
                "postMortemTemplateId": {
                    "type": "string",
                    "description": "Retrospective template to use when creating page, if desired\n"
                },
                "taskType": {
                    "type": "string"
                },
                "templateId": {
                    "type": "string",
                    "description": "The Quip file ID to use as a template\n"
                },
                "title": {
                    "type": "string",
                    "description": "The page title\n"
                }
            },
            "type": "object",
            "required": [
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateServiceNowIncidentTaskParams:WorkflowTaskCreateServiceNowIncidentTaskParams": {
            "properties": {
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The completion id and display name\n"
                },
                "customFieldsMapping": {
                    "type": "string",
                    "description": "Custom field mappings. Can contain liquid markup and need to be valid JSON\n"
                },
                "description": {
                    "type": "string",
                    "description": "The incident description\n"
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The priority id and display name\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The incident title\n"
                }
            },
            "type": "object",
            "required": [
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateShortcutStoryTaskParams:WorkflowTaskCreateShortcutStoryTaskParams": {
            "properties": {
                "archivation": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The archivation id and display name\n"
                },
                "description": {
                    "type": "string",
                    "description": "The incident description\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The due date\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Value must be one of `bug`, `chore`, `feature`.\n"
                },
                "labels": {
                    "type": "string",
                    "description": "The story labels\n"
                },
                "project": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The project id and display name\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The incident title\n"
                }
            },
            "type": "object",
            "required": [
                "archivation",
                "kind",
                "project",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateShortcutTaskTaskParams:WorkflowTaskCreateShortcutTaskTaskParams": {
            "properties": {
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The completion id and display name\n"
                },
                "description": {
                    "type": "string",
                    "description": "The task description\n"
                },
                "parentStoryId": {
                    "type": "string",
                    "description": "The parent story\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "completion",
                "description",
                "parentStoryId"
            ]
        },
        "rootly:index/WorkflowTaskCreateSlackChannelTaskParams:WorkflowTaskCreateSlackChannelTaskParams": {
            "properties": {
                "private": {
                    "type": "string",
                    "description": "Value must be one of `auto`, `true`, `false`.\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "Slack channel title\n"
                },
                "workspace": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                }
            },
            "type": "object",
            "required": [
                "title",
                "workspace"
            ]
        },
        "rootly:index/WorkflowTaskCreateTrelloCardTaskParams:WorkflowTaskCreateTrelloCardTaskParams": {
            "properties": {
                "archivation": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The archivation id and display name\n"
                },
                "board": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The board id and display name\n"
                },
                "description": {
                    "type": "string",
                    "description": "The card description\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The due date\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateTrelloCardTaskParamsLabel:WorkflowTaskCreateTrelloCardTaskParamsLabel"
                    }
                },
                "list": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The list id and display name\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The card title\n"
                }
            },
            "type": "object",
            "required": [
                "board",
                "list",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskCreateTrelloCardTaskParamsLabel:WorkflowTaskCreateTrelloCardTaskParamsLabel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateWebexMeetingTaskParams:WorkflowTaskCreateWebexMeetingTaskParams": {
            "properties": {
                "inviteRootlyBot": {
                    "type": "boolean",
                    "description": "We will invite Rootly Bot to your call and make the transcript available to you. Value must be one of true or false\n"
                },
                "password": {
                    "type": "string",
                    "description": "The meeting password\n"
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateWebexMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateWebexMeetingTaskParamsPostToSlackChannel"
                    }
                },
                "taskType": {
                    "type": "string"
                },
                "topic": {
                    "type": "string",
                    "description": "The meeting topic\n"
                }
            },
            "type": "object",
            "required": [
                "topic"
            ]
        },
        "rootly:index/WorkflowTaskCreateWebexMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateWebexMeetingTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskCreateZendeskTicketTaskParams:WorkflowTaskCreateZendeskTicketTaskParams": {
            "properties": {
                "comment": {
                    "type": "string",
                    "description": "The ticket comment\n"
                },
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The completion id and display name\n"
                },
                "customFieldsMapping": {
                    "type": "string",
                    "description": "Custom field mappings. Can contain liquid markup and need to be valid JSON\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Value must be one of `problem`, `incident`, `question`, `task`.\n"
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The priority id and display name\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The ticket subject\n"
                },
                "tags": {
                    "type": "string",
                    "description": "The ticket tags\n"
                },
                "taskType": {
                    "type": "string"
                },
                "ticketPayload": {
                    "type": "string",
                    "description": "Additional Zendesk ticket attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON\n"
                }
            },
            "type": "object",
            "required": [
                "kind",
                "subject"
            ]
        },
        "rootly:index/WorkflowTaskCreateZoomMeetingTaskParams:WorkflowTaskCreateZoomMeetingTaskParams": {
            "properties": {
                "alternativeHosts": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "autoRecording": {
                    "type": "string",
                    "description": "Value must be one of `none`, `local`, `cloud`.\n"
                },
                "createAsEmail": {
                    "type": "string",
                    "description": "The email to use if creating as email\n"
                },
                "inviteRootlyBot": {
                    "type": "boolean",
                    "description": "We will invite Rootly Bot to your call and make the transcript available to you. Value must be one of true or false\n"
                },
                "password": {
                    "type": "string",
                    "description": "The meeting password\n"
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateZoomMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateZoomMeetingTaskParamsPostToSlackChannel"
                    }
                },
                "taskType": {
                    "type": "string"
                },
                "topic": {
                    "type": "string",
                    "description": "The meeting topic\n"
                }
            },
            "type": "object",
            "required": [
                "topic"
            ]
        },
        "rootly:index/WorkflowTaskCreateZoomMeetingTaskParamsPostToSlackChannel:WorkflowTaskCreateZoomMeetingTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskGetAlertsTaskParams:WorkflowTaskGetAlertsTaskParams": {
            "properties": {
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "environmentsImpactedByIncident": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "parentMessageThreadTask": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. A hash where [id] is the task id of the parent task that sent a message, and [name] is the name of the parent task\n"
                },
                "pastDuration": {
                    "type": "string",
                    "description": "How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)\n"
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskGetAlertsTaskParamsPostToSlackChannel:WorkflowTaskGetAlertsTaskParamsPostToSlackChannel"
                    }
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "servicesImpactedByIncident": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pastDuration"
            ]
        },
        "rootly:index/WorkflowTaskGetAlertsTaskParamsPostToSlackChannel:WorkflowTaskGetAlertsTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskGetGithubCommitsTaskParams:WorkflowTaskGetGithubCommitsTaskParams": {
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "The branch\n"
                },
                "githubRepositoryNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pastDuration": {
                    "type": "string",
                    "description": "How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)\n"
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskGetGithubCommitsTaskParamsPostToSlackChannel:WorkflowTaskGetGithubCommitsTaskParamsPostToSlackChannel"
                    }
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "servicesImpactedByIncident": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "branch",
                "pastDuration"
            ]
        },
        "rootly:index/WorkflowTaskGetGithubCommitsTaskParamsPostToSlackChannel:WorkflowTaskGetGithubCommitsTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskGetGitlabCommitsTaskParams:WorkflowTaskGetGitlabCommitsTaskParams": {
            "properties": {
                "branch": {
                    "type": "string",
                    "description": "The branch\n"
                },
                "gitlabRepositoryNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pastDuration": {
                    "type": "string",
                    "description": "How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)\n"
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskGetGitlabCommitsTaskParamsPostToSlackChannel:WorkflowTaskGetGitlabCommitsTaskParamsPostToSlackChannel"
                    }
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "servicesImpactedByIncident": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "branch",
                "pastDuration"
            ]
        },
        "rootly:index/WorkflowTaskGetGitlabCommitsTaskParamsPostToSlackChannel:WorkflowTaskGetGitlabCommitsTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskGetPulsesTaskParams:WorkflowTaskGetPulsesTaskParams": {
            "properties": {
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "environmentsImpactedByIncident": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "parentMessageThreadTask": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. A hash where [id] is the task id of the parent task that sent a message, and [name] is the name of the parent task\n"
                },
                "pastDuration": {
                    "type": "string",
                    "description": "How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)\n"
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskGetPulsesTaskParamsPostToSlackChannel:WorkflowTaskGetPulsesTaskParamsPostToSlackChannel"
                    }
                },
                "refs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "servicesImpactedByIncident": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "sources": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pastDuration"
            ]
        },
        "rootly:index/WorkflowTaskGetPulsesTaskParamsPostToSlackChannel:WorkflowTaskGetPulsesTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskHTTPClientTaskParams:WorkflowTaskHTTPClientTaskParams": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "HTTP body\n"
                },
                "eventMessage": {
                    "type": "string"
                },
                "eventUrl": {
                    "type": "string"
                },
                "headers": {
                    "type": "string",
                    "description": "JSON map of HTTP headers\n"
                },
                "method": {
                    "type": "string",
                    "description": "HTTP method. Value must be one of `GET`, `POST`, `PUT`, `DELETE`, `OPTIONS`.\n"
                },
                "params": {
                    "type": "string",
                    "description": "JSON map of HTTP query parameters\n"
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskHTTPClientTaskParamsPostToSlackChannel:WorkflowTaskHTTPClientTaskParamsPostToSlackChannel"
                    }
                },
                "succeedOnStatus": {
                    "type": "string",
                    "description": "HTTP status code expected. Can be a regular expression. Eg: 200, 200|203, 20[0-3]\n"
                },
                "taskType": {
                    "type": "string"
                },
                "url": {
                    "type": "string",
                    "description": "URL endpoint\n"
                }
            },
            "type": "object",
            "required": [
                "succeedOnStatus",
                "url"
            ]
        },
        "rootly:index/WorkflowTaskHTTPClientTaskParamsPostToSlackChannel:WorkflowTaskHTTPClientTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskInviteToSlackChannelOpsgenieTaskParams:WorkflowTaskInviteToSlackChannelOpsgenieTaskParams": {
            "properties": {
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelOpsgenieTaskParamsChannel:WorkflowTaskInviteToSlackChannelOpsgenieTaskParamsChannel"
                    }
                },
                "schedule": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "schedule"
            ]
        },
        "rootly:index/WorkflowTaskInviteToSlackChannelOpsgenieTaskParamsChannel:WorkflowTaskInviteToSlackChannelOpsgenieTaskParamsChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskInviteToSlackChannelPagerdutyTaskParams:WorkflowTaskInviteToSlackChannelPagerdutyTaskParams": {
            "properties": {
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelPagerdutyTaskParamsChannel:WorkflowTaskInviteToSlackChannelPagerdutyTaskParamsChannel"
                    }
                },
                "escalationPolicy": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "schedule": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "service": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "rootly:index/WorkflowTaskInviteToSlackChannelPagerdutyTaskParamsChannel:WorkflowTaskInviteToSlackChannelPagerdutyTaskParamsChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskInviteToSlackChannelTaskParams:WorkflowTaskInviteToSlackChannelTaskParams": {
            "properties": {
                "channel": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "slackUserGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelTaskParamsSlackUserGroup:WorkflowTaskInviteToSlackChannelTaskParamsSlackUserGroup"
                    }
                },
                "slackUsers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelTaskParamsSlackUser:WorkflowTaskInviteToSlackChannelTaskParamsSlackUser"
                    }
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "channel"
            ]
        },
        "rootly:index/WorkflowTaskInviteToSlackChannelTaskParamsSlackUser:WorkflowTaskInviteToSlackChannelTaskParamsSlackUser": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskInviteToSlackChannelTaskParamsSlackUserGroup:WorkflowTaskInviteToSlackChannelTaskParamsSlackUserGroup": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskInviteToSlackChannelVictorOpsTaskParams:WorkflowTaskInviteToSlackChannelVictorOpsTaskParams": {
            "properties": {
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelVictorOpsTaskParamsChannel:WorkflowTaskInviteToSlackChannelVictorOpsTaskParamsChannel"
                    }
                },
                "taskType": {
                    "type": "string"
                },
                "team": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                }
            },
            "type": "object",
            "required": [
                "team"
            ]
        },
        "rootly:index/WorkflowTaskInviteToSlackChannelVictorOpsTaskParamsChannel:WorkflowTaskInviteToSlackChannelVictorOpsTaskParamsChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskPageOpsgenieOnCallRespondersTaskParams:WorkflowTaskPageOpsgenieOnCallRespondersTaskParams": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description field of the incident that is generally used to provide a detailed information about the incident\n"
                },
                "message": {
                    "type": "string",
                    "description": "Message of the incident\n"
                },
                "priority": {
                    "type": "string",
                    "description": "Value must be one of `P1`, `P2`, `P3`, `P4`, `P5`, `auto`.\n"
                },
                "taskType": {
                    "type": "string"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsTeam:WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsTeam"
                    }
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsUser:WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsUser"
                    }
                }
            },
            "type": "object"
        },
        "rootly:index/WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsTeam:WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsTeam": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsUser:WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsUser": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskPagePagerdutyOnCallRespondersTaskParams:WorkflowTaskPagePagerdutyOnCallRespondersTaskParams": {
            "properties": {
                "createNewIncidentOnConflict": {
                    "type": "boolean",
                    "description": "Rootly only supports linking to a single PagerDuty incident. If this feature is disabled Rootly will add responders from any additional pages to the existing PagerDuty incident that is linked to the Rootly incident. If enabled, Rootly will create a new PagerDuty incident that is not linked to any Rootly incidents. Value must be one of true or false\n"
                },
                "escalationPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsEscalationPolicy:WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsEscalationPolicy"
                    }
                },
                "message": {
                    "type": "string"
                },
                "priority": {
                    "type": "string",
                    "description": "PagerDuty incident priority, selecting auto will let Rootly auto map our incident severity\n"
                },
                "service": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "taskType": {
                    "type": "string"
                },
                "urgency": {
                    "type": "string",
                    "description": "Value must be one of `high`, `low`, `auto`.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsUser:WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsUser"
                    }
                }
            },
            "type": "object",
            "required": [
                "service"
            ]
        },
        "rootly:index/WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsEscalationPolicy:WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsEscalationPolicy": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsUser:WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsUser": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskPageVictorOpsOnCallRespondersTaskParams:WorkflowTaskPageVictorOpsOnCallRespondersTaskParams": {
            "properties": {
                "escalationPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsEscalationPolicy:WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsEscalationPolicy"
                    }
                },
                "taskType": {
                    "type": "string"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsUser:WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsUser"
                    }
                }
            },
            "type": "object"
        },
        "rootly:index/WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsEscalationPolicy:WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsEscalationPolicy": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsUser:WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsUser": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskPrintTaskParams:WorkflowTaskPrintTaskParams": {
            "properties": {
                "message": {
                    "type": "string",
                    "description": "The message to print\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "message"
            ]
        },
        "rootly:index/WorkflowTaskPublishIncidentTaskParams:WorkflowTaskPublishIncidentTaskParams": {
            "properties": {
                "event": {
                    "type": "string",
                    "description": "Incident event description\n"
                },
                "incident": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "integrationPayload": {
                    "type": "string",
                    "description": "Additional API Payload you can pass to statuspage.io for example. Can contain liquid markup and need to be valid JSON\n"
                },
                "notifySubscribers": {
                    "type": "boolean",
                    "description": "When true notifies subscribers of the status page by email/text. Value must be one of true or false\n"
                },
                "publicTitle": {
                    "type": "string"
                },
                "shouldTweet": {
                    "type": "boolean",
                    "description": "For Statuspage.io integrated pages auto publishes a tweet for your update. Value must be one of true or false\n"
                },
                "status": {
                    "type": "string",
                    "description": "Value must be one of `investigating`, `identified`, `monitoring`, `resolved`, `scheduled`, `in_progress`, `verifying`, `completed`.\n"
                },
                "statusPageId": {
                    "type": "string"
                },
                "statusPageTemplate": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "incident",
                "publicTitle",
                "status",
                "statusPageId"
            ]
        },
        "rootly:index/WorkflowTaskRedisClientTaskParams:WorkflowTaskRedisClientTaskParams": {
            "properties": {
                "commands": {
                    "type": "string"
                },
                "eventMessage": {
                    "type": "string"
                },
                "eventUrl": {
                    "type": "string"
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskRedisClientTaskParamsPostToSlackChannel:WorkflowTaskRedisClientTaskParamsPostToSlackChannel"
                    }
                },
                "taskType": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "commands",
                "url"
            ]
        },
        "rootly:index/WorkflowTaskRedisClientTaskParamsPostToSlackChannel:WorkflowTaskRedisClientTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskRemoveGoogleDocsPermissionsTaskParams:WorkflowTaskRemoveGoogleDocsPermissionsTaskParams": {
            "properties": {
                "attributeToQueryBy": {
                    "type": "string",
                    "description": "Value must be one of `type`, `role`, `email_address`.\n"
                },
                "fileId": {
                    "type": "string",
                    "description": "The Google Doc file ID\n"
                },
                "taskType": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attributeToQueryBy",
                "fileId",
                "value"
            ]
        },
        "rootly:index/WorkflowTaskRenameSlackChannelTaskParams:WorkflowTaskRenameSlackChannelTaskParams": {
            "properties": {
                "channel": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "channel",
                "title"
            ]
        },
        "rootly:index/WorkflowTaskRunCommandHerokuTaskParams:WorkflowTaskRunCommandHerokuTaskParams": {
            "properties": {
                "appName": {
                    "type": "string"
                },
                "command": {
                    "type": "string"
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskRunCommandHerokuTaskParamsPostToSlackChannel:WorkflowTaskRunCommandHerokuTaskParamsPostToSlackChannel"
                    }
                },
                "size": {
                    "type": "string",
                    "description": "Value must be one of `standard-1X`, `standard-2X`.\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "appName",
                "command",
                "size"
            ]
        },
        "rootly:index/WorkflowTaskRunCommandHerokuTaskParamsPostToSlackChannel:WorkflowTaskRunCommandHerokuTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSendDashboardReportTaskParams:WorkflowTaskSendDashboardReportTaskParams": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The email body\n"
                },
                "dashboardIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "from": {
                    "type": "string",
                    "description": "The from email address. Need to use SMTP integration if different than rootly.com\n"
                },
                "preheader": {
                    "type": "string",
                    "description": "The preheader\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The subject\n"
                },
                "taskType": {
                    "type": "string"
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "body",
                "dashboardIds",
                "subject",
                "tos"
            ]
        },
        "rootly:index/WorkflowTaskSendEmailTaskParams:WorkflowTaskSendEmailTaskParams": {
            "properties": {
                "bccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "body": {
                    "type": "string",
                    "description": "The email body\n"
                },
                "ccs": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "customLogoUrl": {
                    "type": "string",
                    "description": "URL to your custom email logo\n"
                },
                "from": {
                    "type": "string",
                    "description": "The from email address. Need to use SMTP integration if different than rootly.com\n"
                },
                "includeFooter": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "includeHeader": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "preheader": {
                    "type": "string",
                    "description": "The preheader\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The subject\n"
                },
                "taskType": {
                    "type": "string"
                },
                "tos": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "type": "object",
            "required": [
                "body",
                "subject",
                "tos"
            ]
        },
        "rootly:index/WorkflowTaskSendSlackBlocksTaskParams:WorkflowTaskSendSlackBlocksTaskParams": {
            "properties": {
                "attachments": {
                    "type": "string",
                    "description": "Support liquid markup. Needs to be a valid JSON string after liquid is parsed\n"
                },
                "blocks": {
                    "type": "string",
                    "description": "Support liquid markup. Needs to be a valid JSON string after liquid is parsed\n"
                },
                "broadcastThreadReplyToChannel": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendSlackBlocksTaskParamsChannel:WorkflowTaskSendSlackBlocksTaskParamsChannel"
                    }
                },
                "message": {
                    "type": "string"
                },
                "parentMessageThreadTask": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. A hash where [id] is the task id of the parent task that sent a message, and [name] is the name of the parent task\n"
                },
                "pinToChannel": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "sendAsEphemeral": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "slackUserGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendSlackBlocksTaskParamsSlackUserGroup:WorkflowTaskSendSlackBlocksTaskParamsSlackUserGroup"
                    }
                },
                "slackUsers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendSlackBlocksTaskParamsSlackUser:WorkflowTaskSendSlackBlocksTaskParamsSlackUser"
                    }
                },
                "taskType": {
                    "type": "string"
                },
                "updateParentMessage": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                }
            },
            "type": "object",
            "required": [
                "blocks"
            ]
        },
        "rootly:index/WorkflowTaskSendSlackBlocksTaskParamsChannel:WorkflowTaskSendSlackBlocksTaskParamsChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSendSlackBlocksTaskParamsSlackUser:WorkflowTaskSendSlackBlocksTaskParamsSlackUser": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSendSlackBlocksTaskParamsSlackUserGroup:WorkflowTaskSendSlackBlocksTaskParamsSlackUserGroup": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSendSlackMessageTaskParams:WorkflowTaskSendSlackMessageTaskParams": {
            "properties": {
                "actionables": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `update_summary`, `update_status`, `archive_channel`, `manage_incident_roles`, `update_incident`, `all_commands`, `leave_feedback`, `manage_form_fields`, `manage_action_items`, `view_tasks`, `add_pagerduty_responders`, `add_opsgenie_responders`, `add_victor_ops_responders`, `snooze_reminder`, `pause_reminder`, `restart_reminder`, `update_status_page`, `cancel_incident`.\n"
                },
                "broadcastThreadReplyToChannel": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "channels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendSlackMessageTaskParamsChannel:WorkflowTaskSendSlackMessageTaskParamsChannel"
                    }
                },
                "color": {
                    "type": "string",
                    "description": "A hex color\n"
                },
                "parentMessageThreadTask": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. A hash where [id] is the task id of the parent task that sent a message, and [name] is the name of the parent task\n"
                },
                "pinToChannel": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "sendAsEphemeral": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "slackUserGroups": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendSlackMessageTaskParamsSlackUserGroup:WorkflowTaskSendSlackMessageTaskParamsSlackUserGroup"
                    }
                },
                "slackUsers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendSlackMessageTaskParamsSlackUser:WorkflowTaskSendSlackMessageTaskParamsSlackUser"
                    }
                },
                "taskType": {
                    "type": "string"
                },
                "text": {
                    "type": "string",
                    "description": "The message text\n"
                },
                "updateParentMessage": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                }
            },
            "type": "object",
            "required": [
                "text"
            ]
        },
        "rootly:index/WorkflowTaskSendSlackMessageTaskParamsChannel:WorkflowTaskSendSlackMessageTaskParamsChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSendSlackMessageTaskParamsSlackUser:WorkflowTaskSendSlackMessageTaskParamsSlackUser": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSendSlackMessageTaskParamsSlackUserGroup:WorkflowTaskSendSlackMessageTaskParamsSlackUserGroup": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSendSmsTaskParams:WorkflowTaskSendSmsTaskParams": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The SMS message\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name\n"
                },
                "phoneNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "content",
                "name",
                "phoneNumbers"
            ]
        },
        "rootly:index/WorkflowTaskSendWhatsappMessageTaskParams:WorkflowTaskSendWhatsappMessageTaskParams": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The WhatsApp message\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name\n"
                },
                "phoneNumbers": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "content",
                "name",
                "phoneNumbers"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotDatadogGraphTaskParams:WorkflowTaskSnapshotDatadogGraphTaskParams": {
            "properties": {
                "dashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotDatadogGraphTaskParamsDashboard:WorkflowTaskSnapshotDatadogGraphTaskParamsDashboard"
                    }
                },
                "metricQueries": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "pastDuration": {
                    "type": "string",
                    "description": "in format '1 minute', '30 days', '3 months', etc\n"
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotDatadogGraphTaskParamsPostToSlackChannel:WorkflowTaskSnapshotDatadogGraphTaskParamsPostToSlackChannel"
                    }
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "pastDuration"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotDatadogGraphTaskParamsDashboard:WorkflowTaskSnapshotDatadogGraphTaskParamsDashboard": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotDatadogGraphTaskParamsPostToSlackChannel:WorkflowTaskSnapshotDatadogGraphTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotGrafanaDashboardTaskParams:WorkflowTaskSnapshotGrafanaDashboardTaskParams": {
            "properties": {
                "dashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotGrafanaDashboardTaskParamsDashboard:WorkflowTaskSnapshotGrafanaDashboardTaskParamsDashboard"
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotGrafanaDashboardTaskParamsPostToSlackChannel:WorkflowTaskSnapshotGrafanaDashboardTaskParamsPostToSlackChannel"
                    }
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dashboards"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotGrafanaDashboardTaskParamsDashboard:WorkflowTaskSnapshotGrafanaDashboardTaskParamsDashboard": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotGrafanaDashboardTaskParamsPostToSlackChannel:WorkflowTaskSnapshotGrafanaDashboardTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotLookerLookTaskParams:WorkflowTaskSnapshotLookerLookTaskParams": {
            "properties": {
                "dashboards": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotLookerLookTaskParamsDashboard:WorkflowTaskSnapshotLookerLookTaskParamsDashboard"
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotLookerLookTaskParamsPostToSlackChannel:WorkflowTaskSnapshotLookerLookTaskParamsPostToSlackChannel"
                    }
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "dashboards"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotLookerLookTaskParamsDashboard:WorkflowTaskSnapshotLookerLookTaskParamsDashboard": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotLookerLookTaskParamsPostToSlackChannel:WorkflowTaskSnapshotLookerLookTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotNewRelicGraphTaskParams:WorkflowTaskSnapshotNewRelicGraphTaskParams": {
            "properties": {
                "metricQuery": {
                    "type": "string"
                },
                "metricType": {
                    "type": "string",
                    "description": "Value must be one of `APDEX`, `AREA`, `BAR`, `BASELINE`, `BILLBOARD`, `BULLET`, `EVENT_FEED`, `FUNNEL`, `HEATMAP`, `HISTOGRAM`, `LINE`, `PIE`, `SCATTER`, `STACKED_HORIZONTAL_BAR`, `TABLE`, `VERTICAL_BAR`.\n"
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotNewRelicGraphTaskParamsPostToSlackChannel:WorkflowTaskSnapshotNewRelicGraphTaskParamsPostToSlackChannel"
                    }
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "metricQuery",
                "metricType"
            ]
        },
        "rootly:index/WorkflowTaskSnapshotNewRelicGraphTaskParamsPostToSlackChannel:WorkflowTaskSnapshotNewRelicGraphTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskTriggerWorkflowTaskParams:WorkflowTaskTriggerWorkflowTaskParams": {
            "properties": {
                "attributeToQueryBy": {
                    "type": "string",
                    "description": "[\"(incident) kind can only match [:id, :slug, :sequential*id, :pagerduty*incident*id, :opsgenie*incident*id, :victor*ops*incident*id, :jira*issue*id, :asana*task*id, :shortcut*task*id, :linear*issue*id, :zendesk*ticket*id, :trello*card*id, :airtable*record*id, :shortcut*story*id, :github*issue*id, :freshservice*ticket*id, :freshservice*task*id, :clickup*task*id]\", \"(post*mortem) kind can only match [:id]\", \"(action*item) kind can only match [:id, :jira*issue*id, :asana*task*id, :shortcut*task*id, :linear*issue*id, :zendesk*ticket*id, :trello*card*id, :airtable*record*id, :shortcut*story*id, :github*issue*id, :freshservice*ticket*id, :freshservice*task*id, :clickup*task*id]\", \"(pulse) kind can only match [:id]\", \"(alert) kind can only match [:id]\"]. Value must be one of `id`, `slug`, `sequential_id`, `pagerduty_incident_id`, `opsgenie_incident_id`, `victor_ops_incident_id`, `jira_issue_id`, `asana_task_id`, `shortcut_task_id`, `linear_issue_id`, `zendesk_ticket_id`, `trello_card_id`, `airtable_record_id`, `shortcut_story_id`, `github_issue_id`, `freshservice_ticket_id`, `freshservice_task_id`, `clickup_task_id`.\n"
                },
                "checkWorkflowConditions": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "kind": {
                    "type": "string",
                    "description": "Value must be one of `incident`, `post_mortem`, `action_item`, `pulse`, `alert`.\n"
                },
                "resource": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "taskType": {
                    "type": "string"
                },
                "workflow": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                }
            },
            "type": "object",
            "required": [
                "attributeToQueryBy",
                "kind",
                "resource",
                "workflow"
            ]
        },
        "rootly:index/WorkflowTaskTweetTwitterMessageTaskParams:WorkflowTaskTweetTwitterMessageTaskParams": {
            "properties": {
                "message": {
                    "type": "string"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "message"
            ]
        },
        "rootly:index/WorkflowTaskUpdateActionItemTaskParams:WorkflowTaskUpdateActionItemTaskParams": {
            "properties": {
                "assignedToUser": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.  The user this action item is assigned to\n"
                },
                "assignedToUserId": {
                    "type": "string",
                    "description": "[DEPRECATED] Use assigned*to*user attribute instead. The user id this action item is assigned to\n"
                },
                "attributeToQueryBy": {
                    "type": "string",
                    "description": "Attribute of the action item to match against. Value must be one of `id`, `jira_issue_id`, `asana_task_id`, `shortcut_task_id`, `linear_issue_id`, `zendesk_ticket_id`, `trello_card_id`, `airtable_record_id`, `shortcut_story_id`, `github_issue_id`, `gitlab_issue_id`, `freshservice_ticket_id`, `freshservice_task_id`, `clickup_task_id`.\n"
                },
                "customFieldsMapping": {
                    "type": "string",
                    "description": "Custom field mappings. Can contain liquid markup and need to be valid JSON\n"
                },
                "description": {
                    "type": "string",
                    "description": "The action item description\n"
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "priority": {
                    "type": "string",
                    "description": "The action item priority. Value must be one of `high`, `medium`, `low`.\n"
                },
                "queryValue": {
                    "type": "string",
                    "description": "Value that attribute*to*query_by to uses to match against\n"
                },
                "status": {
                    "type": "string",
                    "description": "The action item status. Value must be one of `open`, `in_progress`, `cancelled`, `done`.\n"
                },
                "summary": {
                    "type": "string",
                    "description": "Brief description of the action item\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "attributeToQueryBy",
                "queryValue"
            ]
        },
        "rootly:index/WorkflowTaskUpdateAirtableTableRecordTaskParams:WorkflowTaskUpdateAirtableTableRecordTaskParams": {
            "properties": {
                "baseKey": {
                    "type": "string",
                    "description": "The base key\n"
                },
                "customFieldsMapping": {
                    "type": "string",
                    "description": "Custom field mappings. Can contain liquid markup and need to be valid JSON\n"
                },
                "recordId": {
                    "type": "string",
                    "description": "The record id\n"
                },
                "tableName": {
                    "type": "string",
                    "description": "The table name\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "baseKey",
                "recordId",
                "tableName"
            ]
        },
        "rootly:index/WorkflowTaskUpdateAsanaTaskTaskParams:WorkflowTaskUpdateAsanaTaskTaskParams": {
            "properties": {
                "assignUserEmail": {
                    "type": "string",
                    "description": "The assigned user's email\n"
                },
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "customFieldsMapping": {
                    "type": "string",
                    "description": "Custom field mappings. Can contain liquid markup and need to be valid JSON\n"
                },
                "dependencyDirection": {
                    "type": "string",
                    "description": "Value must be one of `blocking`, `blocked_by`.\n"
                },
                "dependentTaskIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Dependent task ids. Supports liquid syntax\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The due date\n"
                },
                "notes": {
                    "type": "string"
                },
                "taskId": {
                    "type": "string",
                    "description": "The task id\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The task title\n"
                }
            },
            "type": "object",
            "required": [
                "completion",
                "taskId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateClickupTaskTaskParams:WorkflowTaskUpdateClickupTaskTaskParams": {
            "properties": {
                "customFieldsMapping": {
                    "type": "string",
                    "description": "Custom field mappings. Can contain liquid markup and need to be valid JSON\n"
                },
                "description": {
                    "type": "string",
                    "description": "The task description\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The due date\n"
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The priority id and display name\n"
                },
                "tags": {
                    "type": "string",
                    "description": "The task tags\n"
                },
                "taskId": {
                    "type": "string",
                    "description": "The task id\n"
                },
                "taskPayload": {
                    "type": "string",
                    "description": "Additional ClickUp task attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The task title\n"
                }
            },
            "type": "object",
            "required": [
                "taskId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateGithubIssueTaskParams:WorkflowTaskUpdateGithubIssueTaskParams": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "The issue body\n"
                },
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "issueId": {
                    "type": "string",
                    "description": "The issue id\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The issue title\n"
                }
            },
            "type": "object",
            "required": [
                "completion",
                "issueId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateGitlabIssueTaskParams:WorkflowTaskUpdateGitlabIssueTaskParams": {
            "properties": {
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The issue description\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The due date\n"
                },
                "issueId": {
                    "type": "string",
                    "description": "The issue id\n"
                },
                "issueType": {
                    "type": "string",
                    "description": "The issue type. Value must be one of `issue`, `incident`, `test_case`, `task`.\n"
                },
                "labels": {
                    "type": "string",
                    "description": "The issue labels\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The issue title\n"
                }
            },
            "type": "object",
            "required": [
                "completion",
                "issueId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateGoogleCalendarEventTaskParams:WorkflowTaskUpdateGoogleCalendarEventTaskParams": {
            "properties": {
                "adjustmentDays": {
                    "type": "integer",
                    "description": "Days to adjust meeting by\n"
                },
                "attendees": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails of attendees\n"
                },
                "canGuestsInviteOthers": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "canGuestsModifyEvent": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "canGuestsSeeOtherGuests": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "conferenceSolutionKey": {
                    "type": "string",
                    "description": "Sets the video conference type attached to the meeting. Value must be one of `eventHangout`, `eventNamedHangout`, `hangoutsMeet`, `addOn`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The event description\n"
                },
                "eventId": {
                    "type": "string",
                    "description": "The event ID\n"
                },
                "meetingDuration": {
                    "type": "string",
                    "description": "Meeting duration in format like '1 hour', '30 minutes'\n"
                },
                "postToIncidentTimeline": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "postToSlackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateGoogleCalendarEventTaskParamsPostToSlackChannel:WorkflowTaskUpdateGoogleCalendarEventTaskParamsPostToSlackChannel"
                    }
                },
                "replaceAttendees": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "sendUpdates": {
                    "type": "boolean",
                    "description": "Send an email to the attendees notifying them of the event. Value must be one of true or false\n"
                },
                "summary": {
                    "type": "string",
                    "description": "The event summary\n"
                },
                "taskType": {
                    "type": "string"
                },
                "timeOfMeeting": {
                    "type": "string",
                    "description": "Time of meeting in format HH:MM\n"
                }
            },
            "type": "object",
            "required": [
                "eventId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateGoogleCalendarEventTaskParamsPostToSlackChannel:WorkflowTaskUpdateGoogleCalendarEventTaskParamsPostToSlackChannel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskUpdateGoogleDocsPageTaskParams:WorkflowTaskUpdateGoogleDocsPageTaskParams": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The Google Doc content\n"
                },
                "fileId": {
                    "type": "string",
                    "description": "The Google Doc file ID\n"
                },
                "postMortemTemplateId": {
                    "type": "string",
                    "description": "Retrospective template to use when updating page, if desired\n"
                },
                "taskType": {
                    "type": "string"
                },
                "templateId": {
                    "type": "string",
                    "description": "The Google Doc file ID to use as a template.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The Google Doc title\n"
                }
            },
            "type": "object",
            "required": [
                "fileId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateIncidentPostmortemTaskParams:WorkflowTaskUpdateIncidentPostmortemTaskParams": {
            "properties": {
                "postmortemId": {
                    "type": "string",
                    "description": "UUID of the retrospective that needs to be updated\n"
                },
                "status": {
                    "type": "string"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The incident title\n"
                }
            },
            "type": "object",
            "required": [
                "postmortemId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateIncidentTaskParams:WorkflowTaskUpdateIncidentTaskParams": {
            "properties": {
                "acknowledgedAt": {
                    "type": "string"
                },
                "attributeToQueryBy": {
                    "type": "string",
                    "description": "Value must be one of `id`, `slug`, `sequential_id`, `pagerduty_incident_id`, `opsgenie_incident_id`, `victor_ops_incident_id`, `jira_issue_id`, `asana_task_id`, `shortcut_task_id`, `linear_issue_id`, `zendesk_ticket_id`, `trello_card_id`, `airtable_record_id`, `shortcut_story_id`, `github_issue_id`, `gitlab_issue_id`, `freshservice_ticket_id`, `freshservice_task_id`, `clickup_task_id`.\n"
                },
                "customFieldsMapping": {
                    "type": "string",
                    "description": "Custom field mappings. Can contain liquid markup and need to be valid JSON\n"
                },
                "detectedAt": {
                    "type": "string"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentId": {
                    "type": "string",
                    "description": "The incident id to update or id of any attribute on the incident\n"
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "mitigatedAt": {
                    "type": "string"
                },
                "private": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "resolvedAt": {
                    "type": "string"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityId": {
                    "type": "string"
                },
                "startedAt": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "summary": {
                    "type": "string",
                    "description": "The incident summary\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The incident title\n"
                }
            },
            "type": "object",
            "required": [
                "incidentId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateJiraIssueTaskParams:WorkflowTaskUpdateJiraIssueTaskParams": {
            "properties": {
                "assignUserEmail": {
                    "type": "string",
                    "description": "The assigned user's email\n"
                },
                "customFieldsMapping": {
                    "type": "string",
                    "description": "Custom field mappings. Can contain liquid markup and need to be valid JSON\n"
                },
                "description": {
                    "type": "string",
                    "description": "The issue description\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The due date\n"
                },
                "issueId": {
                    "type": "string",
                    "description": "The issue id\n"
                },
                "labels": {
                    "type": "string",
                    "description": "The issue labels\n"
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The priority id and display name\n"
                },
                "projectKey": {
                    "type": "string",
                    "description": "The project key\n"
                },
                "reporterUserEmail": {
                    "type": "string",
                    "description": "The reporter user's email\n"
                },
                "status": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The status id and display name\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The issue title\n"
                },
                "updatePayload": {
                    "type": "string",
                    "description": "Update payload. Can contain liquid markup and need to be valid JSON\n"
                }
            },
            "type": "object",
            "required": [
                "issueId",
                "projectKey"
            ]
        },
        "rootly:index/WorkflowTaskUpdateLinearIssueTaskParams:WorkflowTaskUpdateLinearIssueTaskParams": {
            "properties": {
                "assignUserEmail": {
                    "type": "string",
                    "description": "The assigned user's email\n"
                },
                "description": {
                    "type": "string",
                    "description": "The issue description\n"
                },
                "issueId": {
                    "type": "string",
                    "description": "The issue id\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateLinearIssueTaskParamsLabel:WorkflowTaskUpdateLinearIssueTaskParamsLabel"
                    }
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The priority id and display name\n"
                },
                "project": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The project id and display name\n"
                },
                "state": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The state id and display name\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The issue title\n"
                }
            },
            "type": "object",
            "required": [
                "issueId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateLinearIssueTaskParamsLabel:WorkflowTaskUpdateLinearIssueTaskParamsLabel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskUpdateNotionPageTaskParams:WorkflowTaskUpdateNotionPageTaskParams": {
            "properties": {
                "fileId": {
                    "type": "string",
                    "description": "The Notion page ID\n"
                },
                "postMortemTemplateId": {
                    "type": "string",
                    "description": "Retrospective template to use when creating page task, if desired\n"
                },
                "showActionItemsAsTable": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "showTimelineAsTable": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The Notion page title\n"
                }
            },
            "type": "object",
            "required": [
                "fileId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateOpsgenieAlertTaskParams:WorkflowTaskUpdateOpsgenieAlertTaskParams": {
            "properties": {
                "alertId": {
                    "type": "string",
                    "description": "Opsgenie Alert ID\n"
                },
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description field of the alert that is generally used to provide a detailed information about the alert\n"
                },
                "message": {
                    "type": "string",
                    "description": "Message of the alert\n"
                },
                "priority": {
                    "type": "string",
                    "description": "Value must be one of `P1`, `P2`, `P3`, `P4`, `P5`, `auto`.\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "alertId",
                "completion",
                "priority"
            ]
        },
        "rootly:index/WorkflowTaskUpdateOpsgenieIncidentTaskParams:WorkflowTaskUpdateOpsgenieIncidentTaskParams": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description field of the alert that is generally used to provide a detailed information about the alert\n"
                },
                "message": {
                    "type": "string",
                    "description": "Message of the alert\n"
                },
                "opsgenieIncidentId": {
                    "type": "string",
                    "description": "The Opsgenie incident ID, this can also be a Rootly incident variable\n"
                },
                "priority": {
                    "type": "string",
                    "description": "Value must be one of `P1`, `P2`, `P3`, `P4`, `P5`, `auto`.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Value must be one of `resolve`, `open`, `close`, `auto`.\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "opsgenieIncidentId"
            ]
        },
        "rootly:index/WorkflowTaskUpdatePagerdutyIncidentTaskParams:WorkflowTaskUpdatePagerdutyIncidentTaskParams": {
            "properties": {
                "escalationLevel": {
                    "type": "integer",
                    "description": "Escalation level of policy attached to incident\n"
                },
                "pagerdutyIncidentId": {
                    "type": "string",
                    "description": "Pagerduty incident id\n"
                },
                "priority": {
                    "type": "string",
                    "description": "PagerDuty incident priority, selecting auto will let Rootly auto map our incident severity\n"
                },
                "resolution": {
                    "type": "string",
                    "description": "A message outlining the incident's resolution in PagerDuty\n"
                },
                "status": {
                    "type": "string",
                    "description": "Value must be one of `resolved`, `acknowledged`, `auto`.\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "Title to update to\n"
                },
                "urgency": {
                    "type": "string",
                    "description": "PagerDuty incident urgency, selecting auto will let Rootly auto map our incident severity. Value must be one of `high`, `low`, `auto`.\n"
                }
            },
            "type": "object",
            "required": [
                "pagerdutyIncidentId"
            ]
        },
        "rootly:index/WorkflowTaskUpdatePagertreeAlertTaskParams:WorkflowTaskUpdatePagertreeAlertTaskParams": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "Description of alert as text\n"
                },
                "incident": {
                    "type": "boolean",
                    "description": "Setting to true makes an alert a Pagertree incident. Value must be one of true or false\n"
                },
                "pagertreeAlertId": {
                    "type": "string",
                    "description": "The prefix ID of the Pagertree alert\n"
                },
                "severity": {
                    "type": "string",
                    "description": "Value must be one of `auto`, `SEV-1`, `SEV-2`, `SEV-3`, `SEV-4`.\n"
                },
                "taskType": {
                    "type": "string"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdatePagertreeAlertTaskParamsTeam:WorkflowTaskUpdatePagertreeAlertTaskParamsTeam"
                    }
                },
                "title": {
                    "type": "string",
                    "description": "Title of alert as text\n"
                },
                "urgency": {
                    "type": "string",
                    "description": "Value must be one of `auto`, `critical`, `high`, `medium`, `low`.\n"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdatePagertreeAlertTaskParamsUser:WorkflowTaskUpdatePagertreeAlertTaskParamsUser"
                    }
                }
            },
            "type": "object"
        },
        "rootly:index/WorkflowTaskUpdatePagertreeAlertTaskParamsTeam:WorkflowTaskUpdatePagertreeAlertTaskParamsTeam": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskUpdatePagertreeAlertTaskParamsUser:WorkflowTaskUpdatePagertreeAlertTaskParamsUser": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskUpdateServiceNowIncidentTaskParams:WorkflowTaskUpdateServiceNowIncidentTaskParams": {
            "properties": {
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The completion id and display name\n"
                },
                "customFieldsMapping": {
                    "type": "string",
                    "description": "Custom field mappings. Can contain liquid markup and need to be valid JSON\n"
                },
                "description": {
                    "type": "string",
                    "description": "The incident description\n"
                },
                "incidentId": {
                    "type": "string",
                    "description": "The incident id\n"
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The priority id and display name\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The incident title\n"
                }
            },
            "type": "object",
            "required": [
                "incidentId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateShortcutStoryTaskParams:WorkflowTaskUpdateShortcutStoryTaskParams": {
            "properties": {
                "archivation": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The archivation id and display name\n"
                },
                "description": {
                    "type": "string",
                    "description": "The incident description\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The due date\n"
                },
                "labels": {
                    "type": "string",
                    "description": "The story labels\n"
                },
                "storyId": {
                    "type": "string",
                    "description": "The story id\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The incident title\n"
                }
            },
            "type": "object",
            "required": [
                "archivation",
                "storyId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateShortcutTaskTaskParams:WorkflowTaskUpdateShortcutTaskTaskParams": {
            "properties": {
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The completion id and display name\n"
                },
                "description": {
                    "type": "string",
                    "description": "The task description\n"
                },
                "parentStoryId": {
                    "type": "string",
                    "description": "The parent story\n"
                },
                "taskId": {
                    "type": "string",
                    "description": "The task id\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "completion",
                "parentStoryId",
                "taskId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateSlackChannelTopicTaskParams:WorkflowTaskUpdateSlackChannelTopicTaskParams": {
            "properties": {
                "channel": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`.\n"
                },
                "taskType": {
                    "type": "string"
                },
                "topic": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "channel",
                "topic"
            ]
        },
        "rootly:index/WorkflowTaskUpdateStatusTaskParams:WorkflowTaskUpdateStatusTaskParams": {
            "properties": {
                "inactivityTimeout": {
                    "type": "string",
                    "description": "In format '1 hour', '1 day', etc\n"
                },
                "status": {
                    "type": "string",
                    "description": "Value must be one of `in_triage`, `started`, `mitigated`, `resolved`, `cancelled`.\n"
                },
                "taskType": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "status"
            ]
        },
        "rootly:index/WorkflowTaskUpdateTrelloCardTaskParams:WorkflowTaskUpdateTrelloCardTaskParams": {
            "properties": {
                "archivation": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The archivation id and display name\n"
                },
                "board": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The board id and display name\n"
                },
                "cardId": {
                    "type": "string",
                    "description": "The card id\n"
                },
                "description": {
                    "type": "string",
                    "description": "The card description\n"
                },
                "dueDate": {
                    "type": "string",
                    "description": "The due date\n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateTrelloCardTaskParamsLabel:WorkflowTaskUpdateTrelloCardTaskParamsLabel"
                    }
                },
                "list": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The list id and display name\n"
                },
                "taskType": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "The card title\n"
                }
            },
            "type": "object",
            "required": [
                "archivation",
                "cardId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateTrelloCardTaskParamsLabel:WorkflowTaskUpdateTrelloCardTaskParamsLabel": {
            "properties": {
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "id",
                "name"
            ]
        },
        "rootly:index/WorkflowTaskUpdateVictorOpsIncidentTaskParams:WorkflowTaskUpdateVictorOpsIncidentTaskParams": {
            "properties": {
                "resolutionMessage": {
                    "type": "string",
                    "description": "Resolution message\n"
                },
                "status": {
                    "type": "string",
                    "description": "Value must be one of `resolve`, `ack`, `auto`.\n"
                },
                "taskType": {
                    "type": "string"
                },
                "victorOpsIncidentId": {
                    "type": "string",
                    "description": "The victor_ops incident ID, this can also be a Rootly incident variable\n"
                }
            },
            "type": "object",
            "required": [
                "status",
                "victorOpsIncidentId"
            ]
        },
        "rootly:index/WorkflowTaskUpdateZendeskTicketTaskParams:WorkflowTaskUpdateZendeskTicketTaskParams": {
            "properties": {
                "completion": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The completion id and display name\n"
                },
                "customFieldsMapping": {
                    "type": "string",
                    "description": "Custom field mappings. Can contain liquid markup and need to be valid JSON\n"
                },
                "priority": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "Map must contain two fields, `id` and `name`. The priority id and display name\n"
                },
                "subject": {
                    "type": "string",
                    "description": "The ticket subject\n"
                },
                "tags": {
                    "type": "string",
                    "description": "The ticket tags\n"
                },
                "taskType": {
                    "type": "string"
                },
                "ticketId": {
                    "type": "string",
                    "description": "The ticket id\n"
                },
                "ticketPayload": {
                    "type": "string",
                    "description": "Additional Zendesk ticket attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON\n"
                }
            },
            "type": "object",
            "required": [
                "ticketId"
            ]
        },
        "rootly:index/getCausesCause:getCausesCause": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "name",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rootly:index/getCustomFieldOptionsCustomFieldOption:getCustomFieldOptionsCustomFieldOption": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "customFieldId": {
                    "type": "integer"
                },
                "id": {
                    "type": "string"
                },
                "position": {
                    "type": "integer"
                },
                "value": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "customFieldId",
                "id",
                "position",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rootly:index/getCustomFieldsCustomField:getCustomFieldsCustomField": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "kind": {
                    "type": "string"
                },
                "label": {
                    "type": "string"
                },
                "requireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "showns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "enabled",
                "id",
                "kind",
                "label",
                "requireds",
                "showns",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rootly:index/getEnvironmentsEnvironment:getEnvironmentsEnvironment": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "description",
                "id",
                "name",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rootly:index/getFunctionalitiesFunctionality:getFunctionalitiesFunctionality": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "description",
                "id",
                "name",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rootly:index/getIncidentRolesIncidentRole:getIncidentRolesIncidentRole": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "enabled",
                "id",
                "name",
                "slug",
                "summary"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rootly:index/getIncidentTypesIncidentType:getIncidentTypesIncidentType": {
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "description",
                "id",
                "name",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rootly:index/getServicesService:getServicesService": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "publicDescription": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "description",
                "id",
                "name",
                "publicDescription",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rootly:index/getSeveritiesSeverity:getSeveritiesSeverity": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "severity": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "description",
                "id",
                "name",
                "severity",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "rootly:index/getTeamsTeam:getTeamsTeam": {
            "properties": {
                "color": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "slug": {
                    "type": "string"
                }
            },
            "type": "object",
            "required": [
                "color",
                "description",
                "id",
                "name",
                "slug"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the rootly package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "properties": {
            "apiHost": {
                "type": "string",
                "description": "The Rootly API host. Defaults to https://api.rootly.com. Can also be sourced from the ROOTLY_API_URL environment\nvariable.\n"
            },
            "apiToken": {
                "type": "string",
                "description": "The Rootly API Token. Generate it from your account at https://rootly.com/account. It must be provided but can also be\nsourced from the ROOTLY_API_TOKEN environment variable.\n",
                "secret": true
            }
        },
        "inputProperties": {
            "apiHost": {
                "type": "string",
                "description": "The Rootly API host. Defaults to https://api.rootly.com. Can also be sourced from the ROOTLY_API_URL environment\nvariable.\n"
            },
            "apiToken": {
                "type": "string",
                "description": "The Rootly API Token. Generate it from your account at https://rootly.com/account. It must be provided but can also be\nsourced from the ROOTLY_API_TOKEN environment variable.\n",
                "secret": true
            }
        }
    },
    "resources": {
        "rootly:index/authorization:Authorization": {
            "properties": {
                "authorizableId": {
                    "type": "string",
                    "description": "The id of the resource being accessed.\n"
                },
                "authorizableType": {
                    "type": "string",
                    "description": "The type of resource being accessed.. Value must be one of `Dashboard`.\n"
                },
                "granteeId": {
                    "type": "string",
                    "description": "The resource id granted access.\n"
                },
                "granteeType": {
                    "type": "string",
                    "description": "The type of resource granted access.. Value must be one of `User`, `Team`.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `read`, `update`, `authorize`, `destroy`.\n"
                }
            },
            "required": [
                "authorizableId",
                "granteeId",
                "permissions"
            ],
            "inputProperties": {
                "authorizableId": {
                    "type": "string",
                    "description": "The id of the resource being accessed.\n"
                },
                "authorizableType": {
                    "type": "string",
                    "description": "The type of resource being accessed.. Value must be one of `Dashboard`.\n"
                },
                "granteeId": {
                    "type": "string",
                    "description": "The resource id granted access.\n"
                },
                "granteeType": {
                    "type": "string",
                    "description": "The type of resource granted access.. Value must be one of `User`, `Team`.\n"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `read`, `update`, `authorize`, `destroy`.\n"
                }
            },
            "requiredInputs": [
                "authorizableId",
                "granteeId",
                "permissions"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Authorization resources.\n",
                "properties": {
                    "authorizableId": {
                        "type": "string",
                        "description": "The id of the resource being accessed.\n"
                    },
                    "authorizableType": {
                        "type": "string",
                        "description": "The type of resource being accessed.. Value must be one of `Dashboard`.\n"
                    },
                    "granteeId": {
                        "type": "string",
                        "description": "The resource id granted access.\n"
                    },
                    "granteeType": {
                        "type": "string",
                        "description": "The type of resource granted access.. Value must be one of `User`, `Team`.\n"
                    },
                    "permissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `read`, `update`, `authorize`, `destroy`.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/cause:Cause": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the cause\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cause\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the cause\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the cause\n"
                }
            },
            "required": [
                "description",
                "name",
                "position",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the cause\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the cause\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the cause\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the cause\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cause resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the cause\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the cause\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position of the cause\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the cause\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/customField:CustomField": {
            "description": "DEPRECATED: Please use `rootly.FormField` resource instead.\n",
            "properties": {
                "default": {
                    "type": "string",
                    "description": "The default value for text field kinds.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the custom_field\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the custom_field\n"
                },
                "label": {
                    "type": "string",
                    "description": "The name of the custom_field\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the custom_field\n"
                },
                "requireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "showns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the custom_field\n"
                }
            },
            "required": [
                "default",
                "description",
                "kind",
                "label",
                "position",
                "requireds",
                "showns",
                "slug"
            ],
            "inputProperties": {
                "default": {
                    "type": "string",
                    "description": "The default value for text field kinds.\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the custom_field\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the custom_field\n"
                },
                "label": {
                    "type": "string",
                    "description": "The name of the custom_field\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the custom_field\n"
                },
                "requireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "showns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the custom_field\n"
                }
            },
            "requiredInputs": [
                "label"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomField resources.\n",
                "properties": {
                    "default": {
                        "type": "string",
                        "description": "The default value for text field kinds.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the custom_field\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "kind": {
                        "type": "string",
                        "description": "The kind of the custom_field\n"
                    },
                    "label": {
                        "type": "string",
                        "description": "The name of the custom_field\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the custom_field\n"
                    },
                    "requireds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "showns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the custom_field\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/customFieldOption:CustomFieldOption": {
            "description": "DEPRECATED: Please use `rootly.FormField` and `rootly.FormFieldOption` resources instead.\n",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The hex color of the custom*field*option\n"
                },
                "customFieldId": {
                    "type": "integer",
                    "description": "The ID of the parent custom field\n"
                },
                "default": {
                    "type": "boolean"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the custom*field*option\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the custom*field*option\n"
                }
            },
            "required": [
                "color",
                "customFieldId",
                "default",
                "position",
                "value"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The hex color of the custom*field*option\n"
                },
                "customFieldId": {
                    "type": "integer",
                    "description": "The ID of the parent custom field\n",
                    "willReplaceOnChanges": true
                },
                "default": {
                    "type": "boolean"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the custom*field*option\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the custom*field*option\n"
                }
            },
            "requiredInputs": [
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomFieldOption resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The hex color of the custom*field*option\n"
                    },
                    "customFieldId": {
                        "type": "integer",
                        "description": "The ID of the parent custom field\n",
                        "willReplaceOnChanges": true
                    },
                    "default": {
                        "type": "boolean"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the custom*field*option\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the custom*field*option\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/customForm:CustomForm": {
            "properties": {
                "command": {
                    "type": "string",
                    "description": "The Slack command used to trigger this form.\n"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the custom form.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The custom form slug. Add this to form*field.shown or form*field.required to associate form fields with custom forms.\n"
                }
            },
            "required": [
                "command",
                "description",
                "name",
                "slug"
            ],
            "inputProperties": {
                "command": {
                    "type": "string",
                    "description": "The Slack command used to trigger this form.\n"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the custom form.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The custom form slug. Add this to form*field.shown or form*field.required to associate form fields with custom forms.\n"
                }
            },
            "requiredInputs": [
                "command"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomForm resources.\n",
                "properties": {
                    "command": {
                        "type": "string",
                        "description": "The Slack command used to trigger this form.\n"
                    },
                    "description": {
                        "type": "string"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the custom form.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The custom form slug. Add this to form*field.shown or form*field.required to associate form fields with custom forms.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/dashboard:Dashboard": {
            "description": "Manages dashboards.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst overview = new rootly.Dashboard(\"overview\", {});\nconst incidentsBySeverity = new rootly.DashboardPanel(\"incidentsBySeverity\", {\n    dashboardId: rootly_dashboard.foo.id,\n    params: {\n        display: \"line_chart\",\n        datasets: [{\n            collection: \"incidents\",\n            filters: [{\n                operation: \"and\",\n                rules: [{\n                    operation: \"and\",\n                    condition: \"=\",\n                    key: \"status\",\n                    value: \"started\",\n                }],\n            }],\n            groupBy: \"severity\",\n            aggregate: {\n                cumulative: false,\n                key: \"results\",\n                operation: \"count\",\n            },\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\noverview = rootly.Dashboard(\"overview\")\nincidents_by_severity = rootly.DashboardPanel(\"incidentsBySeverity\",\n    dashboard_id=rootly_dashboard[\"foo\"][\"id\"],\n    params=rootly.DashboardPanelParamsArgs(\n        display=\"line_chart\",\n        datasets=[rootly.DashboardPanelParamsDatasetArgs(\n            collection=\"incidents\",\n            filters=[rootly.DashboardPanelParamsDatasetFilterArgs(\n                operation=\"and\",\n                rules=[rootly.DashboardPanelParamsDatasetFilterRuleArgs(\n                    operation=\"and\",\n                    condition=\"=\",\n                    key=\"status\",\n                    value=\"started\",\n                )],\n            )],\n            group_by=\"severity\",\n            aggregate=rootly.DashboardPanelParamsDatasetAggregateArgs(\n                cumulative=False,\n                key=\"results\",\n                operation=\"count\",\n            ),\n        )],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var overview = new Rootly.Dashboard(\"overview\");\n\n    var incidentsBySeverity = new Rootly.DashboardPanel(\"incidentsBySeverity\", new()\n    {\n        DashboardId = rootly_dashboard.Foo.Id,\n        Params = new Rootly.Inputs.DashboardPanelParamsArgs\n        {\n            Display = \"line_chart\",\n            Datasets = new[]\n            {\n                new Rootly.Inputs.DashboardPanelParamsDatasetArgs\n                {\n                    Collection = \"incidents\",\n                    Filters = new[]\n                    {\n                        new Rootly.Inputs.DashboardPanelParamsDatasetFilterArgs\n                        {\n                            Operation = \"and\",\n                            Rules = new[]\n                            {\n                                new Rootly.Inputs.DashboardPanelParamsDatasetFilterRuleArgs\n                                {\n                                    Operation = \"and\",\n                                    Condition = \"=\",\n                                    Key = \"status\",\n                                    Value = \"started\",\n                                },\n                            },\n                        },\n                    },\n                    GroupBy = \"severity\",\n                    Aggregate = new Rootly.Inputs.DashboardPanelParamsDatasetAggregateArgs\n                    {\n                        Cumulative = false,\n                        Key = \"results\",\n                        Operation = \"count\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.NewDashboard(ctx, \"overview\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewDashboardPanel(ctx, \"incidentsBySeverity\", \u0026rootly.DashboardPanelArgs{\n\t\t\tDashboardId: pulumi.Any(rootly_dashboard.Foo.Id),\n\t\t\tParams: \u0026rootly.DashboardPanelParamsArgs{\n\t\t\t\tDisplay: pulumi.String(\"line_chart\"),\n\t\t\t\tDatasets: rootly.DashboardPanelParamsDatasetArray{\n\t\t\t\t\t\u0026rootly.DashboardPanelParamsDatasetArgs{\n\t\t\t\t\t\tCollection: pulumi.String(\"incidents\"),\n\t\t\t\t\t\tFilters: rootly.DashboardPanelParamsDatasetFilterArray{\n\t\t\t\t\t\t\t\u0026rootly.DashboardPanelParamsDatasetFilterArgs{\n\t\t\t\t\t\t\t\tOperation: pulumi.String(\"and\"),\n\t\t\t\t\t\t\t\tRules: rootly.DashboardPanelParamsDatasetFilterRuleArray{\n\t\t\t\t\t\t\t\t\t\u0026rootly.DashboardPanelParamsDatasetFilterRuleArgs{\n\t\t\t\t\t\t\t\t\t\tOperation: pulumi.String(\"and\"),\n\t\t\t\t\t\t\t\t\t\tCondition: pulumi.String(\"=\"),\n\t\t\t\t\t\t\t\t\t\tKey:       pulumi.String(\"status\"),\n\t\t\t\t\t\t\t\t\t\tValue:     pulumi.String(\"started\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tGroupBy: pulumi.String(\"severity\"),\n\t\t\t\t\t\tAggregate: \u0026rootly.DashboardPanelParamsDatasetAggregateArgs{\n\t\t\t\t\t\t\tCumulative: pulumi.Bool(false),\n\t\t\t\t\t\t\tKey:        pulumi.String(\"results\"),\n\t\t\t\t\t\t\tOperation:  pulumi.String(\"count\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.Dashboard;\nimport com.pulumi.rootly.DashboardPanel;\nimport com.pulumi.rootly.DashboardPanelArgs;\nimport com.pulumi.rootly.inputs.DashboardPanelParamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var overview = new Dashboard(\"overview\");\n\n        var incidentsBySeverity = new DashboardPanel(\"incidentsBySeverity\", DashboardPanelArgs.builder()        \n            .dashboardId(rootly_dashboard.foo().id())\n            .params(DashboardPanelParamsArgs.builder()\n                .display(\"line_chart\")\n                .datasets(DashboardPanelParamsDatasetArgs.builder()\n                    .collection(\"incidents\")\n                    .filters(DashboardPanelParamsDatasetFilterArgs.builder()\n                        .operation(\"and\")\n                        .rules(DashboardPanelParamsDatasetFilterRuleArgs.builder()\n                            .operation(\"and\")\n                            .condition(\"=\")\n                            .key(\"status\")\n                            .value(\"started\")\n                            .build())\n                        .build())\n                    .groupBy(\"severity\")\n                    .aggregate(DashboardPanelParamsDatasetAggregateArgs.builder()\n                        .cumulative(false)\n                        .key(\"results\")\n                        .operation(\"count\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  overview:\n    type: rootly:Dashboard\n  incidentsBySeverity:\n    type: rootly:DashboardPanel\n    properties:\n      dashboardId: ${rootly_dashboard.foo.id}\n      params:\n        display: line_chart\n        datasets:\n          - collection: incidents\n            filters:\n              - operation: and\n                rules:\n                  - operation: and\n                    condition: =\n                    key: status\n                    value: started\n            groupBy: severity\n            aggregate:\n              cumulative: false\n              key: results\n              operation: count\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the dashboard\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Whether the dashboard is owned by organization or user.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the dashboard is public\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the dashboard\n"
                },
                "userId": {
                    "type": "integer",
                    "description": "The user_id of the dashboard, for dashboards with owner == user\n"
                }
            },
            "required": [
                "name",
                "slug",
                "userId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the dashboard\n"
                },
                "owner": {
                    "type": "string",
                    "description": "Whether the dashboard is owned by organization or user.\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Whether the dashboard is public\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Dashboard resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the dashboard\n"
                    },
                    "owner": {
                        "type": "string",
                        "description": "Whether the dashboard is owned by organization or user.\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Whether the dashboard is public\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the dashboard\n"
                    },
                    "userId": {
                        "type": "integer",
                        "description": "The user_id of the dashboard, for dashboards with owner == user\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/dashboardPanel:DashboardPanel": {
            "description": "Manages dashboard_panels.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst overview = new rootly.Dashboard(\"overview\", {});\nconst incidentsBySeverity = new rootly.DashboardPanel(\"incidentsBySeverity\", {\n    dashboardId: rootly_dashboard.foo.id,\n    params: {\n        display: \"line_chart\",\n        datasets: [{\n            collection: \"incidents\",\n            filters: [{\n                operation: \"and\",\n                rules: [{\n                    operation: \"and\",\n                    condition: \"=\",\n                    key: \"status\",\n                    value: \"started\",\n                }],\n            }],\n            groupBy: \"severity\",\n            aggregate: {\n                cumulative: false,\n                key: \"results\",\n                operation: \"count\",\n            },\n        }],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\noverview = rootly.Dashboard(\"overview\")\nincidents_by_severity = rootly.DashboardPanel(\"incidentsBySeverity\",\n    dashboard_id=rootly_dashboard[\"foo\"][\"id\"],\n    params=rootly.DashboardPanelParamsArgs(\n        display=\"line_chart\",\n        datasets=[rootly.DashboardPanelParamsDatasetArgs(\n            collection=\"incidents\",\n            filters=[rootly.DashboardPanelParamsDatasetFilterArgs(\n                operation=\"and\",\n                rules=[rootly.DashboardPanelParamsDatasetFilterRuleArgs(\n                    operation=\"and\",\n                    condition=\"=\",\n                    key=\"status\",\n                    value=\"started\",\n                )],\n            )],\n            group_by=\"severity\",\n            aggregate=rootly.DashboardPanelParamsDatasetAggregateArgs(\n                cumulative=False,\n                key=\"results\",\n                operation=\"count\",\n            ),\n        )],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var overview = new Rootly.Dashboard(\"overview\");\n\n    var incidentsBySeverity = new Rootly.DashboardPanel(\"incidentsBySeverity\", new()\n    {\n        DashboardId = rootly_dashboard.Foo.Id,\n        Params = new Rootly.Inputs.DashboardPanelParamsArgs\n        {\n            Display = \"line_chart\",\n            Datasets = new[]\n            {\n                new Rootly.Inputs.DashboardPanelParamsDatasetArgs\n                {\n                    Collection = \"incidents\",\n                    Filters = new[]\n                    {\n                        new Rootly.Inputs.DashboardPanelParamsDatasetFilterArgs\n                        {\n                            Operation = \"and\",\n                            Rules = new[]\n                            {\n                                new Rootly.Inputs.DashboardPanelParamsDatasetFilterRuleArgs\n                                {\n                                    Operation = \"and\",\n                                    Condition = \"=\",\n                                    Key = \"status\",\n                                    Value = \"started\",\n                                },\n                            },\n                        },\n                    },\n                    GroupBy = \"severity\",\n                    Aggregate = new Rootly.Inputs.DashboardPanelParamsDatasetAggregateArgs\n                    {\n                        Cumulative = false,\n                        Key = \"results\",\n                        Operation = \"count\",\n                    },\n                },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.NewDashboard(ctx, \"overview\", nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewDashboardPanel(ctx, \"incidentsBySeverity\", \u0026rootly.DashboardPanelArgs{\n\t\t\tDashboardId: pulumi.Any(rootly_dashboard.Foo.Id),\n\t\t\tParams: \u0026rootly.DashboardPanelParamsArgs{\n\t\t\t\tDisplay: pulumi.String(\"line_chart\"),\n\t\t\t\tDatasets: rootly.DashboardPanelParamsDatasetArray{\n\t\t\t\t\t\u0026rootly.DashboardPanelParamsDatasetArgs{\n\t\t\t\t\t\tCollection: pulumi.String(\"incidents\"),\n\t\t\t\t\t\tFilters: rootly.DashboardPanelParamsDatasetFilterArray{\n\t\t\t\t\t\t\t\u0026rootly.DashboardPanelParamsDatasetFilterArgs{\n\t\t\t\t\t\t\t\tOperation: pulumi.String(\"and\"),\n\t\t\t\t\t\t\t\tRules: rootly.DashboardPanelParamsDatasetFilterRuleArray{\n\t\t\t\t\t\t\t\t\t\u0026rootly.DashboardPanelParamsDatasetFilterRuleArgs{\n\t\t\t\t\t\t\t\t\t\tOperation: pulumi.String(\"and\"),\n\t\t\t\t\t\t\t\t\t\tCondition: pulumi.String(\"=\"),\n\t\t\t\t\t\t\t\t\t\tKey:       pulumi.String(\"status\"),\n\t\t\t\t\t\t\t\t\t\tValue:     pulumi.String(\"started\"),\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t\tGroupBy: pulumi.String(\"severity\"),\n\t\t\t\t\t\tAggregate: \u0026rootly.DashboardPanelParamsDatasetAggregateArgs{\n\t\t\t\t\t\t\tCumulative: pulumi.Bool(false),\n\t\t\t\t\t\t\tKey:        pulumi.String(\"results\"),\n\t\t\t\t\t\t\tOperation:  pulumi.String(\"count\"),\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.Dashboard;\nimport com.pulumi.rootly.DashboardPanel;\nimport com.pulumi.rootly.DashboardPanelArgs;\nimport com.pulumi.rootly.inputs.DashboardPanelParamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var overview = new Dashboard(\"overview\");\n\n        var incidentsBySeverity = new DashboardPanel(\"incidentsBySeverity\", DashboardPanelArgs.builder()        \n            .dashboardId(rootly_dashboard.foo().id())\n            .params(DashboardPanelParamsArgs.builder()\n                .display(\"line_chart\")\n                .datasets(DashboardPanelParamsDatasetArgs.builder()\n                    .collection(\"incidents\")\n                    .filters(DashboardPanelParamsDatasetFilterArgs.builder()\n                        .operation(\"and\")\n                        .rules(DashboardPanelParamsDatasetFilterRuleArgs.builder()\n                            .operation(\"and\")\n                            .condition(\"=\")\n                            .key(\"status\")\n                            .value(\"started\")\n                            .build())\n                        .build())\n                    .groupBy(\"severity\")\n                    .aggregate(DashboardPanelParamsDatasetAggregateArgs.builder()\n                        .cumulative(false)\n                        .key(\"results\")\n                        .operation(\"count\")\n                        .build())\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  overview:\n    type: rootly:Dashboard\n  incidentsBySeverity:\n    type: rootly:DashboardPanel\n    properties:\n      dashboardId: ${rootly_dashboard.foo.id}\n      params:\n        display: line_chart\n        datasets:\n          - collection: incidents\n            filters:\n              - operation: and\n                rules:\n                  - operation: and\n                    condition: =\n                    key: status\n                    value: started\n            groupBy: severity\n            aggregate:\n              cumulative: false\n              key: results\n              operation: count\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "dashboardId": {
                    "type": "string",
                    "description": "The id of the parent dashboard\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the dashboard_panel\n"
                },
                "params": {
                    "$ref": "#/types/rootly:index/DashboardPanelParams:DashboardPanelParams",
                    "description": "The params JSON of the dashboard_panel. See rootly API docs for schema.\n"
                },
                "position": {
                    "$ref": "#/types/rootly:index/DashboardPanelPosition:DashboardPanelPosition"
                }
            },
            "required": [
                "dashboardId",
                "name",
                "params"
            ],
            "inputProperties": {
                "dashboardId": {
                    "type": "string",
                    "description": "The id of the parent dashboard\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the dashboard_panel\n"
                },
                "params": {
                    "$ref": "#/types/rootly:index/DashboardPanelParams:DashboardPanelParams",
                    "description": "The params JSON of the dashboard_panel. See rootly API docs for schema.\n"
                },
                "position": {
                    "$ref": "#/types/rootly:index/DashboardPanelPosition:DashboardPanelPosition"
                }
            },
            "requiredInputs": [
                "dashboardId",
                "params"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DashboardPanel resources.\n",
                "properties": {
                    "dashboardId": {
                        "type": "string",
                        "description": "The id of the parent dashboard\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the dashboard_panel\n"
                    },
                    "params": {
                        "$ref": "#/types/rootly:index/DashboardPanelParams:DashboardPanelParams",
                        "description": "The params JSON of the dashboard_panel. See rootly API docs for schema.\n"
                    },
                    "position": {
                        "$ref": "#/types/rootly:index/DashboardPanelPosition:DashboardPanelPosition"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/environment:Environment": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst development = new rootly.Environment(\"development\", {\n    color: \"#FF0000\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\",\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\",\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\",\n        },\n    ],\n});\nconst staging = new rootly.Environment(\"staging\", {\n    color: \"#FFA500\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\",\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\",\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\",\n        },\n    ],\n});\nconst production = new rootly.Environment(\"production\", {\n    color: \"#FFA500\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\",\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\",\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\ndevelopment = rootly.Environment(\"development\",\n    color=\"#FF0000\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.EnvironmentSlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.EnvironmentSlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.EnvironmentSlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\nstaging = rootly.Environment(\"staging\",\n    color=\"#FFA500\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.EnvironmentSlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.EnvironmentSlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.EnvironmentSlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\nproduction = rootly.Environment(\"production\",\n    color=\"#FFA500\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.EnvironmentSlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.EnvironmentSlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.EnvironmentSlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var development = new Rootly.Environment(\"development\", new()\n    {\n        Color = \"#FF0000\",\n        NotifyEmails = new[]\n        {\n            \"foo@acme.com\",\n            \"bar@acme.com\",\n        },\n        SlackAliases = new[]\n        {\n            new Rootly.Inputs.EnvironmentSlackAliasArgs\n            {\n                Id = \"S0614TZR7\",\n                Name = \"Alias 1\",\n            },\n        },\n        SlackChannels = new[]\n        {\n            new Rootly.Inputs.EnvironmentSlackChannelArgs\n            {\n                Id = \"C06A4RZR9\",\n                Name = \"Channel 1\",\n            },\n            new Rootly.Inputs.EnvironmentSlackChannelArgs\n            {\n                Id = \"C02T4RYR2\",\n                Name = \"Channel 2\",\n            },\n        },\n    });\n\n    var staging = new Rootly.Environment(\"staging\", new()\n    {\n        Color = \"#FFA500\",\n        NotifyEmails = new[]\n        {\n            \"foo@acme.com\",\n            \"bar@acme.com\",\n        },\n        SlackAliases = new[]\n        {\n            new Rootly.Inputs.EnvironmentSlackAliasArgs\n            {\n                Id = \"S0614TZR7\",\n                Name = \"Alias 1\",\n            },\n        },\n        SlackChannels = new[]\n        {\n            new Rootly.Inputs.EnvironmentSlackChannelArgs\n            {\n                Id = \"C06A4RZR9\",\n                Name = \"Channel 1\",\n            },\n            new Rootly.Inputs.EnvironmentSlackChannelArgs\n            {\n                Id = \"C02T4RYR2\",\n                Name = \"Channel 2\",\n            },\n        },\n    });\n\n    var production = new Rootly.Environment(\"production\", new()\n    {\n        Color = \"#FFA500\",\n        NotifyEmails = new[]\n        {\n            \"foo@acme.com\",\n            \"bar@acme.com\",\n        },\n        SlackAliases = new[]\n        {\n            new Rootly.Inputs.EnvironmentSlackAliasArgs\n            {\n                Id = \"S0614TZR7\",\n                Name = \"Alias 1\",\n            },\n        },\n        SlackChannels = new[]\n        {\n            new Rootly.Inputs.EnvironmentSlackChannelArgs\n            {\n                Id = \"C06A4RZR9\",\n                Name = \"Channel 1\",\n            },\n            new Rootly.Inputs.EnvironmentSlackChannelArgs\n            {\n                Id = \"C02T4RYR2\",\n                Name = \"Channel 2\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.NewEnvironment(ctx, \"development\", \u0026rootly.EnvironmentArgs{\n\t\t\tColor: pulumi.String(\"#FF0000\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: rootly.EnvironmentSlackAliasArray{\n\t\t\t\t\u0026rootly.EnvironmentSlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: rootly.EnvironmentSlackChannelArray{\n\t\t\t\t\u0026rootly.EnvironmentSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026rootly.EnvironmentSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewEnvironment(ctx, \"staging\", \u0026rootly.EnvironmentArgs{\n\t\t\tColor: pulumi.String(\"#FFA500\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: rootly.EnvironmentSlackAliasArray{\n\t\t\t\t\u0026rootly.EnvironmentSlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: rootly.EnvironmentSlackChannelArray{\n\t\t\t\t\u0026rootly.EnvironmentSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026rootly.EnvironmentSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewEnvironment(ctx, \"production\", \u0026rootly.EnvironmentArgs{\n\t\t\tColor: pulumi.String(\"#FFA500\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: rootly.EnvironmentSlackAliasArray{\n\t\t\t\t\u0026rootly.EnvironmentSlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: rootly.EnvironmentSlackChannelArray{\n\t\t\t\t\u0026rootly.EnvironmentSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026rootly.EnvironmentSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.Environment;\nimport com.pulumi.rootly.EnvironmentArgs;\nimport com.pulumi.rootly.inputs.EnvironmentSlackAliasArgs;\nimport com.pulumi.rootly.inputs.EnvironmentSlackChannelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var development = new Environment(\"development\", EnvironmentArgs.builder()        \n            .color(\"#FF0000\")\n            .notifyEmails(            \n                \"foo@acme.com\",\n                \"bar@acme.com\")\n            .slackAliases(EnvironmentSlackAliasArgs.builder()\n                .id(\"S0614TZR7\")\n                .name(\"Alias 1\")\n                .build())\n            .slackChannels(            \n                EnvironmentSlackChannelArgs.builder()\n                    .id(\"C06A4RZR9\")\n                    .name(\"Channel 1\")\n                    .build(),\n                EnvironmentSlackChannelArgs.builder()\n                    .id(\"C02T4RYR2\")\n                    .name(\"Channel 2\")\n                    .build())\n            .build());\n\n        var staging = new Environment(\"staging\", EnvironmentArgs.builder()        \n            .color(\"#FFA500\")\n            .notifyEmails(            \n                \"foo@acme.com\",\n                \"bar@acme.com\")\n            .slackAliases(EnvironmentSlackAliasArgs.builder()\n                .id(\"S0614TZR7\")\n                .name(\"Alias 1\")\n                .build())\n            .slackChannels(            \n                EnvironmentSlackChannelArgs.builder()\n                    .id(\"C06A4RZR9\")\n                    .name(\"Channel 1\")\n                    .build(),\n                EnvironmentSlackChannelArgs.builder()\n                    .id(\"C02T4RYR2\")\n                    .name(\"Channel 2\")\n                    .build())\n            .build());\n\n        var production = new Environment(\"production\", EnvironmentArgs.builder()        \n            .color(\"#FFA500\")\n            .notifyEmails(            \n                \"foo@acme.com\",\n                \"bar@acme.com\")\n            .slackAliases(EnvironmentSlackAliasArgs.builder()\n                .id(\"S0614TZR7\")\n                .name(\"Alias 1\")\n                .build())\n            .slackChannels(            \n                EnvironmentSlackChannelArgs.builder()\n                    .id(\"C06A4RZR9\")\n                    .name(\"Channel 1\")\n                    .build(),\n                EnvironmentSlackChannelArgs.builder()\n                    .id(\"C02T4RYR2\")\n                    .name(\"Channel 2\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  development:\n    type: rootly:Environment\n    properties:\n      color: '#FF0000'\n      notifyEmails:\n        - foo@acme.com\n        - bar@acme.com\n      slackAliases:\n        - id: S0614TZR7\n          name: Alias 1\n      slackChannels:\n        - id: C06A4RZR9\n          name: Channel 1\n        - id: C02T4RYR2\n          name: Channel 2\n  staging:\n    type: rootly:Environment\n    properties:\n      color: '#FFA500'\n      notifyEmails:\n        - foo@acme.com\n        - bar@acme.com\n      slackAliases:\n        - id: S0614TZR7\n          name: Alias 1\n      slackChannels:\n        - id: C06A4RZR9\n          name: Channel 1\n        - id: C02T4RYR2\n          name: Channel 2\n  production:\n    type: rootly:Environment\n    properties:\n      color: '#FFA500'\n      notifyEmails:\n        - foo@acme.com\n        - bar@acme.com\n      slackAliases:\n        - id: S0614TZR7\n          name: Alias 1\n      slackChannels:\n        - id: C06A4RZR9\n          name: Channel 1\n        - id: C02T4RYR2\n          name: Channel 2\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The hex color of the environment\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the environment\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the environment\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails attached to the environment\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the environment\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/EnvironmentSlackAlias:EnvironmentSlackAlias"
                    },
                    "description": "Slack Aliases associated with this environment\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/EnvironmentSlackChannel:EnvironmentSlackChannel"
                    },
                    "description": "Slack Channels associated with this environment\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the environment\n"
                }
            },
            "required": [
                "color",
                "description",
                "name",
                "notifyEmails",
                "position",
                "slackAliases",
                "slackChannels",
                "slug"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The hex color of the environment\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the environment\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the environment\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails attached to the environment\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the environment\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/EnvironmentSlackAlias:EnvironmentSlackAlias"
                    },
                    "description": "Slack Aliases associated with this environment\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/EnvironmentSlackChannel:EnvironmentSlackChannel"
                    },
                    "description": "Slack Channels associated with this environment\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the environment\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Environment resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The hex color of the environment\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the environment\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the environment\n"
                    },
                    "notifyEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Emails attached to the environment\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position of the environment\n"
                    },
                    "slackAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/EnvironmentSlackAlias:EnvironmentSlackAlias"
                        },
                        "description": "Slack Aliases associated with this environment\n"
                    },
                    "slackChannels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/EnvironmentSlackChannel:EnvironmentSlackChannel"
                        },
                        "description": "Slack Channels associated with this environment\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the environment\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/formField:FormField": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst regionsAffected = new rootly.FormField(\"regionsAffected\", {\n    kind: \"custom\",\n    inputKind: \"multi_select\",\n    showns: [\n        \"web_new_incident_form\",\n        \"web_update_incident_form\",\n    ],\n    requireds: [\n        \"web_new_incident_form\",\n        \"web_update_incident_form\",\n    ],\n});\nconst asia = new rootly.FormFieldOption(\"asia\", {\n    formFieldId: regionsAffected.id,\n    value: \"Asia\",\n});\nconst europe = new rootly.FormFieldOption(\"europe\", {\n    formFieldId: regionsAffected.id,\n    value: \"Europe\",\n});\nconst northAmerica = new rootly.FormFieldOption(\"northAmerica\", {\n    formFieldId: regionsAffected.id,\n    value: \"North America\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nregions_affected = rootly.FormField(\"regionsAffected\",\n    kind=\"custom\",\n    input_kind=\"multi_select\",\n    showns=[\n        \"web_new_incident_form\",\n        \"web_update_incident_form\",\n    ],\n    requireds=[\n        \"web_new_incident_form\",\n        \"web_update_incident_form\",\n    ])\nasia = rootly.FormFieldOption(\"asia\",\n    form_field_id=regions_affected.id,\n    value=\"Asia\")\neurope = rootly.FormFieldOption(\"europe\",\n    form_field_id=regions_affected.id,\n    value=\"Europe\")\nnorth_america = rootly.FormFieldOption(\"northAmerica\",\n    form_field_id=regions_affected.id,\n    value=\"North America\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var regionsAffected = new Rootly.FormField(\"regionsAffected\", new()\n    {\n        Kind = \"custom\",\n        InputKind = \"multi_select\",\n        Showns = new[]\n        {\n            \"web_new_incident_form\",\n            \"web_update_incident_form\",\n        },\n        Requireds = new[]\n        {\n            \"web_new_incident_form\",\n            \"web_update_incident_form\",\n        },\n    });\n\n    var asia = new Rootly.FormFieldOption(\"asia\", new()\n    {\n        FormFieldId = regionsAffected.Id,\n        Value = \"Asia\",\n    });\n\n    var europe = new Rootly.FormFieldOption(\"europe\", new()\n    {\n        FormFieldId = regionsAffected.Id,\n        Value = \"Europe\",\n    });\n\n    var northAmerica = new Rootly.FormFieldOption(\"northAmerica\", new()\n    {\n        FormFieldId = regionsAffected.Id,\n        Value = \"North America\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tregionsAffected, err := rootly.NewFormField(ctx, \"regionsAffected\", \u0026rootly.FormFieldArgs{\n\t\t\tKind:      pulumi.String(\"custom\"),\n\t\t\tInputKind: pulumi.String(\"multi_select\"),\n\t\t\tShowns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"web_new_incident_form\"),\n\t\t\t\tpulumi.String(\"web_update_incident_form\"),\n\t\t\t},\n\t\t\tRequireds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"web_new_incident_form\"),\n\t\t\t\tpulumi.String(\"web_update_incident_form\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewFormFieldOption(ctx, \"asia\", \u0026rootly.FormFieldOptionArgs{\n\t\t\tFormFieldId: regionsAffected.ID(),\n\t\t\tValue:       pulumi.String(\"Asia\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewFormFieldOption(ctx, \"europe\", \u0026rootly.FormFieldOptionArgs{\n\t\t\tFormFieldId: regionsAffected.ID(),\n\t\t\tValue:       pulumi.String(\"Europe\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewFormFieldOption(ctx, \"northAmerica\", \u0026rootly.FormFieldOptionArgs{\n\t\t\tFormFieldId: regionsAffected.ID(),\n\t\t\tValue:       pulumi.String(\"North America\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.FormField;\nimport com.pulumi.rootly.FormFieldArgs;\nimport com.pulumi.rootly.FormFieldOption;\nimport com.pulumi.rootly.FormFieldOptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var regionsAffected = new FormField(\"regionsAffected\", FormFieldArgs.builder()        \n            .kind(\"custom\")\n            .inputKind(\"multi_select\")\n            .showns(            \n                \"web_new_incident_form\",\n                \"web_update_incident_form\")\n            .requireds(            \n                \"web_new_incident_form\",\n                \"web_update_incident_form\")\n            .build());\n\n        var asia = new FormFieldOption(\"asia\", FormFieldOptionArgs.builder()        \n            .formFieldId(regionsAffected.id())\n            .value(\"Asia\")\n            .build());\n\n        var europe = new FormFieldOption(\"europe\", FormFieldOptionArgs.builder()        \n            .formFieldId(regionsAffected.id())\n            .value(\"Europe\")\n            .build());\n\n        var northAmerica = new FormFieldOption(\"northAmerica\", FormFieldOptionArgs.builder()        \n            .formFieldId(regionsAffected.id())\n            .value(\"North America\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  regionsAffected:\n    type: rootly:FormField\n    properties:\n      kind: custom\n      inputKind: multi_select\n      showns:\n        - web_new_incident_form\n        - web_update_incident_form\n      requireds:\n        - web_new_incident_form\n        - web_update_incident_form\n  asia:\n    type: rootly:FormFieldOption\n    properties:\n      formFieldId: ${regionsAffected.id}\n      value: Asia\n  europe:\n    type: rootly:FormFieldOption\n    properties:\n      formFieldId: ${regionsAffected.id}\n      value: Europe\n  northAmerica:\n    type: rootly:FormFieldOption\n    properties:\n      formFieldId: ${regionsAffected.id}\n      value: North America\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "defaultValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the form field\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "inputKind": {
                    "type": "string",
                    "description": "The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multi_select`, `date`, `datetime`, `number`, `checkbox`, `tags`, `rich_text`.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the form field. Value must be one of `custom`, `title`, `summary`, `severity`, `environments`, `types`, `services`, `causes`, `functionalities`, `teams`, `visibility`, `mark_as_test`, `mark_as_backfilled`, `labels`, `notify_emails`, `trigger_manual_workflows`, `show_ongoing_incidents`, `attach_alerts`, `mark_as_in_triage`, `manual_starting_datetime_field`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the form field\n"
                },
                "requireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "showOnIncidentDetails": {
                    "type": "boolean",
                    "description": "Whether the form field is shown on the incident details panel. Value must be one of true or false\n"
                },
                "showns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the form field\n"
                },
                "valueKind": {
                    "type": "string",
                    "description": "The value kind of the form field. Value must be one of `inherit`, `group`, `service`, `user`.\n"
                }
            },
            "required": [
                "defaultValues",
                "description",
                "name",
                "requireds",
                "showOnIncidentDetails",
                "showns",
                "slug"
            ],
            "inputProperties": {
                "defaultValues": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "description": {
                    "type": "string",
                    "description": "The description of the form field\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "inputKind": {
                    "type": "string",
                    "description": "The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multi_select`, `date`, `datetime`, `number`, `checkbox`, `tags`, `rich_text`.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the form field. Value must be one of `custom`, `title`, `summary`, `severity`, `environments`, `types`, `services`, `causes`, `functionalities`, `teams`, `visibility`, `mark_as_test`, `mark_as_backfilled`, `labels`, `notify_emails`, `trigger_manual_workflows`, `show_ongoing_incidents`, `attach_alerts`, `mark_as_in_triage`, `manual_starting_datetime_field`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the form field\n"
                },
                "requireds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "showOnIncidentDetails": {
                    "type": "boolean",
                    "description": "Whether the form field is shown on the incident details panel. Value must be one of true or false\n"
                },
                "showns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the form field\n"
                },
                "valueKind": {
                    "type": "string",
                    "description": "The value kind of the form field. Value must be one of `inherit`, `group`, `service`, `user`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FormField resources.\n",
                "properties": {
                    "defaultValues": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the form field\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "inputKind": {
                        "type": "string",
                        "description": "The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multi_select`, `date`, `datetime`, `number`, `checkbox`, `tags`, `rich_text`.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "The kind of the form field. Value must be one of `custom`, `title`, `summary`, `severity`, `environments`, `types`, `services`, `causes`, `functionalities`, `teams`, `visibility`, `mark_as_test`, `mark_as_backfilled`, `labels`, `notify_emails`, `trigger_manual_workflows`, `show_ongoing_incidents`, `attach_alerts`, `mark_as_in_triage`, `manual_starting_datetime_field`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the form field\n"
                    },
                    "requireds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "showOnIncidentDetails": {
                        "type": "boolean",
                        "description": "Whether the form field is shown on the incident details panel. Value must be one of true or false\n"
                    },
                    "showns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the form field\n"
                    },
                    "valueKind": {
                        "type": "string",
                        "description": "The value kind of the form field. Value must be one of `inherit`, `group`, `service`, `user`.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/formFieldOption:FormFieldOption": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst regionsAffected = new rootly.FormField(\"regionsAffected\", {\n    kind: \"custom\",\n    inputKind: \"multi_select\",\n    showns: [\n        \"web_new_incident_form\",\n        \"web_update_incident_form\",\n    ],\n    requireds: [\n        \"web_new_incident_form\",\n        \"web_update_incident_form\",\n    ],\n});\nconst asia = new rootly.FormFieldOption(\"asia\", {\n    formFieldId: regionsAffected.id,\n    value: \"Asia\",\n});\nconst europe = new rootly.FormFieldOption(\"europe\", {\n    formFieldId: regionsAffected.id,\n    value: \"Europe\",\n});\nconst northAmerica = new rootly.FormFieldOption(\"northAmerica\", {\n    formFieldId: regionsAffected.id,\n    value: \"North America\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nregions_affected = rootly.FormField(\"regionsAffected\",\n    kind=\"custom\",\n    input_kind=\"multi_select\",\n    showns=[\n        \"web_new_incident_form\",\n        \"web_update_incident_form\",\n    ],\n    requireds=[\n        \"web_new_incident_form\",\n        \"web_update_incident_form\",\n    ])\nasia = rootly.FormFieldOption(\"asia\",\n    form_field_id=regions_affected.id,\n    value=\"Asia\")\neurope = rootly.FormFieldOption(\"europe\",\n    form_field_id=regions_affected.id,\n    value=\"Europe\")\nnorth_america = rootly.FormFieldOption(\"northAmerica\",\n    form_field_id=regions_affected.id,\n    value=\"North America\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var regionsAffected = new Rootly.FormField(\"regionsAffected\", new()\n    {\n        Kind = \"custom\",\n        InputKind = \"multi_select\",\n        Showns = new[]\n        {\n            \"web_new_incident_form\",\n            \"web_update_incident_form\",\n        },\n        Requireds = new[]\n        {\n            \"web_new_incident_form\",\n            \"web_update_incident_form\",\n        },\n    });\n\n    var asia = new Rootly.FormFieldOption(\"asia\", new()\n    {\n        FormFieldId = regionsAffected.Id,\n        Value = \"Asia\",\n    });\n\n    var europe = new Rootly.FormFieldOption(\"europe\", new()\n    {\n        FormFieldId = regionsAffected.Id,\n        Value = \"Europe\",\n    });\n\n    var northAmerica = new Rootly.FormFieldOption(\"northAmerica\", new()\n    {\n        FormFieldId = regionsAffected.Id,\n        Value = \"North America\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tregionsAffected, err := rootly.NewFormField(ctx, \"regionsAffected\", \u0026rootly.FormFieldArgs{\n\t\t\tKind:      pulumi.String(\"custom\"),\n\t\t\tInputKind: pulumi.String(\"multi_select\"),\n\t\t\tShowns: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"web_new_incident_form\"),\n\t\t\t\tpulumi.String(\"web_update_incident_form\"),\n\t\t\t},\n\t\t\tRequireds: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"web_new_incident_form\"),\n\t\t\t\tpulumi.String(\"web_update_incident_form\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewFormFieldOption(ctx, \"asia\", \u0026rootly.FormFieldOptionArgs{\n\t\t\tFormFieldId: regionsAffected.ID(),\n\t\t\tValue:       pulumi.String(\"Asia\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewFormFieldOption(ctx, \"europe\", \u0026rootly.FormFieldOptionArgs{\n\t\t\tFormFieldId: regionsAffected.ID(),\n\t\t\tValue:       pulumi.String(\"Europe\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewFormFieldOption(ctx, \"northAmerica\", \u0026rootly.FormFieldOptionArgs{\n\t\t\tFormFieldId: regionsAffected.ID(),\n\t\t\tValue:       pulumi.String(\"North America\"),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.FormField;\nimport com.pulumi.rootly.FormFieldArgs;\nimport com.pulumi.rootly.FormFieldOption;\nimport com.pulumi.rootly.FormFieldOptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var regionsAffected = new FormField(\"regionsAffected\", FormFieldArgs.builder()        \n            .kind(\"custom\")\n            .inputKind(\"multi_select\")\n            .showns(            \n                \"web_new_incident_form\",\n                \"web_update_incident_form\")\n            .requireds(            \n                \"web_new_incident_form\",\n                \"web_update_incident_form\")\n            .build());\n\n        var asia = new FormFieldOption(\"asia\", FormFieldOptionArgs.builder()        \n            .formFieldId(regionsAffected.id())\n            .value(\"Asia\")\n            .build());\n\n        var europe = new FormFieldOption(\"europe\", FormFieldOptionArgs.builder()        \n            .formFieldId(regionsAffected.id())\n            .value(\"Europe\")\n            .build());\n\n        var northAmerica = new FormFieldOption(\"northAmerica\", FormFieldOptionArgs.builder()        \n            .formFieldId(regionsAffected.id())\n            .value(\"North America\")\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  regionsAffected:\n    type: rootly:FormField\n    properties:\n      kind: custom\n      inputKind: multi_select\n      showns:\n        - web_new_incident_form\n        - web_update_incident_form\n      requireds:\n        - web_new_incident_form\n        - web_update_incident_form\n  asia:\n    type: rootly:FormFieldOption\n    properties:\n      formFieldId: ${regionsAffected.id}\n      value: Asia\n  europe:\n    type: rootly:FormFieldOption\n    properties:\n      formFieldId: ${regionsAffected.id}\n      value: Europe\n  northAmerica:\n    type: rootly:FormFieldOption\n    properties:\n      formFieldId: ${regionsAffected.id}\n      value: North America\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The hex color of the form*field*option\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "formFieldId": {
                    "type": "string",
                    "description": "The ID of the parent custom field\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the form*field*option\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the form*field*option\n"
                }
            },
            "required": [
                "color",
                "default",
                "formFieldId",
                "position",
                "value"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The hex color of the form*field*option\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "formFieldId": {
                    "type": "string",
                    "description": "The ID of the parent custom field\n",
                    "willReplaceOnChanges": true
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the form*field*option\n"
                },
                "value": {
                    "type": "string",
                    "description": "The value of the form*field*option\n"
                }
            },
            "requiredInputs": [
                "formFieldId",
                "value"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FormFieldOption resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The hex color of the form*field*option\n"
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Value must be one of true or false\n"
                    },
                    "formFieldId": {
                        "type": "string",
                        "description": "The ID of the parent custom field\n",
                        "willReplaceOnChanges": true
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the form*field*option\n"
                    },
                    "value": {
                        "type": "string",
                        "description": "The value of the form*field*option\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/formFieldPosition:FormFieldPosition": {
            "properties": {
                "form": {
                    "type": "string",
                    "description": "The form for the position. Value must be one of `web_new_incident_form`, `web_update_incident_form`, `web_incident_post_mortem_form`, `web_incident_mitigation_form`, `web_incident_resolution_form`, `web_incident_cancellation_form`, `web_scheduled_incident_form`, `web_update_scheduled_incident_form`, `incident_post_mortem`, `slack_new_incident_form`, `slack_update_incident_form`, `slack_update_incident_status_form`, `slack_incident_mitigation_form`, `slack_incident_resolution_form`, `slack_incident_cancellation_form`, `slack_scheduled_incident_form`, `slack_update_scheduled_incident_form`.\n"
                },
                "formFieldId": {
                    "type": "string",
                    "description": "The ID of the form field.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the form*field*position\n"
                }
            },
            "required": [
                "formFieldId",
                "position"
            ],
            "inputProperties": {
                "form": {
                    "type": "string",
                    "description": "The form for the position. Value must be one of `web_new_incident_form`, `web_update_incident_form`, `web_incident_post_mortem_form`, `web_incident_mitigation_form`, `web_incident_resolution_form`, `web_incident_cancellation_form`, `web_scheduled_incident_form`, `web_update_scheduled_incident_form`, `incident_post_mortem`, `slack_new_incident_form`, `slack_update_incident_form`, `slack_update_incident_status_form`, `slack_incident_mitigation_form`, `slack_incident_resolution_form`, `slack_incident_cancellation_form`, `slack_scheduled_incident_form`, `slack_update_scheduled_incident_form`.\n"
                },
                "formFieldId": {
                    "type": "string",
                    "description": "The ID of the form field.\n",
                    "willReplaceOnChanges": true
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the form*field*position\n"
                }
            },
            "requiredInputs": [
                "formFieldId",
                "position"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering FormFieldPosition resources.\n",
                "properties": {
                    "form": {
                        "type": "string",
                        "description": "The form for the position. Value must be one of `web_new_incident_form`, `web_update_incident_form`, `web_incident_post_mortem_form`, `web_incident_mitigation_form`, `web_incident_resolution_form`, `web_incident_cancellation_form`, `web_scheduled_incident_form`, `web_update_scheduled_incident_form`, `incident_post_mortem`, `slack_new_incident_form`, `slack_update_incident_form`, `slack_update_incident_status_form`, `slack_incident_mitigation_form`, `slack_incident_resolution_form`, `slack_incident_cancellation_form`, `slack_scheduled_incident_form`, `slack_update_scheduled_incident_form`.\n"
                    },
                    "formFieldId": {
                        "type": "string",
                        "description": "The ID of the form field.\n",
                        "willReplaceOnChanges": true
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the form*field*position\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/functionality:Functionality": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst addItemsToCard = new rootly.Functionality(\"addItemsToCard\", {\n    color: \"#800080\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\",\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\",\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\",\n        },\n    ],\n});\nconst loggingIn = new rootly.Functionality(\"loggingIn\", {\n    color: \"#800080\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\",\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\",\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nadd_items_to_card = rootly.Functionality(\"addItemsToCard\",\n    color=\"#800080\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.FunctionalitySlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.FunctionalitySlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.FunctionalitySlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\nlogging_in = rootly.Functionality(\"loggingIn\",\n    color=\"#800080\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.FunctionalitySlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.FunctionalitySlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.FunctionalitySlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var addItemsToCard = new Rootly.Functionality(\"addItemsToCard\", new()\n    {\n        Color = \"#800080\",\n        NotifyEmails = new[]\n        {\n            \"foo@acme.com\",\n            \"bar@acme.com\",\n        },\n        SlackAliases = new[]\n        {\n            new Rootly.Inputs.FunctionalitySlackAliasArgs\n            {\n                Id = \"S0614TZR7\",\n                Name = \"Alias 1\",\n            },\n        },\n        SlackChannels = new[]\n        {\n            new Rootly.Inputs.FunctionalitySlackChannelArgs\n            {\n                Id = \"C06A4RZR9\",\n                Name = \"Channel 1\",\n            },\n            new Rootly.Inputs.FunctionalitySlackChannelArgs\n            {\n                Id = \"C02T4RYR2\",\n                Name = \"Channel 2\",\n            },\n        },\n    });\n\n    var loggingIn = new Rootly.Functionality(\"loggingIn\", new()\n    {\n        Color = \"#800080\",\n        NotifyEmails = new[]\n        {\n            \"foo@acme.com\",\n            \"bar@acme.com\",\n        },\n        SlackAliases = new[]\n        {\n            new Rootly.Inputs.FunctionalitySlackAliasArgs\n            {\n                Id = \"S0614TZR7\",\n                Name = \"Alias 1\",\n            },\n        },\n        SlackChannels = new[]\n        {\n            new Rootly.Inputs.FunctionalitySlackChannelArgs\n            {\n                Id = \"C06A4RZR9\",\n                Name = \"Channel 1\",\n            },\n            new Rootly.Inputs.FunctionalitySlackChannelArgs\n            {\n                Id = \"C02T4RYR2\",\n                Name = \"Channel 2\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.NewFunctionality(ctx, \"addItemsToCard\", \u0026rootly.FunctionalityArgs{\n\t\t\tColor: pulumi.String(\"#800080\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: rootly.FunctionalitySlackAliasArray{\n\t\t\t\t\u0026rootly.FunctionalitySlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: rootly.FunctionalitySlackChannelArray{\n\t\t\t\t\u0026rootly.FunctionalitySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026rootly.FunctionalitySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewFunctionality(ctx, \"loggingIn\", \u0026rootly.FunctionalityArgs{\n\t\t\tColor: pulumi.String(\"#800080\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: rootly.FunctionalitySlackAliasArray{\n\t\t\t\t\u0026rootly.FunctionalitySlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: rootly.FunctionalitySlackChannelArray{\n\t\t\t\t\u0026rootly.FunctionalitySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026rootly.FunctionalitySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.Functionality;\nimport com.pulumi.rootly.FunctionalityArgs;\nimport com.pulumi.rootly.inputs.FunctionalitySlackAliasArgs;\nimport com.pulumi.rootly.inputs.FunctionalitySlackChannelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var addItemsToCard = new Functionality(\"addItemsToCard\", FunctionalityArgs.builder()        \n            .color(\"#800080\")\n            .notifyEmails(            \n                \"foo@acme.com\",\n                \"bar@acme.com\")\n            .slackAliases(FunctionalitySlackAliasArgs.builder()\n                .id(\"S0614TZR7\")\n                .name(\"Alias 1\")\n                .build())\n            .slackChannels(            \n                FunctionalitySlackChannelArgs.builder()\n                    .id(\"C06A4RZR9\")\n                    .name(\"Channel 1\")\n                    .build(),\n                FunctionalitySlackChannelArgs.builder()\n                    .id(\"C02T4RYR2\")\n                    .name(\"Channel 2\")\n                    .build())\n            .build());\n\n        var loggingIn = new Functionality(\"loggingIn\", FunctionalityArgs.builder()        \n            .color(\"#800080\")\n            .notifyEmails(            \n                \"foo@acme.com\",\n                \"bar@acme.com\")\n            .slackAliases(FunctionalitySlackAliasArgs.builder()\n                .id(\"S0614TZR7\")\n                .name(\"Alias 1\")\n                .build())\n            .slackChannels(            \n                FunctionalitySlackChannelArgs.builder()\n                    .id(\"C06A4RZR9\")\n                    .name(\"Channel 1\")\n                    .build(),\n                FunctionalitySlackChannelArgs.builder()\n                    .id(\"C02T4RYR2\")\n                    .name(\"Channel 2\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  addItemsToCard:\n    type: rootly:Functionality\n    properties:\n      color: '#800080'\n      notifyEmails:\n        - foo@acme.com\n        - bar@acme.com\n      slackAliases:\n        - id: S0614TZR7\n          name: Alias 1\n      slackChannels:\n        - id: C06A4RZR9\n          name: Channel 1\n        - id: C02T4RYR2\n          name: Channel 2\n  loggingIn:\n    type: rootly:Functionality\n    properties:\n      color: '#800080'\n      notifyEmails:\n        - foo@acme.com\n        - bar@acme.com\n      slackAliases:\n        - id: S0614TZR7\n          name: Alias 1\n      slackChannels:\n        - id: C06A4RZR9\n          name: Channel 1\n        - id: C02T4RYR2\n          name: Channel 2\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The hex color of the functionality\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the functionality\n"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Environments associated with this functionality\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the functionality\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails attached to the functionality\n"
                },
                "ownersGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Owner Teams associated with this functionality\n"
                },
                "ownersUserIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Owner Users associated with this service\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the functionality\n"
                },
                "publicDescription": {
                    "type": "string",
                    "description": "The public description of the functionality\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Services associated with this functionality\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/FunctionalitySlackAlias:FunctionalitySlackAlias"
                    },
                    "description": "Slack Aliases associated with this service\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/FunctionalitySlackChannel:FunctionalitySlackChannel"
                    },
                    "description": "Slack Channels associated with this service\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the functionality\n"
                }
            },
            "required": [
                "color",
                "description",
                "environmentIds",
                "name",
                "notifyEmails",
                "ownersGroupIds",
                "ownersUserIds",
                "position",
                "publicDescription",
                "serviceIds",
                "slackAliases",
                "slackChannels",
                "slug"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The hex color of the functionality\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the functionality\n"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Environments associated with this functionality\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the functionality\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails attached to the functionality\n"
                },
                "ownersGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Owner Teams associated with this functionality\n"
                },
                "ownersUserIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Owner Users associated with this service\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the functionality\n"
                },
                "publicDescription": {
                    "type": "string",
                    "description": "The public description of the functionality\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Services associated with this functionality\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/FunctionalitySlackAlias:FunctionalitySlackAlias"
                    },
                    "description": "Slack Aliases associated with this service\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/FunctionalitySlackChannel:FunctionalitySlackChannel"
                    },
                    "description": "Slack Channels associated with this service\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the functionality\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Functionality resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The hex color of the functionality\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the functionality\n"
                    },
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Environments associated with this functionality\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the functionality\n"
                    },
                    "notifyEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Emails attached to the functionality\n"
                    },
                    "ownersGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Owner Teams associated with this functionality\n"
                    },
                    "ownersUserIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Owner Users associated with this service\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position of the functionality\n"
                    },
                    "publicDescription": {
                        "type": "string",
                        "description": "The public description of the functionality\n"
                    },
                    "serviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Services associated with this functionality\n"
                    },
                    "slackAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/FunctionalitySlackAlias:FunctionalitySlackAlias"
                        },
                        "description": "Slack Aliases associated with this service\n"
                    },
                    "slackChannels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/FunctionalitySlackChannel:FunctionalitySlackChannel"
                        },
                        "description": "Slack Channels associated with this service\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the functionality\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/incidentPermissionSet:IncidentPermissionSet": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The incident permission set description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The incident permission set name.\n"
                },
                "privateIncidentPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "publicIncidentPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The incident permission set slug.\n"
                }
            },
            "required": [
                "description",
                "name",
                "privateIncidentPermissions",
                "publicIncidentPermissions",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The incident permission set description.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The incident permission set name.\n"
                },
                "privateIncidentPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "publicIncidentPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The incident permission set slug.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IncidentPermissionSet resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The incident permission set description.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The incident permission set name.\n"
                    },
                    "privateIncidentPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "publicIncidentPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The incident permission set slug.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/incidentPermissionSetBoolean:IncidentPermissionSetBoolean": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "incidentPermissionSetId": {
                    "type": "string"
                },
                "kind": {
                    "type": "string",
                    "description": "Value must be one of `publish_to_status_page`, `assign_incident_roles`, `invite_subscribers`, `update_summary`, `update_timeline`, `trigger_workflows`, `modify_custom_fields`.\n"
                },
                "private": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                }
            },
            "required": [
                "incidentPermissionSetId",
                "private"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean"
                },
                "incidentPermissionSetId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "kind": {
                    "type": "string",
                    "description": "Value must be one of `publish_to_status_page`, `assign_incident_roles`, `invite_subscribers`, `update_summary`, `update_timeline`, `trigger_workflows`, `modify_custom_fields`.\n"
                },
                "private": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                }
            },
            "requiredInputs": [
                "incidentPermissionSetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IncidentPermissionSetBoolean resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "incidentPermissionSetId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "kind": {
                        "type": "string",
                        "description": "Value must be one of `publish_to_status_page`, `assign_incident_roles`, `invite_subscribers`, `update_summary`, `update_timeline`, `trigger_workflows`, `modify_custom_fields`.\n"
                    },
                    "private": {
                        "type": "boolean",
                        "description": "Value must be one of true or false\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/incidentPermissionSetResource:IncidentPermissionSetResource": {
            "properties": {
                "incidentPermissionSetId": {
                    "type": "string"
                },
                "kind": {
                    "type": "string",
                    "description": "Value must be one of `severities`, `incident_types`, `statuses`.\n"
                },
                "private": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "resourceId": {
                    "type": "string"
                },
                "resourceType": {
                    "type": "string"
                }
            },
            "required": [
                "incidentPermissionSetId",
                "private",
                "resourceId",
                "resourceType"
            ],
            "inputProperties": {
                "incidentPermissionSetId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "kind": {
                    "type": "string",
                    "description": "Value must be one of `severities`, `incident_types`, `statuses`.\n"
                },
                "private": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "resourceId": {
                    "type": "string"
                },
                "resourceType": {
                    "type": "string"
                }
            },
            "requiredInputs": [
                "incidentPermissionSetId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IncidentPermissionSetResource resources.\n",
                "properties": {
                    "incidentPermissionSetId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "kind": {
                        "type": "string",
                        "description": "Value must be one of `severities`, `incident_types`, `statuses`.\n"
                    },
                    "private": {
                        "type": "boolean",
                        "description": "Value must be one of true or false\n"
                    },
                    "resourceId": {
                        "type": "string"
                    },
                    "resourceType": {
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/incidentRole:IncidentRole": {
            "properties": {
                "allowMultiUserAssignment": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the incident role\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the incident role\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the incident role\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the incident role\n"
                },
                "summary": {
                    "type": "string",
                    "description": "The summary of the incident role\n"
                }
            },
            "required": [
                "allowMultiUserAssignment",
                "description",
                "name",
                "optional",
                "position",
                "slug",
                "summary"
            ],
            "inputProperties": {
                "allowMultiUserAssignment": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the incident role\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the incident role\n"
                },
                "optional": {
                    "type": "boolean",
                    "description": "Value must be one of true or false\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the incident role\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the incident role\n"
                },
                "summary": {
                    "type": "string",
                    "description": "The summary of the incident role\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IncidentRole resources.\n",
                "properties": {
                    "allowMultiUserAssignment": {
                        "type": "boolean",
                        "description": "Value must be one of true or false\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the incident role\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the incident role\n"
                    },
                    "optional": {
                        "type": "boolean",
                        "description": "Value must be one of true or false\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position of the incident role\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the incident role\n"
                    },
                    "summary": {
                        "type": "string",
                        "description": "The summary of the incident role\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/incidentRoleTask:IncidentRoleTask": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of incident task\n"
                },
                "incidentRoleId": {
                    "type": "string"
                },
                "priority": {
                    "type": "string",
                    "description": "The priority of the incident task. Value must be one of `high`, `medium`, `low`.\n"
                },
                "task": {
                    "type": "string",
                    "description": "The task of the incident task\n"
                }
            },
            "required": [
                "description",
                "incidentRoleId",
                "task"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of incident task\n"
                },
                "incidentRoleId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "priority": {
                    "type": "string",
                    "description": "The priority of the incident task. Value must be one of `high`, `medium`, `low`.\n"
                },
                "task": {
                    "type": "string",
                    "description": "The task of the incident task\n"
                }
            },
            "requiredInputs": [
                "task"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IncidentRoleTask resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of incident task\n"
                    },
                    "incidentRoleId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "priority": {
                        "type": "string",
                        "description": "The priority of the incident task. Value must be one of `high`, `medium`, `low`.\n"
                    },
                    "task": {
                        "type": "string",
                        "description": "The task of the incident task\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/incidentType:IncidentType": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The hex color of the incident type\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the incident type\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the incident type\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails to attach to the incident type\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the incident type\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/IncidentTypeSlackAlias:IncidentTypeSlackAlias"
                    },
                    "description": "Slack Aliases associated with this incident type\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/IncidentTypeSlackChannel:IncidentTypeSlackChannel"
                    },
                    "description": "Slack Channels associated with this incident type\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the incident type\n"
                }
            },
            "required": [
                "color",
                "description",
                "name",
                "notifyEmails",
                "position",
                "slackAliases",
                "slackChannels",
                "slug"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The hex color of the incident type\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the incident type\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the incident type\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails to attach to the incident type\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the incident type\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/IncidentTypeSlackAlias:IncidentTypeSlackAlias"
                    },
                    "description": "Slack Aliases associated with this incident type\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/IncidentTypeSlackChannel:IncidentTypeSlackChannel"
                    },
                    "description": "Slack Channels associated with this incident type\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the incident type\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering IncidentType resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The hex color of the incident type\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the incident type\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the incident type\n"
                    },
                    "notifyEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Emails to attach to the incident type\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position of the incident type\n"
                    },
                    "slackAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/IncidentTypeSlackAlias:IncidentTypeSlackAlias"
                        },
                        "description": "Slack Aliases associated with this incident type\n"
                    },
                    "slackChannels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/IncidentTypeSlackChannel:IncidentTypeSlackChannel"
                        },
                        "description": "Slack Channels associated with this incident type\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the incident type\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/playbook:Playbook": {
            "properties": {
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Environment ID's to attach to the incident\n"
                },
                "externalUrl": {
                    "type": "string",
                    "description": "The external url of the playbook\n"
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Functionality ID's to attach to the incident\n"
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Team ID's to attach to the incident\n"
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Incident Type ID's to attach to the incident\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Service ID's to attach to the incident\n"
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Severity ID's to attach to the incident\n"
                },
                "summary": {
                    "type": "string",
                    "description": "The summary of the playbook\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the playbook\n"
                }
            },
            "required": [
                "environmentIds",
                "externalUrl",
                "functionalityIds",
                "groupIds",
                "incidentTypeIds",
                "serviceIds",
                "severityIds",
                "summary",
                "title"
            ],
            "inputProperties": {
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Environment ID's to attach to the incident\n"
                },
                "externalUrl": {
                    "type": "string",
                    "description": "The external url of the playbook\n"
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Functionality ID's to attach to the incident\n"
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Team ID's to attach to the incident\n"
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Incident Type ID's to attach to the incident\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Service ID's to attach to the incident\n"
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Severity ID's to attach to the incident\n"
                },
                "summary": {
                    "type": "string",
                    "description": "The summary of the playbook\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the playbook\n"
                }
            },
            "requiredInputs": [
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Playbook resources.\n",
                "properties": {
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Environment ID's to attach to the incident\n"
                    },
                    "externalUrl": {
                        "type": "string",
                        "description": "The external url of the playbook\n"
                    },
                    "functionalityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Functionality ID's to attach to the incident\n"
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Team ID's to attach to the incident\n"
                    },
                    "incidentTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Incident Type ID's to attach to the incident\n"
                    },
                    "serviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Service ID's to attach to the incident\n"
                    },
                    "severityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Severity ID's to attach to the incident\n"
                    },
                    "summary": {
                        "type": "string",
                        "description": "The summary of the playbook\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the playbook\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/playbookTask:PlaybookTask": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of task\n"
                },
                "playbookId": {
                    "type": "string"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the task\n"
                },
                "task": {
                    "type": "string",
                    "description": "The task of the task\n"
                }
            },
            "required": [
                "description",
                "playbookId",
                "position",
                "task"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of task\n"
                },
                "playbookId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the task\n"
                },
                "task": {
                    "type": "string",
                    "description": "The task of the task\n"
                }
            },
            "requiredInputs": [
                "task"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PlaybookTask resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of task\n"
                    },
                    "playbookId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the task\n"
                    },
                    "task": {
                        "type": "string",
                        "description": "The task of the task\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/postMortemTemplate:PostMortemTemplate": {
            "properties": {
                "content": {
                    "type": "string",
                    "description": "The postmortem template. Liquid syntax and markdown are supported\n"
                },
                "default": {
                    "type": "boolean",
                    "description": "Default selected template when editing a postmortem. Value must be one of true or false\n"
                },
                "format": {
                    "type": "string",
                    "description": "The format of the input. Value must be one of `html`, `markdown`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the postmortem template\n"
                }
            },
            "required": [
                "content",
                "default",
                "name"
            ],
            "inputProperties": {
                "content": {
                    "type": "string",
                    "description": "The postmortem template. Liquid syntax and markdown are supported\n",
                    "willReplaceOnChanges": true
                },
                "default": {
                    "type": "boolean",
                    "description": "Default selected template when editing a postmortem. Value must be one of true or false\n"
                },
                "format": {
                    "type": "string",
                    "description": "The format of the input. Value must be one of `html`, `markdown`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the postmortem template\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PostMortemTemplate resources.\n",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "The postmortem template. Liquid syntax and markdown are supported\n",
                        "willReplaceOnChanges": true
                    },
                    "default": {
                        "type": "boolean",
                        "description": "Default selected template when editing a postmortem. Value must be one of true or false\n"
                    },
                    "format": {
                        "type": "string",
                        "description": "The format of the input. Value must be one of `html`, `markdown`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the postmortem template\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/retrospectiveConfiguration:RetrospectiveConfiguration": {
            "properties": {
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Teams associated with the retrospective configuration.\n"
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Incident types associated with the retrospective configuration.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the retrospective configuration.\n"
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Severities associated with the retrospective configuration.\n"
                }
            },
            "required": [
                "groupIds",
                "incidentTypeIds",
                "kind",
                "severityIds"
            ],
            "inputProperties": {
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Teams associated with the retrospective configuration.\n"
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Incident types associated with the retrospective configuration.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the retrospective configuration.\n",
                    "willReplaceOnChanges": true
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Severities associated with the retrospective configuration.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RetrospectiveConfiguration resources.\n",
                "properties": {
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Teams associated with the retrospective configuration.\n"
                    },
                    "incidentTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Incident types associated with the retrospective configuration.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "The kind of the retrospective configuration.\n",
                        "willReplaceOnChanges": true
                    },
                    "severityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Severities associated with the retrospective configuration.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/retrospectiveProcess:RetrospectiveProcess": {
            "properties": {
                "copyFrom": {
                    "type": "string",
                    "description": "Retrospective process ID from which retrospective steps have to be copied. To use starter template for retrospective steps provide value: 'starter_template'\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the retrospective process\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Is the retrospective process default?. Value must be one of true or false\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the retrospective process\n"
                },
                "retrospectiveProcessMatchingCriteria": {
                    "$ref": "#/types/rootly:index/RetrospectiveProcessRetrospectiveProcessMatchingCriteria:RetrospectiveProcessRetrospectiveProcessMatchingCriteria"
                }
            },
            "required": [
                "description",
                "isDefault",
                "name",
                "retrospectiveProcessMatchingCriteria"
            ],
            "inputProperties": {
                "copyFrom": {
                    "type": "string",
                    "description": "Retrospective process ID from which retrospective steps have to be copied. To use starter template for retrospective steps provide value: 'starter_template'\n",
                    "willReplaceOnChanges": true
                },
                "description": {
                    "type": "string",
                    "description": "The description of the retrospective process\n"
                },
                "isDefault": {
                    "type": "boolean",
                    "description": "Is the retrospective process default?. Value must be one of true or false\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the retrospective process\n"
                },
                "retrospectiveProcessMatchingCriteria": {
                    "$ref": "#/types/rootly:index/RetrospectiveProcessRetrospectiveProcessMatchingCriteria:RetrospectiveProcessRetrospectiveProcessMatchingCriteria"
                }
            },
            "requiredInputs": [
                "retrospectiveProcessMatchingCriteria"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RetrospectiveProcess resources.\n",
                "properties": {
                    "copyFrom": {
                        "type": "string",
                        "description": "Retrospective process ID from which retrospective steps have to be copied. To use starter template for retrospective steps provide value: 'starter_template'\n",
                        "willReplaceOnChanges": true
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the retrospective process\n"
                    },
                    "isDefault": {
                        "type": "boolean",
                        "description": "Is the retrospective process default?. Value must be one of true or false\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the retrospective process\n"
                    },
                    "retrospectiveProcessMatchingCriteria": {
                        "$ref": "#/types/rootly:index/RetrospectiveProcessRetrospectiveProcessMatchingCriteria:RetrospectiveProcessRetrospectiveProcessMatchingCriteria"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/retrospectiveStep:RetrospectiveStep": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "The description of the step\n"
                },
                "dueAfterDays": {
                    "type": "integer",
                    "description": "Due date in days\n"
                },
                "incidentRoleId": {
                    "type": "string",
                    "description": "Users assigned to the selected incident role will be the default owners for this step\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the step\n"
                },
                "retrospectiveProcessId": {
                    "type": "string"
                },
                "skippable": {
                    "type": "boolean",
                    "description": "Is the step skippable?. Value must be one of true or false\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the step\n"
                },
                "title": {
                    "type": "string",
                    "description": "The name of the step\n"
                }
            },
            "required": [
                "description",
                "dueAfterDays",
                "incidentRoleId",
                "position",
                "retrospectiveProcessId",
                "skippable",
                "slug",
                "title"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "The description of the step\n"
                },
                "dueAfterDays": {
                    "type": "integer",
                    "description": "Due date in days\n"
                },
                "incidentRoleId": {
                    "type": "string",
                    "description": "Users assigned to the selected incident role will be the default owners for this step\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the step\n"
                },
                "retrospectiveProcessId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "skippable": {
                    "type": "boolean",
                    "description": "Is the step skippable?. Value must be one of true or false\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the step\n"
                },
                "title": {
                    "type": "string",
                    "description": "The name of the step\n"
                }
            },
            "requiredInputs": [
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering RetrospectiveStep resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "The description of the step\n"
                    },
                    "dueAfterDays": {
                        "type": "integer",
                        "description": "Due date in days\n"
                    },
                    "incidentRoleId": {
                        "type": "string",
                        "description": "Users assigned to the selected incident role will be the default owners for this step\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position of the step\n"
                    },
                    "retrospectiveProcessId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "skippable": {
                        "type": "boolean",
                        "description": "Is the step skippable?. Value must be one of true or false\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the step\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The name of the step\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/role:Role": {
            "properties": {
                "apiKeysPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "auditsPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "billingPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "environmentsPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "formFieldsPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "functionalitiesPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "groupsPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "incidentCausesPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "incidentFeedbacksPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "incidentPermissionSetId": {
                    "type": "string",
                    "description": "Associated incident permissions set.\n"
                },
                "incidentRolesPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "incidentTypesPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "incidentsPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "invitationsPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "isDeletable": {
                    "type": "boolean",
                    "description": "Whether the role can be deleted.. Value must be one of true or false\n"
                },
                "isEditable": {
                    "type": "boolean",
                    "description": "Whether the role can be edited.. Value must be one of true or false\n"
                },
                "name": {
                    "type": "string",
                    "description": "The role name.\n"
                },
                "playbooksPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "privateIncidentsPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "retrospectivePermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "rolesPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "secretsPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "servicesPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "severitiesPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The role slug.\n"
                },
                "statusPagesPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "webhooksPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "workflowsPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                }
            },
            "required": [
                "apiKeysPermissions",
                "auditsPermissions",
                "billingPermissions",
                "environmentsPermissions",
                "formFieldsPermissions",
                "functionalitiesPermissions",
                "groupsPermissions",
                "incidentCausesPermissions",
                "incidentFeedbacksPermissions",
                "incidentPermissionSetId",
                "incidentRolesPermissions",
                "incidentTypesPermissions",
                "incidentsPermissions",
                "invitationsPermissions",
                "isDeletable",
                "isEditable",
                "name",
                "playbooksPermissions",
                "privateIncidentsPermissions",
                "retrospectivePermissions",
                "rolesPermissions",
                "secretsPermissions",
                "servicesPermissions",
                "severitiesPermissions",
                "slug",
                "statusPagesPermissions",
                "webhooksPermissions",
                "workflowsPermissions"
            ],
            "inputProperties": {
                "apiKeysPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "auditsPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "billingPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "environmentsPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "formFieldsPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "functionalitiesPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "groupsPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "incidentCausesPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "incidentFeedbacksPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "incidentPermissionSetId": {
                    "type": "string",
                    "description": "Associated incident permissions set.\n"
                },
                "incidentRolesPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "incidentTypesPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "incidentsPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "invitationsPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "isDeletable": {
                    "type": "boolean",
                    "description": "Whether the role can be deleted.. Value must be one of true or false\n"
                },
                "isEditable": {
                    "type": "boolean",
                    "description": "Whether the role can be edited.. Value must be one of true or false\n"
                },
                "name": {
                    "type": "string",
                    "description": "The role name.\n"
                },
                "playbooksPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "privateIncidentsPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "retrospectivePermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "rolesPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "secretsPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "servicesPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "severitiesPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The role slug.\n"
                },
                "statusPagesPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "webhooksPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                },
                "workflowsPermissions": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Role resources.\n",
                "properties": {
                    "apiKeysPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "auditsPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "billingPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "environmentsPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "formFieldsPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "functionalitiesPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "groupsPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "incidentCausesPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "incidentFeedbacksPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "incidentPermissionSetId": {
                        "type": "string",
                        "description": "Associated incident permissions set.\n"
                    },
                    "incidentRolesPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "incidentTypesPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "incidentsPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "invitationsPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "isDeletable": {
                        "type": "boolean",
                        "description": "Whether the role can be deleted.. Value must be one of true or false\n"
                    },
                    "isEditable": {
                        "type": "boolean",
                        "description": "Whether the role can be edited.. Value must be one of true or false\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The role name.\n"
                    },
                    "playbooksPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "privateIncidentsPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "retrospectivePermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "rolesPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "secretsPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "servicesPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "severitiesPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The role slug.\n"
                    },
                    "statusPagesPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "webhooksPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    },
                    "workflowsPermissions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `create`, `read`, `update`, `delete`.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/secret:Secret": {
            "properties": {
                "hashicorpVaultMount": {
                    "type": "string",
                    "description": "The HashiCorp Vault secret mount path\n"
                },
                "hashicorpVaultPath": {
                    "type": "string",
                    "description": "The HashiCorp Vault secret path\n"
                },
                "hashicorpVaultVersion": {
                    "type": "integer",
                    "description": "The HashiCorp Vault secret version\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The redacted secret\n",
                    "language": {
                        "csharp": {
                            "name": "rootly_secret"
                        }
                    }
                }
            },
            "required": [
                "hashicorpVaultMount",
                "hashicorpVaultPath",
                "hashicorpVaultVersion",
                "name",
                "secret"
            ],
            "inputProperties": {
                "hashicorpVaultMount": {
                    "type": "string",
                    "description": "The HashiCorp Vault secret mount path\n"
                },
                "hashicorpVaultPath": {
                    "type": "string",
                    "description": "The HashiCorp Vault secret path\n"
                },
                "hashicorpVaultVersion": {
                    "type": "integer",
                    "description": "The HashiCorp Vault secret version\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the secret\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The redacted secret\n",
                    "language": {
                        "csharp": {
                            "name": "rootly_secret"
                        }
                    },
                    "willReplaceOnChanges": true
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Secret resources.\n",
                "properties": {
                    "hashicorpVaultMount": {
                        "type": "string",
                        "description": "The HashiCorp Vault secret mount path\n"
                    },
                    "hashicorpVaultPath": {
                        "type": "string",
                        "description": "The HashiCorp Vault secret path\n"
                    },
                    "hashicorpVaultVersion": {
                        "type": "integer",
                        "description": "The HashiCorp Vault secret version\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the secret\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "The redacted secret\n",
                        "language": {
                            "csharp": {
                                "name": "rootly_secret"
                            }
                        },
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/service:Service": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst elasticsearchProd = new rootly.Service(\"elasticsearchProd\", {\n    color: \"#800080\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\",\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\",\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\",\n        },\n    ],\n});\nconst customerPostgresqlProd = new rootly.Service(\"customerPostgresqlProd\", {\n    color: \"#800080\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\",\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\",\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nelasticsearch_prod = rootly.Service(\"elasticsearchProd\",\n    color=\"#800080\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.ServiceSlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.ServiceSlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.ServiceSlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\ncustomer_postgresql_prod = rootly.Service(\"customerPostgresqlProd\",\n    color=\"#800080\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.ServiceSlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.ServiceSlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.ServiceSlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var elasticsearchProd = new Rootly.Service(\"elasticsearchProd\", new()\n    {\n        Color = \"#800080\",\n        NotifyEmails = new[]\n        {\n            \"foo@acme.com\",\n            \"bar@acme.com\",\n        },\n        SlackAliases = new[]\n        {\n            new Rootly.Inputs.ServiceSlackAliasArgs\n            {\n                Id = \"S0614TZR7\",\n                Name = \"Alias 1\",\n            },\n        },\n        SlackChannels = new[]\n        {\n            new Rootly.Inputs.ServiceSlackChannelArgs\n            {\n                Id = \"C06A4RZR9\",\n                Name = \"Channel 1\",\n            },\n            new Rootly.Inputs.ServiceSlackChannelArgs\n            {\n                Id = \"C02T4RYR2\",\n                Name = \"Channel 2\",\n            },\n        },\n    });\n\n    var customerPostgresqlProd = new Rootly.Service(\"customerPostgresqlProd\", new()\n    {\n        Color = \"#800080\",\n        NotifyEmails = new[]\n        {\n            \"foo@acme.com\",\n            \"bar@acme.com\",\n        },\n        SlackAliases = new[]\n        {\n            new Rootly.Inputs.ServiceSlackAliasArgs\n            {\n                Id = \"S0614TZR7\",\n                Name = \"Alias 1\",\n            },\n        },\n        SlackChannels = new[]\n        {\n            new Rootly.Inputs.ServiceSlackChannelArgs\n            {\n                Id = \"C06A4RZR9\",\n                Name = \"Channel 1\",\n            },\n            new Rootly.Inputs.ServiceSlackChannelArgs\n            {\n                Id = \"C02T4RYR2\",\n                Name = \"Channel 2\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.NewService(ctx, \"elasticsearchProd\", \u0026rootly.ServiceArgs{\n\t\t\tColor: pulumi.String(\"#800080\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: rootly.ServiceSlackAliasArray{\n\t\t\t\t\u0026rootly.ServiceSlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: rootly.ServiceSlackChannelArray{\n\t\t\t\t\u0026rootly.ServiceSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026rootly.ServiceSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewService(ctx, \"customerPostgresqlProd\", \u0026rootly.ServiceArgs{\n\t\t\tColor: pulumi.String(\"#800080\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: rootly.ServiceSlackAliasArray{\n\t\t\t\t\u0026rootly.ServiceSlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: rootly.ServiceSlackChannelArray{\n\t\t\t\t\u0026rootly.ServiceSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026rootly.ServiceSlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.Service;\nimport com.pulumi.rootly.ServiceArgs;\nimport com.pulumi.rootly.inputs.ServiceSlackAliasArgs;\nimport com.pulumi.rootly.inputs.ServiceSlackChannelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var elasticsearchProd = new Service(\"elasticsearchProd\", ServiceArgs.builder()        \n            .color(\"#800080\")\n            .notifyEmails(            \n                \"foo@acme.com\",\n                \"bar@acme.com\")\n            .slackAliases(ServiceSlackAliasArgs.builder()\n                .id(\"S0614TZR7\")\n                .name(\"Alias 1\")\n                .build())\n            .slackChannels(            \n                ServiceSlackChannelArgs.builder()\n                    .id(\"C06A4RZR9\")\n                    .name(\"Channel 1\")\n                    .build(),\n                ServiceSlackChannelArgs.builder()\n                    .id(\"C02T4RYR2\")\n                    .name(\"Channel 2\")\n                    .build())\n            .build());\n\n        var customerPostgresqlProd = new Service(\"customerPostgresqlProd\", ServiceArgs.builder()        \n            .color(\"#800080\")\n            .notifyEmails(            \n                \"foo@acme.com\",\n                \"bar@acme.com\")\n            .slackAliases(ServiceSlackAliasArgs.builder()\n                .id(\"S0614TZR7\")\n                .name(\"Alias 1\")\n                .build())\n            .slackChannels(            \n                ServiceSlackChannelArgs.builder()\n                    .id(\"C06A4RZR9\")\n                    .name(\"Channel 1\")\n                    .build(),\n                ServiceSlackChannelArgs.builder()\n                    .id(\"C02T4RYR2\")\n                    .name(\"Channel 2\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  elasticsearchProd:\n    type: rootly:Service\n    properties:\n      color: '#800080'\n      notifyEmails:\n        - foo@acme.com\n        - bar@acme.com\n      slackAliases:\n        - id: S0614TZR7\n          name: Alias 1\n      slackChannels:\n        - id: C06A4RZR9\n          name: Channel 1\n        - id: C02T4RYR2\n          name: Channel 2\n  customerPostgresqlProd:\n    type: rootly:Service\n    properties:\n      color: '#800080'\n      notifyEmails:\n        - foo@acme.com\n        - bar@acme.com\n      slackAliases:\n        - id: S0614TZR7\n          name: Alias 1\n      slackChannels:\n        - id: C06A4RZR9\n          name: Channel 1\n        - id: C02T4RYR2\n          name: Channel 2\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "backstageId": {
                    "type": "string",
                    "description": "The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name\n"
                },
                "color": {
                    "type": "string",
                    "description": "The hex color of the service\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the service\n"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Environments associated with this service\n"
                },
                "githubRepositoryBranch": {
                    "type": "string",
                    "description": "The GitHub repository branch associated to this service. eg: main\n"
                },
                "githubRepositoryName": {
                    "type": "string",
                    "description": "The GitHub repository name associated to this service. eg: rootlyhq/my-service\n"
                },
                "gitlabRepositoryBranch": {
                    "type": "string",
                    "description": "The Gitlab repository branch associated to this service. eg: main\n"
                },
                "gitlabRepositoryName": {
                    "type": "string",
                    "description": "The Gitlab repository name associated to this service. eg: rootlyhq/my-service\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails attached to the service\n"
                },
                "opsgenieId": {
                    "type": "string",
                    "description": "The Opsgenie service id associated to this service\n"
                },
                "ownersGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Owner Teams associated with this service\n"
                },
                "ownersUserIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Owner Users associated with this service\n"
                },
                "pagerdutyId": {
                    "type": "string",
                    "description": "The PagerDuty service id associated to this service\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the service\n"
                },
                "publicDescription": {
                    "type": "string",
                    "description": "The public description of the service\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Services dependent on this service\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/ServiceSlackAlias:ServiceSlackAlias"
                    },
                    "description": "Slack Aliases associated with this service\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/ServiceSlackChannel:ServiceSlackChannel"
                    },
                    "description": "Slack Channels associated with this service\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the service\n"
                }
            },
            "required": [
                "backstageId",
                "color",
                "description",
                "environmentIds",
                "githubRepositoryBranch",
                "githubRepositoryName",
                "gitlabRepositoryBranch",
                "gitlabRepositoryName",
                "name",
                "notifyEmails",
                "opsgenieId",
                "ownersGroupIds",
                "ownersUserIds",
                "pagerdutyId",
                "position",
                "publicDescription",
                "serviceIds",
                "slackAliases",
                "slackChannels",
                "slug"
            ],
            "inputProperties": {
                "backstageId": {
                    "type": "string",
                    "description": "The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name\n"
                },
                "color": {
                    "type": "string",
                    "description": "The hex color of the service\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the service\n"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Environments associated with this service\n"
                },
                "githubRepositoryBranch": {
                    "type": "string",
                    "description": "The GitHub repository branch associated to this service. eg: main\n"
                },
                "githubRepositoryName": {
                    "type": "string",
                    "description": "The GitHub repository name associated to this service. eg: rootlyhq/my-service\n"
                },
                "gitlabRepositoryBranch": {
                    "type": "string",
                    "description": "The Gitlab repository branch associated to this service. eg: main\n"
                },
                "gitlabRepositoryName": {
                    "type": "string",
                    "description": "The Gitlab repository name associated to this service. eg: rootlyhq/my-service\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the service\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails attached to the service\n"
                },
                "opsgenieId": {
                    "type": "string",
                    "description": "The Opsgenie service id associated to this service\n"
                },
                "ownersGroupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Owner Teams associated with this service\n"
                },
                "ownersUserIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "Owner Users associated with this service\n"
                },
                "pagerdutyId": {
                    "type": "string",
                    "description": "The PagerDuty service id associated to this service\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the service\n"
                },
                "publicDescription": {
                    "type": "string",
                    "description": "The public description of the service\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Services dependent on this service\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/ServiceSlackAlias:ServiceSlackAlias"
                    },
                    "description": "Slack Aliases associated with this service\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/ServiceSlackChannel:ServiceSlackChannel"
                    },
                    "description": "Slack Channels associated with this service\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the service\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Service resources.\n",
                "properties": {
                    "backstageId": {
                        "type": "string",
                        "description": "The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name\n"
                    },
                    "color": {
                        "type": "string",
                        "description": "The hex color of the service\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the service\n"
                    },
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Environments associated with this service\n"
                    },
                    "githubRepositoryBranch": {
                        "type": "string",
                        "description": "The GitHub repository branch associated to this service. eg: main\n"
                    },
                    "githubRepositoryName": {
                        "type": "string",
                        "description": "The GitHub repository name associated to this service. eg: rootlyhq/my-service\n"
                    },
                    "gitlabRepositoryBranch": {
                        "type": "string",
                        "description": "The Gitlab repository branch associated to this service. eg: main\n"
                    },
                    "gitlabRepositoryName": {
                        "type": "string",
                        "description": "The Gitlab repository name associated to this service. eg: rootlyhq/my-service\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the service\n"
                    },
                    "notifyEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Emails attached to the service\n"
                    },
                    "opsgenieId": {
                        "type": "string",
                        "description": "The Opsgenie service id associated to this service\n"
                    },
                    "ownersGroupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Owner Teams associated with this service\n"
                    },
                    "ownersUserIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "Owner Users associated with this service\n"
                    },
                    "pagerdutyId": {
                        "type": "string",
                        "description": "The PagerDuty service id associated to this service\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position of the service\n"
                    },
                    "publicDescription": {
                        "type": "string",
                        "description": "The public description of the service\n"
                    },
                    "serviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Services dependent on this service\n"
                    },
                    "slackAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/ServiceSlackAlias:ServiceSlackAlias"
                        },
                        "description": "Slack Aliases associated with this service\n"
                    },
                    "slackChannels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/ServiceSlackChannel:ServiceSlackChannel"
                        },
                        "description": "Slack Channels associated with this service\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the service\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/severity:Severity": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst sev0 = new rootly.Severity(\"sev0\", {\n    color: \"#FF0000\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\",\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\",\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\",\n        },\n    ],\n});\nconst sev1 = new rootly.Severity(\"sev1\", {\n    color: \"#FFA500\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\",\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\",\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\",\n        },\n    ],\n});\nconst sev2 = new rootly.Severity(\"sev2\", {\n    color: \"#FFA500\",\n    notifyEmails: [\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slackAliases: [{\n        id: \"S0614TZR7\",\n        name: \"Alias 1\",\n    }],\n    slackChannels: [\n        {\n            id: \"C06A4RZR9\",\n            name: \"Channel 1\",\n        },\n        {\n            id: \"C02T4RYR2\",\n            name: \"Channel 2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nsev0 = rootly.Severity(\"sev0\",\n    color=\"#FF0000\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.SeveritySlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.SeveritySlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.SeveritySlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\nsev1 = rootly.Severity(\"sev1\",\n    color=\"#FFA500\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.SeveritySlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.SeveritySlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.SeveritySlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\nsev2 = rootly.Severity(\"sev2\",\n    color=\"#FFA500\",\n    notify_emails=[\n        \"foo@acme.com\",\n        \"bar@acme.com\",\n    ],\n    slack_aliases=[rootly.SeveritySlackAliasArgs(\n        id=\"S0614TZR7\",\n        name=\"Alias 1\",\n    )],\n    slack_channels=[\n        rootly.SeveritySlackChannelArgs(\n            id=\"C06A4RZR9\",\n            name=\"Channel 1\",\n        ),\n        rootly.SeveritySlackChannelArgs(\n            id=\"C02T4RYR2\",\n            name=\"Channel 2\",\n        ),\n    ])\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sev0 = new Rootly.Severity(\"sev0\", new()\n    {\n        Color = \"#FF0000\",\n        NotifyEmails = new[]\n        {\n            \"foo@acme.com\",\n            \"bar@acme.com\",\n        },\n        SlackAliases = new[]\n        {\n            new Rootly.Inputs.SeveritySlackAliasArgs\n            {\n                Id = \"S0614TZR7\",\n                Name = \"Alias 1\",\n            },\n        },\n        SlackChannels = new[]\n        {\n            new Rootly.Inputs.SeveritySlackChannelArgs\n            {\n                Id = \"C06A4RZR9\",\n                Name = \"Channel 1\",\n            },\n            new Rootly.Inputs.SeveritySlackChannelArgs\n            {\n                Id = \"C02T4RYR2\",\n                Name = \"Channel 2\",\n            },\n        },\n    });\n\n    var sev1 = new Rootly.Severity(\"sev1\", new()\n    {\n        Color = \"#FFA500\",\n        NotifyEmails = new[]\n        {\n            \"foo@acme.com\",\n            \"bar@acme.com\",\n        },\n        SlackAliases = new[]\n        {\n            new Rootly.Inputs.SeveritySlackAliasArgs\n            {\n                Id = \"S0614TZR7\",\n                Name = \"Alias 1\",\n            },\n        },\n        SlackChannels = new[]\n        {\n            new Rootly.Inputs.SeveritySlackChannelArgs\n            {\n                Id = \"C06A4RZR9\",\n                Name = \"Channel 1\",\n            },\n            new Rootly.Inputs.SeveritySlackChannelArgs\n            {\n                Id = \"C02T4RYR2\",\n                Name = \"Channel 2\",\n            },\n        },\n    });\n\n    var sev2 = new Rootly.Severity(\"sev2\", new()\n    {\n        Color = \"#FFA500\",\n        NotifyEmails = new[]\n        {\n            \"foo@acme.com\",\n            \"bar@acme.com\",\n        },\n        SlackAliases = new[]\n        {\n            new Rootly.Inputs.SeveritySlackAliasArgs\n            {\n                Id = \"S0614TZR7\",\n                Name = \"Alias 1\",\n            },\n        },\n        SlackChannels = new[]\n        {\n            new Rootly.Inputs.SeveritySlackChannelArgs\n            {\n                Id = \"C06A4RZR9\",\n                Name = \"Channel 1\",\n            },\n            new Rootly.Inputs.SeveritySlackChannelArgs\n            {\n                Id = \"C02T4RYR2\",\n                Name = \"Channel 2\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.NewSeverity(ctx, \"sev0\", \u0026rootly.SeverityArgs{\n\t\t\tColor: pulumi.String(\"#FF0000\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: rootly.SeveritySlackAliasArray{\n\t\t\t\t\u0026rootly.SeveritySlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: rootly.SeveritySlackChannelArray{\n\t\t\t\t\u0026rootly.SeveritySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026rootly.SeveritySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewSeverity(ctx, \"sev1\", \u0026rootly.SeverityArgs{\n\t\t\tColor: pulumi.String(\"#FFA500\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: rootly.SeveritySlackAliasArray{\n\t\t\t\t\u0026rootly.SeveritySlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: rootly.SeveritySlackChannelArray{\n\t\t\t\t\u0026rootly.SeveritySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026rootly.SeveritySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewSeverity(ctx, \"sev2\", \u0026rootly.SeverityArgs{\n\t\t\tColor: pulumi.String(\"#FFA500\"),\n\t\t\tNotifyEmails: pulumi.StringArray{\n\t\t\t\tpulumi.String(\"foo@acme.com\"),\n\t\t\t\tpulumi.String(\"bar@acme.com\"),\n\t\t\t},\n\t\t\tSlackAliases: rootly.SeveritySlackAliasArray{\n\t\t\t\t\u0026rootly.SeveritySlackAliasArgs{\n\t\t\t\t\tId:   pulumi.String(\"S0614TZR7\"),\n\t\t\t\t\tName: pulumi.String(\"Alias 1\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tSlackChannels: rootly.SeveritySlackChannelArray{\n\t\t\t\t\u0026rootly.SeveritySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C06A4RZR9\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 1\"),\n\t\t\t\t},\n\t\t\t\t\u0026rootly.SeveritySlackChannelArgs{\n\t\t\t\t\tId:   pulumi.String(\"C02T4RYR2\"),\n\t\t\t\t\tName: pulumi.String(\"Channel 2\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.Severity;\nimport com.pulumi.rootly.SeverityArgs;\nimport com.pulumi.rootly.inputs.SeveritySlackAliasArgs;\nimport com.pulumi.rootly.inputs.SeveritySlackChannelArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sev0 = new Severity(\"sev0\", SeverityArgs.builder()        \n            .color(\"#FF0000\")\n            .notifyEmails(            \n                \"foo@acme.com\",\n                \"bar@acme.com\")\n            .slackAliases(SeveritySlackAliasArgs.builder()\n                .id(\"S0614TZR7\")\n                .name(\"Alias 1\")\n                .build())\n            .slackChannels(            \n                SeveritySlackChannelArgs.builder()\n                    .id(\"C06A4RZR9\")\n                    .name(\"Channel 1\")\n                    .build(),\n                SeveritySlackChannelArgs.builder()\n                    .id(\"C02T4RYR2\")\n                    .name(\"Channel 2\")\n                    .build())\n            .build());\n\n        var sev1 = new Severity(\"sev1\", SeverityArgs.builder()        \n            .color(\"#FFA500\")\n            .notifyEmails(            \n                \"foo@acme.com\",\n                \"bar@acme.com\")\n            .slackAliases(SeveritySlackAliasArgs.builder()\n                .id(\"S0614TZR7\")\n                .name(\"Alias 1\")\n                .build())\n            .slackChannels(            \n                SeveritySlackChannelArgs.builder()\n                    .id(\"C06A4RZR9\")\n                    .name(\"Channel 1\")\n                    .build(),\n                SeveritySlackChannelArgs.builder()\n                    .id(\"C02T4RYR2\")\n                    .name(\"Channel 2\")\n                    .build())\n            .build());\n\n        var sev2 = new Severity(\"sev2\", SeverityArgs.builder()        \n            .color(\"#FFA500\")\n            .notifyEmails(            \n                \"foo@acme.com\",\n                \"bar@acme.com\")\n            .slackAliases(SeveritySlackAliasArgs.builder()\n                .id(\"S0614TZR7\")\n                .name(\"Alias 1\")\n                .build())\n            .slackChannels(            \n                SeveritySlackChannelArgs.builder()\n                    .id(\"C06A4RZR9\")\n                    .name(\"Channel 1\")\n                    .build(),\n                SeveritySlackChannelArgs.builder()\n                    .id(\"C02T4RYR2\")\n                    .name(\"Channel 2\")\n                    .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sev0:\n    type: rootly:Severity\n    properties:\n      color: '#FF0000'\n      notifyEmails:\n        - foo@acme.com\n        - bar@acme.com\n      slackAliases:\n        - id: S0614TZR7\n          name: Alias 1\n      slackChannels:\n        - id: C06A4RZR9\n          name: Channel 1\n        - id: C02T4RYR2\n          name: Channel 2\n  sev1:\n    type: rootly:Severity\n    properties:\n      color: '#FFA500'\n      notifyEmails:\n        - foo@acme.com\n        - bar@acme.com\n      slackAliases:\n        - id: S0614TZR7\n          name: Alias 1\n      slackChannels:\n        - id: C06A4RZR9\n          name: Channel 1\n        - id: C02T4RYR2\n          name: Channel 2\n  sev2:\n    type: rootly:Severity\n    properties:\n      color: '#FFA500'\n      notifyEmails:\n        - foo@acme.com\n        - bar@acme.com\n      slackAliases:\n        - id: S0614TZR7\n          name: Alias 1\n      slackChannels:\n        - id: C06A4RZR9\n          name: Channel 1\n        - id: C02T4RYR2\n          name: Channel 2\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The hex color of the severity\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the severity\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the severity\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails to attach to the severity\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the severity\n"
                },
                "severity": {
                    "type": "string",
                    "description": "The severity of the severity. Value must be one of `critical`, `high`, `medium`, `low`.\n",
                    "language": {
                        "csharp": {
                            "name": "rootly_severity"
                        }
                    }
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/SeveritySlackAlias:SeveritySlackAlias"
                    },
                    "description": "Slack Aliases associated with this severity\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/SeveritySlackChannel:SeveritySlackChannel"
                    },
                    "description": "Slack Channels associated with this severity\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the severity\n"
                }
            },
            "required": [
                "color",
                "description",
                "name",
                "notifyEmails",
                "position",
                "slackAliases",
                "slackChannels",
                "slug"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The hex color of the severity\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the severity\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the severity\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails to attach to the severity\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the severity\n"
                },
                "severity": {
                    "type": "string",
                    "description": "The severity of the severity. Value must be one of `critical`, `high`, `medium`, `low`.\n",
                    "language": {
                        "csharp": {
                            "name": "rootly_severity"
                        }
                    }
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/SeveritySlackAlias:SeveritySlackAlias"
                    },
                    "description": "Slack Aliases associated with this severity\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/SeveritySlackChannel:SeveritySlackChannel"
                    },
                    "description": "Slack Channels associated with this severity\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the severity\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Severity resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The hex color of the severity\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the severity\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the severity\n"
                    },
                    "notifyEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Emails to attach to the severity\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position of the severity\n"
                    },
                    "severity": {
                        "type": "string",
                        "description": "The severity of the severity. Value must be one of `critical`, `high`, `medium`, `low`.\n",
                        "language": {
                            "csharp": {
                                "name": "rootly_severity"
                            }
                        }
                    },
                    "slackAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/SeveritySlackAlias:SeveritySlackAlias"
                        },
                        "description": "Slack Aliases associated with this severity\n"
                    },
                    "slackChannels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/SeveritySlackChannel:SeveritySlackChannel"
                        },
                        "description": "Slack Channels associated with this severity\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the severity\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/statusPage:StatusPage": {
            "properties": {
                "allowSearchEngineIndex": {
                    "type": "boolean",
                    "description": "Allow search engines to include your public status page in search results. Value must be one of true or false\n"
                },
                "authenticationEnabled": {
                    "type": "boolean",
                    "description": "Enable authentication. Value must be one of true or false\n"
                },
                "authenticationPassword": {
                    "type": "string",
                    "description": "Authentication password\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the status page\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "failureMessage": {
                    "type": "string",
                    "description": "Message showing when at least one component is not operational\n"
                },
                "footerColor": {
                    "type": "string",
                    "description": "The color of the footer. Eg. \"#1F2F41\"\n"
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Functionalities attached to the status page\n"
                },
                "gaTrackingId": {
                    "type": "string",
                    "description": "Google Analytics tracking ID\n"
                },
                "headerColor": {
                    "type": "string",
                    "description": "The color of the header. Eg. \"#0061F2\"\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Make the status page accessible to the public. Value must be one of true or false\n"
                },
                "publicDescription": {
                    "type": "string",
                    "description": "The public description of the status page\n"
                },
                "publicTitle": {
                    "type": "string",
                    "description": "The public title of the status page\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Services attached to the status page\n"
                },
                "showUptime": {
                    "type": "boolean",
                    "description": "Show uptime. Value must be one of true or false\n"
                },
                "showUptimeLastDays": {
                    "type": "integer",
                    "description": "Show uptime over x days. Value must be one of `30`, `60`, `90`, `180`, `360`.\n"
                },
                "successMessage": {
                    "type": "string",
                    "description": "Message showing when all components are operational\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Status Page Timezone. Value must be one of `International Date Line West`, `American Samoa`, `Midway Island`, `Hawaii`, `Alaska`, `Pacific Time (US \u0026 Canada)`, `Tijuana`, `Arizona`, `Mazatlan`, `Mountain Time (US \u0026 Canada)`, `Central America`, `Central Time (US \u0026 Canada)`, `Chihuahua`, `Guadalajara`, `Mexico City`, `Monterrey`, `Saskatchewan`, `Bogota`, `Eastern Time (US \u0026 Canada)`, `Indiana (East)`, `Lima`, `Quito`, `Atlantic Time (Canada)`, `Caracas`, `Georgetown`, `La Paz`, `Puerto Rico`, `Santiago`, `Newfoundland`, `Brasilia`, `Buenos Aires`, `Montevideo`, `Greenland`, `Mid-Atlantic`, `Azores`, `Cape Verde Is.`, `Edinburgh`, `Lisbon`, `London`, `Monrovia`, `UTC`, `Amsterdam`, `Belgrade`, `Berlin`, `Bern`, `Bratislava`, `Brussels`, `Budapest`, `Casablanca`, `Copenhagen`, `Dublin`, `Ljubljana`, `Madrid`, `Paris`, `Prague`, `Rome`, `Sarajevo`, `Skopje`, `Stockholm`, `Vienna`, `Warsaw`, `West Central Africa`, `Zagreb`, `Zurich`, `Athens`, `Bucharest`, `Cairo`, `Harare`, `Helsinki`, `Jerusalem`, `Kaliningrad`, `Kyiv`, `Pretoria`, `Riga`, `Sofia`, `Tallinn`, `Vilnius`, `Baghdad`, `Istanbul`, `Kuwait`, `Minsk`, `Moscow`, `Nairobi`, `Riyadh`, `St. Petersburg`, `Volgograd`, `Tehran`, `Abu Dhabi`, `Baku`, `Muscat`, `Samara`, `Tbilisi`, `Yerevan`, `Kabul`, `Almaty`, `Ekaterinburg`, `Islamabad`, `Karachi`, `Tashkent`, `Chennai`, `Kolkata`, `Mumbai`, `New Delhi`, `Sri Jayawardenepura`, `Kathmandu`, `Astana`, `Dhaka`, `Urumqi`, `Rangoon`, `Bangkok`, `Hanoi`, `Jakarta`, `Krasnoyarsk`, `Novosibirsk`, `Beijing`, `Chongqing`, `Hong Kong`, `Irkutsk`, `Kuala Lumpur`, `Perth`, `Singapore`, `Taipei`, `Ulaanbaatar`, `Osaka`, `Sapporo`, `Seoul`, `Tokyo`, `Yakutsk`, `Adelaide`, `Darwin`, `Brisbane`, `Canberra`, `Guam`, `Hobart`, `Melbourne`, `Port Moresby`, `Sydney`, `Vladivostok`, `Magadan`, `New Caledonia`, `Solomon Is.`, `Srednekolymsk`, `Auckland`, `Fiji`, `Kamchatka`, `Marshall Is.`, `Wellington`, `Chatham Is.`, `Nuku'alofa`, `Samoa`, `Tokelau Is.`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the status page\n"
                },
                "websitePrivacyUrl": {
                    "type": "string",
                    "description": "Website Privacy URL\n"
                },
                "websiteSupportUrl": {
                    "type": "string",
                    "description": "Website Support URL\n"
                },
                "websiteUrl": {
                    "type": "string",
                    "description": "Website URL\n"
                }
            },
            "required": [
                "allowSearchEngineIndex",
                "authenticationEnabled",
                "authenticationPassword",
                "description",
                "failureMessage",
                "footerColor",
                "functionalityIds",
                "gaTrackingId",
                "headerColor",
                "public",
                "publicDescription",
                "publicTitle",
                "serviceIds",
                "showUptime",
                "showUptimeLastDays",
                "successMessage",
                "title",
                "websitePrivacyUrl",
                "websiteSupportUrl",
                "websiteUrl"
            ],
            "inputProperties": {
                "allowSearchEngineIndex": {
                    "type": "boolean",
                    "description": "Allow search engines to include your public status page in search results. Value must be one of true or false\n"
                },
                "authenticationEnabled": {
                    "type": "boolean",
                    "description": "Enable authentication. Value must be one of true or false\n"
                },
                "authenticationPassword": {
                    "type": "string",
                    "description": "Authentication password\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the status page\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "failureMessage": {
                    "type": "string",
                    "description": "Message showing when at least one component is not operational\n"
                },
                "footerColor": {
                    "type": "string",
                    "description": "The color of the footer. Eg. \"#1F2F41\"\n"
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Functionalities attached to the status page\n"
                },
                "gaTrackingId": {
                    "type": "string",
                    "description": "Google Analytics tracking ID\n"
                },
                "headerColor": {
                    "type": "string",
                    "description": "The color of the header. Eg. \"#0061F2\"\n"
                },
                "public": {
                    "type": "boolean",
                    "description": "Make the status page accessible to the public. Value must be one of true or false\n"
                },
                "publicDescription": {
                    "type": "string",
                    "description": "The public description of the status page\n"
                },
                "publicTitle": {
                    "type": "string",
                    "description": "The public title of the status page\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Services attached to the status page\n"
                },
                "showUptime": {
                    "type": "boolean",
                    "description": "Show uptime. Value must be one of true or false\n"
                },
                "showUptimeLastDays": {
                    "type": "integer",
                    "description": "Show uptime over x days. Value must be one of `30`, `60`, `90`, `180`, `360`.\n"
                },
                "successMessage": {
                    "type": "string",
                    "description": "Message showing when all components are operational\n"
                },
                "timeZone": {
                    "type": "string",
                    "description": "Status Page Timezone. Value must be one of `International Date Line West`, `American Samoa`, `Midway Island`, `Hawaii`, `Alaska`, `Pacific Time (US \u0026 Canada)`, `Tijuana`, `Arizona`, `Mazatlan`, `Mountain Time (US \u0026 Canada)`, `Central America`, `Central Time (US \u0026 Canada)`, `Chihuahua`, `Guadalajara`, `Mexico City`, `Monterrey`, `Saskatchewan`, `Bogota`, `Eastern Time (US \u0026 Canada)`, `Indiana (East)`, `Lima`, `Quito`, `Atlantic Time (Canada)`, `Caracas`, `Georgetown`, `La Paz`, `Puerto Rico`, `Santiago`, `Newfoundland`, `Brasilia`, `Buenos Aires`, `Montevideo`, `Greenland`, `Mid-Atlantic`, `Azores`, `Cape Verde Is.`, `Edinburgh`, `Lisbon`, `London`, `Monrovia`, `UTC`, `Amsterdam`, `Belgrade`, `Berlin`, `Bern`, `Bratislava`, `Brussels`, `Budapest`, `Casablanca`, `Copenhagen`, `Dublin`, `Ljubljana`, `Madrid`, `Paris`, `Prague`, `Rome`, `Sarajevo`, `Skopje`, `Stockholm`, `Vienna`, `Warsaw`, `West Central Africa`, `Zagreb`, `Zurich`, `Athens`, `Bucharest`, `Cairo`, `Harare`, `Helsinki`, `Jerusalem`, `Kaliningrad`, `Kyiv`, `Pretoria`, `Riga`, `Sofia`, `Tallinn`, `Vilnius`, `Baghdad`, `Istanbul`, `Kuwait`, `Minsk`, `Moscow`, `Nairobi`, `Riyadh`, `St. Petersburg`, `Volgograd`, `Tehran`, `Abu Dhabi`, `Baku`, `Muscat`, `Samara`, `Tbilisi`, `Yerevan`, `Kabul`, `Almaty`, `Ekaterinburg`, `Islamabad`, `Karachi`, `Tashkent`, `Chennai`, `Kolkata`, `Mumbai`, `New Delhi`, `Sri Jayawardenepura`, `Kathmandu`, `Astana`, `Dhaka`, `Urumqi`, `Rangoon`, `Bangkok`, `Hanoi`, `Jakarta`, `Krasnoyarsk`, `Novosibirsk`, `Beijing`, `Chongqing`, `Hong Kong`, `Irkutsk`, `Kuala Lumpur`, `Perth`, `Singapore`, `Taipei`, `Ulaanbaatar`, `Osaka`, `Sapporo`, `Seoul`, `Tokyo`, `Yakutsk`, `Adelaide`, `Darwin`, `Brisbane`, `Canberra`, `Guam`, `Hobart`, `Melbourne`, `Port Moresby`, `Sydney`, `Vladivostok`, `Magadan`, `New Caledonia`, `Solomon Is.`, `Srednekolymsk`, `Auckland`, `Fiji`, `Kamchatka`, `Marshall Is.`, `Wellington`, `Chatham Is.`, `Nuku'alofa`, `Samoa`, `Tokelau Is.`.\n"
                },
                "title": {
                    "type": "string",
                    "description": "The title of the status page\n"
                },
                "websitePrivacyUrl": {
                    "type": "string",
                    "description": "Website Privacy URL\n"
                },
                "websiteSupportUrl": {
                    "type": "string",
                    "description": "Website Support URL\n"
                },
                "websiteUrl": {
                    "type": "string",
                    "description": "Website URL\n"
                }
            },
            "requiredInputs": [
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StatusPage resources.\n",
                "properties": {
                    "allowSearchEngineIndex": {
                        "type": "boolean",
                        "description": "Allow search engines to include your public status page in search results. Value must be one of true or false\n"
                    },
                    "authenticationEnabled": {
                        "type": "boolean",
                        "description": "Enable authentication. Value must be one of true or false\n"
                    },
                    "authenticationPassword": {
                        "type": "string",
                        "description": "Authentication password\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the status page\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "failureMessage": {
                        "type": "string",
                        "description": "Message showing when at least one component is not operational\n"
                    },
                    "footerColor": {
                        "type": "string",
                        "description": "The color of the footer. Eg. \"#1F2F41\"\n"
                    },
                    "functionalityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Functionalities attached to the status page\n"
                    },
                    "gaTrackingId": {
                        "type": "string",
                        "description": "Google Analytics tracking ID\n"
                    },
                    "headerColor": {
                        "type": "string",
                        "description": "The color of the header. Eg. \"#0061F2\"\n"
                    },
                    "public": {
                        "type": "boolean",
                        "description": "Make the status page accessible to the public. Value must be one of true or false\n"
                    },
                    "publicDescription": {
                        "type": "string",
                        "description": "The public description of the status page\n"
                    },
                    "publicTitle": {
                        "type": "string",
                        "description": "The public title of the status page\n"
                    },
                    "serviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Services attached to the status page\n"
                    },
                    "showUptime": {
                        "type": "boolean",
                        "description": "Show uptime. Value must be one of true or false\n"
                    },
                    "showUptimeLastDays": {
                        "type": "integer",
                        "description": "Show uptime over x days. Value must be one of `30`, `60`, `90`, `180`, `360`.\n"
                    },
                    "successMessage": {
                        "type": "string",
                        "description": "Message showing when all components are operational\n"
                    },
                    "timeZone": {
                        "type": "string",
                        "description": "Status Page Timezone. Value must be one of `International Date Line West`, `American Samoa`, `Midway Island`, `Hawaii`, `Alaska`, `Pacific Time (US \u0026 Canada)`, `Tijuana`, `Arizona`, `Mazatlan`, `Mountain Time (US \u0026 Canada)`, `Central America`, `Central Time (US \u0026 Canada)`, `Chihuahua`, `Guadalajara`, `Mexico City`, `Monterrey`, `Saskatchewan`, `Bogota`, `Eastern Time (US \u0026 Canada)`, `Indiana (East)`, `Lima`, `Quito`, `Atlantic Time (Canada)`, `Caracas`, `Georgetown`, `La Paz`, `Puerto Rico`, `Santiago`, `Newfoundland`, `Brasilia`, `Buenos Aires`, `Montevideo`, `Greenland`, `Mid-Atlantic`, `Azores`, `Cape Verde Is.`, `Edinburgh`, `Lisbon`, `London`, `Monrovia`, `UTC`, `Amsterdam`, `Belgrade`, `Berlin`, `Bern`, `Bratislava`, `Brussels`, `Budapest`, `Casablanca`, `Copenhagen`, `Dublin`, `Ljubljana`, `Madrid`, `Paris`, `Prague`, `Rome`, `Sarajevo`, `Skopje`, `Stockholm`, `Vienna`, `Warsaw`, `West Central Africa`, `Zagreb`, `Zurich`, `Athens`, `Bucharest`, `Cairo`, `Harare`, `Helsinki`, `Jerusalem`, `Kaliningrad`, `Kyiv`, `Pretoria`, `Riga`, `Sofia`, `Tallinn`, `Vilnius`, `Baghdad`, `Istanbul`, `Kuwait`, `Minsk`, `Moscow`, `Nairobi`, `Riyadh`, `St. Petersburg`, `Volgograd`, `Tehran`, `Abu Dhabi`, `Baku`, `Muscat`, `Samara`, `Tbilisi`, `Yerevan`, `Kabul`, `Almaty`, `Ekaterinburg`, `Islamabad`, `Karachi`, `Tashkent`, `Chennai`, `Kolkata`, `Mumbai`, `New Delhi`, `Sri Jayawardenepura`, `Kathmandu`, `Astana`, `Dhaka`, `Urumqi`, `Rangoon`, `Bangkok`, `Hanoi`, `Jakarta`, `Krasnoyarsk`, `Novosibirsk`, `Beijing`, `Chongqing`, `Hong Kong`, `Irkutsk`, `Kuala Lumpur`, `Perth`, `Singapore`, `Taipei`, `Ulaanbaatar`, `Osaka`, `Sapporo`, `Seoul`, `Tokyo`, `Yakutsk`, `Adelaide`, `Darwin`, `Brisbane`, `Canberra`, `Guam`, `Hobart`, `Melbourne`, `Port Moresby`, `Sydney`, `Vladivostok`, `Magadan`, `New Caledonia`, `Solomon Is.`, `Srednekolymsk`, `Auckland`, `Fiji`, `Kamchatka`, `Marshall Is.`, `Wellington`, `Chatham Is.`, `Nuku'alofa`, `Samoa`, `Tokelau Is.`.\n"
                    },
                    "title": {
                        "type": "string",
                        "description": "The title of the status page\n"
                    },
                    "websitePrivacyUrl": {
                        "type": "string",
                        "description": "Website Privacy URL\n"
                    },
                    "websiteSupportUrl": {
                        "type": "string",
                        "description": "Website Support URL\n"
                    },
                    "websiteUrl": {
                        "type": "string",
                        "description": "Website URL\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/statusPageTemplate:StatusPageTemplate": {
            "properties": {
                "body": {
                    "type": "string",
                    "description": "Description of the event the template will populate\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the status page template. Value must be one of `normal`, `scheduled`.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the workflow task\n"
                },
                "shouldNotifySubscribers": {
                    "type": "boolean",
                    "description": "Controls if incident subscribers should be notified. Value must be one of true or false\n"
                },
                "statusPageId": {
                    "type": "string"
                },
                "title": {
                    "type": "string",
                    "description": "Title of the template\n"
                },
                "updateStatus": {
                    "type": "string",
                    "description": "Status of the event the template will populate\n"
                }
            },
            "required": [
                "body",
                "position",
                "shouldNotifySubscribers",
                "statusPageId",
                "title",
                "updateStatus"
            ],
            "inputProperties": {
                "body": {
                    "type": "string",
                    "description": "Description of the event the template will populate\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the status page template. Value must be one of `normal`, `scheduled`.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the workflow task\n"
                },
                "shouldNotifySubscribers": {
                    "type": "boolean",
                    "description": "Controls if incident subscribers should be notified. Value must be one of true or false\n"
                },
                "statusPageId": {
                    "type": "string",
                    "willReplaceOnChanges": true
                },
                "title": {
                    "type": "string",
                    "description": "Title of the template\n"
                },
                "updateStatus": {
                    "type": "string",
                    "description": "Status of the event the template will populate\n"
                }
            },
            "requiredInputs": [
                "body",
                "title"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering StatusPageTemplate resources.\n",
                "properties": {
                    "body": {
                        "type": "string",
                        "description": "Description of the event the template will populate\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "kind": {
                        "type": "string",
                        "description": "The kind of the status page template. Value must be one of `normal`, `scheduled`.\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position of the workflow task\n"
                    },
                    "shouldNotifySubscribers": {
                        "type": "boolean",
                        "description": "Controls if incident subscribers should be notified. Value must be one of true or false\n"
                    },
                    "statusPageId": {
                        "type": "string",
                        "willReplaceOnChanges": true
                    },
                    "title": {
                        "type": "string",
                        "description": "Title of the template\n"
                    },
                    "updateStatus": {
                        "type": "string",
                        "description": "Status of the event the template will populate\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/team:Team": {
            "properties": {
                "color": {
                    "type": "string",
                    "description": "The hex color of the team\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the team\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the team\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails to attach to the team\n"
                },
                "opsgenieId": {
                    "type": "string",
                    "description": "The Opsgenie group id associated to this team\n"
                },
                "pagerdutyId": {
                    "type": "string",
                    "description": "The PagerDuty group id associated to this team\n"
                },
                "pagertreeId": {
                    "type": "string",
                    "description": "The PagerTree group id associated to this team\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the team\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/TeamSlackAlias:TeamSlackAlias"
                    },
                    "description": "Slack Aliases associated with this service\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/TeamSlackChannel:TeamSlackChannel"
                    },
                    "description": "Slack Channels associated with this service\n"
                },
                "slug": {
                    "type": "string"
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The User ID's members of this team\n"
                },
                "victorOpsId": {
                    "type": "string",
                    "description": "The VictorOps group id associated to this team\n"
                }
            },
            "required": [
                "color",
                "description",
                "name",
                "notifyEmails",
                "opsgenieId",
                "pagerdutyId",
                "pagertreeId",
                "position",
                "slackAliases",
                "slackChannels",
                "slug",
                "userIds",
                "victorOpsId"
            ],
            "inputProperties": {
                "color": {
                    "type": "string",
                    "description": "The hex color of the team\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the team\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the team\n"
                },
                "notifyEmails": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Emails to attach to the team\n"
                },
                "opsgenieId": {
                    "type": "string",
                    "description": "The Opsgenie group id associated to this team\n"
                },
                "pagerdutyId": {
                    "type": "string",
                    "description": "The PagerDuty group id associated to this team\n"
                },
                "pagertreeId": {
                    "type": "string",
                    "description": "The PagerTree group id associated to this team\n"
                },
                "position": {
                    "type": "integer",
                    "description": "Position of the team\n"
                },
                "slackAliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/TeamSlackAlias:TeamSlackAlias"
                    },
                    "description": "Slack Aliases associated with this service\n"
                },
                "slackChannels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/rootly:index/TeamSlackChannel:TeamSlackChannel"
                    },
                    "description": "Slack Channels associated with this service\n"
                },
                "slug": {
                    "type": "string"
                },
                "userIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    },
                    "description": "The User ID's members of this team\n"
                },
                "victorOpsId": {
                    "type": "string",
                    "description": "The VictorOps group id associated to this team\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "color": {
                        "type": "string",
                        "description": "The hex color of the team\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the team\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the team\n"
                    },
                    "notifyEmails": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Emails to attach to the team\n"
                    },
                    "opsgenieId": {
                        "type": "string",
                        "description": "The Opsgenie group id associated to this team\n"
                    },
                    "pagerdutyId": {
                        "type": "string",
                        "description": "The PagerDuty group id associated to this team\n"
                    },
                    "pagertreeId": {
                        "type": "string",
                        "description": "The PagerTree group id associated to this team\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "Position of the team\n"
                    },
                    "slackAliases": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/TeamSlackAlias:TeamSlackAlias"
                        },
                        "description": "Slack Aliases associated with this service\n"
                    },
                    "slackChannels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/TeamSlackChannel:TeamSlackChannel"
                        },
                        "description": "Slack Channels associated with this service\n"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "userIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "description": "The User ID's members of this team\n"
                    },
                    "victorOpsId": {
                        "type": "string",
                        "description": "The VictorOps group id associated to this team\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/webhooksEndpoint:WebhooksEndpoint": {
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `incident.created`, `incident.updated`, `incident.in_triage`, `incident.mitigated`, `incident.resolved`, `incident.cancelled`, `incident.deleted`, `incident.scheduled.created`, `incident.scheduled.updated`, `incident.scheduled.in_progress`, `incident.scheduled.completed`, `incident.scheduled.deleted`, `incident_post_mortem.created`, `incident_post_mortem.updated`, `incident_post_mortem.published`, `incident_post_mortem.deleted`, `alert.created`, `pulse.created`, `genius_workflow_run.queued`, `genius_workflow_run.started`, `genius_workflow_run.completed`, `genius_workflow_run.failed`, `genius_workflow_run.canceled`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the endpoint\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The webhook signing secret used to verify webhook requests.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the endpoint\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the endpoint.\n"
                }
            },
            "required": [
                "eventTypes",
                "name",
                "secret",
                "slug",
                "url"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean"
                },
                "eventTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Value must be one of `incident.created`, `incident.updated`, `incident.in_triage`, `incident.mitigated`, `incident.resolved`, `incident.cancelled`, `incident.deleted`, `incident.scheduled.created`, `incident.scheduled.updated`, `incident.scheduled.in_progress`, `incident.scheduled.completed`, `incident.scheduled.deleted`, `incident_post_mortem.created`, `incident_post_mortem.updated`, `incident_post_mortem.published`, `incident_post_mortem.deleted`, `alert.created`, `pulse.created`, `genius_workflow_run.queued`, `genius_workflow_run.started`, `genius_workflow_run.completed`, `genius_workflow_run.failed`, `genius_workflow_run.canceled`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the endpoint\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The webhook signing secret used to verify webhook requests.\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the endpoint\n"
                },
                "url": {
                    "type": "string",
                    "description": "The URL of the endpoint.\n"
                }
            },
            "requiredInputs": [
                "url"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WebhooksEndpoint resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "eventTypes": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Value must be one of `incident.created`, `incident.updated`, `incident.in_triage`, `incident.mitigated`, `incident.resolved`, `incident.cancelled`, `incident.deleted`, `incident.scheduled.created`, `incident.scheduled.updated`, `incident.scheduled.in_progress`, `incident.scheduled.completed`, `incident.scheduled.deleted`, `incident_post_mortem.created`, `incident_post_mortem.updated`, `incident_post_mortem.published`, `incident_post_mortem.deleted`, `alert.created`, `pulse.created`, `genius_workflow_run.queued`, `genius_workflow_run.started`, `genius_workflow_run.completed`, `genius_workflow_run.failed`, `genius_workflow_run.canceled`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the endpoint\n"
                    },
                    "secret": {
                        "type": "string",
                        "description": "The webhook signing secret used to verify webhook requests.\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the endpoint\n"
                    },
                    "url": {
                        "type": "string",
                        "description": "The URL of the endpoint.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowActionItem:WorkflowActionItem": {
            "properties": {
                "causeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string",
                    "description": "Workflow command\n"
                },
                "commandFeedbackEnabled": {
                    "type": "boolean",
                    "description": "This will notify you back when the workflow is starting. Value must be one of true or false\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowActionItemTriggerParams:WorkflowActionItemTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "required": [
                "causeIds",
                "command",
                "commandFeedbackEnabled",
                "description",
                "environmentIds",
                "functionalityIds",
                "groupIds",
                "incidentRoleIds",
                "incidentTypeIds",
                "name",
                "position",
                "repeatEveryDuration",
                "repeatOns",
                "serviceIds",
                "severityIds",
                "slug",
                "triggerParams",
                "wait",
                "workflowGroupId"
            ],
            "inputProperties": {
                "causeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string",
                    "description": "Workflow command\n"
                },
                "commandFeedbackEnabled": {
                    "type": "boolean",
                    "description": "This will notify you back when the workflow is starting. Value must be one of true or false\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowActionItemTriggerParams:WorkflowActionItemTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowActionItem resources.\n",
                "properties": {
                    "causeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "command": {
                        "type": "string",
                        "description": "Workflow command\n"
                    },
                    "commandFeedbackEnabled": {
                        "type": "boolean",
                        "description": "This will notify you back when the workflow is starting. Value must be one of true or false\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the workflow\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "functionalityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentRoleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the workflow\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The order which the workflow should run with other workflows.\n"
                    },
                    "repeatEveryDuration": {
                        "type": "string",
                        "description": "Repeat workflow every duration\n"
                    },
                    "repeatOns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                    },
                    "serviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "severityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the workflow\n"
                    },
                    "triggerParams": {
                        "$ref": "#/types/rootly:index/WorkflowActionItemTriggerParams:WorkflowActionItemTriggerParams"
                    },
                    "wait": {
                        "type": "string",
                        "description": "Wait this duration before executing\n"
                    },
                    "workflowGroupId": {
                        "type": "string",
                        "description": "The group this workflow belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowAlert:WorkflowAlert": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst my_workflow = new rootly.WorkflowAlert(\"my-workflow\", {\n    description: \"This workflow will trigger when an alert is created\",\n    enabled: true,\n    triggerParams: {\n        triggers: [\"alert_created\"],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nmy_workflow = rootly.WorkflowAlert(\"my-workflow\",\n    description=\"This workflow will trigger when an alert is created\",\n    enabled=True,\n    trigger_params=rootly.WorkflowAlertTriggerParamsArgs(\n        triggers=[\"alert_created\"],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_workflow = new Rootly.WorkflowAlert(\"my-workflow\", new()\n    {\n        Description = \"This workflow will trigger when an alert is created\",\n        Enabled = true,\n        TriggerParams = new Rootly.Inputs.WorkflowAlertTriggerParamsArgs\n        {\n            Triggers = new[]\n            {\n                \"alert_created\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.NewWorkflowAlert(ctx, \"my-workflow\", \u0026rootly.WorkflowAlertArgs{\n\t\t\tDescription: pulumi.String(\"This workflow will trigger when an alert is created\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tTriggerParams: \u0026rootly.WorkflowAlertTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"alert_created\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.WorkflowAlert;\nimport com.pulumi.rootly.WorkflowAlertArgs;\nimport com.pulumi.rootly.inputs.WorkflowAlertTriggerParamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var my_workflow = new WorkflowAlert(\"my-workflow\", WorkflowAlertArgs.builder()        \n            .description(\"This workflow will trigger when an alert is created\")\n            .enabled(true)\n            .triggerParams(WorkflowAlertTriggerParamsArgs.builder()\n                .triggers(\"alert_created\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  my-workflow:\n    type: rootly:WorkflowAlert\n    properties:\n      description: This workflow will trigger when an alert is created\n      enabled: true\n      triggerParams:\n        triggers:\n          - alert_created\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "causeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string",
                    "description": "Workflow command\n"
                },
                "commandFeedbackEnabled": {
                    "type": "boolean",
                    "description": "This will notify you back when the workflow is starting. Value must be one of true or false\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowAlertTriggerParams:WorkflowAlertTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "required": [
                "causeIds",
                "command",
                "commandFeedbackEnabled",
                "description",
                "environmentIds",
                "functionalityIds",
                "groupIds",
                "incidentRoleIds",
                "incidentTypeIds",
                "name",
                "position",
                "repeatEveryDuration",
                "repeatOns",
                "serviceIds",
                "severityIds",
                "slug",
                "triggerParams",
                "wait",
                "workflowGroupId"
            ],
            "inputProperties": {
                "causeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string",
                    "description": "Workflow command\n"
                },
                "commandFeedbackEnabled": {
                    "type": "boolean",
                    "description": "This will notify you back when the workflow is starting. Value must be one of true or false\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowAlertTriggerParams:WorkflowAlertTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowAlert resources.\n",
                "properties": {
                    "causeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "command": {
                        "type": "string",
                        "description": "Workflow command\n"
                    },
                    "commandFeedbackEnabled": {
                        "type": "boolean",
                        "description": "This will notify you back when the workflow is starting. Value must be one of true or false\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the workflow\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "functionalityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentRoleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the workflow\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The order which the workflow should run with other workflows.\n"
                    },
                    "repeatEveryDuration": {
                        "type": "string",
                        "description": "Repeat workflow every duration\n"
                    },
                    "repeatOns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                    },
                    "serviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "severityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the workflow\n"
                    },
                    "triggerParams": {
                        "$ref": "#/types/rootly:index/WorkflowAlertTriggerParams:WorkflowAlertTriggerParams"
                    },
                    "wait": {
                        "type": "string",
                        "description": "Wait this duration before executing\n"
                    },
                    "workflowGroupId": {
                        "type": "string",
                        "description": "The group this workflow belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowCustomFieldSelection:WorkflowCustomFieldSelection": {
            "properties": {
                "customFieldId": {
                    "type": "integer",
                    "description": "The custom field for this selection\n"
                },
                "incidentCondition": {
                    "type": "string",
                    "description": "The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "selectedOptionIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "workflowId": {
                    "type": "string",
                    "description": "The workflow for this selection\n"
                }
            },
            "required": [
                "customFieldId",
                "selectedOptionIds",
                "values",
                "workflowId"
            ],
            "inputProperties": {
                "customFieldId": {
                    "type": "integer",
                    "description": "The custom field for this selection\n"
                },
                "incidentCondition": {
                    "type": "string",
                    "description": "The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "selectedOptionIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "workflowId": {
                    "type": "string",
                    "description": "The workflow for this selection\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "customFieldId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowCustomFieldSelection resources.\n",
                "properties": {
                    "customFieldId": {
                        "type": "integer",
                        "description": "The custom field for this selection\n"
                    },
                    "incidentCondition": {
                        "type": "string",
                        "description": "The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                    },
                    "selectedOptionIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The workflow for this selection\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowFormFieldCondition:WorkflowFormFieldCondition": {
            "properties": {
                "formFieldId": {
                    "type": "string",
                    "description": "The custom field for this condition\n"
                },
                "incidentCondition": {
                    "type": "string",
                    "description": "The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "selectedOptionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "selectedUserIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "workflowId": {
                    "type": "string",
                    "description": "The workflow for this condition\n"
                }
            },
            "required": [
                "formFieldId",
                "selectedOptionIds",
                "selectedUserIds",
                "values",
                "workflowId"
            ],
            "inputProperties": {
                "formFieldId": {
                    "type": "string",
                    "description": "The custom field for this condition\n"
                },
                "incidentCondition": {
                    "type": "string",
                    "description": "The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                },
                "selectedOptionIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "selectedUserIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "values": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "workflowId": {
                    "type": "string",
                    "description": "The workflow for this condition\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "formFieldId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowFormFieldCondition resources.\n",
                "properties": {
                    "formFieldId": {
                        "type": "string",
                        "description": "The custom field for this condition\n"
                    },
                    "incidentCondition": {
                        "type": "string",
                        "description": "The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.\n"
                    },
                    "selectedOptionIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "selectedUserIds": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "values": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The workflow for this condition\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowGroup:WorkflowGroup": {
            "properties": {
                "description": {
                    "type": "string",
                    "description": "A description of the workflow group.\n"
                },
                "expanded": {
                    "type": "boolean",
                    "description": "Whether the group is expanded or collapsed.. Value must be one of true or false\n"
                },
                "icon": {
                    "type": "string",
                    "description": "An emoji icon displayed next to the workflow group.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the workflow group. Value must be one of `simple`, `incident`, `post_mortem`, `action_item`, `pulse`, `alert`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workflow group.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow group\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow group.\n"
                }
            },
            "required": [
                "description",
                "expanded",
                "icon",
                "name",
                "position",
                "slug"
            ],
            "inputProperties": {
                "description": {
                    "type": "string",
                    "description": "A description of the workflow group.\n"
                },
                "expanded": {
                    "type": "boolean",
                    "description": "Whether the group is expanded or collapsed.. Value must be one of true or false\n"
                },
                "icon": {
                    "type": "string",
                    "description": "An emoji icon displayed next to the workflow group.\n"
                },
                "kind": {
                    "type": "string",
                    "description": "The kind of the workflow group. Value must be one of `simple`, `incident`, `post_mortem`, `action_item`, `pulse`, `alert`.\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the workflow group.\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow group\n"
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow group.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowGroup resources.\n",
                "properties": {
                    "description": {
                        "type": "string",
                        "description": "A description of the workflow group.\n"
                    },
                    "expanded": {
                        "type": "boolean",
                        "description": "Whether the group is expanded or collapsed.. Value must be one of true or false\n"
                    },
                    "icon": {
                        "type": "string",
                        "description": "An emoji icon displayed next to the workflow group.\n"
                    },
                    "kind": {
                        "type": "string",
                        "description": "The kind of the workflow group. Value must be one of `simple`, `incident`, `post_mortem`, `action_item`, `pulse`, `alert`.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the workflow group.\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow group\n"
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the workflow group.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowIncident:WorkflowIncident": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst critical = rootly.getSeverity({\n    slug: \"sev0\",\n});\nconst my_workflow = new rootly.WorkflowIncident(\"my-workflow\", {\n    description: \"This workflow will trigger when an incident is created and severity is critical\",\n    triggerParams: {\n        triggers: [\"incident_created\"],\n        incidentConditionKind: \"IS\",\n        incidentKinds: [\"normal\"],\n        incidentConditionStatus: \"IS\",\n        incidentStatuses: [\"started\"],\n        incidentConditionSeverity: \"IS\",\n    },\n    severityIds: [critical.then(critical =\u003e critical.id)],\n    enabled: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\ncritical = rootly.get_severity(slug=\"sev0\")\nmy_workflow = rootly.WorkflowIncident(\"my-workflow\",\n    description=\"This workflow will trigger when an incident is created and severity is critical\",\n    trigger_params=rootly.WorkflowIncidentTriggerParamsArgs(\n        triggers=[\"incident_created\"],\n        incident_condition_kind=\"IS\",\n        incident_kinds=[\"normal\"],\n        incident_condition_status=\"IS\",\n        incident_statuses=[\"started\"],\n        incident_condition_severity=\"IS\",\n    ),\n    severity_ids=[critical.id],\n    enabled=True)\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var critical = Rootly.GetSeverity.Invoke(new()\n    {\n        Slug = \"sev0\",\n    });\n\n    var my_workflow = new Rootly.WorkflowIncident(\"my-workflow\", new()\n    {\n        Description = \"This workflow will trigger when an incident is created and severity is critical\",\n        TriggerParams = new Rootly.Inputs.WorkflowIncidentTriggerParamsArgs\n        {\n            Triggers = new[]\n            {\n                \"incident_created\",\n            },\n            IncidentConditionKind = \"IS\",\n            IncidentKinds = new[]\n            {\n                \"normal\",\n            },\n            IncidentConditionStatus = \"IS\",\n            IncidentStatuses = new[]\n            {\n                \"started\",\n            },\n            IncidentConditionSeverity = \"IS\",\n        },\n        SeverityIds = new[]\n        {\n            critical.Apply(getSeverityResult =\u003e getSeverityResult.Id),\n        },\n        Enabled = true,\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcritical, err := rootly.LookupSeverity(ctx, \u0026rootly.LookupSeverityArgs{\n\t\t\tSlug: pulumi.StringRef(\"sev0\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewWorkflowIncident(ctx, \"my-workflow\", \u0026rootly.WorkflowIncidentArgs{\n\t\t\tDescription: pulumi.String(\"This workflow will trigger when an incident is created and severity is critical\"),\n\t\t\tTriggerParams: \u0026rootly.WorkflowIncidentTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"incident_created\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionKind: pulumi.String(\"IS\"),\n\t\t\t\tIncidentKinds: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"normal\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionStatus: pulumi.String(\"IS\"),\n\t\t\t\tIncidentStatuses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"started\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionSeverity: pulumi.String(\"IS\"),\n\t\t\t},\n\t\t\tSeverityIds: pulumi.StringArray{\n\t\t\t\t*pulumi.String(critical.Id),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetSeverityArgs;\nimport com.pulumi.rootly.WorkflowIncident;\nimport com.pulumi.rootly.WorkflowIncidentArgs;\nimport com.pulumi.rootly.inputs.WorkflowIncidentTriggerParamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var critical = RootlyFunctions.getSeverity(GetSeverityArgs.builder()\n            .slug(\"sev0\")\n            .build());\n\n        var my_workflow = new WorkflowIncident(\"my-workflow\", WorkflowIncidentArgs.builder()        \n            .description(\"This workflow will trigger when an incident is created and severity is critical\")\n            .triggerParams(WorkflowIncidentTriggerParamsArgs.builder()\n                .triggers(\"incident_created\")\n                .incidentConditionKind(\"IS\")\n                .incidentKinds(\"normal\")\n                .incidentConditionStatus(\"IS\")\n                .incidentStatuses(\"started\")\n                .incidentConditionSeverity(\"IS\")\n                .build())\n            .severityIds(critical.applyValue(getSeverityResult -\u003e getSeverityResult.id()))\n            .enabled(true)\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  my-workflow:\n    type: rootly:WorkflowIncident\n    properties:\n      description: This workflow will trigger when an incident is created and severity is critical\n      triggerParams:\n        triggers:\n          - incident_created\n        incidentConditionKind: IS\n        incidentKinds:\n          - normal\n        incidentConditionStatus: IS\n        incidentStatuses:\n          - started\n        incidentConditionSeverity: IS\n      severityIds:\n        - ${critical.id}\n      enabled: true\nvariables:\n  critical:\n    fn::invoke:\n      Function: rootly:getSeverity\n      Arguments:\n        slug: sev0\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "causeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string",
                    "description": "Workflow command\n"
                },
                "commandFeedbackEnabled": {
                    "type": "boolean",
                    "description": "This will notify you back when the workflow is starting. Value must be one of true or false\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowIncidentTriggerParams:WorkflowIncidentTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "required": [
                "causeIds",
                "command",
                "commandFeedbackEnabled",
                "description",
                "environmentIds",
                "functionalityIds",
                "groupIds",
                "incidentRoleIds",
                "incidentTypeIds",
                "name",
                "position",
                "repeatEveryDuration",
                "repeatOns",
                "serviceIds",
                "severityIds",
                "slug",
                "triggerParams",
                "wait",
                "workflowGroupId"
            ],
            "inputProperties": {
                "causeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string",
                    "description": "Workflow command\n"
                },
                "commandFeedbackEnabled": {
                    "type": "boolean",
                    "description": "This will notify you back when the workflow is starting. Value must be one of true or false\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowIncidentTriggerParams:WorkflowIncidentTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowIncident resources.\n",
                "properties": {
                    "causeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "command": {
                        "type": "string",
                        "description": "Workflow command\n"
                    },
                    "commandFeedbackEnabled": {
                        "type": "boolean",
                        "description": "This will notify you back when the workflow is starting. Value must be one of true or false\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the workflow\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "functionalityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentRoleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the workflow\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The order which the workflow should run with other workflows.\n"
                    },
                    "repeatEveryDuration": {
                        "type": "string",
                        "description": "Repeat workflow every duration\n"
                    },
                    "repeatOns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                    },
                    "serviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "severityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the workflow\n"
                    },
                    "triggerParams": {
                        "$ref": "#/types/rootly:index/WorkflowIncidentTriggerParams:WorkflowIncidentTriggerParams"
                    },
                    "wait": {
                        "type": "string",
                        "description": "Wait this duration before executing\n"
                    },
                    "workflowGroupId": {
                        "type": "string",
                        "description": "The group this workflow belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowPostMortem:WorkflowPostMortem": {
            "properties": {
                "causeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string",
                    "description": "Workflow command\n"
                },
                "commandFeedbackEnabled": {
                    "type": "boolean",
                    "description": "This will notify you back when the workflow is starting. Value must be one of true or false\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowPostMortemTriggerParams:WorkflowPostMortemTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "required": [
                "causeIds",
                "command",
                "commandFeedbackEnabled",
                "description",
                "environmentIds",
                "functionalityIds",
                "groupIds",
                "incidentRoleIds",
                "incidentTypeIds",
                "name",
                "position",
                "repeatEveryDuration",
                "repeatOns",
                "serviceIds",
                "severityIds",
                "slug",
                "triggerParams",
                "wait",
                "workflowGroupId"
            ],
            "inputProperties": {
                "causeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string",
                    "description": "Workflow command\n"
                },
                "commandFeedbackEnabled": {
                    "type": "boolean",
                    "description": "This will notify you back when the workflow is starting. Value must be one of true or false\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowPostMortemTriggerParams:WorkflowPostMortemTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowPostMortem resources.\n",
                "properties": {
                    "causeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "command": {
                        "type": "string",
                        "description": "Workflow command\n"
                    },
                    "commandFeedbackEnabled": {
                        "type": "boolean",
                        "description": "This will notify you back when the workflow is starting. Value must be one of true or false\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the workflow\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "functionalityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentRoleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the workflow\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The order which the workflow should run with other workflows.\n"
                    },
                    "repeatEveryDuration": {
                        "type": "string",
                        "description": "Repeat workflow every duration\n"
                    },
                    "repeatOns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                    },
                    "serviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "severityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the workflow\n"
                    },
                    "triggerParams": {
                        "$ref": "#/types/rootly:index/WorkflowPostMortemTriggerParams:WorkflowPostMortemTriggerParams"
                    },
                    "wait": {
                        "type": "string",
                        "description": "Wait this duration before executing\n"
                    },
                    "workflowGroupId": {
                        "type": "string",
                        "description": "The group this workflow belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowPulse:WorkflowPulse": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst my_workflow = new rootly.WorkflowPulse(\"my-workflow\", {\n    description: \"This workflow will trigger when a pulse is created\",\n    enabled: true,\n    triggerParams: {\n        triggers: [\"pulse_created\"],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nmy_workflow = rootly.WorkflowPulse(\"my-workflow\",\n    description=\"This workflow will trigger when a pulse is created\",\n    enabled=True,\n    trigger_params=rootly.WorkflowPulseTriggerParamsArgs(\n        triggers=[\"pulse_created\"],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_workflow = new Rootly.WorkflowPulse(\"my-workflow\", new()\n    {\n        Description = \"This workflow will trigger when a pulse is created\",\n        Enabled = true,\n        TriggerParams = new Rootly.Inputs.WorkflowPulseTriggerParamsArgs\n        {\n            Triggers = new[]\n            {\n                \"pulse_created\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.NewWorkflowPulse(ctx, \"my-workflow\", \u0026rootly.WorkflowPulseArgs{\n\t\t\tDescription: pulumi.String(\"This workflow will trigger when a pulse is created\"),\n\t\t\tEnabled:     pulumi.Bool(true),\n\t\t\tTriggerParams: \u0026rootly.WorkflowPulseTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"pulse_created\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.WorkflowPulse;\nimport com.pulumi.rootly.WorkflowPulseArgs;\nimport com.pulumi.rootly.inputs.WorkflowPulseTriggerParamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var my_workflow = new WorkflowPulse(\"my-workflow\", WorkflowPulseArgs.builder()        \n            .description(\"This workflow will trigger when a pulse is created\")\n            .enabled(true)\n            .triggerParams(WorkflowPulseTriggerParamsArgs.builder()\n                .triggers(\"pulse_created\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  my-workflow:\n    type: rootly:WorkflowPulse\n    properties:\n      description: This workflow will trigger when a pulse is created\n      enabled: true\n      triggerParams:\n        triggers:\n          - pulse_created\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "causeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string",
                    "description": "Workflow command\n"
                },
                "commandFeedbackEnabled": {
                    "type": "boolean",
                    "description": "This will notify you back when the workflow is starting. Value must be one of true or false\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowPulseTriggerParams:WorkflowPulseTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "required": [
                "causeIds",
                "command",
                "commandFeedbackEnabled",
                "description",
                "environmentIds",
                "functionalityIds",
                "groupIds",
                "incidentRoleIds",
                "incidentTypeIds",
                "name",
                "position",
                "repeatEveryDuration",
                "repeatOns",
                "serviceIds",
                "severityIds",
                "slug",
                "triggerParams",
                "wait",
                "workflowGroupId"
            ],
            "inputProperties": {
                "causeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string",
                    "description": "Workflow command\n"
                },
                "commandFeedbackEnabled": {
                    "type": "boolean",
                    "description": "This will notify you back when the workflow is starting. Value must be one of true or false\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowPulseTriggerParams:WorkflowPulseTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowPulse resources.\n",
                "properties": {
                    "causeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "command": {
                        "type": "string",
                        "description": "Workflow command\n"
                    },
                    "commandFeedbackEnabled": {
                        "type": "boolean",
                        "description": "This will notify you back when the workflow is starting. Value must be one of true or false\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the workflow\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "functionalityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentRoleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the workflow\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The order which the workflow should run with other workflows.\n"
                    },
                    "repeatEveryDuration": {
                        "type": "string",
                        "description": "Repeat workflow every duration\n"
                    },
                    "repeatOns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                    },
                    "serviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "severityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the workflow\n"
                    },
                    "triggerParams": {
                        "$ref": "#/types/rootly:index/WorkflowPulseTriggerParams:WorkflowPulseTriggerParams"
                    },
                    "wait": {
                        "type": "string",
                        "description": "Wait this duration before executing\n"
                    },
                    "workflowGroupId": {
                        "type": "string",
                        "description": "The group this workflow belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowSimple:WorkflowSimple": {
            "properties": {
                "causeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string",
                    "description": "Workflow command\n"
                },
                "commandFeedbackEnabled": {
                    "type": "boolean",
                    "description": "This will notify you back when the workflow is starting. Value must be one of true or false\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowSimpleTriggerParams:WorkflowSimpleTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "required": [
                "causeIds",
                "command",
                "commandFeedbackEnabled",
                "description",
                "environmentIds",
                "functionalityIds",
                "groupIds",
                "incidentRoleIds",
                "incidentTypeIds",
                "name",
                "position",
                "repeatEveryDuration",
                "repeatOns",
                "serviceIds",
                "severityIds",
                "slug",
                "triggerParams",
                "wait",
                "workflowGroupId"
            ],
            "inputProperties": {
                "causeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "command": {
                    "type": "string",
                    "description": "Workflow command\n"
                },
                "commandFeedbackEnabled": {
                    "type": "boolean",
                    "description": "This will notify you back when the workflow is starting. Value must be one of true or false\n"
                },
                "description": {
                    "type": "string",
                    "description": "The description of the workflow\n"
                },
                "enabled": {
                    "type": "boolean"
                },
                "environmentIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "functionalityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "groupIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentRoleIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "incidentTypeIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The title of the workflow\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The order which the workflow should run with other workflows.\n"
                },
                "repeatEveryDuration": {
                    "type": "string",
                    "description": "Repeat workflow every duration\n"
                },
                "repeatOns": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                },
                "serviceIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "severityIds": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "slug": {
                    "type": "string",
                    "description": "The slug of the workflow\n"
                },
                "triggerParams": {
                    "$ref": "#/types/rootly:index/WorkflowSimpleTriggerParams:WorkflowSimpleTriggerParams"
                },
                "wait": {
                    "type": "string",
                    "description": "Wait this duration before executing\n"
                },
                "workflowGroupId": {
                    "type": "string",
                    "description": "The group this workflow belongs to.\n"
                }
            },
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowSimple resources.\n",
                "properties": {
                    "causeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "command": {
                        "type": "string",
                        "description": "Workflow command\n"
                    },
                    "commandFeedbackEnabled": {
                        "type": "boolean",
                        "description": "This will notify you back when the workflow is starting. Value must be one of true or false\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "The description of the workflow\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "environmentIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "functionalityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "groupIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentRoleIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "incidentTypeIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "name": {
                        "type": "string",
                        "description": "The title of the workflow\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The order which the workflow should run with other workflows.\n"
                    },
                    "repeatEveryDuration": {
                        "type": "string",
                        "description": "Repeat workflow every duration\n"
                    },
                    "repeatOns": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.\n"
                    },
                    "serviceIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "severityIds": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "slug": {
                        "type": "string",
                        "description": "The slug of the workflow\n"
                    },
                    "triggerParams": {
                        "$ref": "#/types/rootly:index/WorkflowSimpleTriggerParams:WorkflowSimpleTriggerParams"
                    },
                    "wait": {
                        "type": "string",
                        "description": "Wait this duration before executing\n"
                    },
                    "workflowGroupId": {
                        "type": "string",
                        "description": "The group this workflow belongs to.\n"
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskAddActionItem:WorkflowTaskAddActionItem": {
            "description": "Manages workflow add_action_item task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddActionItemTaskParams:WorkflowTaskAddActionItemTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddActionItemTaskParams:WorkflowTaskAddActionItemTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskAddActionItem resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAddActionItemTaskParams:WorkflowTaskAddActionItemTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskAddRole:WorkflowTaskAddRole": {
            "description": "Manages workflow add_role task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddRoleTaskParams:WorkflowTaskAddRoleTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddRoleTaskParams:WorkflowTaskAddRoleTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskAddRole resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAddRoleTaskParams:WorkflowTaskAddRoleTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskAddSlackBookmark:WorkflowTaskAddSlackBookmark": {
            "description": "Manages workflow add_slack_bookmark task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddSlackBookmarkTaskParams:WorkflowTaskAddSlackBookmarkTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddSlackBookmarkTaskParams:WorkflowTaskAddSlackBookmarkTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskAddSlackBookmark resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAddSlackBookmarkTaskParams:WorkflowTaskAddSlackBookmarkTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskAddTeam:WorkflowTaskAddTeam": {
            "description": "Manages workflow add_team task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddTeamTaskParams:WorkflowTaskAddTeamTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddTeamTaskParams:WorkflowTaskAddTeamTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskAddTeam resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAddTeamTaskParams:WorkflowTaskAddTeamTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskAddToTimeline:WorkflowTaskAddToTimeline": {
            "description": "Manages workflow add_to_timeline task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddToTimelineTaskParams:WorkflowTaskAddToTimelineTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAddToTimelineTaskParams:WorkflowTaskAddToTimelineTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskAddToTimeline resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAddToTimelineTaskParams:WorkflowTaskAddToTimelineTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskArchiveSlackChannels:WorkflowTaskArchiveSlackChannels": {
            "description": "Manages workflow archive_slack_channels task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.WorkflowIncident;\nimport com.pulumi.rootly.WorkflowIncidentArgs;\nimport com.pulumi.rootly.inputs.WorkflowIncidentTriggerParamsArgs;\nimport com.pulumi.rootly.WorkflowTaskArchiveSlackChannels;\nimport com.pulumi.rootly.WorkflowTaskArchiveSlackChannelsArgs;\nimport com.pulumi.rootly.inputs.WorkflowTaskArchiveSlackChannelsTaskParamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var autoArchiveIncident = new WorkflowIncident(\"autoArchiveIncident\", WorkflowIncidentArgs.builder()        \n            .description(\"After an incident has been resolved, automatically archive the channel after 48 hours.\")\n            .triggerParams(WorkflowIncidentTriggerParamsArgs.builder()\n                .triggers(\"status_updated\")\n                .wait(\"2 days\")\n                .incidentStatuses(\"resolved\")\n                .incidentConditionStatus(\"IS\")\n                .build())\n            .enabled(true)\n            .build());\n\n        var archiveSlackChannels = new WorkflowTaskArchiveSlackChannels(\"archiveSlackChannels\", WorkflowTaskArchiveSlackChannelsArgs.builder()        \n            .workflowId(autoArchiveIncident.id())\n            .skipOnFailure(false)\n            .enabled(true)\n            .taskParams(WorkflowTaskArchiveSlackChannelsTaskParamsArgs.builder()\n                .name(\"Archive Slack channels\")\n                .channels(WorkflowTaskArchiveSlackChannelsTaskParamsChannelArgs.builder()\n                    .id(\"{{ incident.slack_channel_id }}\")\n                    .name(\"{{ incident.slack_channel_id }}\")\n                    .build())\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  autoArchiveIncident:\n    type: rootly:WorkflowIncident\n    properties:\n      description: After an incident has been resolved, automatically archive the channel after 48 hours.\n      triggerParams:\n        triggers:\n          - status_updated\n        wait: 2 days\n        incidentStatuses:\n          - resolved\n        incidentConditionStatus: IS\n      enabled: true\n  archiveSlackChannels:\n    type: rootly:WorkflowTaskArchiveSlackChannels\n    properties:\n      workflowId: ${autoArchiveIncident.id}\n      skipOnFailure: false\n      enabled: true\n      taskParams:\n        name: Archive Slack channels\n        channels:\n          - id: '{{ incident.slack_channel_id }}'\n            name: '{{ incident.slack_channel_id }}'\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskArchiveSlackChannelsTaskParams:WorkflowTaskArchiveSlackChannelsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskArchiveSlackChannelsTaskParams:WorkflowTaskArchiveSlackChannelsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskArchiveSlackChannels resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskArchiveSlackChannelsTaskParams:WorkflowTaskArchiveSlackChannelsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskAttachDatadogDashboards:WorkflowTaskAttachDatadogDashboards": {
            "description": "Manages workflow attach_datadog_dashboards task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAttachDatadogDashboardsTaskParams:WorkflowTaskAttachDatadogDashboardsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAttachDatadogDashboardsTaskParams:WorkflowTaskAttachDatadogDashboardsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskAttachDatadogDashboards resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAttachDatadogDashboardsTaskParams:WorkflowTaskAttachDatadogDashboardsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskAutoAssignRoleOpsgenie:WorkflowTaskAutoAssignRoleOpsgenie": {
            "description": "Manages workflow auto_assign_role_opsgenie task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAutoAssignRoleOpsgenieTaskParams:WorkflowTaskAutoAssignRoleOpsgenieTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAutoAssignRoleOpsgenieTaskParams:WorkflowTaskAutoAssignRoleOpsgenieTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskAutoAssignRoleOpsgenie resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAutoAssignRoleOpsgenieTaskParams:WorkflowTaskAutoAssignRoleOpsgenieTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskAutoAssignRolePagerduty:WorkflowTaskAutoAssignRolePagerduty": {
            "description": "Manages workflow auto_assign_role_pagerduty task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAutoAssignRolePagerdutyTaskParams:WorkflowTaskAutoAssignRolePagerdutyTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAutoAssignRolePagerdutyTaskParams:WorkflowTaskAutoAssignRolePagerdutyTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskAutoAssignRolePagerduty resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAutoAssignRolePagerdutyTaskParams:WorkflowTaskAutoAssignRolePagerdutyTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskAutoAssignRoleVictorOps:WorkflowTaskAutoAssignRoleVictorOps": {
            "description": "Manages workflow auto_assign_role_victor_ops task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAutoAssignRoleVictorOpsTaskParams:WorkflowTaskAutoAssignRoleVictorOpsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskAutoAssignRoleVictorOpsTaskParams:WorkflowTaskAutoAssignRoleVictorOpsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskAutoAssignRoleVictorOps resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskAutoAssignRoleVictorOpsTaskParams:WorkflowTaskAutoAssignRoleVictorOpsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCallPeople:WorkflowTaskCallPeople": {
            "description": "Manages workflow call_people task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst callPeopleWorkflowIncident = new rootly.WorkflowIncident(\"callPeopleWorkflowIncident\", {\n    description: \"Automatically call a specific teammate.\",\n    triggerParams: {\n        triggers: [\"incident_created\"],\n        incidentStatuses: [\"started\"],\n        incidentConditionStatus: \"IS\",\n    },\n    enabled: true,\n});\nconst callPeopleWorkflowTaskCallPeople = new rootly.WorkflowTaskCallPeople(\"callPeopleWorkflowTaskCallPeople\", {\n    workflowId: callPeopleWorkflowIncident.id,\n    skipOnFailure: false,\n    enabled: true,\n    taskParams: {\n        name: \"Call people\",\n        content: \"We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\",\n    },\n});\n// TODO\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\ncall_people_workflow_incident = rootly.WorkflowIncident(\"callPeopleWorkflowIncident\",\n    description=\"Automatically call a specific teammate.\",\n    trigger_params=rootly.WorkflowIncidentTriggerParamsArgs(\n        triggers=[\"incident_created\"],\n        incident_statuses=[\"started\"],\n        incident_condition_status=\"IS\",\n    ),\n    enabled=True)\ncall_people_workflow_task_call_people = rootly.WorkflowTaskCallPeople(\"callPeopleWorkflowTaskCallPeople\",\n    workflow_id=call_people_workflow_incident.id,\n    skip_on_failure=False,\n    enabled=True,\n    task_params=rootly.WorkflowTaskCallPeopleTaskParamsArgs(\n        name=\"Call people\",\n        content=\"We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\",\n    ))\n# TODO\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var callPeopleWorkflowIncident = new Rootly.WorkflowIncident(\"callPeopleWorkflowIncident\", new()\n    {\n        Description = \"Automatically call a specific teammate.\",\n        TriggerParams = new Rootly.Inputs.WorkflowIncidentTriggerParamsArgs\n        {\n            Triggers = new[]\n            {\n                \"incident_created\",\n            },\n            IncidentStatuses = new[]\n            {\n                \"started\",\n            },\n            IncidentConditionStatus = \"IS\",\n        },\n        Enabled = true,\n    });\n\n    var callPeopleWorkflowTaskCallPeople = new Rootly.WorkflowTaskCallPeople(\"callPeopleWorkflowTaskCallPeople\", new()\n    {\n        WorkflowId = callPeopleWorkflowIncident.Id,\n        SkipOnFailure = false,\n        Enabled = true,\n        TaskParams = new Rootly.Inputs.WorkflowTaskCallPeopleTaskParamsArgs\n        {\n            Name = \"Call people\",\n            Content = \"We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\",\n        },\n    });\n\n    // TODO\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tcallPeopleWorkflowIncident, err := rootly.NewWorkflowIncident(ctx, \"callPeopleWorkflowIncident\", \u0026rootly.WorkflowIncidentArgs{\n\t\t\tDescription: pulumi.String(\"Automatically call a specific teammate.\"),\n\t\t\tTriggerParams: \u0026rootly.WorkflowIncidentTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"incident_created\"),\n\t\t\t\t},\n\t\t\t\tIncidentStatuses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"started\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionStatus: pulumi.String(\"IS\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewWorkflowTaskCallPeople(ctx, \"callPeopleWorkflowTaskCallPeople\", \u0026rootly.WorkflowTaskCallPeopleArgs{\n\t\t\tWorkflowId:    callPeopleWorkflowIncident.ID(),\n\t\t\tSkipOnFailure: pulumi.Bool(false),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tTaskParams: \u0026rootly.WorkflowTaskCallPeopleTaskParamsArgs{\n\t\t\t\tName:    pulumi.String(\"Call people\"),\n\t\t\t\tContent: pulumi.String(\"We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.WorkflowIncident;\nimport com.pulumi.rootly.WorkflowIncidentArgs;\nimport com.pulumi.rootly.inputs.WorkflowIncidentTriggerParamsArgs;\nimport com.pulumi.rootly.WorkflowTaskCallPeople;\nimport com.pulumi.rootly.WorkflowTaskCallPeopleArgs;\nimport com.pulumi.rootly.inputs.WorkflowTaskCallPeopleTaskParamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var callPeopleWorkflowIncident = new WorkflowIncident(\"callPeopleWorkflowIncident\", WorkflowIncidentArgs.builder()        \n            .description(\"Automatically call a specific teammate.\")\n            .triggerParams(WorkflowIncidentTriggerParamsArgs.builder()\n                .triggers(\"incident_created\")\n                .incidentStatuses(\"started\")\n                .incidentConditionStatus(\"IS\")\n                .build())\n            .enabled(true)\n            .build());\n\n        var callPeopleWorkflowTaskCallPeople = new WorkflowTaskCallPeople(\"callPeopleWorkflowTaskCallPeople\", WorkflowTaskCallPeopleArgs.builder()        \n            .workflowId(callPeopleWorkflowIncident.id())\n            .skipOnFailure(false)\n            .enabled(true)\n            .taskParams(WorkflowTaskCallPeopleTaskParamsArgs.builder()\n                .name(\"Call people\")\n                .content(\"We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  callPeopleWorkflowIncident:\n    type: rootly:WorkflowIncident\n    properties:\n      description: Automatically call a specific teammate.\n      triggerParams:\n        triggers:\n          - incident_created\n        incidentStatuses:\n          - started\n        incidentConditionStatus: IS\n      enabled: true\n  callPeopleWorkflowTaskCallPeople:\n    type: rootly:WorkflowTaskCallPeople\n    properties:\n      workflowId: ${callPeopleWorkflowIncident.id}\n      skipOnFailure: false\n      enabled: true\n      taskParams:\n        name: Call people\n        content: We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCallPeopleTaskParams:WorkflowTaskCallPeopleTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCallPeopleTaskParams:WorkflowTaskCallPeopleTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCallPeople resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCallPeopleTaskParams:WorkflowTaskCallPeopleTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskChangeSlackChannelPrivacy:WorkflowTaskChangeSlackChannelPrivacy": {
            "description": "Manages workflow change_slack_channel_privacy task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskChangeSlackChannelPrivacyTaskParams:WorkflowTaskChangeSlackChannelPrivacyTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskChangeSlackChannelPrivacyTaskParams:WorkflowTaskChangeSlackChannelPrivacyTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskChangeSlackChannelPrivacy resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskChangeSlackChannelPrivacyTaskParams:WorkflowTaskChangeSlackChannelPrivacyTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateAirtableTableRecord:WorkflowTaskCreateAirtableTableRecord": {
            "description": "Manages workflow create_airtable_table_record task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateAirtableTableRecordTaskParams:WorkflowTaskCreateAirtableTableRecordTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateAirtableTableRecordTaskParams:WorkflowTaskCreateAirtableTableRecordTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateAirtableTableRecord resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateAirtableTableRecordTaskParams:WorkflowTaskCreateAirtableTableRecordTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateAsanaSubtask:WorkflowTaskCreateAsanaSubtask": {
            "description": "Manages workflow create_asana_subtask task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateAsanaSubtaskTaskParams:WorkflowTaskCreateAsanaSubtaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateAsanaSubtaskTaskParams:WorkflowTaskCreateAsanaSubtaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateAsanaSubtask resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateAsanaSubtaskTaskParams:WorkflowTaskCreateAsanaSubtaskTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateAsanaTask:WorkflowTaskCreateAsanaTask": {
            "description": "Manages workflow create_asana_task task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateAsanaTaskTaskParams:WorkflowTaskCreateAsanaTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateAsanaTaskTaskParams:WorkflowTaskCreateAsanaTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateAsanaTask resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateAsanaTaskTaskParams:WorkflowTaskCreateAsanaTaskTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateClickupTask:WorkflowTaskCreateClickupTask": {
            "description": "Manages workflow create_clickup_task task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateClickupTaskTaskParams:WorkflowTaskCreateClickupTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateClickupTaskTaskParams:WorkflowTaskCreateClickupTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateClickupTask resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateClickupTaskTaskParams:WorkflowTaskCreateClickupTaskTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateConfluencePage:WorkflowTaskCreateConfluencePage": {
            "description": "Manages workflow create_confluence_page task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateConfluencePageTaskParams:WorkflowTaskCreateConfluencePageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateConfluencePageTaskParams:WorkflowTaskCreateConfluencePageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateConfluencePage resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateConfluencePageTaskParams:WorkflowTaskCreateConfluencePageTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateDatadogNotebook:WorkflowTaskCreateDatadogNotebook": {
            "description": "Manages workflow create_datadog_notebook task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateDatadogNotebookTaskParams:WorkflowTaskCreateDatadogNotebookTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateDatadogNotebookTaskParams:WorkflowTaskCreateDatadogNotebookTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateDatadogNotebook resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateDatadogNotebookTaskParams:WorkflowTaskCreateDatadogNotebookTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateDropboxPaperPage:WorkflowTaskCreateDropboxPaperPage": {
            "description": "Manages workflow create_dropbox_paper_page task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateDropboxPaperPageTaskParams:WorkflowTaskCreateDropboxPaperPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateDropboxPaperPageTaskParams:WorkflowTaskCreateDropboxPaperPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateDropboxPaperPage resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateDropboxPaperPageTaskParams:WorkflowTaskCreateDropboxPaperPageTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateGithubIssue:WorkflowTaskCreateGithubIssue": {
            "description": "Manages workflow create_github_issue task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGithubIssueTaskParams:WorkflowTaskCreateGithubIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGithubIssueTaskParams:WorkflowTaskCreateGithubIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateGithubIssue resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateGithubIssueTaskParams:WorkflowTaskCreateGithubIssueTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateGitlabIssue:WorkflowTaskCreateGitlabIssue": {
            "description": "Manages workflow create_gitlab_issue task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGitlabIssueTaskParams:WorkflowTaskCreateGitlabIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGitlabIssueTaskParams:WorkflowTaskCreateGitlabIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateGitlabIssue resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateGitlabIssueTaskParams:WorkflowTaskCreateGitlabIssueTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateGoToMeeting:WorkflowTaskCreateGoToMeeting": {
            "description": "Manages workflow create_go_to_meeting task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoToMeetingTaskParams:WorkflowTaskCreateGoToMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoToMeetingTaskParams:WorkflowTaskCreateGoToMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateGoToMeeting resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateGoToMeetingTaskParams:WorkflowTaskCreateGoToMeetingTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateGoogleCalendarEvent:WorkflowTaskCreateGoogleCalendarEvent": {
            "description": "Manages workflow create_google_calendar_event task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.WorkflowIncident;\nimport com.pulumi.rootly.WorkflowIncidentArgs;\nimport com.pulumi.rootly.inputs.WorkflowIncidentTriggerParamsArgs;\nimport com.pulumi.rootly.WorkflowTaskCreateGoogleCalendarEvent;\nimport com.pulumi.rootly.WorkflowTaskCreateGoogleCalendarEventArgs;\nimport com.pulumi.rootly.inputs.WorkflowTaskCreateGoogleCalendarEventTaskParamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var schedulePostmortemReviewMeeting = new WorkflowIncident(\"schedulePostmortemReviewMeeting\", WorkflowIncidentArgs.builder()        \n            .description(\"Automatically schedule a Google Calendar meeting to review the postmortem.\")\n            .triggerParams(WorkflowIncidentTriggerParamsArgs.builder()\n                .triggers(\"status_updated\")\n                .incidentStatuses(\"resolved\")\n                .incidentConditionStatus(\"IS\")\n                .build())\n            .enabled(true)\n            .build());\n\n        var createGoogleCalendarEvent = new WorkflowTaskCreateGoogleCalendarEvent(\"createGoogleCalendarEvent\", WorkflowTaskCreateGoogleCalendarEventArgs.builder()        \n            .workflowId(schedulePostmortemReviewMeeting.id())\n            .skipOnFailure(false)\n            .enabled(true)\n            .taskParams(WorkflowTaskCreateGoogleCalendarEventTaskParamsArgs.builder()\n                .name(\"Schedule Postmortem Review Meeting\")\n                .daysUntilMeeting(7)\n                .meetingDuration(\"60min\")\n                .summary(\"#{{ incident.sequential_id }} {{ incident.title }} Postmortem Review\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  schedulePostmortemReviewMeeting:\n    type: rootly:WorkflowIncident\n    properties:\n      description: Automatically schedule a Google Calendar meeting to review the postmortem.\n      triggerParams:\n        triggers:\n          - status_updated\n        incidentStatuses:\n          - resolved\n        incidentConditionStatus: IS\n      enabled: true\n  createGoogleCalendarEvent:\n    type: rootly:WorkflowTaskCreateGoogleCalendarEvent\n    properties:\n      workflowId: ${schedulePostmortemReviewMeeting.id}\n      skipOnFailure: false\n      enabled: true\n      taskParams:\n        name: Schedule Postmortem Review Meeting\n        daysUntilMeeting: 7\n        meetingDuration: 60min\n        summary: '#{{ incident.sequential_id }} {{ incident.title }} Postmortem Review'\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleCalendarEventTaskParams:WorkflowTaskCreateGoogleCalendarEventTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleCalendarEventTaskParams:WorkflowTaskCreateGoogleCalendarEventTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateGoogleCalendarEvent resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleCalendarEventTaskParams:WorkflowTaskCreateGoogleCalendarEventTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateGoogleDocsPage:WorkflowTaskCreateGoogleDocsPage": {
            "description": "Manages workflow create_google_docs_page task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleDocsPageTaskParams:WorkflowTaskCreateGoogleDocsPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleDocsPageTaskParams:WorkflowTaskCreateGoogleDocsPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateGoogleDocsPage resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleDocsPageTaskParams:WorkflowTaskCreateGoogleDocsPageTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateGoogleDocsPermissions:WorkflowTaskCreateGoogleDocsPermissions": {
            "description": "Manages workflow create_google_docs_permissions task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleDocsPermissionsTaskParams:WorkflowTaskCreateGoogleDocsPermissionsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleDocsPermissionsTaskParams:WorkflowTaskCreateGoogleDocsPermissionsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateGoogleDocsPermissions resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleDocsPermissionsTaskParams:WorkflowTaskCreateGoogleDocsPermissionsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateGoogleMeeting:WorkflowTaskCreateGoogleMeeting": {
            "description": "Manages workflow create_google_meeting task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleMeetingTaskParams:WorkflowTaskCreateGoogleMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleMeetingTaskParams:WorkflowTaskCreateGoogleMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateGoogleMeeting resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateGoogleMeetingTaskParams:WorkflowTaskCreateGoogleMeetingTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateIncident:WorkflowTaskCreateIncident": {
            "description": "Manages workflow create_incident task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateIncidentTaskParams:WorkflowTaskCreateIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateIncidentTaskParams:WorkflowTaskCreateIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateIncident resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateIncidentTaskParams:WorkflowTaskCreateIncidentTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateIncidentPostmortem:WorkflowTaskCreateIncidentPostmortem": {
            "description": "Manages workflow create_incident_postmortem task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateIncidentPostmortemTaskParams:WorkflowTaskCreateIncidentPostmortemTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateIncidentPostmortemTaskParams:WorkflowTaskCreateIncidentPostmortemTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateIncidentPostmortem resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateIncidentPostmortemTaskParams:WorkflowTaskCreateIncidentPostmortemTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateJiraIssue:WorkflowTaskCreateJiraIssue": {
            "description": "Manages workflow create_jira_issue task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst jiraWorkflowIncident = new rootly.WorkflowIncident(\"jiraWorkflowIncident\", {\n    description: \"Open Jira ticket whenever incident starts\",\n    triggerParams: {\n        triggers: [\"incident_created\"],\n        incidentConditionKind: \"IS\",\n        incidentKinds: [\"normal\"],\n        incidentConditionStatus: \"IS\",\n        incidentStatuses: [\"started\"],\n    },\n    enabled: true,\n});\nconst jiraWorkflowTaskCreateJiraIssue = new rootly.WorkflowTaskCreateJiraIssue(\"jiraWorkflowTaskCreateJiraIssue\", {\n    workflowId: jiraWorkflowIncident.id,\n    skipOnFailure: false,\n    enabled: true,\n    taskParams: {\n        title: \"{{ incident.title }}\",\n        description: \"{{ incident.summary }}\",\n        projectKey: \"ROOT\",\n        issueType: {\n            id: \"10001\",\n            name: \"Task\",\n        },\n        status: {\n            id: \"10000\",\n            name: \"To Do\",\n        },\n        labels: \"{{ incident.environment_slugs | concat: incident.service_slugs | concat: incident.functionality_slugs | concat: incident.group_slugs | join: \\\",\\\" }}\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\njira_workflow_incident = rootly.WorkflowIncident(\"jiraWorkflowIncident\",\n    description=\"Open Jira ticket whenever incident starts\",\n    trigger_params=rootly.WorkflowIncidentTriggerParamsArgs(\n        triggers=[\"incident_created\"],\n        incident_condition_kind=\"IS\",\n        incident_kinds=[\"normal\"],\n        incident_condition_status=\"IS\",\n        incident_statuses=[\"started\"],\n    ),\n    enabled=True)\njira_workflow_task_create_jira_issue = rootly.WorkflowTaskCreateJiraIssue(\"jiraWorkflowTaskCreateJiraIssue\",\n    workflow_id=jira_workflow_incident.id,\n    skip_on_failure=False,\n    enabled=True,\n    task_params=rootly.WorkflowTaskCreateJiraIssueTaskParamsArgs(\n        title=\"{{ incident.title }}\",\n        description=\"{{ incident.summary }}\",\n        project_key=\"ROOT\",\n        issue_type={\n            \"id\": \"10001\",\n            \"name\": \"Task\",\n        },\n        status={\n            \"id\": \"10000\",\n            \"name\": \"To Do\",\n        },\n        labels=\"{{ incident.environment_slugs | concat: incident.service_slugs | concat: incident.functionality_slugs | concat: incident.group_slugs | join: \\\",\\\" }}\",\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var jiraWorkflowIncident = new Rootly.WorkflowIncident(\"jiraWorkflowIncident\", new()\n    {\n        Description = \"Open Jira ticket whenever incident starts\",\n        TriggerParams = new Rootly.Inputs.WorkflowIncidentTriggerParamsArgs\n        {\n            Triggers = new[]\n            {\n                \"incident_created\",\n            },\n            IncidentConditionKind = \"IS\",\n            IncidentKinds = new[]\n            {\n                \"normal\",\n            },\n            IncidentConditionStatus = \"IS\",\n            IncidentStatuses = new[]\n            {\n                \"started\",\n            },\n        },\n        Enabled = true,\n    });\n\n    var jiraWorkflowTaskCreateJiraIssue = new Rootly.WorkflowTaskCreateJiraIssue(\"jiraWorkflowTaskCreateJiraIssue\", new()\n    {\n        WorkflowId = jiraWorkflowIncident.Id,\n        SkipOnFailure = false,\n        Enabled = true,\n        TaskParams = new Rootly.Inputs.WorkflowTaskCreateJiraIssueTaskParamsArgs\n        {\n            Title = \"{{ incident.title }}\",\n            Description = \"{{ incident.summary }}\",\n            ProjectKey = \"ROOT\",\n            IssueType = \n            {\n                { \"id\", \"10001\" },\n                { \"name\", \"Task\" },\n            },\n            Status = \n            {\n                { \"id\", \"10000\" },\n                { \"name\", \"To Do\" },\n            },\n            Labels = \"{{ incident.environment_slugs | concat: incident.service_slugs | concat: incident.functionality_slugs | concat: incident.group_slugs | join: \\\",\\\" }}\",\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tjiraWorkflowIncident, err := rootly.NewWorkflowIncident(ctx, \"jiraWorkflowIncident\", \u0026rootly.WorkflowIncidentArgs{\n\t\t\tDescription: pulumi.String(\"Open Jira ticket whenever incident starts\"),\n\t\t\tTriggerParams: \u0026rootly.WorkflowIncidentTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"incident_created\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionKind: pulumi.String(\"IS\"),\n\t\t\t\tIncidentKinds: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"normal\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionStatus: pulumi.String(\"IS\"),\n\t\t\t\tIncidentStatuses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"started\"),\n\t\t\t\t},\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewWorkflowTaskCreateJiraIssue(ctx, \"jiraWorkflowTaskCreateJiraIssue\", \u0026rootly.WorkflowTaskCreateJiraIssueArgs{\n\t\t\tWorkflowId:    jiraWorkflowIncident.ID(),\n\t\t\tSkipOnFailure: pulumi.Bool(false),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tTaskParams: \u0026rootly.WorkflowTaskCreateJiraIssueTaskParamsArgs{\n\t\t\t\tTitle:       pulumi.String(\"{{ incident.title }}\"),\n\t\t\t\tDescription: pulumi.String(\"{{ incident.summary }}\"),\n\t\t\t\tProjectKey:  pulumi.String(\"ROOT\"),\n\t\t\t\tIssueType: pulumi.Map{\n\t\t\t\t\t\"id\":   pulumi.Any(\"10001\"),\n\t\t\t\t\t\"name\": pulumi.Any(\"Task\"),\n\t\t\t\t},\n\t\t\t\tStatus: pulumi.Map{\n\t\t\t\t\t\"id\":   pulumi.Any(\"10000\"),\n\t\t\t\t\t\"name\": pulumi.Any(\"To Do\"),\n\t\t\t\t},\n\t\t\t\tLabels: pulumi.String(\"{{ incident.environment_slugs | concat: incident.service_slugs | concat: incident.functionality_slugs | concat: incident.group_slugs | join: \\\",\\\" }}\"),\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.WorkflowIncident;\nimport com.pulumi.rootly.WorkflowIncidentArgs;\nimport com.pulumi.rootly.inputs.WorkflowIncidentTriggerParamsArgs;\nimport com.pulumi.rootly.WorkflowTaskCreateJiraIssue;\nimport com.pulumi.rootly.WorkflowTaskCreateJiraIssueArgs;\nimport com.pulumi.rootly.inputs.WorkflowTaskCreateJiraIssueTaskParamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var jiraWorkflowIncident = new WorkflowIncident(\"jiraWorkflowIncident\", WorkflowIncidentArgs.builder()        \n            .description(\"Open Jira ticket whenever incident starts\")\n            .triggerParams(WorkflowIncidentTriggerParamsArgs.builder()\n                .triggers(\"incident_created\")\n                .incidentConditionKind(\"IS\")\n                .incidentKinds(\"normal\")\n                .incidentConditionStatus(\"IS\")\n                .incidentStatuses(\"started\")\n                .build())\n            .enabled(true)\n            .build());\n\n        var jiraWorkflowTaskCreateJiraIssue = new WorkflowTaskCreateJiraIssue(\"jiraWorkflowTaskCreateJiraIssue\", WorkflowTaskCreateJiraIssueArgs.builder()        \n            .workflowId(jiraWorkflowIncident.id())\n            .skipOnFailure(false)\n            .enabled(true)\n            .taskParams(WorkflowTaskCreateJiraIssueTaskParamsArgs.builder()\n                .title(\"{{ incident.title }}\")\n                .description(\"{{ incident.summary }}\")\n                .projectKey(\"ROOT\")\n                .issueType(Map.ofEntries(\n                    Map.entry(\"id\", \"10001\"),\n                    Map.entry(\"name\", \"Task\")\n                ))\n                .status(Map.ofEntries(\n                    Map.entry(\"id\", \"10000\"),\n                    Map.entry(\"name\", \"To Do\")\n                ))\n                .labels(\"{{ incident.environment_slugs | concat: incident.service_slugs | concat: incident.functionality_slugs | concat: incident.group_slugs | join: \\\",\\\" }}\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  jiraWorkflowIncident:\n    type: rootly:WorkflowIncident\n    properties:\n      description: Open Jira ticket whenever incident starts\n      triggerParams:\n        triggers:\n          - incident_created\n        incidentConditionKind: IS\n        incidentKinds:\n          - normal\n        incidentConditionStatus: IS\n        incidentStatuses:\n          - started\n      enabled: true\n  jiraWorkflowTaskCreateJiraIssue:\n    type: rootly:WorkflowTaskCreateJiraIssue\n    properties:\n      workflowId: ${jiraWorkflowIncident.id}\n      skipOnFailure: false\n      enabled: true\n      taskParams:\n        title: '{{ incident.title }}'\n        description: '{{ incident.summary }}'\n        projectKey: ROOT\n        issueType:\n          id: '10001'\n          name: Task\n        status:\n          id: '10000'\n          name: To Do\n        labels: '{{ incident.environment_slugs | concat: incident.service_slugs | concat: incident.functionality_slugs | concat: incident.group_slugs | join: \",\" }}'\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateJiraIssueTaskParams:WorkflowTaskCreateJiraIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateJiraIssueTaskParams:WorkflowTaskCreateJiraIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateJiraIssue resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateJiraIssueTaskParams:WorkflowTaskCreateJiraIssueTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateJiraSubtask:WorkflowTaskCreateJiraSubtask": {
            "description": "Manages workflow create_jira_subtask task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateJiraSubtaskTaskParams:WorkflowTaskCreateJiraSubtaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateJiraSubtaskTaskParams:WorkflowTaskCreateJiraSubtaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateJiraSubtask resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateJiraSubtaskTaskParams:WorkflowTaskCreateJiraSubtaskTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateLinearIssue:WorkflowTaskCreateLinearIssue": {
            "description": "Manages workflow create_linear_issue task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearIssueTaskParams:WorkflowTaskCreateLinearIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearIssueTaskParams:WorkflowTaskCreateLinearIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateLinearIssue resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearIssueTaskParams:WorkflowTaskCreateLinearIssueTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateLinearIssueComment:WorkflowTaskCreateLinearIssueComment": {
            "description": "Manages workflow create_linear_issue_comment task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearIssueCommentTaskParams:WorkflowTaskCreateLinearIssueCommentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearIssueCommentTaskParams:WorkflowTaskCreateLinearIssueCommentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateLinearIssueComment resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearIssueCommentTaskParams:WorkflowTaskCreateLinearIssueCommentTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateLinearSubtaskIssue:WorkflowTaskCreateLinearSubtaskIssue": {
            "description": "Manages workflow create_linear_subtask_issue task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearSubtaskIssueTaskParams:WorkflowTaskCreateLinearSubtaskIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearSubtaskIssueTaskParams:WorkflowTaskCreateLinearSubtaskIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateLinearSubtaskIssue resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateLinearSubtaskIssueTaskParams:WorkflowTaskCreateLinearSubtaskIssueTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateMicrosoftTeamsMeeting:WorkflowTaskCreateMicrosoftTeamsMeeting": {
            "description": "Manages workflow create_microsoft_teams_meeting task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "The meeting name\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateMicrosoftTeamsMeetingTaskParams:WorkflowTaskCreateMicrosoftTeamsMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "The meeting name\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateMicrosoftTeamsMeetingTaskParams:WorkflowTaskCreateMicrosoftTeamsMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateMicrosoftTeamsMeeting resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The meeting name\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateMicrosoftTeamsMeetingTaskParams:WorkflowTaskCreateMicrosoftTeamsMeetingTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateNotionPage:WorkflowTaskCreateNotionPage": {
            "description": "Manages workflow create_notion_page task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateNotionPageTaskParams:WorkflowTaskCreateNotionPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateNotionPageTaskParams:WorkflowTaskCreateNotionPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateNotionPage resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateNotionPageTaskParams:WorkflowTaskCreateNotionPageTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateOpsgenieAlert:WorkflowTaskCreateOpsgenieAlert": {
            "description": "Manages workflow create_opsgenie_alert task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParams:WorkflowTaskCreateOpsgenieAlertTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParams:WorkflowTaskCreateOpsgenieAlertTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateOpsgenieAlert resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateOpsgenieAlertTaskParams:WorkflowTaskCreateOpsgenieAlertTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreatePagertreeAlert:WorkflowTaskCreatePagertreeAlert": {
            "description": "Manages workflow create_pagertree_alert task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreatePagertreeAlertTaskParams:WorkflowTaskCreatePagertreeAlertTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreatePagertreeAlertTaskParams:WorkflowTaskCreatePagertreeAlertTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreatePagertreeAlert resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreatePagertreeAlertTaskParams:WorkflowTaskCreatePagertreeAlertTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateQuipPage:WorkflowTaskCreateQuipPage": {
            "description": "Manages workflow create_quip_page task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateQuipPageTaskParams:WorkflowTaskCreateQuipPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateQuipPageTaskParams:WorkflowTaskCreateQuipPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateQuipPage resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateQuipPageTaskParams:WorkflowTaskCreateQuipPageTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateServiceNowIncident:WorkflowTaskCreateServiceNowIncident": {
            "description": "Manages workflow create_service_now_incident task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateServiceNowIncidentTaskParams:WorkflowTaskCreateServiceNowIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateServiceNowIncidentTaskParams:WorkflowTaskCreateServiceNowIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateServiceNowIncident resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateServiceNowIncidentTaskParams:WorkflowTaskCreateServiceNowIncidentTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateShortcutStory:WorkflowTaskCreateShortcutStory": {
            "description": "Manages workflow create_shortcut_story task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateShortcutStoryTaskParams:WorkflowTaskCreateShortcutStoryTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateShortcutStoryTaskParams:WorkflowTaskCreateShortcutStoryTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateShortcutStory resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateShortcutStoryTaskParams:WorkflowTaskCreateShortcutStoryTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateShortcutTask:WorkflowTaskCreateShortcutTask": {
            "description": "Manages workflow create_shortcut_task task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateShortcutTaskTaskParams:WorkflowTaskCreateShortcutTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateShortcutTaskTaskParams:WorkflowTaskCreateShortcutTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateShortcutTask resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateShortcutTaskTaskParams:WorkflowTaskCreateShortcutTaskTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateSlackChannel:WorkflowTaskCreateSlackChannel": {
            "description": "Manages workflow create_slack_channel task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateSlackChannelTaskParams:WorkflowTaskCreateSlackChannelTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateSlackChannelTaskParams:WorkflowTaskCreateSlackChannelTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateSlackChannel resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateSlackChannelTaskParams:WorkflowTaskCreateSlackChannelTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateTrelloCard:WorkflowTaskCreateTrelloCard": {
            "description": "Manages workflow create_trello_card task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateTrelloCardTaskParams:WorkflowTaskCreateTrelloCardTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateTrelloCardTaskParams:WorkflowTaskCreateTrelloCardTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateTrelloCard resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateTrelloCardTaskParams:WorkflowTaskCreateTrelloCardTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateWebexMeeting:WorkflowTaskCreateWebexMeeting": {
            "description": "Manages workflow create_webex_meeting task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateWebexMeetingTaskParams:WorkflowTaskCreateWebexMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateWebexMeetingTaskParams:WorkflowTaskCreateWebexMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateWebexMeeting resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateWebexMeetingTaskParams:WorkflowTaskCreateWebexMeetingTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateZendeskTicket:WorkflowTaskCreateZendeskTicket": {
            "description": "Manages workflow create_zendesk_ticket task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateZendeskTicketTaskParams:WorkflowTaskCreateZendeskTicketTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateZendeskTicketTaskParams:WorkflowTaskCreateZendeskTicketTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateZendeskTicket resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateZendeskTicketTaskParams:WorkflowTaskCreateZendeskTicketTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskCreateZoomMeeting:WorkflowTaskCreateZoomMeeting": {
            "description": "Manages workflow create_zoom_meeting task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateZoomMeetingTaskParams:WorkflowTaskCreateZoomMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskCreateZoomMeetingTaskParams:WorkflowTaskCreateZoomMeetingTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskCreateZoomMeeting resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskCreateZoomMeetingTaskParams:WorkflowTaskCreateZoomMeetingTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskGetAlerts:WorkflowTaskGetAlerts": {
            "description": "Manages workflow get_alerts task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskGetAlertsTaskParams:WorkflowTaskGetAlertsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskGetAlertsTaskParams:WorkflowTaskGetAlertsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskGetAlerts resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskGetAlertsTaskParams:WorkflowTaskGetAlertsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskGetGithubCommits:WorkflowTaskGetGithubCommits": {
            "description": "Manages workflow get_github_commits task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskGetGithubCommitsTaskParams:WorkflowTaskGetGithubCommitsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskGetGithubCommitsTaskParams:WorkflowTaskGetGithubCommitsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskGetGithubCommits resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskGetGithubCommitsTaskParams:WorkflowTaskGetGithubCommitsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskGetGitlabCommits:WorkflowTaskGetGitlabCommits": {
            "description": "Manages workflow get_gitlab_commits task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskGetGitlabCommitsTaskParams:WorkflowTaskGetGitlabCommitsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskGetGitlabCommitsTaskParams:WorkflowTaskGetGitlabCommitsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskGetGitlabCommits resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskGetGitlabCommitsTaskParams:WorkflowTaskGetGitlabCommitsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskGetPulses:WorkflowTaskGetPulses": {
            "description": "Manages workflow get_pulses task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskGetPulsesTaskParams:WorkflowTaskGetPulsesTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskGetPulsesTaskParams:WorkflowTaskGetPulsesTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskGetPulses resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskGetPulsesTaskParams:WorkflowTaskGetPulsesTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskHTTPClient:WorkflowTaskHTTPClient": {
            "description": "Manages workflow http_client task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskHTTPClientTaskParams:WorkflowTaskHTTPClientTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskHTTPClientTaskParams:WorkflowTaskHTTPClientTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskHTTPClient resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskHTTPClientTaskParams:WorkflowTaskHTTPClientTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskInviteToSlackChannel:WorkflowTaskInviteToSlackChannel": {
            "description": "Manages workflow invite_to_slack_channel task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.WorkflowIncident;\nimport com.pulumi.rootly.WorkflowIncidentArgs;\nimport com.pulumi.rootly.inputs.WorkflowIncidentTriggerParamsArgs;\nimport com.pulumi.rootly.WorkflowTaskInviteToSlackChannel;\nimport com.pulumi.rootly.WorkflowTaskInviteToSlackChannelArgs;\nimport com.pulumi.rootly.inputs.WorkflowTaskInviteToSlackChannelTaskParamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var inviteToIncidentChannel = new WorkflowIncident(\"inviteToIncidentChannel\", WorkflowIncidentArgs.builder()        \n            .description(\"Invite Slack User Groups e.g. @oncall-infra to the incident channel.\")\n            .triggerParams(WorkflowIncidentTriggerParamsArgs.builder()\n                .triggers(\"incident_created\")\n                .incidentStatuses(\"started\")\n                .incidentConditionStatus(\"IS\")\n                .build())\n            .enabled(true)\n            .build());\n\n        var inviteToSlackChannel = new WorkflowTaskInviteToSlackChannel(\"inviteToSlackChannel\", WorkflowTaskInviteToSlackChannelArgs.builder()        \n            .workflowId(inviteToIncidentChannel.id())\n            .skipOnFailure(false)\n            .enabled(true)\n            .taskParams(WorkflowTaskInviteToSlackChannelTaskParamsArgs.builder()\n                .name(\"Invite to Slack channel\")\n                .channel(Map.ofEntries(\n                    Map.entry(\"id\", \"C06A4RZR9\"),\n                    Map.entry(\"name\", \"Channel 1\")\n                ))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  inviteToIncidentChannel:\n    type: rootly:WorkflowIncident\n    properties:\n      description: Invite Slack User Groups e.g. @oncall-infra to the incident channel.\n      triggerParams:\n        triggers:\n          - incident_created\n        incidentStatuses:\n          - started\n        incidentConditionStatus: IS\n      enabled: true\n  inviteToSlackChannel:\n    type: rootly:WorkflowTaskInviteToSlackChannel\n    properties:\n      workflowId: ${inviteToIncidentChannel.id}\n      skipOnFailure: false\n      enabled: true\n      taskParams:\n        name: Invite to Slack channel\n        channel:\n          id: C06A4RZR9\n          name: Channel 1\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelTaskParams:WorkflowTaskInviteToSlackChannelTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelTaskParams:WorkflowTaskInviteToSlackChannelTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskInviteToSlackChannel resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelTaskParams:WorkflowTaskInviteToSlackChannelTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskInviteToSlackChannelOpsgenie:WorkflowTaskInviteToSlackChannelOpsgenie": {
            "description": "Manages workflow invite_to_slack_channel_opsgenie task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelOpsgenieTaskParams:WorkflowTaskInviteToSlackChannelOpsgenieTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelOpsgenieTaskParams:WorkflowTaskInviteToSlackChannelOpsgenieTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskInviteToSlackChannelOpsgenie resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelOpsgenieTaskParams:WorkflowTaskInviteToSlackChannelOpsgenieTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskInviteToSlackChannelPagerduty:WorkflowTaskInviteToSlackChannelPagerduty": {
            "description": "Manages workflow invite_to_slack_channel_pagerduty task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelPagerdutyTaskParams:WorkflowTaskInviteToSlackChannelPagerdutyTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelPagerdutyTaskParams:WorkflowTaskInviteToSlackChannelPagerdutyTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskInviteToSlackChannelPagerduty resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelPagerdutyTaskParams:WorkflowTaskInviteToSlackChannelPagerdutyTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskInviteToSlackChannelVictorOps:WorkflowTaskInviteToSlackChannelVictorOps": {
            "description": "Manages workflow invite_to_slack_channel_victor_ops task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelVictorOpsTaskParams:WorkflowTaskInviteToSlackChannelVictorOpsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelVictorOpsTaskParams:WorkflowTaskInviteToSlackChannelVictorOpsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskInviteToSlackChannelVictorOps resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskInviteToSlackChannelVictorOpsTaskParams:WorkflowTaskInviteToSlackChannelVictorOpsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskPageOpsgenieOnCallResponders:WorkflowTaskPageOpsgenieOnCallResponders": {
            "description": "Manages workflow page_opsgenie_on_call_responders task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPageOpsgenieOnCallRespondersTaskParams:WorkflowTaskPageOpsgenieOnCallRespondersTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPageOpsgenieOnCallRespondersTaskParams:WorkflowTaskPageOpsgenieOnCallRespondersTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskPageOpsgenieOnCallResponders resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPageOpsgenieOnCallRespondersTaskParams:WorkflowTaskPageOpsgenieOnCallRespondersTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskPagePagerdutyOnCallResponders:WorkflowTaskPagePagerdutyOnCallResponders": {
            "description": "Manages workflow page_pagerduty_on_call_responders task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.WorkflowIncident;\nimport com.pulumi.rootly.WorkflowIncidentArgs;\nimport com.pulumi.rootly.inputs.WorkflowIncidentTriggerParamsArgs;\nimport com.pulumi.rootly.WorkflowTaskPagePagerdutyOnCallResponders;\nimport com.pulumi.rootly.WorkflowTaskPagePagerdutyOnCallRespondersArgs;\nimport com.pulumi.rootly.inputs.WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var pagePagerdutyResponders = new WorkflowIncident(\"pagePagerdutyResponders\", WorkflowIncidentArgs.builder()        \n            .description(\"Automatically page responders to join the incident depending on what's been impacted (see conditions).\")\n            .triggerParams(WorkflowIncidentTriggerParamsArgs.builder()\n                .triggers(\"incident_created\")\n                .incidentStatuses(\"started\")\n                .incidentConditionStatus(\"IS\")\n                .build())\n            .enabled(true)\n            .build());\n\n        var pagePagerdutyOnCallResponders = new WorkflowTaskPagePagerdutyOnCallResponders(\"pagePagerdutyOnCallResponders\", WorkflowTaskPagePagerdutyOnCallRespondersArgs.builder()        \n            .workflowId(pagePagerdutyResponders.id())\n            .skipOnFailure(false)\n            .enabled(true)\n            .taskParams(WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsArgs.builder()\n                .name(\"Page PagerDuty on-call responders\")\n                .service(Map.ofEntries(\n                    Map.entry(\"id\", \"PWIXJZS\"),\n                    Map.entry(\"name\", \"Service A\")\n                ))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  pagePagerdutyResponders:\n    type: rootly:WorkflowIncident\n    properties:\n      description: Automatically page responders to join the incident depending on what's been impacted (see conditions).\n      triggerParams:\n        triggers:\n          - incident_created\n        incidentStatuses:\n          - started\n        incidentConditionStatus: IS\n      enabled: true\n  pagePagerdutyOnCallResponders:\n    type: rootly:WorkflowTaskPagePagerdutyOnCallResponders\n    properties:\n      workflowId: ${pagePagerdutyResponders.id}\n      skipOnFailure: false\n      enabled: true\n      taskParams:\n        name: Page PagerDuty on-call responders\n        service:\n          id: PWIXJZS\n          name: Service A\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPagePagerdutyOnCallRespondersTaskParams:WorkflowTaskPagePagerdutyOnCallRespondersTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPagePagerdutyOnCallRespondersTaskParams:WorkflowTaskPagePagerdutyOnCallRespondersTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskPagePagerdutyOnCallResponders resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPagePagerdutyOnCallRespondersTaskParams:WorkflowTaskPagePagerdutyOnCallRespondersTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskPageVictorOpsOnCallResponders:WorkflowTaskPageVictorOpsOnCallResponders": {
            "description": "Manages workflow page_victor_ops_on_call_responders task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPageVictorOpsOnCallRespondersTaskParams:WorkflowTaskPageVictorOpsOnCallRespondersTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPageVictorOpsOnCallRespondersTaskParams:WorkflowTaskPageVictorOpsOnCallRespondersTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskPageVictorOpsOnCallResponders resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPageVictorOpsOnCallRespondersTaskParams:WorkflowTaskPageVictorOpsOnCallRespondersTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskPrint:WorkflowTaskPrint": {
            "description": "Manages workflow print task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPrintTaskParams:WorkflowTaskPrintTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPrintTaskParams:WorkflowTaskPrintTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskPrint resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPrintTaskParams:WorkflowTaskPrintTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskPublishIncident:WorkflowTaskPublishIncident": {
            "description": "Manages workflow publish_incident task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPublishIncidentTaskParams:WorkflowTaskPublishIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskPublishIncidentTaskParams:WorkflowTaskPublishIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskPublishIncident resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskPublishIncidentTaskParams:WorkflowTaskPublishIncidentTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskRedisClient:WorkflowTaskRedisClient": {
            "description": "Manages workflow redis_client task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskRedisClientTaskParams:WorkflowTaskRedisClientTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskRedisClientTaskParams:WorkflowTaskRedisClientTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskRedisClient resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskRedisClientTaskParams:WorkflowTaskRedisClientTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskRemoveGoogleDocsPermissions:WorkflowTaskRemoveGoogleDocsPermissions": {
            "description": "Manages workflow remove_google_docs_permissions task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskRemoveGoogleDocsPermissionsTaskParams:WorkflowTaskRemoveGoogleDocsPermissionsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskRemoveGoogleDocsPermissionsTaskParams:WorkflowTaskRemoveGoogleDocsPermissionsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskRemoveGoogleDocsPermissions resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskRemoveGoogleDocsPermissionsTaskParams:WorkflowTaskRemoveGoogleDocsPermissionsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskRenameSlackChannel:WorkflowTaskRenameSlackChannel": {
            "description": "Manages workflow rename_slack_channel task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.WorkflowIncident;\nimport com.pulumi.rootly.WorkflowIncidentArgs;\nimport com.pulumi.rootly.inputs.WorkflowIncidentTriggerParamsArgs;\nimport com.pulumi.rootly.WorkflowTaskRenameSlackChannel;\nimport com.pulumi.rootly.WorkflowTaskRenameSlackChannelArgs;\nimport com.pulumi.rootly.inputs.WorkflowTaskRenameSlackChannelTaskParamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var renamingSlackChannelToJiraTicketNumber = new WorkflowIncident(\"renamingSlackChannelToJiraTicketNumber\", WorkflowIncidentArgs.builder()        \n            .description(\"Automatically renames Slack channel to attached Jira ticket number.\")\n            .triggerParams(WorkflowIncidentTriggerParamsArgs.builder()\n                .triggers(\"incident_created\")\n                .incidentStatuses(\"started\")\n                .wait(\"30 seconds\")\n                .incidentConditionStatus(\"IS\")\n                .build())\n            .enabled(true)\n            .build());\n\n        var renameSlackChannel = new WorkflowTaskRenameSlackChannel(\"renameSlackChannel\", WorkflowTaskRenameSlackChannelArgs.builder()        \n            .workflowId(renamingSlackChannelToJiraTicketNumber.id())\n            .skipOnFailure(false)\n            .enabled(true)\n            .taskParams(WorkflowTaskRenameSlackChannelTaskParamsArgs.builder()\n                .name(\"Rename a Slack channel to Jira ticket slug\")\n                .channel(Map.ofEntries(\n                    Map.entry(\"id\", \"{{ incident.slack_channel_id }}\"),\n                    Map.entry(\"name\", \"{{ incident.slack_channel_id }}\")\n                ))\n                .title(\"incident-{{ incident.jira_issue_key }}\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  renamingSlackChannelToJiraTicketNumber:\n    type: rootly:WorkflowIncident\n    properties:\n      description: Automatically renames Slack channel to attached Jira ticket number.\n      triggerParams:\n        triggers:\n          - incident_created\n        incidentStatuses:\n          - started\n        wait: 30 seconds\n        incidentConditionStatus: IS\n      enabled: true\n  renameSlackChannel:\n    type: rootly:WorkflowTaskRenameSlackChannel\n    properties:\n      workflowId: ${renamingSlackChannelToJiraTicketNumber.id}\n      skipOnFailure: false\n      enabled: true\n      taskParams:\n        name: Rename a Slack channel to Jira ticket slug\n        channel:\n          id: '{{ incident.slack_channel_id }}'\n          name: '{{ incident.slack_channel_id }}'\n        title: incident-{{ incident.jira_issue_key }}\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskRenameSlackChannelTaskParams:WorkflowTaskRenameSlackChannelTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskRenameSlackChannelTaskParams:WorkflowTaskRenameSlackChannelTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskRenameSlackChannel resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskRenameSlackChannelTaskParams:WorkflowTaskRenameSlackChannelTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskRunCommandHeroku:WorkflowTaskRunCommandHeroku": {
            "description": "Manages workflow run_command_heroku task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskRunCommandHerokuTaskParams:WorkflowTaskRunCommandHerokuTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskRunCommandHerokuTaskParams:WorkflowTaskRunCommandHerokuTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskRunCommandHeroku resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskRunCommandHerokuTaskParams:WorkflowTaskRunCommandHerokuTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskSendDashboardReport:WorkflowTaskSendDashboardReport": {
            "description": "Manages workflow send_dashboard_report task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendDashboardReportTaskParams:WorkflowTaskSendDashboardReportTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendDashboardReportTaskParams:WorkflowTaskSendDashboardReportTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskSendDashboardReport resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendDashboardReportTaskParams:WorkflowTaskSendDashboardReportTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskSendEmail:WorkflowTaskSendEmail": {
            "description": "Manages workflow send_email task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendEmailTaskParams:WorkflowTaskSendEmailTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendEmailTaskParams:WorkflowTaskSendEmailTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskSendEmail resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendEmailTaskParams:WorkflowTaskSendEmailTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskSendSlackBlocks:WorkflowTaskSendSlackBlocks": {
            "description": "Manages workflow send_slack_blocks task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.WorkflowIncident;\nimport com.pulumi.rootly.WorkflowIncidentArgs;\nimport com.pulumi.rootly.inputs.WorkflowIncidentTriggerParamsArgs;\nimport com.pulumi.rootly.WorkflowTaskSendSlackBlocks;\nimport com.pulumi.rootly.WorkflowTaskSendSlackBlocksArgs;\nimport com.pulumi.rootly.inputs.WorkflowTaskSendSlackBlocksTaskParamsArgs;\nimport static com.pulumi.codegen.internal.Serialization.*;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sendMessageInIncidentChannel = new WorkflowIncident(\"sendMessageInIncidentChannel\", WorkflowIncidentArgs.builder()        \n            .description(\"Send a message in the incident channel\")\n            .triggerParams(WorkflowIncidentTriggerParamsArgs.builder()\n                .triggers(\"incident_created\")\n                .incidentStatuses(\"started\")\n                .incidentConditionStatus(\"IS\")\n                .build())\n            .enabled(true)\n            .build());\n\n        var sendSlackBlocks = new WorkflowTaskSendSlackBlocks(\"sendSlackBlocks\", WorkflowTaskSendSlackBlocksArgs.builder()        \n            .workflowId(sendMessageInIncidentChannel.id())\n            .skipOnFailure(false)\n            .enabled(true)\n            .taskParams(WorkflowTaskSendSlackBlocksTaskParamsArgs.builder()\n                .name(\"Send Slack message\")\n                .message(\":boom: New incident!\")\n                .channels(WorkflowTaskSendSlackBlocksTaskParamsChannelArgs.builder()\n                    .name(\"{{ incident.slack_channel_id }}\")\n                    .id(\"{{ incident.slack_channel_id }}\")\n                    .build())\n                .blocks(serializeJson(\n                    jsonArray(jsonObject(\n                        jsonProperty(\"text\", jsonObject(\n                            jsonProperty(\"emoji\", true),\n                            jsonProperty(\"text\", \"This is the incident title: {{ incident.title }}\"),\n                            jsonProperty(\"type\", \"plain_text\")\n                        )),\n                        jsonProperty(\"type\", \"header\")\n                    ))))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sendMessageInIncidentChannel:\n    type: rootly:WorkflowIncident\n    properties:\n      description: Send a message in the incident channel\n      triggerParams:\n        triggers:\n          - incident_created\n        incidentStatuses:\n          - started\n        incidentConditionStatus: IS\n      enabled: true\n  sendSlackBlocks:\n    type: rootly:WorkflowTaskSendSlackBlocks\n    properties:\n      workflowId: ${sendMessageInIncidentChannel.id}\n      skipOnFailure: false\n      enabled: true\n      taskParams:\n        name: Send Slack message\n        message: ':boom: New incident!'\n        channels:\n          - name: '{{ incident.slack_channel_id }}'\n            id: '{{ incident.slack_channel_id }}'\n        blocks:\n          fn::toJSON:\n            - text:\n                emoji: true\n                text: 'This is the incident title: {{ incident.title }}'\n                type: plain_text\n              type: header\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendSlackBlocksTaskParams:WorkflowTaskSendSlackBlocksTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendSlackBlocksTaskParams:WorkflowTaskSendSlackBlocksTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskSendSlackBlocks resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendSlackBlocksTaskParams:WorkflowTaskSendSlackBlocksTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskSendSlackMessage:WorkflowTaskSendSlackMessage": {
            "description": "Manages workflow send_slack_message task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.WorkflowIncident;\nimport com.pulumi.rootly.WorkflowIncidentArgs;\nimport com.pulumi.rootly.inputs.WorkflowIncidentTriggerParamsArgs;\nimport com.pulumi.rootly.WorkflowTaskSendSlackMessage;\nimport com.pulumi.rootly.WorkflowTaskSendSlackMessageArgs;\nimport com.pulumi.rootly.inputs.WorkflowTaskSendSlackMessageTaskParamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var notifySlackChannels = new WorkflowIncident(\"notifySlackChannels\", WorkflowIncidentArgs.builder()        \n            .description(\"Send a message to specific teams on Slack regarding the incident.\")\n            .triggerParams(WorkflowIncidentTriggerParamsArgs.builder()\n                .triggers(\"incident_created\")\n                .incidentStatuses(\"started\")\n                .incidentConditionStatus(\"IS\")\n                .build())\n            .enabled(true)\n            .build());\n\n        var sendSlackMessage = new WorkflowTaskSendSlackMessage(\"sendSlackMessage\", WorkflowTaskSendSlackMessageArgs.builder()        \n            .workflowId(notifySlackChannels.id())\n            .skipOnFailure(false)\n            .enabled(true)\n            .taskParams(WorkflowTaskSendSlackMessageTaskParamsArgs.builder()\n                .name(\"Notify team about incident\")\n                .channels(WorkflowTaskSendSlackMessageTaskParamsChannelArgs.builder()\n                    .id(\"{{ incident.slack_channel_id }}\")\n                    .name(\"{{ incident.slack_channel_id }}\")\n                    .build())\n                .text(\"Heads up - wanted to let your team know we have an active incident.\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  notifySlackChannels:\n    type: rootly:WorkflowIncident\n    properties:\n      description: Send a message to specific teams on Slack regarding the incident.\n      triggerParams:\n        triggers:\n          - incident_created\n        incidentStatuses:\n          - started\n        incidentConditionStatus: IS\n      enabled: true\n  sendSlackMessage:\n    type: rootly:WorkflowTaskSendSlackMessage\n    properties:\n      workflowId: ${notifySlackChannels.id}\n      skipOnFailure: false\n      enabled: true\n      taskParams:\n        name: Notify team about incident\n        channels:\n          - id: '{{ incident.slack_channel_id }}'\n            name: '{{ incident.slack_channel_id }}'\n        text: Heads up - wanted to let your team know we have an active incident.\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendSlackMessageTaskParams:WorkflowTaskSendSlackMessageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendSlackMessageTaskParams:WorkflowTaskSendSlackMessageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskSendSlackMessage resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendSlackMessageTaskParams:WorkflowTaskSendSlackMessageTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskSendSms:WorkflowTaskSendSms": {
            "description": "Manages workflow send_sms task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst sendSmsWorkflowIncident = new rootly.WorkflowIncident(\"sendSmsWorkflowIncident\", {\n    description: \"Automatically send SMS to a specific teammate.\",\n    triggerParams: {\n        triggers: [\"incident_created\"],\n        incidentStatuses: [\"started\"],\n        incidentConditionStatus: \"IS\",\n    },\n    enabled: true,\n});\nconst sendSmsWorkflowTaskSendSms = new rootly.WorkflowTaskSendSms(\"sendSmsWorkflowTaskSendSms\", {\n    workflowId: sendSmsWorkflowIncident.id,\n    skipOnFailure: false,\n    enabled: true,\n    taskParams: {\n        name: \"Send SMS\",\n        content: \"We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\",\n        phoneNumbers: [\n            \"+11231231231\",\n            \"+11231231232\",\n        ],\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nsend_sms_workflow_incident = rootly.WorkflowIncident(\"sendSmsWorkflowIncident\",\n    description=\"Automatically send SMS to a specific teammate.\",\n    trigger_params=rootly.WorkflowIncidentTriggerParamsArgs(\n        triggers=[\"incident_created\"],\n        incident_statuses=[\"started\"],\n        incident_condition_status=\"IS\",\n    ),\n    enabled=True)\nsend_sms_workflow_task_send_sms = rootly.WorkflowTaskSendSms(\"sendSmsWorkflowTaskSendSms\",\n    workflow_id=send_sms_workflow_incident.id,\n    skip_on_failure=False,\n    enabled=True,\n    task_params=rootly.WorkflowTaskSendSmsTaskParamsArgs(\n        name=\"Send SMS\",\n        content=\"We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\",\n        phone_numbers=[\n            \"+11231231231\",\n            \"+11231231232\",\n        ],\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var sendSmsWorkflowIncident = new Rootly.WorkflowIncident(\"sendSmsWorkflowIncident\", new()\n    {\n        Description = \"Automatically send SMS to a specific teammate.\",\n        TriggerParams = new Rootly.Inputs.WorkflowIncidentTriggerParamsArgs\n        {\n            Triggers = new[]\n            {\n                \"incident_created\",\n            },\n            IncidentStatuses = new[]\n            {\n                \"started\",\n            },\n            IncidentConditionStatus = \"IS\",\n        },\n        Enabled = true,\n    });\n\n    var sendSmsWorkflowTaskSendSms = new Rootly.WorkflowTaskSendSms(\"sendSmsWorkflowTaskSendSms\", new()\n    {\n        WorkflowId = sendSmsWorkflowIncident.Id,\n        SkipOnFailure = false,\n        Enabled = true,\n        TaskParams = new Rootly.Inputs.WorkflowTaskSendSmsTaskParamsArgs\n        {\n            Name = \"Send SMS\",\n            Content = \"We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\",\n            PhoneNumbers = new[]\n            {\n                \"+11231231231\",\n                \"+11231231232\",\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\tsendSmsWorkflowIncident, err := rootly.NewWorkflowIncident(ctx, \"sendSmsWorkflowIncident\", \u0026rootly.WorkflowIncidentArgs{\n\t\t\tDescription: pulumi.String(\"Automatically send SMS to a specific teammate.\"),\n\t\t\tTriggerParams: \u0026rootly.WorkflowIncidentTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"incident_created\"),\n\t\t\t\t},\n\t\t\t\tIncidentStatuses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"started\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionStatus: pulumi.String(\"IS\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewWorkflowTaskSendSms(ctx, \"sendSmsWorkflowTaskSendSms\", \u0026rootly.WorkflowTaskSendSmsArgs{\n\t\t\tWorkflowId:    sendSmsWorkflowIncident.ID(),\n\t\t\tSkipOnFailure: pulumi.Bool(false),\n\t\t\tEnabled:       pulumi.Bool(true),\n\t\t\tTaskParams: \u0026rootly.WorkflowTaskSendSmsTaskParamsArgs{\n\t\t\t\tName:    pulumi.String(\"Send SMS\"),\n\t\t\t\tContent: pulumi.String(\"We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\"),\n\t\t\t\tPhoneNumbers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"+11231231231\"),\n\t\t\t\t\tpulumi.String(\"+11231231232\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.WorkflowIncident;\nimport com.pulumi.rootly.WorkflowIncidentArgs;\nimport com.pulumi.rootly.inputs.WorkflowIncidentTriggerParamsArgs;\nimport com.pulumi.rootly.WorkflowTaskSendSms;\nimport com.pulumi.rootly.WorkflowTaskSendSmsArgs;\nimport com.pulumi.rootly.inputs.WorkflowTaskSendSmsTaskParamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var sendSmsWorkflowIncident = new WorkflowIncident(\"sendSmsWorkflowIncident\", WorkflowIncidentArgs.builder()        \n            .description(\"Automatically send SMS to a specific teammate.\")\n            .triggerParams(WorkflowIncidentTriggerParamsArgs.builder()\n                .triggers(\"incident_created\")\n                .incidentStatuses(\"started\")\n                .incidentConditionStatus(\"IS\")\n                .build())\n            .enabled(true)\n            .build());\n\n        var sendSmsWorkflowTaskSendSms = new WorkflowTaskSendSms(\"sendSmsWorkflowTaskSendSms\", WorkflowTaskSendSmsArgs.builder()        \n            .workflowId(sendSmsWorkflowIncident.id())\n            .skipOnFailure(false)\n            .enabled(true)\n            .taskParams(WorkflowTaskSendSmsTaskParamsArgs.builder()\n                .name(\"Send SMS\")\n                .content(\"We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\")\n                .phoneNumbers(                \n                    \"+11231231231\",\n                    \"+11231231232\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  sendSmsWorkflowIncident:\n    type: rootly:WorkflowIncident\n    properties:\n      description: Automatically send SMS to a specific teammate.\n      triggerParams:\n        triggers:\n          - incident_created\n        incidentStatuses:\n          - started\n        incidentConditionStatus: IS\n      enabled: true\n  sendSmsWorkflowTaskSendSms:\n    type: rootly:WorkflowTaskSendSms\n    properties:\n      workflowId: ${sendSmsWorkflowIncident.id}\n      skipOnFailure: false\n      enabled: true\n      taskParams:\n        name: Send SMS\n        content: We have an ongoing incident {{ incident.title }} of severity {{ incident.severity }} and your assistance is required.\n        phoneNumbers:\n          - '+11231231231'\n          - '+11231231232'\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendSmsTaskParams:WorkflowTaskSendSmsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendSmsTaskParams:WorkflowTaskSendSmsTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskSendSms resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendSmsTaskParams:WorkflowTaskSendSmsTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskSendWhatsappMessage:WorkflowTaskSendWhatsappMessage": {
            "description": "Manages workflow send_whatsapp_message task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendWhatsappMessageTaskParams:WorkflowTaskSendWhatsappMessageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSendWhatsappMessageTaskParams:WorkflowTaskSendWhatsappMessageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskSendWhatsappMessage resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSendWhatsappMessageTaskParams:WorkflowTaskSendWhatsappMessageTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskSnapshotDatadogGraph:WorkflowTaskSnapshotDatadogGraph": {
            "description": "Manages workflow snapshot_datadog_graph task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSnapshotDatadogGraphTaskParams:WorkflowTaskSnapshotDatadogGraphTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSnapshotDatadogGraphTaskParams:WorkflowTaskSnapshotDatadogGraphTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskSnapshotDatadogGraph resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotDatadogGraphTaskParams:WorkflowTaskSnapshotDatadogGraphTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskSnapshotGrafanaDashboard:WorkflowTaskSnapshotGrafanaDashboard": {
            "description": "Manages workflow snapshot_grafana_dashboard task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSnapshotGrafanaDashboardTaskParams:WorkflowTaskSnapshotGrafanaDashboardTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSnapshotGrafanaDashboardTaskParams:WorkflowTaskSnapshotGrafanaDashboardTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskSnapshotGrafanaDashboard resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotGrafanaDashboardTaskParams:WorkflowTaskSnapshotGrafanaDashboardTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskSnapshotLookerLook:WorkflowTaskSnapshotLookerLook": {
            "description": "Manages workflow snapshot_looker_look task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSnapshotLookerLookTaskParams:WorkflowTaskSnapshotLookerLookTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSnapshotLookerLookTaskParams:WorkflowTaskSnapshotLookerLookTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskSnapshotLookerLook resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotLookerLookTaskParams:WorkflowTaskSnapshotLookerLookTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskSnapshotNewRelicGraph:WorkflowTaskSnapshotNewRelicGraph": {
            "description": "Manages workflow snapshot_new_relic_graph task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSnapshotNewRelicGraphTaskParams:WorkflowTaskSnapshotNewRelicGraphTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskSnapshotNewRelicGraphTaskParams:WorkflowTaskSnapshotNewRelicGraphTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskSnapshotNewRelicGraph resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskSnapshotNewRelicGraphTaskParams:WorkflowTaskSnapshotNewRelicGraphTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskTriggerWorkflow:WorkflowTaskTriggerWorkflow": {
            "description": "Manages workflow trigger_workflow task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst triggerAnotherWorkflow = new rootly.WorkflowIncident(\"triggerAnotherWorkflow\", {\n    description: \"Trigger another workflow\",\n    triggerParams: {\n        triggers: [\"incident_created\"],\n        incidentStatuses: [\"started\"],\n        incidentConditionStatus: \"IS\",\n    },\n    enabled: true,\n});\nconst triggerAnotherWorkflowTask = new rootly.WorkflowTaskTriggerWorkflow(\"triggerAnotherWorkflowTask\", {\n    position: 1,\n    workflowId: triggerAnotherWorkflow.id,\n    taskParams: {\n        kind: \"incident\",\n        workflow: {\n            id: rootly_workflow_incident.another_workflow.id,\n            name: \"Trigger another workflow\",\n        },\n        resource: {\n            id: \"{{ incident.id }}\",\n            name: \"{{ incident.id }}\",\n        },\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\ntrigger_another_workflow = rootly.WorkflowIncident(\"triggerAnotherWorkflow\",\n    description=\"Trigger another workflow\",\n    trigger_params=rootly.WorkflowIncidentTriggerParamsArgs(\n        triggers=[\"incident_created\"],\n        incident_statuses=[\"started\"],\n        incident_condition_status=\"IS\",\n    ),\n    enabled=True)\ntrigger_another_workflow_task = rootly.WorkflowTaskTriggerWorkflow(\"triggerAnotherWorkflowTask\",\n    position=1,\n    workflow_id=trigger_another_workflow.id,\n    task_params=rootly.WorkflowTaskTriggerWorkflowTaskParamsArgs(\n        kind=\"incident\",\n        workflow={\n            \"id\": rootly_workflow_incident[\"another_workflow\"][\"id\"],\n            \"name\": \"Trigger another workflow\",\n        },\n        resource={\n            \"id\": \"{{ incident.id }}\",\n            \"name\": \"{{ incident.id }}\",\n        },\n    ))\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var triggerAnotherWorkflow = new Rootly.WorkflowIncident(\"triggerAnotherWorkflow\", new()\n    {\n        Description = \"Trigger another workflow\",\n        TriggerParams = new Rootly.Inputs.WorkflowIncidentTriggerParamsArgs\n        {\n            Triggers = new[]\n            {\n                \"incident_created\",\n            },\n            IncidentStatuses = new[]\n            {\n                \"started\",\n            },\n            IncidentConditionStatus = \"IS\",\n        },\n        Enabled = true,\n    });\n\n    var triggerAnotherWorkflowTask = new Rootly.WorkflowTaskTriggerWorkflow(\"triggerAnotherWorkflowTask\", new()\n    {\n        Position = 1,\n        WorkflowId = triggerAnotherWorkflow.Id,\n        TaskParams = new Rootly.Inputs.WorkflowTaskTriggerWorkflowTaskParamsArgs\n        {\n            Kind = \"incident\",\n            Workflow = \n            {\n                { \"id\", rootly_workflow_incident.Another_workflow.Id },\n                { \"name\", \"Trigger another workflow\" },\n            },\n            Resource = \n            {\n                { \"id\", \"{{ incident.id }}\" },\n                { \"name\", \"{{ incident.id }}\" },\n            },\n        },\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\ttriggerAnotherWorkflow, err := rootly.NewWorkflowIncident(ctx, \"triggerAnotherWorkflow\", \u0026rootly.WorkflowIncidentArgs{\n\t\t\tDescription: pulumi.String(\"Trigger another workflow\"),\n\t\t\tTriggerParams: \u0026rootly.WorkflowIncidentTriggerParamsArgs{\n\t\t\t\tTriggers: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"incident_created\"),\n\t\t\t\t},\n\t\t\t\tIncidentStatuses: pulumi.StringArray{\n\t\t\t\t\tpulumi.String(\"started\"),\n\t\t\t\t},\n\t\t\t\tIncidentConditionStatus: pulumi.String(\"IS\"),\n\t\t\t},\n\t\t\tEnabled: pulumi.Bool(true),\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\t_, err = rootly.NewWorkflowTaskTriggerWorkflow(ctx, \"triggerAnotherWorkflowTask\", \u0026rootly.WorkflowTaskTriggerWorkflowArgs{\n\t\t\tPosition:   pulumi.Int(1),\n\t\t\tWorkflowId: triggerAnotherWorkflow.ID(),\n\t\t\tTaskParams: \u0026rootly.WorkflowTaskTriggerWorkflowTaskParamsArgs{\n\t\t\t\tKind: pulumi.String(\"incident\"),\n\t\t\t\tWorkflow: pulumi.Map{\n\t\t\t\t\t\"id\":   pulumi.Any(rootly_workflow_incident.Another_workflow.Id),\n\t\t\t\t\t\"name\": pulumi.Any(\"Trigger another workflow\"),\n\t\t\t\t},\n\t\t\t\tResource: pulumi.Map{\n\t\t\t\t\t\"id\":   pulumi.Any(\"{{ incident.id }}\"),\n\t\t\t\t\t\"name\": pulumi.Any(\"{{ incident.id }}\"),\n\t\t\t\t},\n\t\t\t},\n\t\t})\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.WorkflowIncident;\nimport com.pulumi.rootly.WorkflowIncidentArgs;\nimport com.pulumi.rootly.inputs.WorkflowIncidentTriggerParamsArgs;\nimport com.pulumi.rootly.WorkflowTaskTriggerWorkflow;\nimport com.pulumi.rootly.WorkflowTaskTriggerWorkflowArgs;\nimport com.pulumi.rootly.inputs.WorkflowTaskTriggerWorkflowTaskParamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var triggerAnotherWorkflow = new WorkflowIncident(\"triggerAnotherWorkflow\", WorkflowIncidentArgs.builder()        \n            .description(\"Trigger another workflow\")\n            .triggerParams(WorkflowIncidentTriggerParamsArgs.builder()\n                .triggers(\"incident_created\")\n                .incidentStatuses(\"started\")\n                .incidentConditionStatus(\"IS\")\n                .build())\n            .enabled(true)\n            .build());\n\n        var triggerAnotherWorkflowTask = new WorkflowTaskTriggerWorkflow(\"triggerAnotherWorkflowTask\", WorkflowTaskTriggerWorkflowArgs.builder()        \n            .position(1)\n            .workflowId(triggerAnotherWorkflow.id())\n            .taskParams(WorkflowTaskTriggerWorkflowTaskParamsArgs.builder()\n                .kind(\"incident\")\n                .workflow(Map.ofEntries(\n                    Map.entry(\"id\", rootly_workflow_incident.another_workflow().id()),\n                    Map.entry(\"name\", \"Trigger another workflow\")\n                ))\n                .resource(Map.ofEntries(\n                    Map.entry(\"id\", \"{{ incident.id }}\"),\n                    Map.entry(\"name\", \"{{ incident.id }}\")\n                ))\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  triggerAnotherWorkflow:\n    type: rootly:WorkflowIncident\n    properties:\n      description: Trigger another workflow\n      triggerParams:\n        triggers:\n          - incident_created\n        incidentStatuses:\n          - started\n        incidentConditionStatus: IS\n      enabled: true\n  triggerAnotherWorkflowTask:\n    type: rootly:WorkflowTaskTriggerWorkflow\n    properties:\n      position: 1\n      workflowId: ${triggerAnotherWorkflow.id}\n      taskParams:\n        kind: incident\n        workflow:\n          id: ${rootly_workflow_incident.another_workflow.id}\n          name: Trigger another workflow\n        resource:\n          id: '{{ incident.id }}'\n          name: '{{ incident.id }}'\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskTriggerWorkflowTaskParams:WorkflowTaskTriggerWorkflowTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskTriggerWorkflowTaskParams:WorkflowTaskTriggerWorkflowTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskTriggerWorkflow resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskTriggerWorkflowTaskParams:WorkflowTaskTriggerWorkflowTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskTweetTwitterMessage:WorkflowTaskTweetTwitterMessage": {
            "description": "Manages workflow tweet_twitter_message task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskTweetTwitterMessageTaskParams:WorkflowTaskTweetTwitterMessageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskTweetTwitterMessageTaskParams:WorkflowTaskTweetTwitterMessageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskTweetTwitterMessage resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskTweetTwitterMessageTaskParams:WorkflowTaskTweetTwitterMessageTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateActionItem:WorkflowTaskUpdateActionItem": {
            "description": "Manages workflow update_action_item task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateActionItemTaskParams:WorkflowTaskUpdateActionItemTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateActionItemTaskParams:WorkflowTaskUpdateActionItemTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateActionItem resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateActionItemTaskParams:WorkflowTaskUpdateActionItemTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateAirtableTableRecord:WorkflowTaskUpdateAirtableTableRecord": {
            "description": "Manages workflow update_airtable_table_record task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateAirtableTableRecordTaskParams:WorkflowTaskUpdateAirtableTableRecordTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateAirtableTableRecordTaskParams:WorkflowTaskUpdateAirtableTableRecordTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateAirtableTableRecord resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateAirtableTableRecordTaskParams:WorkflowTaskUpdateAirtableTableRecordTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateAsanaTask:WorkflowTaskUpdateAsanaTask": {
            "description": "Manages workflow update_asana_task task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateAsanaTaskTaskParams:WorkflowTaskUpdateAsanaTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateAsanaTaskTaskParams:WorkflowTaskUpdateAsanaTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateAsanaTask resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateAsanaTaskTaskParams:WorkflowTaskUpdateAsanaTaskTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateClickupTask:WorkflowTaskUpdateClickupTask": {
            "description": "Manages workflow update_clickup_task task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateClickupTaskTaskParams:WorkflowTaskUpdateClickupTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateClickupTaskTaskParams:WorkflowTaskUpdateClickupTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateClickupTask resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateClickupTaskTaskParams:WorkflowTaskUpdateClickupTaskTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateGithubIssue:WorkflowTaskUpdateGithubIssue": {
            "description": "Manages workflow update_github_issue task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateGithubIssueTaskParams:WorkflowTaskUpdateGithubIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateGithubIssueTaskParams:WorkflowTaskUpdateGithubIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateGithubIssue resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateGithubIssueTaskParams:WorkflowTaskUpdateGithubIssueTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateGitlabIssue:WorkflowTaskUpdateGitlabIssue": {
            "description": "Manages workflow update_gitlab_issue task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateGitlabIssueTaskParams:WorkflowTaskUpdateGitlabIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateGitlabIssueTaskParams:WorkflowTaskUpdateGitlabIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateGitlabIssue resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateGitlabIssueTaskParams:WorkflowTaskUpdateGitlabIssueTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateGoogleCalendarEvent:WorkflowTaskUpdateGoogleCalendarEvent": {
            "description": "Manages workflow update_google_calendar_event task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateGoogleCalendarEventTaskParams:WorkflowTaskUpdateGoogleCalendarEventTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateGoogleCalendarEventTaskParams:WorkflowTaskUpdateGoogleCalendarEventTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateGoogleCalendarEvent resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateGoogleCalendarEventTaskParams:WorkflowTaskUpdateGoogleCalendarEventTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateGoogleDocsPage:WorkflowTaskUpdateGoogleDocsPage": {
            "description": "Manages workflow update_google_docs_page task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateGoogleDocsPageTaskParams:WorkflowTaskUpdateGoogleDocsPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateGoogleDocsPageTaskParams:WorkflowTaskUpdateGoogleDocsPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateGoogleDocsPage resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateGoogleDocsPageTaskParams:WorkflowTaskUpdateGoogleDocsPageTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateIncident:WorkflowTaskUpdateIncident": {
            "description": "Manages workflow update_incident task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateIncidentTaskParams:WorkflowTaskUpdateIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateIncidentTaskParams:WorkflowTaskUpdateIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateIncident resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateIncidentTaskParams:WorkflowTaskUpdateIncidentTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateIncidentPostmortem:WorkflowTaskUpdateIncidentPostmortem": {
            "description": "Manages workflow update_incident_postmortem task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateIncidentPostmortemTaskParams:WorkflowTaskUpdateIncidentPostmortemTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateIncidentPostmortemTaskParams:WorkflowTaskUpdateIncidentPostmortemTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateIncidentPostmortem resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateIncidentPostmortemTaskParams:WorkflowTaskUpdateIncidentPostmortemTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateJiraIssue:WorkflowTaskUpdateJiraIssue": {
            "description": "Manages workflow update_jira_issue task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateJiraIssueTaskParams:WorkflowTaskUpdateJiraIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateJiraIssueTaskParams:WorkflowTaskUpdateJiraIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateJiraIssue resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateJiraIssueTaskParams:WorkflowTaskUpdateJiraIssueTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateLinearIssue:WorkflowTaskUpdateLinearIssue": {
            "description": "Manages workflow update_linear_issue task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateLinearIssueTaskParams:WorkflowTaskUpdateLinearIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateLinearIssueTaskParams:WorkflowTaskUpdateLinearIssueTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateLinearIssue resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateLinearIssueTaskParams:WorkflowTaskUpdateLinearIssueTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateNotionPage:WorkflowTaskUpdateNotionPage": {
            "description": "Manages workflow update_notion_page task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateNotionPageTaskParams:WorkflowTaskUpdateNotionPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateNotionPageTaskParams:WorkflowTaskUpdateNotionPageTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateNotionPage resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateNotionPageTaskParams:WorkflowTaskUpdateNotionPageTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateOpsgenieAlert:WorkflowTaskUpdateOpsgenieAlert": {
            "description": "Manages workflow update_opsgenie_alert task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateOpsgenieAlertTaskParams:WorkflowTaskUpdateOpsgenieAlertTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateOpsgenieAlertTaskParams:WorkflowTaskUpdateOpsgenieAlertTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateOpsgenieAlert resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateOpsgenieAlertTaskParams:WorkflowTaskUpdateOpsgenieAlertTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateOpsgenieIncident:WorkflowTaskUpdateOpsgenieIncident": {
            "description": "Manages workflow update_opsgenie_incident task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateOpsgenieIncidentTaskParams:WorkflowTaskUpdateOpsgenieIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateOpsgenieIncidentTaskParams:WorkflowTaskUpdateOpsgenieIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateOpsgenieIncident resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateOpsgenieIncidentTaskParams:WorkflowTaskUpdateOpsgenieIncidentTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdatePagerdutyIncident:WorkflowTaskUpdatePagerdutyIncident": {
            "description": "Manages workflow update_pagerduty_incident task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdatePagerdutyIncidentTaskParams:WorkflowTaskUpdatePagerdutyIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdatePagerdutyIncidentTaskParams:WorkflowTaskUpdatePagerdutyIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdatePagerdutyIncident resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdatePagerdutyIncidentTaskParams:WorkflowTaskUpdatePagerdutyIncidentTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdatePagertreeAlert:WorkflowTaskUpdatePagertreeAlert": {
            "description": "Manages workflow update_pagertree_alert task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdatePagertreeAlertTaskParams:WorkflowTaskUpdatePagertreeAlertTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdatePagertreeAlertTaskParams:WorkflowTaskUpdatePagertreeAlertTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdatePagertreeAlert resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdatePagertreeAlertTaskParams:WorkflowTaskUpdatePagertreeAlertTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateServiceNowIncident:WorkflowTaskUpdateServiceNowIncident": {
            "description": "Manages workflow update_service_now_incident task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateServiceNowIncidentTaskParams:WorkflowTaskUpdateServiceNowIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateServiceNowIncidentTaskParams:WorkflowTaskUpdateServiceNowIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateServiceNowIncident resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateServiceNowIncidentTaskParams:WorkflowTaskUpdateServiceNowIncidentTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateShortcutStory:WorkflowTaskUpdateShortcutStory": {
            "description": "Manages workflow update_shortcut_story task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateShortcutStoryTaskParams:WorkflowTaskUpdateShortcutStoryTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateShortcutStoryTaskParams:WorkflowTaskUpdateShortcutStoryTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateShortcutStory resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateShortcutStoryTaskParams:WorkflowTaskUpdateShortcutStoryTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateShortcutTask:WorkflowTaskUpdateShortcutTask": {
            "description": "Manages workflow update_shortcut_task task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateShortcutTaskTaskParams:WorkflowTaskUpdateShortcutTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateShortcutTaskTaskParams:WorkflowTaskUpdateShortcutTaskTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateShortcutTask resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateShortcutTaskTaskParams:WorkflowTaskUpdateShortcutTaskTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateSlackChannelTopic:WorkflowTaskUpdateSlackChannelTopic": {
            "description": "Manages workflow update_slack_channel_topic task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateSlackChannelTopicTaskParams:WorkflowTaskUpdateSlackChannelTopicTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateSlackChannelTopicTaskParams:WorkflowTaskUpdateSlackChannelTopicTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateSlackChannelTopic resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateSlackChannelTopicTaskParams:WorkflowTaskUpdateSlackChannelTopicTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateStatus:WorkflowTaskUpdateStatus": {
            "description": "Manages workflow update_status task.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.WorkflowIncident;\nimport com.pulumi.rootly.WorkflowIncidentArgs;\nimport com.pulumi.rootly.inputs.WorkflowIncidentTriggerParamsArgs;\nimport com.pulumi.rootly.WorkflowTaskUpdateStatus;\nimport com.pulumi.rootly.WorkflowTaskUpdateStatusArgs;\nimport com.pulumi.rootly.inputs.WorkflowTaskUpdateStatusTaskParamsArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        var autoResolveIncident = new WorkflowIncident(\"autoResolveIncident\", WorkflowIncidentArgs.builder()        \n            .description(\"After an incident has been inactive for 24 hrs, automatically mark it as resolved.\")\n            .triggerParams(WorkflowIncidentTriggerParamsArgs.builder()\n                .triggers(\"incident_created\")\n                .wait(\"24 hours\")\n                .incidentStatuses(                \n                    \"resolved\",\n                    \"mitigated\")\n                .incidentConditionStatus(\"ANY\")\n                .build())\n            .enabled(true)\n            .build());\n\n        var updateStatus = new WorkflowTaskUpdateStatus(\"updateStatus\", WorkflowTaskUpdateStatusArgs.builder()        \n            .workflowId(autoResolveIncident.id())\n            .skipOnFailure(false)\n            .enabled(true)\n            .taskParams(WorkflowTaskUpdateStatusTaskParamsArgs.builder()\n                .status(\"resolved\")\n                .message(\"Automatically marked as resolved due to inactivity\")\n                .build())\n            .build());\n\n    }\n}\n```\n```yaml\nresources:\n  autoResolveIncident:\n    type: rootly:WorkflowIncident\n    properties:\n      description: After an incident has been inactive for 24 hrs, automatically mark it as resolved.\n      triggerParams:\n        triggers:\n          - incident_created\n        wait: 24 hours\n        incidentStatuses:\n          - resolved\n          - mitigated\n        incidentConditionStatus: ANY\n      enabled: true\n  updateStatus:\n    type: rootly:WorkflowTaskUpdateStatus\n    properties:\n      workflowId: ${autoResolveIncident.id}\n      skipOnFailure: false\n      enabled: true\n      taskParams:\n        status: resolved\n        message: Automatically marked as resolved due to inactivity\n```\n{{% /example %}}\n{{% /examples %}}",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateStatusTaskParams:WorkflowTaskUpdateStatusTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateStatusTaskParams:WorkflowTaskUpdateStatusTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateStatus resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateStatusTaskParams:WorkflowTaskUpdateStatusTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateTrelloCard:WorkflowTaskUpdateTrelloCard": {
            "description": "Manages workflow update_trello_card task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateTrelloCardTaskParams:WorkflowTaskUpdateTrelloCardTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateTrelloCardTaskParams:WorkflowTaskUpdateTrelloCardTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateTrelloCard resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateTrelloCardTaskParams:WorkflowTaskUpdateTrelloCardTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateVictorOpsIncident:WorkflowTaskUpdateVictorOpsIncident": {
            "description": "Manages workflow update_victor_ops_incident task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateVictorOpsIncidentTaskParams:WorkflowTaskUpdateVictorOpsIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateVictorOpsIncidentTaskParams:WorkflowTaskUpdateVictorOpsIncidentTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateVictorOpsIncident resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateVictorOpsIncidentTaskParams:WorkflowTaskUpdateVictorOpsIncidentTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        },
        "rootly:index/workflowTaskUpdateZendeskTicket:WorkflowTaskUpdateZendeskTicket": {
            "description": "Manages workflow update_zendesk_ticket task.\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateZendeskTicketTaskParams:WorkflowTaskUpdateZendeskTicketTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n"
                }
            },
            "required": [
                "name",
                "position",
                "taskParams",
                "workflowId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable/disable this workflow task\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the workflow task\n"
                },
                "position": {
                    "type": "integer",
                    "description": "The position of the workflow task (1 being top of list)\n"
                },
                "skipOnFailure": {
                    "type": "boolean",
                    "description": "Skip workflow task if any failures\n"
                },
                "taskParams": {
                    "$ref": "#/types/rootly:index/WorkflowTaskUpdateZendeskTicketTaskParams:WorkflowTaskUpdateZendeskTicketTaskParams",
                    "description": "The parameters for this workflow task.\n"
                },
                "workflowId": {
                    "type": "string",
                    "description": "The ID of the parent workflow\n",
                    "willReplaceOnChanges": true
                }
            },
            "requiredInputs": [
                "taskParams",
                "workflowId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering WorkflowTaskUpdateZendeskTicket resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Enable/disable this workflow task\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the workflow task\n"
                    },
                    "position": {
                        "type": "integer",
                        "description": "The position of the workflow task (1 being top of list)\n"
                    },
                    "skipOnFailure": {
                        "type": "boolean",
                        "description": "Skip workflow task if any failures\n"
                    },
                    "taskParams": {
                        "$ref": "#/types/rootly:index/WorkflowTaskUpdateZendeskTicketTaskParams:WorkflowTaskUpdateZendeskTicketTaskParams",
                        "description": "The parameters for this workflow task.\n"
                    },
                    "workflowId": {
                        "type": "string",
                        "description": "The ID of the parent workflow\n",
                        "willReplaceOnChanges": true
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "rootly:index/getAuthorization:getAuthorization": {
            "inputs": {
                "description": "A collection of arguments for invoking getAuthorization.\n",
                "properties": {
                    "authorizableId": {
                        "type": "string"
                    },
                    "authorizableType": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "granteeId": {
                        "type": "string"
                    },
                    "granteeType": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getAuthorization.\n",
                "properties": {
                    "authorizableId": {
                        "type": "string"
                    },
                    "authorizableType": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "granteeId": {
                        "type": "string"
                    },
                    "granteeType": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "authorizableId",
                    "authorizableType",
                    "granteeId",
                    "granteeType",
                    "id"
                ]
            }
        },
        "rootly:index/getCause:getCause": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst my-cause = rootly.getCause({\n    slug: \"my-cause\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nmy_cause = rootly.get_cause(slug=\"my-cause\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_cause = Rootly.GetCause.Invoke(new()\n    {\n        Slug = \"my-cause\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.LookupCause(ctx, \u0026rootly.LookupCauseArgs{\n\t\t\tSlug: pulumi.StringRef(\"my-cause\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetCauseArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-cause = RootlyFunctions.getCause(GetCauseArgs.builder()\n            .slug(\"my-cause\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-cause:\n    fn::invoke:\n      Function: rootly:getCause\n      Arguments:\n        slug: my-cause\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCause.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCause.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getCauses:getCauses": {
            "inputs": {
                "description": "A collection of arguments for invoking getCauses.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCauses.\n",
                "properties": {
                    "causes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getCausesCause:getCausesCause"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "causes",
                    "id"
                ]
            }
        },
        "rootly:index/getCustomField:getCustomField": {
            "description": "DEPRECATED: Please use `form_field` data source instead.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst my-custom-field = rootly.getCustomField({\n    slug: \"my-custom-field\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nmy_custom_field = rootly.get_custom_field(slug=\"my-custom-field\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_custom_field = Rootly.GetCustomField.Invoke(new()\n    {\n        Slug = \"my-custom-field\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.LookupCustomField(ctx, \u0026rootly.LookupCustomFieldArgs{\n\t\t\tSlug: pulumi.StringRef(\"my-custom-field\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetCustomFieldArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-custom-field = RootlyFunctions.getCustomField(GetCustomFieldArgs.builder()\n            .slug(\"my-custom-field\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-custom-field:\n    fn::invoke:\n      Function: rootly:getCustomField\n      Arguments:\n        slug: my-custom-field\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomField.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCustomField.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "kind",
                    "label",
                    "slug"
                ]
            }
        },
        "rootly:index/getCustomFieldOption:getCustomFieldOption": {
            "description": "DEPRECATED: Please use `form_field` and `form_field_option` data sources instead.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetCustomFieldOptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-custom-field-option = RootlyFunctions.getCustomFieldOption(GetCustomFieldOptionArgs.builder()\n            .slug(\"my-custom-field-option\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-custom-field-option:\n    fn::invoke:\n      Function: rootly:getCustomFieldOption\n      Arguments:\n        slug: my-custom-field-option\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFieldOption.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFieldOption.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "id",
                    "value"
                ]
            }
        },
        "rootly:index/getCustomFieldOptions:getCustomFieldOptions": {
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFieldOptions.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "customFieldId": {
                        "type": "integer"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "customFieldId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFieldOptions.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "customFieldId": {
                        "type": "integer"
                    },
                    "customFieldOptions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getCustomFieldOptionsCustomFieldOption:getCustomFieldOptionsCustomFieldOption"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "customFieldId",
                    "customFieldOptions",
                    "id"
                ]
            }
        },
        "rootly:index/getCustomFields:getCustomFields": {
            "inputs": {
                "description": "A collection of arguments for invoking getCustomFields.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCustomFields.\n",
                "properties": {
                    "customFields": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getCustomFieldsCustomField:getCustomFieldsCustomField"
                        }
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "label": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "customFields",
                    "id"
                ]
            }
        },
        "rootly:index/getCustomForm:getCustomForm": {
            "inputs": {
                "description": "A collection of arguments for invoking getCustomForm.\n",
                "properties": {
                    "command": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getCustomForm.\n",
                "properties": {
                    "command": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "command",
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getEnvironment:getEnvironment": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst my-environment = rootly.getEnvironment({\n    slug: \"my-environment\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nmy_environment = rootly.get_environment(slug=\"my-environment\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_environment = Rootly.GetEnvironment.Invoke(new()\n    {\n        Slug = \"my-environment\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.LookupEnvironment(ctx, \u0026rootly.LookupEnvironmentArgs{\n\t\t\tSlug: pulumi.StringRef(\"my-environment\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetEnvironmentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-environment = RootlyFunctions.getEnvironment(GetEnvironmentArgs.builder()\n            .slug(\"my-environment\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-environment:\n    fn::invoke:\n      Function: rootly:getEnvironment\n      Arguments:\n        slug: my-environment\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironment.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironment.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getEnvironments:getEnvironments": {
            "inputs": {
                "description": "A collection of arguments for invoking getEnvironments.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getEnvironments.\n",
                "properties": {
                    "environments": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getEnvironmentsEnvironment:getEnvironmentsEnvironment"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "environments",
                    "id"
                ]
            }
        },
        "rootly:index/getFormField:getFormField": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst my-form-field = rootly.getFormField({\n    slug: \"my-form-field\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nmy_form_field = rootly.get_form_field(slug=\"my-form-field\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_form_field = Rootly.GetFormField.Invoke(new()\n    {\n        Slug = \"my-form-field\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.LookupFormField(ctx, \u0026rootly.LookupFormFieldArgs{\n\t\t\tSlug: pulumi.StringRef(\"my-form-field\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetFormFieldArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-form-field = RootlyFunctions.getFormField(GetFormFieldArgs.builder()\n            .slug(\"my-form-field\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-form-field:\n    fn::invoke:\n      Function: rootly:getFormField\n      Arguments:\n        slug: my-form-field\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFormField.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFormField.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "kind",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getFormFieldOption:getFormFieldOption": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetFormFieldOptionArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-form-field-option = RootlyFunctions.getFormFieldOption(GetFormFieldOptionArgs.builder()\n            .slug(\"my-form-field-option\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-form-field-option:\n    fn::invoke:\n      Function: rootly:getFormFieldOption\n      Arguments:\n        slug: my-form-field-option\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFormFieldOption.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFormFieldOption.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "value": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "id",
                    "value"
                ]
            }
        },
        "rootly:index/getFormFieldPosition:getFormFieldPosition": {
            "inputs": {
                "description": "A collection of arguments for invoking getFormFieldPosition.\n",
                "properties": {
                    "form": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFormFieldPosition.\n",
                "properties": {
                    "form": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "form",
                    "id"
                ]
            }
        },
        "rootly:index/getFunctionalities:getFunctionalities": {
            "inputs": {
                "description": "A collection of arguments for invoking getFunctionalities.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "opsgenieId": {
                        "type": "string"
                    },
                    "pagerdutyId": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFunctionalities.\n",
                "properties": {
                    "functionalities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getFunctionalitiesFunctionality:getFunctionalitiesFunctionality"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "opsgenieId": {
                        "type": "string"
                    },
                    "pagerdutyId": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "functionalities",
                    "id"
                ]
            }
        },
        "rootly:index/getFunctionality:getFunctionality": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst my-functionality = rootly.getFunctionality({\n    slug: \"my-functionality\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nmy_functionality = rootly.get_functionality(slug=\"my-functionality\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_functionality = Rootly.GetFunctionality.Invoke(new()\n    {\n        Slug = \"my-functionality\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.LookupFunctionality(ctx, \u0026rootly.LookupFunctionalityArgs{\n\t\t\tSlug: pulumi.StringRef(\"my-functionality\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetFunctionalityArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-functionality = RootlyFunctions.getFunctionality(GetFunctionalityArgs.builder()\n            .slug(\"my-functionality\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-functionality:\n    fn::invoke:\n      Function: rootly:getFunctionality\n      Arguments:\n        slug: my-functionality\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getFunctionality.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getFunctionality.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getIncident:getIncident": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetIncidentArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-incident = RootlyFunctions.getIncident(GetIncidentArgs.builder()\n            .slug(\"my-incident-slug\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-incident:\n    fn::invoke:\n      Function: rootly:getIncident\n      Arguments:\n        slug: my-incident-slug\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIncident.\n",
                "properties": {
                    "acknowledgedAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "detectedAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "environments": {
                        "type": "string"
                    },
                    "functionalities": {
                        "type": "string"
                    },
                    "inTriageAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "string"
                    },
                    "mitigatedAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "resolvedAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "services": {
                        "type": "string"
                    },
                    "severity": {
                        "type": "string"
                    },
                    "startedAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "updatedAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIncident.\n",
                "properties": {
                    "acknowledgedAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "detectedAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "environments": {
                        "type": "string"
                    },
                    "functionalities": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "inTriageAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "labels": {
                        "type": "string"
                    },
                    "mitigatedAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "resolvedAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "services": {
                        "type": "string"
                    },
                    "severity": {
                        "type": "string"
                    },
                    "startedAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "updatedAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    }
                },
                "type": "object",
                "required": [
                    "environments",
                    "functionalities",
                    "id",
                    "kind",
                    "labels",
                    "services",
                    "severity"
                ]
            }
        },
        "rootly:index/getIncidentPermissionSet:getIncidentPermissionSet": {
            "inputs": {
                "description": "A collection of arguments for invoking getIncidentPermissionSet.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIncidentPermissionSet.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getIncidentPermissionSetBoolean:getIncidentPermissionSetBoolean": {
            "inputs": {
                "description": "A collection of arguments for invoking getIncidentPermissionSetBoolean.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "kind": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIncidentPermissionSetBoolean.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "kind": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "kind"
                ]
            }
        },
        "rootly:index/getIncidentPermissionSetResource:getIncidentPermissionSetResource": {
            "inputs": {
                "description": "A collection of arguments for invoking getIncidentPermissionSetResource.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "kind": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIncidentPermissionSetResource.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "kind": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "kind"
                ]
            }
        },
        "rootly:index/getIncidentPostMortem:getIncidentPostMortem": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetIncidentPostMortemArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-incident-retrospective = RootlyFunctions.getIncidentPostMortem(GetIncidentPostMortemArgs.builder()\n            .slug(\"my-incident-retrospective-slug\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-incident-retrospective:\n    fn::invoke:\n      Function: rootly:getIncidentPostMortem\n      Arguments:\n        slug: my-incident-retrospective-slug\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIncidentPostMortem.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "mitigatedAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "resolvedAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "startedAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIncidentPostMortem.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "mitigatedAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "resolvedAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "startedAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "status": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "status"
                ]
            }
        },
        "rootly:index/getIncidentRole:getIncidentRole": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst my-incident-role = rootly.getIncidentRole({\n    slug: \"my-incident-role\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nmy_incident_role = rootly.get_incident_role(slug=\"my-incident-role\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_incident_role = Rootly.GetIncidentRole.Invoke(new()\n    {\n        Slug = \"my-incident-role\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.LookupIncidentRole(ctx, \u0026rootly.LookupIncidentRoleArgs{\n\t\t\tSlug: pulumi.StringRef(\"my-incident-role\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetIncidentRoleArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-incident-role = RootlyFunctions.getIncidentRole(GetIncidentRoleArgs.builder()\n            .slug(\"my-incident-role\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-incident-role:\n    fn::invoke:\n      Function: rootly:getIncidentRole\n      Arguments:\n        slug: my-incident-role\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIncidentRole.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIncidentRole.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getIncidentRoles:getIncidentRoles": {
            "inputs": {
                "description": "A collection of arguments for invoking getIncidentRoles.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIncidentRoles.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "incidentRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getIncidentRolesIncidentRole:getIncidentRolesIncidentRole"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "incidentRoles",
                    "id"
                ]
            }
        },
        "rootly:index/getIncidentType:getIncidentType": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst my-incident-type = rootly.getIncidentType({\n    slug: \"my-incident-type\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nmy_incident_type = rootly.get_incident_type(slug=\"my-incident-type\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_incident_type = Rootly.GetIncidentType.Invoke(new()\n    {\n        Slug = \"my-incident-type\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.LookupIncidentType(ctx, \u0026rootly.LookupIncidentTypeArgs{\n\t\t\tSlug: pulumi.StringRef(\"my-incident-type\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetIncidentTypeArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-incident-type = RootlyFunctions.getIncidentType(GetIncidentTypeArgs.builder()\n            .slug(\"my-incident-type\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-incident-type:\n    fn::invoke:\n      Function: rootly:getIncidentType\n      Arguments:\n        slug: my-incident-type\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getIncidentType.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIncidentType.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getIncidentTypes:getIncidentTypes": {
            "inputs": {
                "description": "A collection of arguments for invoking getIncidentTypes.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getIncidentTypes.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "incidentTypes": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getIncidentTypesIncidentType:getIncidentTypesIncidentType"
                        }
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "incidentTypes",
                    "id"
                ]
            }
        },
        "rootly:index/getIpRanges:getIpRanges": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst ipRanges = rootly.getIpRanges({});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nip_ranges = rootly.get_ip_ranges()\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var ipRanges = Rootly.GetIpRanges.Invoke();\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.GetIpRanges(ctx, nil, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var ipRanges = RootlyFunctions.getIpRanges();\n\n    }\n}\n```\n```yaml\nvariables:\n  ipRanges:\n    fn::invoke:\n      Function: rootly:getIpRanges\n      Arguments: {}\n```\n{{% /example %}}\n{{% /examples %}}",
            "outputs": {
                "description": "A collection of values returned by getIpRanges.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "integrationsIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IPv4 addresses used by Rootly integrations.\n"
                    },
                    "integrationsIpv6s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IPv6 addresses used by Rootly integrations.\n"
                    },
                    "webhooksIpv4s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IPv4 addresses used by Rootly webhooks.\n"
                    },
                    "webhooksIpv6s": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "IPv6 addresses used by Rootly webhooks.\n"
                    }
                },
                "type": "object",
                "required": [
                    "integrationsIpv4s",
                    "integrationsIpv6s",
                    "webhooksIpv4s",
                    "webhooksIpv6s",
                    "id"
                ]
            }
        },
        "rootly:index/getRetrospectiveConfiguration:getRetrospectiveConfiguration": {
            "inputs": {
                "description": "A collection of arguments for invoking getRetrospectiveConfiguration.\n",
                "properties": {
                    "kind": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRetrospectiveConfiguration.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "kind": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "kind"
                ]
            }
        },
        "rootly:index/getRole:getRole": {
            "inputs": {
                "description": "A collection of arguments for invoking getRole.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getRole.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getService:getService": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst my-service = rootly.getService({\n    slug: \"my-service\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nmy_service = rootly.get_service(slug=\"my-service\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_service = Rootly.GetService.Invoke(new()\n    {\n        Slug = \"my-service\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.LookupService(ctx, \u0026rootly.LookupServiceArgs{\n\t\t\tSlug: pulumi.StringRef(\"my-service\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetServiceArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-service = RootlyFunctions.getService(GetServiceArgs.builder()\n            .slug(\"my-service\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-service:\n    fn::invoke:\n      Function: rootly:getService\n      Arguments:\n        slug: my-service\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getService.\n",
                "properties": {
                    "backstageId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getService.\n",
                "properties": {
                    "backstageId": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "backstageId",
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getServices:getServices": {
            "inputs": {
                "description": "A collection of arguments for invoking getServices.\n",
                "properties": {
                    "backstageId": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "opsgenieId": {
                        "type": "string"
                    },
                    "pagerdutyId": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getServices.\n",
                "properties": {
                    "backstageId": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "opsgenieId": {
                        "type": "string"
                    },
                    "pagerdutyId": {
                        "type": "string"
                    },
                    "services": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getServicesService:getServicesService"
                        }
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "services",
                    "id"
                ]
            }
        },
        "rootly:index/getSeverities:getSeverities": {
            "inputs": {
                "description": "A collection of arguments for invoking getSeverities.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSeverities.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "severities": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getSeveritiesSeverity:getSeveritiesSeverity"
                        }
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "severities",
                    "id"
                ]
            }
        },
        "rootly:index/getSeverity:getSeverity": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst critical = rootly.getSeverity({\n    slug: \"sev0\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\ncritical = rootly.get_severity(slug=\"sev0\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var critical = Rootly.GetSeverity.Invoke(new()\n    {\n        Slug = \"sev0\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.LookupSeverity(ctx, \u0026rootly.LookupSeverityArgs{\n\t\t\tSlug: pulumi.StringRef(\"sev0\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetSeverityArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var critical = RootlyFunctions.getSeverity(GetSeverityArgs.builder()\n            .slug(\"sev0\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  critical:\n    fn::invoke:\n      Function: rootly:getSeverity\n      Arguments:\n        slug: sev0\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getSeverity.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "severity": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getSeverity.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "severity": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "id",
                    "name",
                    "severity",
                    "slug"
                ]
            }
        },
        "rootly:index/getStatusPage:getStatusPage": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetStatusPageArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-status-page = RootlyFunctions.getStatusPage(GetStatusPageArgs.builder()\n            .slug(\"my-status-page\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-status-page:\n    fn::invoke:\n      Function: rootly:getStatusPage\n      Arguments:\n        slug: my-status-page\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getStatusPage.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getStatusPage.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "id"
                ]
            }
        },
        "rootly:index/getTeam:getTeam": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst my-team = rootly.getTeam({\n    slug: \"my-team\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nmy_team = rootly.get_team(slug=\"my-team\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_team = Rootly.GetTeam.Invoke(new()\n    {\n        Slug = \"my-team\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.LookupTeam(ctx, \u0026rootly.LookupTeamArgs{\n\t\t\tSlug: pulumi.StringRef(\"my-team\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetTeamArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-team = RootlyFunctions.getTeam(GetTeamArgs.builder()\n            .slug(\"my-team\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-team:\n    fn::invoke:\n      Function: rootly:getTeam\n      Arguments:\n        slug: my-team\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getTeam.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTeam.\n",
                "properties": {
                    "color": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "color",
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getTeams:getTeams": {
            "inputs": {
                "description": "A collection of arguments for invoking getTeams.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getTeams.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/rootly:index/getTeamsTeam:getTeamsTeam"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "teams",
                    "id"
                ]
            }
        },
        "rootly:index/getUser:getUser": {
            "inputs": {
                "description": "A collection of arguments for invoking getUser.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "email": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getUser.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "email": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    }
                },
                "type": "object",
                "required": [
                    "email",
                    "id"
                ]
            }
        },
        "rootly:index/getWebhooksEndpoint:getWebhooksEndpoint": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst my-webhook-endpoint = rootly.getWebhooksEndpoint({\n    slug: \"my-webhookd-endpoint\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nmy_webhook_endpoint = rootly.get_webhooks_endpoint(slug=\"my-webhookd-endpoint\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_webhook_endpoint = Rootly.GetWebhooksEndpoint.Invoke(new()\n    {\n        Slug = \"my-webhookd-endpoint\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.LookupWebhooksEndpoint(ctx, \u0026rootly.LookupWebhooksEndpointArgs{\n\t\t\tSlug: pulumi.StringRef(\"my-webhookd-endpoint\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetWebhooksEndpointArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-webhook-endpoint = RootlyFunctions.getWebhooksEndpoint(GetWebhooksEndpointArgs.builder()\n            .slug(\"my-webhookd-endpoint\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-webhook-endpoint:\n    fn::invoke:\n      Function: rootly:getWebhooksEndpoint\n      Arguments:\n        slug: my-webhookd-endpoint\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getWebhooksEndpoint.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getWebhooksEndpoint.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getWorkflow:getWorkflow": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst my-workflow = rootly.getWorkflow({\n    slug: \"my-workflow\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nmy_workflow = rootly.get_workflow(slug=\"my-workflow\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_workflow = Rootly.GetWorkflow.Invoke(new()\n    {\n        Slug = \"my-workflow\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.GetWorkflow(ctx, \u0026rootly.GetWorkflowArgs{\n\t\t\tSlug: pulumi.StringRef(\"my-workflow\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetWorkflowArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-workflow = RootlyFunctions.getWorkflow(GetWorkflowArgs.builder()\n            .slug(\"my-workflow\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-workflow:\n    fn::invoke:\n      Function: rootly:getWorkflow\n      Arguments:\n        slug: my-workflow\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getWorkflow.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getWorkflow.\n",
                "properties": {
                    "createdAt": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "Filter by date range using 'lt' and 'gt'.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "slug"
                ]
            }
        },
        "rootly:index/getWorkflowGroup:getWorkflowGroup": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst my-workflow-group = rootly.getWorkflowGroup({\n    slug: \"my-workflow-group\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nmy_workflow_group = rootly.get_workflow_group(slug=\"my-workflow-group\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_workflow_group = Rootly.GetWorkflowGroup.Invoke(new()\n    {\n        Slug = \"my-workflow-group\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.LookupWorkflowGroup(ctx, \u0026rootly.LookupWorkflowGroupArgs{\n\t\t\tSlug: pulumi.StringRef(\"my-workflow-group\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetWorkflowGroupArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-workflow-group = RootlyFunctions.getWorkflowGroup(GetWorkflowGroupArgs.builder()\n            .slug(\"my-workflow-group\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-workflow-group:\n    fn::invoke:\n      Function: rootly:getWorkflowGroup\n      Arguments:\n        slug: my-workflow-group\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getWorkflowGroup.\n",
                "properties": {
                    "expanded": {
                        "type": "boolean"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "position": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getWorkflowGroup.\n",
                "properties": {
                    "expanded": {
                        "type": "boolean"
                    },
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "kind": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string"
                    },
                    "position": {
                        "type": "integer"
                    },
                    "slug": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "expanded",
                    "id",
                    "kind",
                    "name",
                    "position",
                    "slug"
                ]
            }
        },
        "rootly:index/getWorkflowTask:getWorkflowTask": {
            "description": "{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as rootly from \"@pulumi/rootly\";\n\nconst my-workflow-task = rootly.getWorkflowTask({\n    slug: \"my-workflow-task\",\n});\n```\n```python\nimport pulumi\nimport pulumi_rootly as rootly\n\nmy_workflow_task = rootly.get_workflow_task(slug=\"my-workflow-task\")\n```\n```csharp\nusing System.Collections.Generic;\nusing System.Linq;\nusing Pulumi;\nusing Rootly = Pulumi.Rootly;\n\nreturn await Deployment.RunAsync(() =\u003e \n{\n    var my_workflow_task = Rootly.GetWorkflowTask.Invoke(new()\n    {\n        Slug = \"my-workflow-task\",\n    });\n\n});\n```\n```go\npackage main\n\nimport (\n\t\"github.com/pulumi/pulumi-rootly/sdk/go/rootly\"\n\t\"github.com/pulumi/pulumi/sdk/v3/go/pulumi\"\n)\n\nfunc main() {\n\tpulumi.Run(func(ctx *pulumi.Context) error {\n\t\t_, err := rootly.GetWorkflowTask(ctx, \u0026rootly.GetWorkflowTaskArgs{\n\t\t\tSlug: pulumi.StringRef(\"my-workflow-task\"),\n\t\t}, nil)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\treturn nil\n\t})\n}\n```\n```java\npackage generated_program;\n\nimport com.pulumi.Context;\nimport com.pulumi.Pulumi;\nimport com.pulumi.core.Output;\nimport com.pulumi.rootly.RootlyFunctions;\nimport com.pulumi.rootly.inputs.GetWorkflowTaskArgs;\nimport java.util.List;\nimport java.util.ArrayList;\nimport java.util.Map;\nimport java.io.File;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\npublic class App {\n    public static void main(String[] args) {\n        Pulumi.run(App::stack);\n    }\n\n    public static void stack(Context ctx) {\n        final var my-workflow-task = RootlyFunctions.getWorkflowTask(GetWorkflowTaskArgs.builder()\n            .slug(\"my-workflow-task\")\n            .build());\n\n    }\n}\n```\n```yaml\nvariables:\n  my-workflow-task:\n    fn::invoke:\n      Function: rootly:getWorkflowTask\n      Arguments:\n        slug: my-workflow-task\n```\n{{% /example %}}\n{{% /examples %}}",
            "inputs": {
                "description": "A collection of arguments for invoking getWorkflowTask.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "workflowId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "workflowId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getWorkflowTask.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The ID of this resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "slug": {
                        "type": "string"
                    },
                    "workflowId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "id",
                    "name",
                    "slug",
                    "workflowId"
                ]
            }
        }
    }
}