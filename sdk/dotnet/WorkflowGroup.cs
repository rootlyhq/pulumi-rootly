// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly
{
    [RootlyResourceType("rootly:index/workflowGroup:WorkflowGroup")]
    public partial class WorkflowGroup : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A description of the workflow group.
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Whether the group is expanded or collapsed.. Value must be one of true or false
        /// </summary>
        [Output("expanded")]
        public Output<bool> Expanded { get; private set; } = null!;

        /// <summary>
        /// An emoji icon displayed next to the workflow group.
        /// </summary>
        [Output("icon")]
        public Output<string> Icon { get; private set; } = null!;

        /// <summary>
        /// The kind of the workflow group. Value must be one of `simple`, `incident`, `post_mortem`, `action_item`, `pulse`, `alert`.
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// The name of the workflow group.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The position of the workflow group
        /// </summary>
        [Output("position")]
        public Output<int> Position { get; private set; } = null!;

        /// <summary>
        /// The slug of the workflow group.
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;


        /// <summary>
        /// Create a WorkflowGroup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WorkflowGroup(string name, WorkflowGroupArgs? args = null, CustomResourceOptions? options = null)
            : base("rootly:index/workflowGroup:WorkflowGroup", name, args ?? new WorkflowGroupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WorkflowGroup(string name, Input<string> id, WorkflowGroupState? state = null, CustomResourceOptions? options = null)
            : base("rootly:index/workflowGroup:WorkflowGroup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/rootlyhq/pulumi-rootly/releases/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WorkflowGroup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WorkflowGroup Get(string name, Input<string> id, WorkflowGroupState? state = null, CustomResourceOptions? options = null)
        {
            return new WorkflowGroup(name, id, state, options);
        }
    }

    public sealed class WorkflowGroupArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of the workflow group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the group is expanded or collapsed.. Value must be one of true or false
        /// </summary>
        [Input("expanded")]
        public Input<bool>? Expanded { get; set; }

        /// <summary>
        /// An emoji icon displayed next to the workflow group.
        /// </summary>
        [Input("icon")]
        public Input<string>? Icon { get; set; }

        /// <summary>
        /// The kind of the workflow group. Value must be one of `simple`, `incident`, `post_mortem`, `action_item`, `pulse`, `alert`.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The name of the workflow group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The position of the workflow group
        /// </summary>
        [Input("position")]
        public Input<int>? Position { get; set; }

        /// <summary>
        /// The slug of the workflow group.
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public WorkflowGroupArgs()
        {
        }
        public static new WorkflowGroupArgs Empty => new WorkflowGroupArgs();
    }

    public sealed class WorkflowGroupState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of the workflow group.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Whether the group is expanded or collapsed.. Value must be one of true or false
        /// </summary>
        [Input("expanded")]
        public Input<bool>? Expanded { get; set; }

        /// <summary>
        /// An emoji icon displayed next to the workflow group.
        /// </summary>
        [Input("icon")]
        public Input<string>? Icon { get; set; }

        /// <summary>
        /// The kind of the workflow group. Value must be one of `simple`, `incident`, `post_mortem`, `action_item`, `pulse`, `alert`.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The name of the workflow group.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The position of the workflow group
        /// </summary>
        [Input("position")]
        public Input<int>? Position { get; set; }

        /// <summary>
        /// The slug of the workflow group.
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public WorkflowGroupState()
        {
        }
        public static new WorkflowGroupState Empty => new WorkflowGroupState();
    }
}
