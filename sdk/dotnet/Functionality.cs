// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly
{
    /// <summary>
    /// ## Example Usage
    /// </summary>
    [RootlyResourceType("rootly:index/functionality:Functionality")]
    public partial class Functionality : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The hex color of the functionality
        /// </summary>
        [Output("color")]
        public Output<string> Color { get; private set; } = null!;

        /// <summary>
        /// The description of the functionality
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// Environments associated with this functionality
        /// </summary>
        [Output("environmentIds")]
        public Output<ImmutableArray<string>> EnvironmentIds { get; private set; } = null!;

        /// <summary>
        /// The name of the functionality
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Emails attached to the functionality
        /// </summary>
        [Output("notifyEmails")]
        public Output<ImmutableArray<string>> NotifyEmails { get; private set; } = null!;

        /// <summary>
        /// Owner Teams associated with this functionality
        /// </summary>
        [Output("ownersGroupIds")]
        public Output<ImmutableArray<string>> OwnersGroupIds { get; private set; } = null!;

        /// <summary>
        /// Owner Users associated with this service
        /// </summary>
        [Output("ownersUserIds")]
        public Output<ImmutableArray<int>> OwnersUserIds { get; private set; } = null!;

        /// <summary>
        /// Position of the functionality
        /// </summary>
        [Output("position")]
        public Output<int> Position { get; private set; } = null!;

        /// <summary>
        /// The public description of the functionality
        /// </summary>
        [Output("publicDescription")]
        public Output<string> PublicDescription { get; private set; } = null!;

        /// <summary>
        /// Services associated with this functionality
        /// </summary>
        [Output("serviceIds")]
        public Output<ImmutableArray<string>> ServiceIds { get; private set; } = null!;

        /// <summary>
        /// Slack Aliases associated with this service
        /// </summary>
        [Output("slackAliases")]
        public Output<ImmutableArray<Outputs.FunctionalitySlackAlias>> SlackAliases { get; private set; } = null!;

        /// <summary>
        /// Slack Channels associated with this service
        /// </summary>
        [Output("slackChannels")]
        public Output<ImmutableArray<Outputs.FunctionalitySlackChannel>> SlackChannels { get; private set; } = null!;

        /// <summary>
        /// The slug of the functionality
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;


        /// <summary>
        /// Create a Functionality resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Functionality(string name, FunctionalityArgs? args = null, CustomResourceOptions? options = null)
            : base("rootly:index/functionality:Functionality", name, args ?? new FunctionalityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Functionality(string name, Input<string> id, FunctionalityState? state = null, CustomResourceOptions? options = null)
            : base("rootly:index/functionality:Functionality", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/rootlyhq/pulumi-rootly/releases/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Functionality resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Functionality Get(string name, Input<string> id, FunctionalityState? state = null, CustomResourceOptions? options = null)
        {
            return new Functionality(name, id, state, options);
        }
    }

    public sealed class FunctionalityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The hex color of the functionality
        /// </summary>
        [Input("color")]
        public Input<string>? Color { get; set; }

        /// <summary>
        /// The description of the functionality
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("environmentIds")]
        private InputList<string>? _environmentIds;

        /// <summary>
        /// Environments associated with this functionality
        /// </summary>
        public InputList<string> EnvironmentIds
        {
            get => _environmentIds ?? (_environmentIds = new InputList<string>());
            set => _environmentIds = value;
        }

        /// <summary>
        /// The name of the functionality
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifyEmails")]
        private InputList<string>? _notifyEmails;

        /// <summary>
        /// Emails attached to the functionality
        /// </summary>
        public InputList<string> NotifyEmails
        {
            get => _notifyEmails ?? (_notifyEmails = new InputList<string>());
            set => _notifyEmails = value;
        }

        [Input("ownersGroupIds")]
        private InputList<string>? _ownersGroupIds;

        /// <summary>
        /// Owner Teams associated with this functionality
        /// </summary>
        public InputList<string> OwnersGroupIds
        {
            get => _ownersGroupIds ?? (_ownersGroupIds = new InputList<string>());
            set => _ownersGroupIds = value;
        }

        [Input("ownersUserIds")]
        private InputList<int>? _ownersUserIds;

        /// <summary>
        /// Owner Users associated with this service
        /// </summary>
        public InputList<int> OwnersUserIds
        {
            get => _ownersUserIds ?? (_ownersUserIds = new InputList<int>());
            set => _ownersUserIds = value;
        }

        /// <summary>
        /// Position of the functionality
        /// </summary>
        [Input("position")]
        public Input<int>? Position { get; set; }

        /// <summary>
        /// The public description of the functionality
        /// </summary>
        [Input("publicDescription")]
        public Input<string>? PublicDescription { get; set; }

        [Input("serviceIds")]
        private InputList<string>? _serviceIds;

        /// <summary>
        /// Services associated with this functionality
        /// </summary>
        public InputList<string> ServiceIds
        {
            get => _serviceIds ?? (_serviceIds = new InputList<string>());
            set => _serviceIds = value;
        }

        [Input("slackAliases")]
        private InputList<Inputs.FunctionalitySlackAliasArgs>? _slackAliases;

        /// <summary>
        /// Slack Aliases associated with this service
        /// </summary>
        public InputList<Inputs.FunctionalitySlackAliasArgs> SlackAliases
        {
            get => _slackAliases ?? (_slackAliases = new InputList<Inputs.FunctionalitySlackAliasArgs>());
            set => _slackAliases = value;
        }

        [Input("slackChannels")]
        private InputList<Inputs.FunctionalitySlackChannelArgs>? _slackChannels;

        /// <summary>
        /// Slack Channels associated with this service
        /// </summary>
        public InputList<Inputs.FunctionalitySlackChannelArgs> SlackChannels
        {
            get => _slackChannels ?? (_slackChannels = new InputList<Inputs.FunctionalitySlackChannelArgs>());
            set => _slackChannels = value;
        }

        /// <summary>
        /// The slug of the functionality
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public FunctionalityArgs()
        {
        }
        public static new FunctionalityArgs Empty => new FunctionalityArgs();
    }

    public sealed class FunctionalityState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The hex color of the functionality
        /// </summary>
        [Input("color")]
        public Input<string>? Color { get; set; }

        /// <summary>
        /// The description of the functionality
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("environmentIds")]
        private InputList<string>? _environmentIds;

        /// <summary>
        /// Environments associated with this functionality
        /// </summary>
        public InputList<string> EnvironmentIds
        {
            get => _environmentIds ?? (_environmentIds = new InputList<string>());
            set => _environmentIds = value;
        }

        /// <summary>
        /// The name of the functionality
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifyEmails")]
        private InputList<string>? _notifyEmails;

        /// <summary>
        /// Emails attached to the functionality
        /// </summary>
        public InputList<string> NotifyEmails
        {
            get => _notifyEmails ?? (_notifyEmails = new InputList<string>());
            set => _notifyEmails = value;
        }

        [Input("ownersGroupIds")]
        private InputList<string>? _ownersGroupIds;

        /// <summary>
        /// Owner Teams associated with this functionality
        /// </summary>
        public InputList<string> OwnersGroupIds
        {
            get => _ownersGroupIds ?? (_ownersGroupIds = new InputList<string>());
            set => _ownersGroupIds = value;
        }

        [Input("ownersUserIds")]
        private InputList<int>? _ownersUserIds;

        /// <summary>
        /// Owner Users associated with this service
        /// </summary>
        public InputList<int> OwnersUserIds
        {
            get => _ownersUserIds ?? (_ownersUserIds = new InputList<int>());
            set => _ownersUserIds = value;
        }

        /// <summary>
        /// Position of the functionality
        /// </summary>
        [Input("position")]
        public Input<int>? Position { get; set; }

        /// <summary>
        /// The public description of the functionality
        /// </summary>
        [Input("publicDescription")]
        public Input<string>? PublicDescription { get; set; }

        [Input("serviceIds")]
        private InputList<string>? _serviceIds;

        /// <summary>
        /// Services associated with this functionality
        /// </summary>
        public InputList<string> ServiceIds
        {
            get => _serviceIds ?? (_serviceIds = new InputList<string>());
            set => _serviceIds = value;
        }

        [Input("slackAliases")]
        private InputList<Inputs.FunctionalitySlackAliasGetArgs>? _slackAliases;

        /// <summary>
        /// Slack Aliases associated with this service
        /// </summary>
        public InputList<Inputs.FunctionalitySlackAliasGetArgs> SlackAliases
        {
            get => _slackAliases ?? (_slackAliases = new InputList<Inputs.FunctionalitySlackAliasGetArgs>());
            set => _slackAliases = value;
        }

        [Input("slackChannels")]
        private InputList<Inputs.FunctionalitySlackChannelGetArgs>? _slackChannels;

        /// <summary>
        /// Slack Channels associated with this service
        /// </summary>
        public InputList<Inputs.FunctionalitySlackChannelGetArgs> SlackChannels
        {
            get => _slackChannels ?? (_slackChannels = new InputList<Inputs.FunctionalitySlackChannelGetArgs>());
            set => _slackChannels = value;
        }

        /// <summary>
        /// The slug of the functionality
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public FunctionalityState()
        {
        }
        public static new FunctionalityState Empty => new FunctionalityState();
    }
}
