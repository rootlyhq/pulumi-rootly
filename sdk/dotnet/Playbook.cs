// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly
{
    [RootlyResourceType("rootly:index/playbook:Playbook")]
    public partial class Playbook : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The Environment ID's to attach to the incident
        /// </summary>
        [Output("environmentIds")]
        public Output<ImmutableArray<string>> EnvironmentIds { get; private set; } = null!;

        /// <summary>
        /// The external url of the playbook
        /// </summary>
        [Output("externalUrl")]
        public Output<string> ExternalUrl { get; private set; } = null!;

        /// <summary>
        /// The Functionality ID's to attach to the incident
        /// </summary>
        [Output("functionalityIds")]
        public Output<ImmutableArray<string>> FunctionalityIds { get; private set; } = null!;

        /// <summary>
        /// The Team ID's to attach to the incident
        /// </summary>
        [Output("groupIds")]
        public Output<ImmutableArray<string>> GroupIds { get; private set; } = null!;

        /// <summary>
        /// The Incident Type ID's to attach to the incident
        /// </summary>
        [Output("incidentTypeIds")]
        public Output<ImmutableArray<string>> IncidentTypeIds { get; private set; } = null!;

        /// <summary>
        /// The Service ID's to attach to the incident
        /// </summary>
        [Output("serviceIds")]
        public Output<ImmutableArray<string>> ServiceIds { get; private set; } = null!;

        /// <summary>
        /// The Severity ID's to attach to the incident
        /// </summary>
        [Output("severityIds")]
        public Output<ImmutableArray<string>> SeverityIds { get; private set; } = null!;

        /// <summary>
        /// The summary of the playbook
        /// </summary>
        [Output("summary")]
        public Output<string> Summary { get; private set; } = null!;

        /// <summary>
        /// The title of the playbook
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;


        /// <summary>
        /// Create a Playbook resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Playbook(string name, PlaybookArgs args, CustomResourceOptions? options = null)
            : base("rootly:index/playbook:Playbook", name, args ?? new PlaybookArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Playbook(string name, Input<string> id, PlaybookState? state = null, CustomResourceOptions? options = null)
            : base("rootly:index/playbook:Playbook", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/rootlyhq/pulumi-rootly/releases/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Playbook resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Playbook Get(string name, Input<string> id, PlaybookState? state = null, CustomResourceOptions? options = null)
        {
            return new Playbook(name, id, state, options);
        }
    }

    public sealed class PlaybookArgs : global::Pulumi.ResourceArgs
    {
        [Input("environmentIds")]
        private InputList<string>? _environmentIds;

        /// <summary>
        /// The Environment ID's to attach to the incident
        /// </summary>
        public InputList<string> EnvironmentIds
        {
            get => _environmentIds ?? (_environmentIds = new InputList<string>());
            set => _environmentIds = value;
        }

        /// <summary>
        /// The external url of the playbook
        /// </summary>
        [Input("externalUrl")]
        public Input<string>? ExternalUrl { get; set; }

        [Input("functionalityIds")]
        private InputList<string>? _functionalityIds;

        /// <summary>
        /// The Functionality ID's to attach to the incident
        /// </summary>
        public InputList<string> FunctionalityIds
        {
            get => _functionalityIds ?? (_functionalityIds = new InputList<string>());
            set => _functionalityIds = value;
        }

        [Input("groupIds")]
        private InputList<string>? _groupIds;

        /// <summary>
        /// The Team ID's to attach to the incident
        /// </summary>
        public InputList<string> GroupIds
        {
            get => _groupIds ?? (_groupIds = new InputList<string>());
            set => _groupIds = value;
        }

        [Input("incidentTypeIds")]
        private InputList<string>? _incidentTypeIds;

        /// <summary>
        /// The Incident Type ID's to attach to the incident
        /// </summary>
        public InputList<string> IncidentTypeIds
        {
            get => _incidentTypeIds ?? (_incidentTypeIds = new InputList<string>());
            set => _incidentTypeIds = value;
        }

        [Input("serviceIds")]
        private InputList<string>? _serviceIds;

        /// <summary>
        /// The Service ID's to attach to the incident
        /// </summary>
        public InputList<string> ServiceIds
        {
            get => _serviceIds ?? (_serviceIds = new InputList<string>());
            set => _serviceIds = value;
        }

        [Input("severityIds")]
        private InputList<string>? _severityIds;

        /// <summary>
        /// The Severity ID's to attach to the incident
        /// </summary>
        public InputList<string> SeverityIds
        {
            get => _severityIds ?? (_severityIds = new InputList<string>());
            set => _severityIds = value;
        }

        /// <summary>
        /// The summary of the playbook
        /// </summary>
        [Input("summary")]
        public Input<string>? Summary { get; set; }

        /// <summary>
        /// The title of the playbook
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        public PlaybookArgs()
        {
        }
        public static new PlaybookArgs Empty => new PlaybookArgs();
    }

    public sealed class PlaybookState : global::Pulumi.ResourceArgs
    {
        [Input("environmentIds")]
        private InputList<string>? _environmentIds;

        /// <summary>
        /// The Environment ID's to attach to the incident
        /// </summary>
        public InputList<string> EnvironmentIds
        {
            get => _environmentIds ?? (_environmentIds = new InputList<string>());
            set => _environmentIds = value;
        }

        /// <summary>
        /// The external url of the playbook
        /// </summary>
        [Input("externalUrl")]
        public Input<string>? ExternalUrl { get; set; }

        [Input("functionalityIds")]
        private InputList<string>? _functionalityIds;

        /// <summary>
        /// The Functionality ID's to attach to the incident
        /// </summary>
        public InputList<string> FunctionalityIds
        {
            get => _functionalityIds ?? (_functionalityIds = new InputList<string>());
            set => _functionalityIds = value;
        }

        [Input("groupIds")]
        private InputList<string>? _groupIds;

        /// <summary>
        /// The Team ID's to attach to the incident
        /// </summary>
        public InputList<string> GroupIds
        {
            get => _groupIds ?? (_groupIds = new InputList<string>());
            set => _groupIds = value;
        }

        [Input("incidentTypeIds")]
        private InputList<string>? _incidentTypeIds;

        /// <summary>
        /// The Incident Type ID's to attach to the incident
        /// </summary>
        public InputList<string> IncidentTypeIds
        {
            get => _incidentTypeIds ?? (_incidentTypeIds = new InputList<string>());
            set => _incidentTypeIds = value;
        }

        [Input("serviceIds")]
        private InputList<string>? _serviceIds;

        /// <summary>
        /// The Service ID's to attach to the incident
        /// </summary>
        public InputList<string> ServiceIds
        {
            get => _serviceIds ?? (_serviceIds = new InputList<string>());
            set => _serviceIds = value;
        }

        [Input("severityIds")]
        private InputList<string>? _severityIds;

        /// <summary>
        /// The Severity ID's to attach to the incident
        /// </summary>
        public InputList<string> SeverityIds
        {
            get => _severityIds ?? (_severityIds = new InputList<string>());
            set => _severityIds = value;
        }

        /// <summary>
        /// The summary of the playbook
        /// </summary>
        [Input("summary")]
        public Input<string>? Summary { get; set; }

        /// <summary>
        /// The title of the playbook
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        public PlaybookState()
        {
        }
        public static new PlaybookState Empty => new PlaybookState();
    }
}
