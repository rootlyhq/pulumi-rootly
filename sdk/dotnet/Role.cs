// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly
{
    [RootlyResourceType("rootly:index/role:Role")]
    public partial class Role : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("apiKeysPermissions")]
        public Output<ImmutableArray<string>> ApiKeysPermissions { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("auditsPermissions")]
        public Output<ImmutableArray<string>> AuditsPermissions { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("billingPermissions")]
        public Output<ImmutableArray<string>> BillingPermissions { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("environmentsPermissions")]
        public Output<ImmutableArray<string>> EnvironmentsPermissions { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("formFieldsPermissions")]
        public Output<ImmutableArray<string>> FormFieldsPermissions { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("functionalitiesPermissions")]
        public Output<ImmutableArray<string>> FunctionalitiesPermissions { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("groupsPermissions")]
        public Output<ImmutableArray<string>> GroupsPermissions { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("incidentCausesPermissions")]
        public Output<ImmutableArray<string>> IncidentCausesPermissions { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("incidentFeedbacksPermissions")]
        public Output<ImmutableArray<string>> IncidentFeedbacksPermissions { get; private set; } = null!;

        /// <summary>
        /// Associated incident permissions set.
        /// </summary>
        [Output("incidentPermissionSetId")]
        public Output<string> IncidentPermissionSetId { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("incidentRolesPermissions")]
        public Output<ImmutableArray<string>> IncidentRolesPermissions { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("incidentTypesPermissions")]
        public Output<ImmutableArray<string>> IncidentTypesPermissions { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("incidentsPermissions")]
        public Output<ImmutableArray<string>> IncidentsPermissions { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("invitationsPermissions")]
        public Output<ImmutableArray<string>> InvitationsPermissions { get; private set; } = null!;

        /// <summary>
        /// Whether the role can be deleted.. Value must be one of true or false
        /// </summary>
        [Output("isDeletable")]
        public Output<bool> IsDeletable { get; private set; } = null!;

        /// <summary>
        /// Whether the role can be edited.. Value must be one of true or false
        /// </summary>
        [Output("isEditable")]
        public Output<bool> IsEditable { get; private set; } = null!;

        /// <summary>
        /// The role name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("playbooksPermissions")]
        public Output<ImmutableArray<string>> PlaybooksPermissions { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("privateIncidentsPermissions")]
        public Output<ImmutableArray<string>> PrivateIncidentsPermissions { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("retrospectivePermissions")]
        public Output<ImmutableArray<string>> RetrospectivePermissions { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("rolesPermissions")]
        public Output<ImmutableArray<string>> RolesPermissions { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("secretsPermissions")]
        public Output<ImmutableArray<string>> SecretsPermissions { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("servicesPermissions")]
        public Output<ImmutableArray<string>> ServicesPermissions { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("severitiesPermissions")]
        public Output<ImmutableArray<string>> SeveritiesPermissions { get; private set; } = null!;

        /// <summary>
        /// The role slug.
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("statusPagesPermissions")]
        public Output<ImmutableArray<string>> StatusPagesPermissions { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("webhooksPermissions")]
        public Output<ImmutableArray<string>> WebhooksPermissions { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        [Output("workflowsPermissions")]
        public Output<ImmutableArray<string>> WorkflowsPermissions { get; private set; } = null!;


        /// <summary>
        /// Create a Role resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Role(string name, RoleArgs? args = null, CustomResourceOptions? options = null)
            : base("rootly:index/role:Role", name, args ?? new RoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Role(string name, Input<string> id, RoleState? state = null, CustomResourceOptions? options = null)
            : base("rootly:index/role:Role", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/rootlyhq/pulumi-rootly/releases/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Role resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Role Get(string name, Input<string> id, RoleState? state = null, CustomResourceOptions? options = null)
        {
            return new Role(name, id, state, options);
        }
    }

    public sealed class RoleArgs : global::Pulumi.ResourceArgs
    {
        [Input("apiKeysPermissions")]
        private InputList<string>? _apiKeysPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> ApiKeysPermissions
        {
            get => _apiKeysPermissions ?? (_apiKeysPermissions = new InputList<string>());
            set => _apiKeysPermissions = value;
        }

        [Input("auditsPermissions")]
        private InputList<string>? _auditsPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> AuditsPermissions
        {
            get => _auditsPermissions ?? (_auditsPermissions = new InputList<string>());
            set => _auditsPermissions = value;
        }

        [Input("billingPermissions")]
        private InputList<string>? _billingPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> BillingPermissions
        {
            get => _billingPermissions ?? (_billingPermissions = new InputList<string>());
            set => _billingPermissions = value;
        }

        [Input("environmentsPermissions")]
        private InputList<string>? _environmentsPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> EnvironmentsPermissions
        {
            get => _environmentsPermissions ?? (_environmentsPermissions = new InputList<string>());
            set => _environmentsPermissions = value;
        }

        [Input("formFieldsPermissions")]
        private InputList<string>? _formFieldsPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> FormFieldsPermissions
        {
            get => _formFieldsPermissions ?? (_formFieldsPermissions = new InputList<string>());
            set => _formFieldsPermissions = value;
        }

        [Input("functionalitiesPermissions")]
        private InputList<string>? _functionalitiesPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> FunctionalitiesPermissions
        {
            get => _functionalitiesPermissions ?? (_functionalitiesPermissions = new InputList<string>());
            set => _functionalitiesPermissions = value;
        }

        [Input("groupsPermissions")]
        private InputList<string>? _groupsPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> GroupsPermissions
        {
            get => _groupsPermissions ?? (_groupsPermissions = new InputList<string>());
            set => _groupsPermissions = value;
        }

        [Input("incidentCausesPermissions")]
        private InputList<string>? _incidentCausesPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> IncidentCausesPermissions
        {
            get => _incidentCausesPermissions ?? (_incidentCausesPermissions = new InputList<string>());
            set => _incidentCausesPermissions = value;
        }

        [Input("incidentFeedbacksPermissions")]
        private InputList<string>? _incidentFeedbacksPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> IncidentFeedbacksPermissions
        {
            get => _incidentFeedbacksPermissions ?? (_incidentFeedbacksPermissions = new InputList<string>());
            set => _incidentFeedbacksPermissions = value;
        }

        /// <summary>
        /// Associated incident permissions set.
        /// </summary>
        [Input("incidentPermissionSetId")]
        public Input<string>? IncidentPermissionSetId { get; set; }

        [Input("incidentRolesPermissions")]
        private InputList<string>? _incidentRolesPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> IncidentRolesPermissions
        {
            get => _incidentRolesPermissions ?? (_incidentRolesPermissions = new InputList<string>());
            set => _incidentRolesPermissions = value;
        }

        [Input("incidentTypesPermissions")]
        private InputList<string>? _incidentTypesPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> IncidentTypesPermissions
        {
            get => _incidentTypesPermissions ?? (_incidentTypesPermissions = new InputList<string>());
            set => _incidentTypesPermissions = value;
        }

        [Input("incidentsPermissions")]
        private InputList<string>? _incidentsPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> IncidentsPermissions
        {
            get => _incidentsPermissions ?? (_incidentsPermissions = new InputList<string>());
            set => _incidentsPermissions = value;
        }

        [Input("invitationsPermissions")]
        private InputList<string>? _invitationsPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> InvitationsPermissions
        {
            get => _invitationsPermissions ?? (_invitationsPermissions = new InputList<string>());
            set => _invitationsPermissions = value;
        }

        /// <summary>
        /// Whether the role can be deleted.. Value must be one of true or false
        /// </summary>
        [Input("isDeletable")]
        public Input<bool>? IsDeletable { get; set; }

        /// <summary>
        /// Whether the role can be edited.. Value must be one of true or false
        /// </summary>
        [Input("isEditable")]
        public Input<bool>? IsEditable { get; set; }

        /// <summary>
        /// The role name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("playbooksPermissions")]
        private InputList<string>? _playbooksPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> PlaybooksPermissions
        {
            get => _playbooksPermissions ?? (_playbooksPermissions = new InputList<string>());
            set => _playbooksPermissions = value;
        }

        [Input("privateIncidentsPermissions")]
        private InputList<string>? _privateIncidentsPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> PrivateIncidentsPermissions
        {
            get => _privateIncidentsPermissions ?? (_privateIncidentsPermissions = new InputList<string>());
            set => _privateIncidentsPermissions = value;
        }

        [Input("retrospectivePermissions")]
        private InputList<string>? _retrospectivePermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> RetrospectivePermissions
        {
            get => _retrospectivePermissions ?? (_retrospectivePermissions = new InputList<string>());
            set => _retrospectivePermissions = value;
        }

        [Input("rolesPermissions")]
        private InputList<string>? _rolesPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> RolesPermissions
        {
            get => _rolesPermissions ?? (_rolesPermissions = new InputList<string>());
            set => _rolesPermissions = value;
        }

        [Input("secretsPermissions")]
        private InputList<string>? _secretsPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> SecretsPermissions
        {
            get => _secretsPermissions ?? (_secretsPermissions = new InputList<string>());
            set => _secretsPermissions = value;
        }

        [Input("servicesPermissions")]
        private InputList<string>? _servicesPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> ServicesPermissions
        {
            get => _servicesPermissions ?? (_servicesPermissions = new InputList<string>());
            set => _servicesPermissions = value;
        }

        [Input("severitiesPermissions")]
        private InputList<string>? _severitiesPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> SeveritiesPermissions
        {
            get => _severitiesPermissions ?? (_severitiesPermissions = new InputList<string>());
            set => _severitiesPermissions = value;
        }

        /// <summary>
        /// The role slug.
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        [Input("statusPagesPermissions")]
        private InputList<string>? _statusPagesPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> StatusPagesPermissions
        {
            get => _statusPagesPermissions ?? (_statusPagesPermissions = new InputList<string>());
            set => _statusPagesPermissions = value;
        }

        [Input("webhooksPermissions")]
        private InputList<string>? _webhooksPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> WebhooksPermissions
        {
            get => _webhooksPermissions ?? (_webhooksPermissions = new InputList<string>());
            set => _webhooksPermissions = value;
        }

        [Input("workflowsPermissions")]
        private InputList<string>? _workflowsPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> WorkflowsPermissions
        {
            get => _workflowsPermissions ?? (_workflowsPermissions = new InputList<string>());
            set => _workflowsPermissions = value;
        }

        public RoleArgs()
        {
        }
        public static new RoleArgs Empty => new RoleArgs();
    }

    public sealed class RoleState : global::Pulumi.ResourceArgs
    {
        [Input("apiKeysPermissions")]
        private InputList<string>? _apiKeysPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> ApiKeysPermissions
        {
            get => _apiKeysPermissions ?? (_apiKeysPermissions = new InputList<string>());
            set => _apiKeysPermissions = value;
        }

        [Input("auditsPermissions")]
        private InputList<string>? _auditsPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> AuditsPermissions
        {
            get => _auditsPermissions ?? (_auditsPermissions = new InputList<string>());
            set => _auditsPermissions = value;
        }

        [Input("billingPermissions")]
        private InputList<string>? _billingPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> BillingPermissions
        {
            get => _billingPermissions ?? (_billingPermissions = new InputList<string>());
            set => _billingPermissions = value;
        }

        [Input("environmentsPermissions")]
        private InputList<string>? _environmentsPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> EnvironmentsPermissions
        {
            get => _environmentsPermissions ?? (_environmentsPermissions = new InputList<string>());
            set => _environmentsPermissions = value;
        }

        [Input("formFieldsPermissions")]
        private InputList<string>? _formFieldsPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> FormFieldsPermissions
        {
            get => _formFieldsPermissions ?? (_formFieldsPermissions = new InputList<string>());
            set => _formFieldsPermissions = value;
        }

        [Input("functionalitiesPermissions")]
        private InputList<string>? _functionalitiesPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> FunctionalitiesPermissions
        {
            get => _functionalitiesPermissions ?? (_functionalitiesPermissions = new InputList<string>());
            set => _functionalitiesPermissions = value;
        }

        [Input("groupsPermissions")]
        private InputList<string>? _groupsPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> GroupsPermissions
        {
            get => _groupsPermissions ?? (_groupsPermissions = new InputList<string>());
            set => _groupsPermissions = value;
        }

        [Input("incidentCausesPermissions")]
        private InputList<string>? _incidentCausesPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> IncidentCausesPermissions
        {
            get => _incidentCausesPermissions ?? (_incidentCausesPermissions = new InputList<string>());
            set => _incidentCausesPermissions = value;
        }

        [Input("incidentFeedbacksPermissions")]
        private InputList<string>? _incidentFeedbacksPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> IncidentFeedbacksPermissions
        {
            get => _incidentFeedbacksPermissions ?? (_incidentFeedbacksPermissions = new InputList<string>());
            set => _incidentFeedbacksPermissions = value;
        }

        /// <summary>
        /// Associated incident permissions set.
        /// </summary>
        [Input("incidentPermissionSetId")]
        public Input<string>? IncidentPermissionSetId { get; set; }

        [Input("incidentRolesPermissions")]
        private InputList<string>? _incidentRolesPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> IncidentRolesPermissions
        {
            get => _incidentRolesPermissions ?? (_incidentRolesPermissions = new InputList<string>());
            set => _incidentRolesPermissions = value;
        }

        [Input("incidentTypesPermissions")]
        private InputList<string>? _incidentTypesPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> IncidentTypesPermissions
        {
            get => _incidentTypesPermissions ?? (_incidentTypesPermissions = new InputList<string>());
            set => _incidentTypesPermissions = value;
        }

        [Input("incidentsPermissions")]
        private InputList<string>? _incidentsPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> IncidentsPermissions
        {
            get => _incidentsPermissions ?? (_incidentsPermissions = new InputList<string>());
            set => _incidentsPermissions = value;
        }

        [Input("invitationsPermissions")]
        private InputList<string>? _invitationsPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> InvitationsPermissions
        {
            get => _invitationsPermissions ?? (_invitationsPermissions = new InputList<string>());
            set => _invitationsPermissions = value;
        }

        /// <summary>
        /// Whether the role can be deleted.. Value must be one of true or false
        /// </summary>
        [Input("isDeletable")]
        public Input<bool>? IsDeletable { get; set; }

        /// <summary>
        /// Whether the role can be edited.. Value must be one of true or false
        /// </summary>
        [Input("isEditable")]
        public Input<bool>? IsEditable { get; set; }

        /// <summary>
        /// The role name.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("playbooksPermissions")]
        private InputList<string>? _playbooksPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> PlaybooksPermissions
        {
            get => _playbooksPermissions ?? (_playbooksPermissions = new InputList<string>());
            set => _playbooksPermissions = value;
        }

        [Input("privateIncidentsPermissions")]
        private InputList<string>? _privateIncidentsPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> PrivateIncidentsPermissions
        {
            get => _privateIncidentsPermissions ?? (_privateIncidentsPermissions = new InputList<string>());
            set => _privateIncidentsPermissions = value;
        }

        [Input("retrospectivePermissions")]
        private InputList<string>? _retrospectivePermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> RetrospectivePermissions
        {
            get => _retrospectivePermissions ?? (_retrospectivePermissions = new InputList<string>());
            set => _retrospectivePermissions = value;
        }

        [Input("rolesPermissions")]
        private InputList<string>? _rolesPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> RolesPermissions
        {
            get => _rolesPermissions ?? (_rolesPermissions = new InputList<string>());
            set => _rolesPermissions = value;
        }

        [Input("secretsPermissions")]
        private InputList<string>? _secretsPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> SecretsPermissions
        {
            get => _secretsPermissions ?? (_secretsPermissions = new InputList<string>());
            set => _secretsPermissions = value;
        }

        [Input("servicesPermissions")]
        private InputList<string>? _servicesPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> ServicesPermissions
        {
            get => _servicesPermissions ?? (_servicesPermissions = new InputList<string>());
            set => _servicesPermissions = value;
        }

        [Input("severitiesPermissions")]
        private InputList<string>? _severitiesPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> SeveritiesPermissions
        {
            get => _severitiesPermissions ?? (_severitiesPermissions = new InputList<string>());
            set => _severitiesPermissions = value;
        }

        /// <summary>
        /// The role slug.
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        [Input("statusPagesPermissions")]
        private InputList<string>? _statusPagesPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> StatusPagesPermissions
        {
            get => _statusPagesPermissions ?? (_statusPagesPermissions = new InputList<string>());
            set => _statusPagesPermissions = value;
        }

        [Input("webhooksPermissions")]
        private InputList<string>? _webhooksPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> WebhooksPermissions
        {
            get => _webhooksPermissions ?? (_webhooksPermissions = new InputList<string>());
            set => _webhooksPermissions = value;
        }

        [Input("workflowsPermissions")]
        private InputList<string>? _workflowsPermissions;

        /// <summary>
        /// Value must be one of `create`, `read`, `update`, `delete`.
        /// </summary>
        public InputList<string> WorkflowsPermissions
        {
            get => _workflowsPermissions ?? (_workflowsPermissions = new InputList<string>());
            set => _workflowsPermissions = value;
        }

        public RoleState()
        {
        }
        public static new RoleState Empty => new RoleState();
    }
}
