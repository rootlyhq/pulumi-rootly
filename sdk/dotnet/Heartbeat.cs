// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly
{
    [RootlyResourceType("rootly:index/heartbeat:Heartbeat")]
    public partial class Heartbeat : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Summary of alerts triggered when heartbeat expires.
        /// </summary>
        [Output("alertSummary")]
        public Output<string> AlertSummary { get; private set; } = null!;

        /// <summary>
        /// The description of the heartbeat
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// When heartbeat expires
        /// </summary>
        [Output("expiresAt")]
        public Output<string> ExpiresAt { get; private set; } = null!;

        [Output("interval")]
        public Output<int> Interval { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `seconds`, `minutes`, `hours`.
        /// </summary>
        [Output("intervalUnit")]
        public Output<string?> IntervalUnit { get; private set; } = null!;

        /// <summary>
        /// When the heartbeat was last pinged.
        /// </summary>
        [Output("lastPingedAt")]
        public Output<string> LastPingedAt { get; private set; } = null!;

        /// <summary>
        /// The name of the heartbeat
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("notificationTargetId")]
        public Output<string> NotificationTargetId { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `User`, `Group`, `Service`, `EscalationPolicy`.
        /// </summary>
        [Output("notificationTargetType")]
        public Output<string?> NotificationTargetType { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `waiting`, `active`, `expired`.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;


        /// <summary>
        /// Create a Heartbeat resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Heartbeat(string name, HeartbeatArgs args, CustomResourceOptions? options = null)
            : base("rootly:index/heartbeat:Heartbeat", name, args ?? new HeartbeatArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Heartbeat(string name, Input<string> id, HeartbeatState? state = null, CustomResourceOptions? options = null)
            : base("rootly:index/heartbeat:Heartbeat", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/rootlyhq/pulumi-rootly/releases/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Heartbeat resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Heartbeat Get(string name, Input<string> id, HeartbeatState? state = null, CustomResourceOptions? options = null)
        {
            return new Heartbeat(name, id, state, options);
        }
    }

    public sealed class HeartbeatArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Summary of alerts triggered when heartbeat expires.
        /// </summary>
        [Input("alertSummary", required: true)]
        public Input<string> AlertSummary { get; set; } = null!;

        /// <summary>
        /// The description of the heartbeat
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// When heartbeat expires
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        [Input("interval", required: true)]
        public Input<int> Interval { get; set; } = null!;

        /// <summary>
        /// Value must be one of `seconds`, `minutes`, `hours`.
        /// </summary>
        [Input("intervalUnit")]
        public Input<string>? IntervalUnit { get; set; }

        /// <summary>
        /// When the heartbeat was last pinged.
        /// </summary>
        [Input("lastPingedAt")]
        public Input<string>? LastPingedAt { get; set; }

        /// <summary>
        /// The name of the heartbeat
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationTargetId", required: true)]
        public Input<string> NotificationTargetId { get; set; } = null!;

        /// <summary>
        /// Value must be one of `User`, `Group`, `Service`, `EscalationPolicy`.
        /// </summary>
        [Input("notificationTargetType")]
        public Input<string>? NotificationTargetType { get; set; }

        /// <summary>
        /// Value must be one of `waiting`, `active`, `expired`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public HeartbeatArgs()
        {
        }
        public static new HeartbeatArgs Empty => new HeartbeatArgs();
    }

    public sealed class HeartbeatState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Summary of alerts triggered when heartbeat expires.
        /// </summary>
        [Input("alertSummary")]
        public Input<string>? AlertSummary { get; set; }

        /// <summary>
        /// The description of the heartbeat
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// When heartbeat expires
        /// </summary>
        [Input("expiresAt")]
        public Input<string>? ExpiresAt { get; set; }

        [Input("interval")]
        public Input<int>? Interval { get; set; }

        /// <summary>
        /// Value must be one of `seconds`, `minutes`, `hours`.
        /// </summary>
        [Input("intervalUnit")]
        public Input<string>? IntervalUnit { get; set; }

        /// <summary>
        /// When the heartbeat was last pinged.
        /// </summary>
        [Input("lastPingedAt")]
        public Input<string>? LastPingedAt { get; set; }

        /// <summary>
        /// The name of the heartbeat
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notificationTargetId")]
        public Input<string>? NotificationTargetId { get; set; }

        /// <summary>
        /// Value must be one of `User`, `Group`, `Service`, `EscalationPolicy`.
        /// </summary>
        [Input("notificationTargetType")]
        public Input<string>? NotificationTargetType { get; set; }

        /// <summary>
        /// Value must be one of `waiting`, `active`, `expired`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        public HeartbeatState()
        {
        }
        public static new HeartbeatState Empty => new HeartbeatState();
    }
}
