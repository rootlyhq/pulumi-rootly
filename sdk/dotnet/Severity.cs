// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly
{
    /// <summary>
    /// Manages Severities (e.g SEV0, SEV1, SEV2, SEV3).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Rootly = Pulumi.Rootly;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var foo = new Rootly.Severity("foo", new Rootly.SeverityArgs
    ///         {
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import rootly:index/severity:Severity foo 11111111-2222-3333-4444-555555555555
    /// ```
    /// </summary>
    [RootlyResourceType("rootly:index/severity:Severity")]
    public partial class Severity : Pulumi.CustomResource
    {
        /// <summary>
        /// The color of the severity
        /// </summary>
        [Output("color")]
        public Output<string?> Color { get; private set; } = null!;

        /// <summary>
        /// The description of the severity
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the severity
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The description of the severity
        /// </summary>
        [Output("severity")]
        public Output<string?> rootly_severity { get; private set; } = null!;

        /// <summary>
        /// The slug of the severity
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;


        /// <summary>
        /// Create a Severity resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Severity(string name, SeverityArgs? args = null, CustomResourceOptions? options = null)
            : base("rootly:index/severity:Severity", name, args ?? new SeverityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Severity(string name, Input<string> id, SeverityState? state = null, CustomResourceOptions? options = null)
            : base("rootly:index/severity:Severity", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/rootlyhq/pulumi-rootly/releases/${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Severity resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Severity Get(string name, Input<string> id, SeverityState? state = null, CustomResourceOptions? options = null)
        {
            return new Severity(name, id, state, options);
        }
    }

    public sealed class SeverityArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The color of the severity
        /// </summary>
        [Input("color")]
        public Input<string>? Color { get; set; }

        /// <summary>
        /// The description of the severity
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the severity
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The description of the severity
        /// </summary>
        [Input("severity")]
        public Input<string>? rootly_severity { get; set; }

        /// <summary>
        /// The slug of the severity
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public SeverityArgs()
        {
        }
    }

    public sealed class SeverityState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The color of the severity
        /// </summary>
        [Input("color")]
        public Input<string>? Color { get; set; }

        /// <summary>
        /// The description of the severity
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the severity
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The description of the severity
        /// </summary>
        [Input("severity")]
        public Input<string>? rootly_severity { get; set; }

        /// <summary>
        /// The slug of the severity
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public SeverityState()
        {
        }
    }
}
