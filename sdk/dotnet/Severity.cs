// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly
{
    /// <summary>
    /// ## Example Usage
    /// </summary>
    [RootlyResourceType("rootly:index/severity:Severity")]
    public partial class Severity : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The hex color of the severity
        /// </summary>
        [Output("color")]
        public Output<string> Color { get; private set; } = null!;

        /// <summary>
        /// The description of the severity
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the severity
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Emails to attach to the severity
        /// </summary>
        [Output("notifyEmails")]
        public Output<ImmutableArray<string>> NotifyEmails { get; private set; } = null!;

        /// <summary>
        /// Position of the severity
        /// </summary>
        [Output("position")]
        public Output<int> Position { get; private set; } = null!;

        /// <summary>
        /// The severity of the severity. Value must be one of `critical`, `high`, `medium`, `low`.
        /// </summary>
        [Output("severity")]
        public Output<string?> Severity { get; private set; } = null!;

        /// <summary>
        /// Slack Aliases associated with this severity
        /// </summary>
        [Output("slackAliases")]
        public Output<ImmutableArray<Outputs.SeveritySlackAlias>> SlackAliases { get; private set; } = null!;

        /// <summary>
        /// Slack Channels associated with this severity
        /// </summary>
        [Output("slackChannels")]
        public Output<ImmutableArray<Outputs.SeveritySlackChannel>> SlackChannels { get; private set; } = null!;

        /// <summary>
        /// The slug of the severity
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;


        /// <summary>
        /// Create a Severity resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Severity(string name, SeverityArgs? args = null, CustomResourceOptions? options = null)
            : base("rootly:index/severity:Severity", name, args ?? new SeverityArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Severity(string name, Input<string> id, SeverityState? state = null, CustomResourceOptions? options = null)
            : base("rootly:index/severity:Severity", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/rootlyhq/pulumi-rootly/releases/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Severity resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Severity Get(string name, Input<string> id, SeverityState? state = null, CustomResourceOptions? options = null)
        {
            return new Severity(name, id, state, options);
        }
    }

    public sealed class SeverityArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The hex color of the severity
        /// </summary>
        [Input("color")]
        public Input<string>? Color { get; set; }

        /// <summary>
        /// The description of the severity
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the severity
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifyEmails")]
        private InputList<string>? _notifyEmails;

        /// <summary>
        /// Emails to attach to the severity
        /// </summary>
        public InputList<string> NotifyEmails
        {
            get => _notifyEmails ?? (_notifyEmails = new InputList<string>());
            set => _notifyEmails = value;
        }

        /// <summary>
        /// Position of the severity
        /// </summary>
        [Input("position")]
        public Input<int>? Position { get; set; }

        /// <summary>
        /// The severity of the severity. Value must be one of `critical`, `high`, `medium`, `low`.
        /// </summary>
        [Input("severity")]
        public Input<string>? Severity { get; set; }

        [Input("slackAliases")]
        private InputList<Inputs.SeveritySlackAliasArgs>? _slackAliases;

        /// <summary>
        /// Slack Aliases associated with this severity
        /// </summary>
        public InputList<Inputs.SeveritySlackAliasArgs> SlackAliases
        {
            get => _slackAliases ?? (_slackAliases = new InputList<Inputs.SeveritySlackAliasArgs>());
            set => _slackAliases = value;
        }

        [Input("slackChannels")]
        private InputList<Inputs.SeveritySlackChannelArgs>? _slackChannels;

        /// <summary>
        /// Slack Channels associated with this severity
        /// </summary>
        public InputList<Inputs.SeveritySlackChannelArgs> SlackChannels
        {
            get => _slackChannels ?? (_slackChannels = new InputList<Inputs.SeveritySlackChannelArgs>());
            set => _slackChannels = value;
        }

        /// <summary>
        /// The slug of the severity
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public SeverityArgs()
        {
        }
        public static new SeverityArgs Empty => new SeverityArgs();
    }

    public sealed class SeverityState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The hex color of the severity
        /// </summary>
        [Input("color")]
        public Input<string>? Color { get; set; }

        /// <summary>
        /// The description of the severity
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the severity
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifyEmails")]
        private InputList<string>? _notifyEmails;

        /// <summary>
        /// Emails to attach to the severity
        /// </summary>
        public InputList<string> NotifyEmails
        {
            get => _notifyEmails ?? (_notifyEmails = new InputList<string>());
            set => _notifyEmails = value;
        }

        /// <summary>
        /// Position of the severity
        /// </summary>
        [Input("position")]
        public Input<int>? Position { get; set; }

        /// <summary>
        /// The severity of the severity. Value must be one of `critical`, `high`, `medium`, `low`.
        /// </summary>
        [Input("severity")]
        public Input<string>? Severity { get; set; }

        [Input("slackAliases")]
        private InputList<Inputs.SeveritySlackAliasGetArgs>? _slackAliases;

        /// <summary>
        /// Slack Aliases associated with this severity
        /// </summary>
        public InputList<Inputs.SeveritySlackAliasGetArgs> SlackAliases
        {
            get => _slackAliases ?? (_slackAliases = new InputList<Inputs.SeveritySlackAliasGetArgs>());
            set => _slackAliases = value;
        }

        [Input("slackChannels")]
        private InputList<Inputs.SeveritySlackChannelGetArgs>? _slackChannels;

        /// <summary>
        /// Slack Channels associated with this severity
        /// </summary>
        public InputList<Inputs.SeveritySlackChannelGetArgs> SlackChannels
        {
            get => _slackChannels ?? (_slackChannels = new InputList<Inputs.SeveritySlackChannelGetArgs>());
            set => _slackChannels = value;
        }

        /// <summary>
        /// The slug of the severity
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public SeverityState()
        {
        }
        public static new SeverityState Empty => new SeverityState();
    }
}
