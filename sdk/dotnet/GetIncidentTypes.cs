// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly
{
    public static class GetIncidentTypes
    {
        public static Task<GetIncidentTypesResult> InvokeAsync(GetIncidentTypesArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIncidentTypesResult>("rootly:index/getIncidentTypes:getIncidentTypes", args ?? new GetIncidentTypesArgs(), options.WithDefaults());

        public static Output<GetIncidentTypesResult> Invoke(GetIncidentTypesInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIncidentTypesResult>("rootly:index/getIncidentTypes:getIncidentTypes", args ?? new GetIncidentTypesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIncidentTypesArgs : global::Pulumi.InvokeArgs
    {
        [Input("name")]
        public string? Name { get; set; }

        [Input("slug")]
        public string? Slug { get; set; }

        public GetIncidentTypesArgs()
        {
        }
        public static new GetIncidentTypesArgs Empty => new GetIncidentTypesArgs();
    }

    public sealed class GetIncidentTypesInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        public GetIncidentTypesInvokeArgs()
        {
        }
        public static new GetIncidentTypesInvokeArgs Empty => new GetIncidentTypesInvokeArgs();
    }


    [OutputType]
    public sealed class GetIncidentTypesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetIncidentTypesIncidentTypeResult> IncidentTypes;
        public readonly string? Name;
        public readonly string? Slug;

        [OutputConstructor]
        private GetIncidentTypesResult(
            string id,

            ImmutableArray<Outputs.GetIncidentTypesIncidentTypeResult> incidentTypes,

            string? name,

            string? slug)
        {
            Id = id;
            IncidentTypes = incidentTypes;
            Name = name;
            Slug = slug;
        }
    }
}
