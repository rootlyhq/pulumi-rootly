// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly
{
    /// <summary>
    /// ## Example Usage
    /// </summary>
    [RootlyResourceType("rootly:index/formField:FormField")]
    public partial class FormField : global::Pulumi.CustomResource
    {
        [Output("defaultValues")]
        public Output<ImmutableArray<string>> DefaultValues { get; private set; } = null!;

        /// <summary>
        /// The description of the form field
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multi_select`, `date`, `datetime`, `number`, `checkbox`, `tags`, `rich_text`.
        /// </summary>
        [Output("inputKind")]
        public Output<string?> InputKind { get; private set; } = null!;

        /// <summary>
        /// The kind of the form field. Value must be one of `custom`, `title`, `summary`, `mitigation_message`, `resolution_message`, `severity`, `environments`, `types`, `services`, `causes`, `functionalities`, `teams`, `visibility`, `mark_as_test`, `mark_as_backfilled`, `labels`, `notify_emails`, `trigger_manual_workflows`, `show_ongoing_incidents`, `attach_alerts`, `mark_as_in_triage`, `in_triage_at`, `started_at`, `detected_at`, `acknowledged_at`, `mitigated_at`, `resolved_at`, `manual_starting_datetime_field`.
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// The name of the form field
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("requireds")]
        public Output<ImmutableArray<string>> Requireds { get; private set; } = null!;

        /// <summary>
        /// Whether the form field is shown on the incident details panel. Value must be one of true or false
        /// </summary>
        [Output("showOnIncidentDetails")]
        public Output<bool> ShowOnIncidentDetails { get; private set; } = null!;

        [Output("showns")]
        public Output<ImmutableArray<string>> Showns { get; private set; } = null!;

        /// <summary>
        /// The slug of the form field
        /// </summary>
        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// The value kind of the form field. Value must be one of `inherit`, `group`, `service`, `functionality`, `user`.
        /// </summary>
        [Output("valueKind")]
        public Output<string?> ValueKind { get; private set; } = null!;


        /// <summary>
        /// Create a FormField resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FormField(string name, FormFieldArgs? args = null, CustomResourceOptions? options = null)
            : base("rootly:index/formField:FormField", name, args ?? new FormFieldArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FormField(string name, Input<string> id, FormFieldState? state = null, CustomResourceOptions? options = null)
            : base("rootly:index/formField:FormField", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/rootlyhq/pulumi-rootly/releases/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FormField resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FormField Get(string name, Input<string> id, FormFieldState? state = null, CustomResourceOptions? options = null)
        {
            return new FormField(name, id, state, options);
        }
    }

    public sealed class FormFieldArgs : global::Pulumi.ResourceArgs
    {
        [Input("defaultValues")]
        private InputList<string>? _defaultValues;
        public InputList<string> DefaultValues
        {
            get => _defaultValues ?? (_defaultValues = new InputList<string>());
            set => _defaultValues = value;
        }

        /// <summary>
        /// The description of the form field
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multi_select`, `date`, `datetime`, `number`, `checkbox`, `tags`, `rich_text`.
        /// </summary>
        [Input("inputKind")]
        public Input<string>? InputKind { get; set; }

        /// <summary>
        /// The kind of the form field. Value must be one of `custom`, `title`, `summary`, `mitigation_message`, `resolution_message`, `severity`, `environments`, `types`, `services`, `causes`, `functionalities`, `teams`, `visibility`, `mark_as_test`, `mark_as_backfilled`, `labels`, `notify_emails`, `trigger_manual_workflows`, `show_ongoing_incidents`, `attach_alerts`, `mark_as_in_triage`, `in_triage_at`, `started_at`, `detected_at`, `acknowledged_at`, `mitigated_at`, `resolved_at`, `manual_starting_datetime_field`.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The name of the form field
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("requireds")]
        private InputList<string>? _requireds;
        public InputList<string> Requireds
        {
            get => _requireds ?? (_requireds = new InputList<string>());
            set => _requireds = value;
        }

        /// <summary>
        /// Whether the form field is shown on the incident details panel. Value must be one of true or false
        /// </summary>
        [Input("showOnIncidentDetails")]
        public Input<bool>? ShowOnIncidentDetails { get; set; }

        [Input("showns")]
        private InputList<string>? _showns;
        public InputList<string> Showns
        {
            get => _showns ?? (_showns = new InputList<string>());
            set => _showns = value;
        }

        /// <summary>
        /// The slug of the form field
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// The value kind of the form field. Value must be one of `inherit`, `group`, `service`, `functionality`, `user`.
        /// </summary>
        [Input("valueKind")]
        public Input<string>? ValueKind { get; set; }

        public FormFieldArgs()
        {
        }
        public static new FormFieldArgs Empty => new FormFieldArgs();
    }

    public sealed class FormFieldState : global::Pulumi.ResourceArgs
    {
        [Input("defaultValues")]
        private InputList<string>? _defaultValues;
        public InputList<string> DefaultValues
        {
            get => _defaultValues ?? (_defaultValues = new InputList<string>());
            set => _defaultValues = value;
        }

        /// <summary>
        /// The description of the form field
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multi_select`, `date`, `datetime`, `number`, `checkbox`, `tags`, `rich_text`.
        /// </summary>
        [Input("inputKind")]
        public Input<string>? InputKind { get; set; }

        /// <summary>
        /// The kind of the form field. Value must be one of `custom`, `title`, `summary`, `mitigation_message`, `resolution_message`, `severity`, `environments`, `types`, `services`, `causes`, `functionalities`, `teams`, `visibility`, `mark_as_test`, `mark_as_backfilled`, `labels`, `notify_emails`, `trigger_manual_workflows`, `show_ongoing_incidents`, `attach_alerts`, `mark_as_in_triage`, `in_triage_at`, `started_at`, `detected_at`, `acknowledged_at`, `mitigated_at`, `resolved_at`, `manual_starting_datetime_field`.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// The name of the form field
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("requireds")]
        private InputList<string>? _requireds;
        public InputList<string> Requireds
        {
            get => _requireds ?? (_requireds = new InputList<string>());
            set => _requireds = value;
        }

        /// <summary>
        /// Whether the form field is shown on the incident details panel. Value must be one of true or false
        /// </summary>
        [Input("showOnIncidentDetails")]
        public Input<bool>? ShowOnIncidentDetails { get; set; }

        [Input("showns")]
        private InputList<string>? _showns;
        public InputList<string> Showns
        {
            get => _showns ?? (_showns = new InputList<string>());
            set => _showns = value;
        }

        /// <summary>
        /// The slug of the form field
        /// </summary>
        [Input("slug")]
        public Input<string>? Slug { get; set; }

        /// <summary>
        /// The value kind of the form field. Value must be one of `inherit`, `group`, `service`, `functionality`, `user`.
        /// </summary>
        [Input("valueKind")]
        public Input<string>? ValueKind { get; set; }

        public FormFieldState()
        {
        }
        public static new FormFieldState Empty => new FormFieldState();
    }
}
