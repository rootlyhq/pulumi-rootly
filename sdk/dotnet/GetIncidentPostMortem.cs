// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly
{
    public static class GetIncidentPostMortem
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```shell
        /// data "rootly_incident_post_mortem" "my-incident-retrospective" {
        ///   slug = "my-incident-retrospective-slug"
        /// }
        /// ```
        /// </summary>
        public static Task<GetIncidentPostMortemResult> InvokeAsync(GetIncidentPostMortemArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIncidentPostMortemResult>("rootly:index/getIncidentPostMortem:getIncidentPostMortem", args ?? new GetIncidentPostMortemArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```shell
        /// data "rootly_incident_post_mortem" "my-incident-retrospective" {
        ///   slug = "my-incident-retrospective-slug"
        /// }
        /// ```
        /// </summary>
        public static Output<GetIncidentPostMortemResult> Invoke(GetIncidentPostMortemInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIncidentPostMortemResult>("rootly:index/getIncidentPostMortem:getIncidentPostMortem", args ?? new GetIncidentPostMortemInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIncidentPostMortemArgs : global::Pulumi.InvokeArgs
    {
        [Input("createdAt")]
        private Dictionary<string, string>? _createdAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public Dictionary<string, string> CreatedAt
        {
            get => _createdAt ?? (_createdAt = new Dictionary<string, string>());
            set => _createdAt = value;
        }

        [Input("mitigatedAt")]
        private Dictionary<string, string>? _mitigatedAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public Dictionary<string, string> MitigatedAt
        {
            get => _mitigatedAt ?? (_mitigatedAt = new Dictionary<string, string>());
            set => _mitigatedAt = value;
        }

        [Input("resolvedAt")]
        private Dictionary<string, string>? _resolvedAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public Dictionary<string, string> ResolvedAt
        {
            get => _resolvedAt ?? (_resolvedAt = new Dictionary<string, string>());
            set => _resolvedAt = value;
        }

        [Input("startedAt")]
        private Dictionary<string, string>? _startedAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public Dictionary<string, string> StartedAt
        {
            get => _startedAt ?? (_startedAt = new Dictionary<string, string>());
            set => _startedAt = value;
        }

        [Input("status")]
        public string? Status { get; set; }

        public GetIncidentPostMortemArgs()
        {
        }
        public static new GetIncidentPostMortemArgs Empty => new GetIncidentPostMortemArgs();
    }

    public sealed class GetIncidentPostMortemInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("createdAt")]
        private InputMap<string>? _createdAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public InputMap<string> CreatedAt
        {
            get => _createdAt ?? (_createdAt = new InputMap<string>());
            set => _createdAt = value;
        }

        [Input("mitigatedAt")]
        private InputMap<string>? _mitigatedAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public InputMap<string> MitigatedAt
        {
            get => _mitigatedAt ?? (_mitigatedAt = new InputMap<string>());
            set => _mitigatedAt = value;
        }

        [Input("resolvedAt")]
        private InputMap<string>? _resolvedAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public InputMap<string> ResolvedAt
        {
            get => _resolvedAt ?? (_resolvedAt = new InputMap<string>());
            set => _resolvedAt = value;
        }

        [Input("startedAt")]
        private InputMap<string>? _startedAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public InputMap<string> StartedAt
        {
            get => _startedAt ?? (_startedAt = new InputMap<string>());
            set => _startedAt = value;
        }

        [Input("status")]
        public Input<string>? Status { get; set; }

        public GetIncidentPostMortemInvokeArgs()
        {
        }
        public static new GetIncidentPostMortemInvokeArgs Empty => new GetIncidentPostMortemInvokeArgs();
    }


    [OutputType]
    public sealed class GetIncidentPostMortemResult
    {
        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? CreatedAt;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? MitigatedAt;
        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? ResolvedAt;
        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? StartedAt;
        public readonly string Status;

        [OutputConstructor]
        private GetIncidentPostMortemResult(
            ImmutableDictionary<string, string>? createdAt,

            string id,

            ImmutableDictionary<string, string>? mitigatedAt,

            ImmutableDictionary<string, string>? resolvedAt,

            ImmutableDictionary<string, string>? startedAt,

            string status)
        {
            CreatedAt = createdAt;
            Id = id;
            MitigatedAt = mitigatedAt;
            ResolvedAt = resolvedAt;
            StartedAt = startedAt;
            Status = status;
        }
    }
}
