// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly
{
    [RootlyResourceType("rootly:index/authorization:Authorization")]
    public partial class Authorization : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The id of the resource being accessed.
        /// </summary>
        [Output("authorizableId")]
        public Output<string> AuthorizableId { get; private set; } = null!;

        /// <summary>
        /// The type of resource being accessed.. Value must be one of `Dashboard`.
        /// </summary>
        [Output("authorizableType")]
        public Output<string?> AuthorizableType { get; private set; } = null!;

        /// <summary>
        /// The resource id granted access.
        /// </summary>
        [Output("granteeId")]
        public Output<string> GranteeId { get; private set; } = null!;

        /// <summary>
        /// The type of resource granted access.. Value must be one of `User`, `Team`.
        /// </summary>
        [Output("granteeType")]
        public Output<string?> GranteeType { get; private set; } = null!;

        /// <summary>
        /// Value must be one of `read`, `update`, `authorize`, `destroy`.
        /// </summary>
        [Output("permissions")]
        public Output<ImmutableArray<string>> Permissions { get; private set; } = null!;


        /// <summary>
        /// Create a Authorization resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Authorization(string name, AuthorizationArgs args, CustomResourceOptions? options = null)
            : base("rootly:index/authorization:Authorization", name, args ?? new AuthorizationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Authorization(string name, Input<string> id, AuthorizationState? state = null, CustomResourceOptions? options = null)
            : base("rootly:index/authorization:Authorization", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/rootlyhq/pulumi-rootly/releases/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Authorization resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Authorization Get(string name, Input<string> id, AuthorizationState? state = null, CustomResourceOptions? options = null)
        {
            return new Authorization(name, id, state, options);
        }
    }

    public sealed class AuthorizationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the resource being accessed.
        /// </summary>
        [Input("authorizableId", required: true)]
        public Input<string> AuthorizableId { get; set; } = null!;

        /// <summary>
        /// The type of resource being accessed.. Value must be one of `Dashboard`.
        /// </summary>
        [Input("authorizableType")]
        public Input<string>? AuthorizableType { get; set; }

        /// <summary>
        /// The resource id granted access.
        /// </summary>
        [Input("granteeId", required: true)]
        public Input<string> GranteeId { get; set; } = null!;

        /// <summary>
        /// The type of resource granted access.. Value must be one of `User`, `Team`.
        /// </summary>
        [Input("granteeType")]
        public Input<string>? GranteeType { get; set; }

        [Input("permissions", required: true)]
        private InputList<string>? _permissions;

        /// <summary>
        /// Value must be one of `read`, `update`, `authorize`, `destroy`.
        /// </summary>
        public InputList<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        public AuthorizationArgs()
        {
        }
        public static new AuthorizationArgs Empty => new AuthorizationArgs();
    }

    public sealed class AuthorizationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The id of the resource being accessed.
        /// </summary>
        [Input("authorizableId")]
        public Input<string>? AuthorizableId { get; set; }

        /// <summary>
        /// The type of resource being accessed.. Value must be one of `Dashboard`.
        /// </summary>
        [Input("authorizableType")]
        public Input<string>? AuthorizableType { get; set; }

        /// <summary>
        /// The resource id granted access.
        /// </summary>
        [Input("granteeId")]
        public Input<string>? GranteeId { get; set; }

        /// <summary>
        /// The type of resource granted access.. Value must be one of `User`, `Team`.
        /// </summary>
        [Input("granteeType")]
        public Input<string>? GranteeType { get; set; }

        [Input("permissions")]
        private InputList<string>? _permissions;

        /// <summary>
        /// Value must be one of `read`, `update`, `authorize`, `destroy`.
        /// </summary>
        public InputList<string> Permissions
        {
            get => _permissions ?? (_permissions = new InputList<string>());
            set => _permissions = value;
        }

        public AuthorizationState()
        {
        }
        public static new AuthorizationState Empty => new AuthorizationState();
    }
}
