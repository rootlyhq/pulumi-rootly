// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly
{
    [RootlyResourceType("rootly:index/statusPage:StatusPage")]
    public partial class StatusPage : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Allow search engines to include your public status page in search results. Value must be one of true or false
        /// </summary>
        [Output("allowSearchEngineIndex")]
        public Output<bool> AllowSearchEngineIndex { get; private set; } = null!;

        /// <summary>
        /// Enable authentication. Value must be one of true or false
        /// </summary>
        [Output("authenticationEnabled")]
        public Output<bool> AuthenticationEnabled { get; private set; } = null!;

        /// <summary>
        /// Authentication password
        /// </summary>
        [Output("authenticationPassword")]
        public Output<string> AuthenticationPassword { get; private set; } = null!;

        /// <summary>
        /// The description of the status page
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Message showing when at least one component is not operational
        /// </summary>
        [Output("failureMessage")]
        public Output<string> FailureMessage { get; private set; } = null!;

        /// <summary>
        /// The color of the footer. Eg. "#1F2F41"
        /// </summary>
        [Output("footerColor")]
        public Output<string> FooterColor { get; private set; } = null!;

        /// <summary>
        /// Functionalities attached to the status page
        /// </summary>
        [Output("functionalityIds")]
        public Output<ImmutableArray<string>> FunctionalityIds { get; private set; } = null!;

        /// <summary>
        /// Google Analytics tracking ID
        /// </summary>
        [Output("gaTrackingId")]
        public Output<string> GaTrackingId { get; private set; } = null!;

        /// <summary>
        /// The color of the header. Eg. "#0061F2"
        /// </summary>
        [Output("headerColor")]
        public Output<string> HeaderColor { get; private set; } = null!;

        /// <summary>
        /// Make the status page accessible to the public. Value must be one of true or false
        /// </summary>
        [Output("public")]
        public Output<bool> Public { get; private set; } = null!;

        /// <summary>
        /// The public description of the status page
        /// </summary>
        [Output("publicDescription")]
        public Output<string> PublicDescription { get; private set; } = null!;

        /// <summary>
        /// The public title of the status page
        /// </summary>
        [Output("publicTitle")]
        public Output<string> PublicTitle { get; private set; } = null!;

        /// <summary>
        /// Services attached to the status page
        /// </summary>
        [Output("serviceIds")]
        public Output<ImmutableArray<string>> ServiceIds { get; private set; } = null!;

        /// <summary>
        /// Show uptime. Value must be one of true or false
        /// </summary>
        [Output("showUptime")]
        public Output<bool> ShowUptime { get; private set; } = null!;

        /// <summary>
        /// Show uptime over x days. Value must be one of `30`, `60`, `90`, `180`, `360`.
        /// </summary>
        [Output("showUptimeLastDays")]
        public Output<int> ShowUptimeLastDays { get; private set; } = null!;

        /// <summary>
        /// Message showing when all components are operational
        /// </summary>
        [Output("successMessage")]
        public Output<string> SuccessMessage { get; private set; } = null!;

        /// <summary>
        /// A valid IANA time zone name.
        /// </summary>
        [Output("timeZone")]
        public Output<string?> TimeZone { get; private set; } = null!;

        /// <summary>
        /// The title of the status page
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// Website Privacy URL
        /// </summary>
        [Output("websitePrivacyUrl")]
        public Output<string> WebsitePrivacyUrl { get; private set; } = null!;

        /// <summary>
        /// Website Support URL
        /// </summary>
        [Output("websiteSupportUrl")]
        public Output<string> WebsiteSupportUrl { get; private set; } = null!;

        /// <summary>
        /// Website URL
        /// </summary>
        [Output("websiteUrl")]
        public Output<string> WebsiteUrl { get; private set; } = null!;


        /// <summary>
        /// Create a StatusPage resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StatusPage(string name, StatusPageArgs args, CustomResourceOptions? options = null)
            : base("rootly:index/statusPage:StatusPage", name, args ?? new StatusPageArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StatusPage(string name, Input<string> id, StatusPageState? state = null, CustomResourceOptions? options = null)
            : base("rootly:index/statusPage:StatusPage", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/rootlyhq/pulumi-rootly/releases/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StatusPage resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StatusPage Get(string name, Input<string> id, StatusPageState? state = null, CustomResourceOptions? options = null)
        {
            return new StatusPage(name, id, state, options);
        }
    }

    public sealed class StatusPageArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow search engines to include your public status page in search results. Value must be one of true or false
        /// </summary>
        [Input("allowSearchEngineIndex")]
        public Input<bool>? AllowSearchEngineIndex { get; set; }

        /// <summary>
        /// Enable authentication. Value must be one of true or false
        /// </summary>
        [Input("authenticationEnabled")]
        public Input<bool>? AuthenticationEnabled { get; set; }

        /// <summary>
        /// Authentication password
        /// </summary>
        [Input("authenticationPassword")]
        public Input<string>? AuthenticationPassword { get; set; }

        /// <summary>
        /// The description of the status page
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Message showing when at least one component is not operational
        /// </summary>
        [Input("failureMessage")]
        public Input<string>? FailureMessage { get; set; }

        /// <summary>
        /// The color of the footer. Eg. "#1F2F41"
        /// </summary>
        [Input("footerColor")]
        public Input<string>? FooterColor { get; set; }

        [Input("functionalityIds")]
        private InputList<string>? _functionalityIds;

        /// <summary>
        /// Functionalities attached to the status page
        /// </summary>
        public InputList<string> FunctionalityIds
        {
            get => _functionalityIds ?? (_functionalityIds = new InputList<string>());
            set => _functionalityIds = value;
        }

        /// <summary>
        /// Google Analytics tracking ID
        /// </summary>
        [Input("gaTrackingId")]
        public Input<string>? GaTrackingId { get; set; }

        /// <summary>
        /// The color of the header. Eg. "#0061F2"
        /// </summary>
        [Input("headerColor")]
        public Input<string>? HeaderColor { get; set; }

        /// <summary>
        /// Make the status page accessible to the public. Value must be one of true or false
        /// </summary>
        [Input("public")]
        public Input<bool>? Public { get; set; }

        /// <summary>
        /// The public description of the status page
        /// </summary>
        [Input("publicDescription")]
        public Input<string>? PublicDescription { get; set; }

        /// <summary>
        /// The public title of the status page
        /// </summary>
        [Input("publicTitle")]
        public Input<string>? PublicTitle { get; set; }

        [Input("serviceIds")]
        private InputList<string>? _serviceIds;

        /// <summary>
        /// Services attached to the status page
        /// </summary>
        public InputList<string> ServiceIds
        {
            get => _serviceIds ?? (_serviceIds = new InputList<string>());
            set => _serviceIds = value;
        }

        /// <summary>
        /// Show uptime. Value must be one of true or false
        /// </summary>
        [Input("showUptime")]
        public Input<bool>? ShowUptime { get; set; }

        /// <summary>
        /// Show uptime over x days. Value must be one of `30`, `60`, `90`, `180`, `360`.
        /// </summary>
        [Input("showUptimeLastDays")]
        public Input<int>? ShowUptimeLastDays { get; set; }

        /// <summary>
        /// Message showing when all components are operational
        /// </summary>
        [Input("successMessage")]
        public Input<string>? SuccessMessage { get; set; }

        /// <summary>
        /// A valid IANA time zone name.
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        /// <summary>
        /// The title of the status page
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        /// <summary>
        /// Website Privacy URL
        /// </summary>
        [Input("websitePrivacyUrl")]
        public Input<string>? WebsitePrivacyUrl { get; set; }

        /// <summary>
        /// Website Support URL
        /// </summary>
        [Input("websiteSupportUrl")]
        public Input<string>? WebsiteSupportUrl { get; set; }

        /// <summary>
        /// Website URL
        /// </summary>
        [Input("websiteUrl")]
        public Input<string>? WebsiteUrl { get; set; }

        public StatusPageArgs()
        {
        }
        public static new StatusPageArgs Empty => new StatusPageArgs();
    }

    public sealed class StatusPageState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allow search engines to include your public status page in search results. Value must be one of true or false
        /// </summary>
        [Input("allowSearchEngineIndex")]
        public Input<bool>? AllowSearchEngineIndex { get; set; }

        /// <summary>
        /// Enable authentication. Value must be one of true or false
        /// </summary>
        [Input("authenticationEnabled")]
        public Input<bool>? AuthenticationEnabled { get; set; }

        /// <summary>
        /// Authentication password
        /// </summary>
        [Input("authenticationPassword")]
        public Input<string>? AuthenticationPassword { get; set; }

        /// <summary>
        /// The description of the status page
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Message showing when at least one component is not operational
        /// </summary>
        [Input("failureMessage")]
        public Input<string>? FailureMessage { get; set; }

        /// <summary>
        /// The color of the footer. Eg. "#1F2F41"
        /// </summary>
        [Input("footerColor")]
        public Input<string>? FooterColor { get; set; }

        [Input("functionalityIds")]
        private InputList<string>? _functionalityIds;

        /// <summary>
        /// Functionalities attached to the status page
        /// </summary>
        public InputList<string> FunctionalityIds
        {
            get => _functionalityIds ?? (_functionalityIds = new InputList<string>());
            set => _functionalityIds = value;
        }

        /// <summary>
        /// Google Analytics tracking ID
        /// </summary>
        [Input("gaTrackingId")]
        public Input<string>? GaTrackingId { get; set; }

        /// <summary>
        /// The color of the header. Eg. "#0061F2"
        /// </summary>
        [Input("headerColor")]
        public Input<string>? HeaderColor { get; set; }

        /// <summary>
        /// Make the status page accessible to the public. Value must be one of true or false
        /// </summary>
        [Input("public")]
        public Input<bool>? Public { get; set; }

        /// <summary>
        /// The public description of the status page
        /// </summary>
        [Input("publicDescription")]
        public Input<string>? PublicDescription { get; set; }

        /// <summary>
        /// The public title of the status page
        /// </summary>
        [Input("publicTitle")]
        public Input<string>? PublicTitle { get; set; }

        [Input("serviceIds")]
        private InputList<string>? _serviceIds;

        /// <summary>
        /// Services attached to the status page
        /// </summary>
        public InputList<string> ServiceIds
        {
            get => _serviceIds ?? (_serviceIds = new InputList<string>());
            set => _serviceIds = value;
        }

        /// <summary>
        /// Show uptime. Value must be one of true or false
        /// </summary>
        [Input("showUptime")]
        public Input<bool>? ShowUptime { get; set; }

        /// <summary>
        /// Show uptime over x days. Value must be one of `30`, `60`, `90`, `180`, `360`.
        /// </summary>
        [Input("showUptimeLastDays")]
        public Input<int>? ShowUptimeLastDays { get; set; }

        /// <summary>
        /// Message showing when all components are operational
        /// </summary>
        [Input("successMessage")]
        public Input<string>? SuccessMessage { get; set; }

        /// <summary>
        /// A valid IANA time zone name.
        /// </summary>
        [Input("timeZone")]
        public Input<string>? TimeZone { get; set; }

        /// <summary>
        /// The title of the status page
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        /// <summary>
        /// Website Privacy URL
        /// </summary>
        [Input("websitePrivacyUrl")]
        public Input<string>? WebsitePrivacyUrl { get; set; }

        /// <summary>
        /// Website Support URL
        /// </summary>
        [Input("websiteSupportUrl")]
        public Input<string>? WebsiteSupportUrl { get; set; }

        /// <summary>
        /// Website URL
        /// </summary>
        [Input("websiteUrl")]
        public Input<string>? WebsiteUrl { get; set; }

        public StatusPageState()
        {
        }
        public static new StatusPageState Empty => new StatusPageState();
    }
}
