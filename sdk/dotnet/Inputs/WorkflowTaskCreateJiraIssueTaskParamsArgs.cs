// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly.Inputs
{

    public sealed class WorkflowTaskCreateJiraIssueTaskParamsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The assigned user's email
        /// </summary>
        [Input("assignUserEmail")]
        public Input<string>? AssignUserEmail { get; set; }

        /// <summary>
        /// Custom field mappings. Can contain liquid markup and need to be valid JSON
        /// </summary>
        [Input("customFieldsMapping")]
        public Input<string>? CustomFieldsMapping { get; set; }

        /// <summary>
        /// The issue description
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The due date
        /// </summary>
        [Input("dueDate")]
        public Input<string>? DueDate { get; set; }

        [Input("integration")]
        private InputMap<string>? _integration;

        /// <summary>
        /// Map must contain two fields, `id` and `name`. Specify integration id if you have more than one Jira instance
        /// </summary>
        public InputMap<string> Integration
        {
            get => _integration ?? (_integration = new InputMap<string>());
            set => _integration = value;
        }

        [Input("issueType", required: true)]
        private InputMap<string>? _issueType;

        /// <summary>
        /// Map must contain two fields, `id` and `name`. The issue type id and display name
        /// </summary>
        public InputMap<string> IssueType
        {
            get => _issueType ?? (_issueType = new InputMap<string>());
            set => _issueType = value;
        }

        /// <summary>
        /// The issue labels
        /// </summary>
        [Input("labels")]
        public Input<string>? Labels { get; set; }

        [Input("priority")]
        private InputMap<string>? _priority;

        /// <summary>
        /// Map must contain two fields, `id` and `name`. The priority id and display name
        /// </summary>
        public InputMap<string> Priority
        {
            get => _priority ?? (_priority = new InputMap<string>());
            set => _priority = value;
        }

        /// <summary>
        /// The project key
        /// </summary>
        [Input("projectKey", required: true)]
        public Input<string> ProjectKey { get; set; } = null!;

        /// <summary>
        /// The reporter user's email
        /// </summary>
        [Input("reporterUserEmail")]
        public Input<string>? ReporterUserEmail { get; set; }

        [Input("status")]
        private InputMap<string>? _status;

        /// <summary>
        /// Map must contain two fields, `id` and `name`. The status id and display name
        /// </summary>
        public InputMap<string> Status
        {
            get => _status ?? (_status = new InputMap<string>());
            set => _status = value;
        }

        [Input("taskType")]
        public Input<string>? TaskType { get; set; }

        /// <summary>
        /// The issue title
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        /// <summary>
        /// Update payload. Can contain liquid markup and need to be valid JSON
        /// </summary>
        [Input("updatePayload")]
        public Input<string>? UpdatePayload { get; set; }

        public WorkflowTaskCreateJiraIssueTaskParamsArgs()
        {
        }
        public static new WorkflowTaskCreateJiraIssueTaskParamsArgs Empty => new WorkflowTaskCreateJiraIssueTaskParamsArgs();
    }
}
