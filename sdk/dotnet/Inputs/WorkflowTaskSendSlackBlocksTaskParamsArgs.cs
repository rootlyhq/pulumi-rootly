// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly.Inputs
{

    public sealed class WorkflowTaskSendSlackBlocksTaskParamsArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Support liquid markup. Needs to be a valid JSON string after liquid is parsed
        /// </summary>
        [Input("attachments")]
        public Input<string>? Attachments { get; set; }

        /// <summary>
        /// Support liquid markup. Needs to be a valid JSON string after liquid is parsed
        /// </summary>
        [Input("blocks", required: true)]
        public Input<string> Blocks { get; set; } = null!;

        /// <summary>
        /// Value must be one of true or false
        /// </summary>
        [Input("broadcastThreadReplyToChannel")]
        public Input<bool>? BroadcastThreadReplyToChannel { get; set; }

        [Input("channels")]
        private InputList<Inputs.WorkflowTaskSendSlackBlocksTaskParamsChannelArgs>? _channels;
        public InputList<Inputs.WorkflowTaskSendSlackBlocksTaskParamsChannelArgs> Channels
        {
            get => _channels ?? (_channels = new InputList<Inputs.WorkflowTaskSendSlackBlocksTaskParamsChannelArgs>());
            set => _channels = value;
        }

        [Input("message")]
        public Input<string>? Message { get; set; }

        [Input("parentMessageThreadTask")]
        private InputMap<string>? _parentMessageThreadTask;

        /// <summary>
        /// Map must contain two fields, `id` and `name`. A hash where [id] is the task id of the parent task that sent a message, and [name] is the name of the parent task
        /// </summary>
        public InputMap<string> ParentMessageThreadTask
        {
            get => _parentMessageThreadTask ?? (_parentMessageThreadTask = new InputMap<string>());
            set => _parentMessageThreadTask = value;
        }

        /// <summary>
        /// Value must be one of true or false
        /// </summary>
        [Input("pinToChannel")]
        public Input<bool>? PinToChannel { get; set; }

        /// <summary>
        /// Value must be one of true or false
        /// </summary>
        [Input("sendAsEphemeral")]
        public Input<bool>? SendAsEphemeral { get; set; }

        /// <summary>
        /// When set to true, if the parent for this threaded message cannot be found the message will be skipped.. Value must be one of true or false
        /// </summary>
        [Input("sendOnlyAsThreadedMessage")]
        public Input<bool>? SendOnlyAsThreadedMessage { get; set; }

        [Input("slackUserGroups")]
        private InputList<Inputs.WorkflowTaskSendSlackBlocksTaskParamsSlackUserGroupArgs>? _slackUserGroups;
        public InputList<Inputs.WorkflowTaskSendSlackBlocksTaskParamsSlackUserGroupArgs> SlackUserGroups
        {
            get => _slackUserGroups ?? (_slackUserGroups = new InputList<Inputs.WorkflowTaskSendSlackBlocksTaskParamsSlackUserGroupArgs>());
            set => _slackUserGroups = value;
        }

        [Input("slackUsers")]
        private InputList<Inputs.WorkflowTaskSendSlackBlocksTaskParamsSlackUserArgs>? _slackUsers;
        public InputList<Inputs.WorkflowTaskSendSlackBlocksTaskParamsSlackUserArgs> SlackUsers
        {
            get => _slackUsers ?? (_slackUsers = new InputList<Inputs.WorkflowTaskSendSlackBlocksTaskParamsSlackUserArgs>());
            set => _slackUsers = value;
        }

        [Input("taskType")]
        public Input<string>? TaskType { get; set; }

        /// <summary>
        /// Value must be one of true or false
        /// </summary>
        [Input("updateParentMessage")]
        public Input<bool>? UpdateParentMessage { get; set; }

        public WorkflowTaskSendSlackBlocksTaskParamsArgs()
        {
        }
        public static new WorkflowTaskSendSlackBlocksTaskParamsArgs Empty => new WorkflowTaskSendSlackBlocksTaskParamsArgs();
    }
}
