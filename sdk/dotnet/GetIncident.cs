// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly
{
    public static class GetIncident
    {
        /// <summary>
        /// ## Example Usage
        /// 
        /// ```shell
        /// data "rootly_incident" "my-incident" {
        ///   slug = "my-incident-slug"
        /// }
        /// ```
        /// </summary>
        public static Task<GetIncidentResult> InvokeAsync(GetIncidentArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetIncidentResult>("rootly:index/getIncident:getIncident", args ?? new GetIncidentArgs(), options.WithDefaults());

        /// <summary>
        /// ## Example Usage
        /// 
        /// ```shell
        /// data "rootly_incident" "my-incident" {
        ///   slug = "my-incident-slug"
        /// }
        /// ```
        /// </summary>
        public static Output<GetIncidentResult> Invoke(GetIncidentInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetIncidentResult>("rootly:index/getIncident:getIncident", args ?? new GetIncidentInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetIncidentArgs : global::Pulumi.InvokeArgs
    {
        [Input("acknowledgedAt")]
        private Dictionary<string, string>? _acknowledgedAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public Dictionary<string, string> AcknowledgedAt
        {
            get => _acknowledgedAt ?? (_acknowledgedAt = new Dictionary<string, string>());
            set => _acknowledgedAt = value;
        }

        [Input("createdAt")]
        private Dictionary<string, string>? _createdAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public Dictionary<string, string> CreatedAt
        {
            get => _createdAt ?? (_createdAt = new Dictionary<string, string>());
            set => _createdAt = value;
        }

        [Input("detectedAt")]
        private Dictionary<string, string>? _detectedAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public Dictionary<string, string> DetectedAt
        {
            get => _detectedAt ?? (_detectedAt = new Dictionary<string, string>());
            set => _detectedAt = value;
        }

        [Input("environments")]
        public string? Environments { get; set; }

        [Input("functionalities")]
        public string? Functionalities { get; set; }

        [Input("inTriageAt")]
        private Dictionary<string, string>? _inTriageAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public Dictionary<string, string> InTriageAt
        {
            get => _inTriageAt ?? (_inTriageAt = new Dictionary<string, string>());
            set => _inTriageAt = value;
        }

        [Input("kind")]
        public string? Kind { get; set; }

        [Input("labels")]
        public string? Labels { get; set; }

        [Input("mitigatedAt")]
        private Dictionary<string, string>? _mitigatedAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public Dictionary<string, string> MitigatedAt
        {
            get => _mitigatedAt ?? (_mitigatedAt = new Dictionary<string, string>());
            set => _mitigatedAt = value;
        }

        [Input("private")]
        public bool? Private { get; set; }

        [Input("resolvedAt")]
        private Dictionary<string, string>? _resolvedAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public Dictionary<string, string> ResolvedAt
        {
            get => _resolvedAt ?? (_resolvedAt = new Dictionary<string, string>());
            set => _resolvedAt = value;
        }

        [Input("services")]
        public string? Services { get; set; }

        [Input("severity")]
        public string? Severity { get; set; }

        [Input("startedAt")]
        private Dictionary<string, string>? _startedAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public Dictionary<string, string> StartedAt
        {
            get => _startedAt ?? (_startedAt = new Dictionary<string, string>());
            set => _startedAt = value;
        }

        [Input("updatedAt")]
        private Dictionary<string, string>? _updatedAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public Dictionary<string, string> UpdatedAt
        {
            get => _updatedAt ?? (_updatedAt = new Dictionary<string, string>());
            set => _updatedAt = value;
        }

        public GetIncidentArgs()
        {
        }
        public static new GetIncidentArgs Empty => new GetIncidentArgs();
    }

    public sealed class GetIncidentInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("acknowledgedAt")]
        private InputMap<string>? _acknowledgedAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public InputMap<string> AcknowledgedAt
        {
            get => _acknowledgedAt ?? (_acknowledgedAt = new InputMap<string>());
            set => _acknowledgedAt = value;
        }

        [Input("createdAt")]
        private InputMap<string>? _createdAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public InputMap<string> CreatedAt
        {
            get => _createdAt ?? (_createdAt = new InputMap<string>());
            set => _createdAt = value;
        }

        [Input("detectedAt")]
        private InputMap<string>? _detectedAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public InputMap<string> DetectedAt
        {
            get => _detectedAt ?? (_detectedAt = new InputMap<string>());
            set => _detectedAt = value;
        }

        [Input("environments")]
        public Input<string>? Environments { get; set; }

        [Input("functionalities")]
        public Input<string>? Functionalities { get; set; }

        [Input("inTriageAt")]
        private InputMap<string>? _inTriageAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public InputMap<string> InTriageAt
        {
            get => _inTriageAt ?? (_inTriageAt = new InputMap<string>());
            set => _inTriageAt = value;
        }

        [Input("kind")]
        public Input<string>? Kind { get; set; }

        [Input("labels")]
        public Input<string>? Labels { get; set; }

        [Input("mitigatedAt")]
        private InputMap<string>? _mitigatedAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public InputMap<string> MitigatedAt
        {
            get => _mitigatedAt ?? (_mitigatedAt = new InputMap<string>());
            set => _mitigatedAt = value;
        }

        [Input("private")]
        public Input<bool>? Private { get; set; }

        [Input("resolvedAt")]
        private InputMap<string>? _resolvedAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public InputMap<string> ResolvedAt
        {
            get => _resolvedAt ?? (_resolvedAt = new InputMap<string>());
            set => _resolvedAt = value;
        }

        [Input("services")]
        public Input<string>? Services { get; set; }

        [Input("severity")]
        public Input<string>? Severity { get; set; }

        [Input("startedAt")]
        private InputMap<string>? _startedAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public InputMap<string> StartedAt
        {
            get => _startedAt ?? (_startedAt = new InputMap<string>());
            set => _startedAt = value;
        }

        [Input("updatedAt")]
        private InputMap<string>? _updatedAt;

        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public InputMap<string> UpdatedAt
        {
            get => _updatedAt ?? (_updatedAt = new InputMap<string>());
            set => _updatedAt = value;
        }

        public GetIncidentInvokeArgs()
        {
        }
        public static new GetIncidentInvokeArgs Empty => new GetIncidentInvokeArgs();
    }


    [OutputType]
    public sealed class GetIncidentResult
    {
        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? AcknowledgedAt;
        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? CreatedAt;
        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? DetectedAt;
        public readonly string Environments;
        public readonly string Functionalities;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? InTriageAt;
        public readonly string Kind;
        public readonly string Labels;
        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? MitigatedAt;
        public readonly bool Private;
        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? ResolvedAt;
        public readonly string Services;
        public readonly string Severity;
        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? StartedAt;
        /// <summary>
        /// Filter by date range using 'lt' and 'gt'.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? UpdatedAt;

        [OutputConstructor]
        private GetIncidentResult(
            ImmutableDictionary<string, string>? acknowledgedAt,

            ImmutableDictionary<string, string>? createdAt,

            ImmutableDictionary<string, string>? detectedAt,

            string environments,

            string functionalities,

            string id,

            ImmutableDictionary<string, string>? inTriageAt,

            string kind,

            string labels,

            ImmutableDictionary<string, string>? mitigatedAt,

            bool @private,

            ImmutableDictionary<string, string>? resolvedAt,

            string services,

            string severity,

            ImmutableDictionary<string, string>? startedAt,

            ImmutableDictionary<string, string>? updatedAt)
        {
            AcknowledgedAt = acknowledgedAt;
            CreatedAt = createdAt;
            DetectedAt = detectedAt;
            Environments = environments;
            Functionalities = functionalities;
            Id = id;
            InTriageAt = inTriageAt;
            Kind = kind;
            Labels = labels;
            MitigatedAt = mitigatedAt;
            Private = @private;
            ResolvedAt = resolvedAt;
            Services = services;
            Severity = severity;
            StartedAt = startedAt;
            UpdatedAt = updatedAt;
        }
    }
}
