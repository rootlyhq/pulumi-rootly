// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly
{
    [RootlyResourceType("rootly:index/team:Team")]
    public partial class Team : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The hex color of the team
        /// </summary>
        [Output("color")]
        public Output<string> Color { get; private set; } = null!;

        /// <summary>
        /// The description of the team
        /// </summary>
        [Output("description")]
        public Output<string> Description { get; private set; } = null!;

        /// <summary>
        /// The name of the team
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Emails to attach to the team
        /// </summary>
        [Output("notifyEmails")]
        public Output<ImmutableArray<string>> NotifyEmails { get; private set; } = null!;

        /// <summary>
        /// The Opsgenie group id associated to this team
        /// </summary>
        [Output("opsgenieId")]
        public Output<string> OpsgenieId { get; private set; } = null!;

        /// <summary>
        /// The PagerDuty group id associated to this team
        /// </summary>
        [Output("pagerdutyId")]
        public Output<string> PagerdutyId { get; private set; } = null!;

        /// <summary>
        /// The PagerDuty service id associated to this team
        /// </summary>
        [Output("pagerdutyServiceId")]
        public Output<string> PagerdutyServiceId { get; private set; } = null!;

        /// <summary>
        /// The PagerTree group id associated to this team
        /// </summary>
        [Output("pagertreeId")]
        public Output<string> PagertreeId { get; private set; } = null!;

        /// <summary>
        /// Position of the team
        /// </summary>
        [Output("position")]
        public Output<int> Position { get; private set; } = null!;

        /// <summary>
        /// Slack Aliases associated with this service
        /// </summary>
        [Output("slackAliases")]
        public Output<ImmutableArray<Outputs.TeamSlackAlias>> SlackAliases { get; private set; } = null!;

        /// <summary>
        /// Slack Channels associated with this service
        /// </summary>
        [Output("slackChannels")]
        public Output<ImmutableArray<Outputs.TeamSlackChannel>> SlackChannels { get; private set; } = null!;

        [Output("slug")]
        public Output<string> Slug { get; private set; } = null!;

        /// <summary>
        /// The User ID's members of this team
        /// </summary>
        [Output("userIds")]
        public Output<ImmutableArray<int>> UserIds { get; private set; } = null!;

        /// <summary>
        /// The VictorOps group id associated to this team
        /// </summary>
        [Output("victorOpsId")]
        public Output<string> VictorOpsId { get; private set; } = null!;


        /// <summary>
        /// Create a Team resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Team(string name, TeamArgs? args = null, CustomResourceOptions? options = null)
            : base("rootly:index/team:Team", name, args ?? new TeamArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Team(string name, Input<string> id, TeamState? state = null, CustomResourceOptions? options = null)
            : base("rootly:index/team:Team", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/rootlyhq/pulumi-rootly/releases/v${VERSION}",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Team resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Team Get(string name, Input<string> id, TeamState? state = null, CustomResourceOptions? options = null)
        {
            return new Team(name, id, state, options);
        }
    }

    public sealed class TeamArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The hex color of the team
        /// </summary>
        [Input("color")]
        public Input<string>? Color { get; set; }

        /// <summary>
        /// The description of the team
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the team
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifyEmails")]
        private InputList<string>? _notifyEmails;

        /// <summary>
        /// Emails to attach to the team
        /// </summary>
        public InputList<string> NotifyEmails
        {
            get => _notifyEmails ?? (_notifyEmails = new InputList<string>());
            set => _notifyEmails = value;
        }

        /// <summary>
        /// The Opsgenie group id associated to this team
        /// </summary>
        [Input("opsgenieId")]
        public Input<string>? OpsgenieId { get; set; }

        /// <summary>
        /// The PagerDuty group id associated to this team
        /// </summary>
        [Input("pagerdutyId")]
        public Input<string>? PagerdutyId { get; set; }

        /// <summary>
        /// The PagerDuty service id associated to this team
        /// </summary>
        [Input("pagerdutyServiceId")]
        public Input<string>? PagerdutyServiceId { get; set; }

        /// <summary>
        /// The PagerTree group id associated to this team
        /// </summary>
        [Input("pagertreeId")]
        public Input<string>? PagertreeId { get; set; }

        /// <summary>
        /// Position of the team
        /// </summary>
        [Input("position")]
        public Input<int>? Position { get; set; }

        [Input("slackAliases")]
        private InputList<Inputs.TeamSlackAliasArgs>? _slackAliases;

        /// <summary>
        /// Slack Aliases associated with this service
        /// </summary>
        public InputList<Inputs.TeamSlackAliasArgs> SlackAliases
        {
            get => _slackAliases ?? (_slackAliases = new InputList<Inputs.TeamSlackAliasArgs>());
            set => _slackAliases = value;
        }

        [Input("slackChannels")]
        private InputList<Inputs.TeamSlackChannelArgs>? _slackChannels;

        /// <summary>
        /// Slack Channels associated with this service
        /// </summary>
        public InputList<Inputs.TeamSlackChannelArgs> SlackChannels
        {
            get => _slackChannels ?? (_slackChannels = new InputList<Inputs.TeamSlackChannelArgs>());
            set => _slackChannels = value;
        }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        [Input("userIds")]
        private InputList<int>? _userIds;

        /// <summary>
        /// The User ID's members of this team
        /// </summary>
        public InputList<int> UserIds
        {
            get => _userIds ?? (_userIds = new InputList<int>());
            set => _userIds = value;
        }

        /// <summary>
        /// The VictorOps group id associated to this team
        /// </summary>
        [Input("victorOpsId")]
        public Input<string>? VictorOpsId { get; set; }

        public TeamArgs()
        {
        }
        public static new TeamArgs Empty => new TeamArgs();
    }

    public sealed class TeamState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The hex color of the team
        /// </summary>
        [Input("color")]
        public Input<string>? Color { get; set; }

        /// <summary>
        /// The description of the team
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The name of the team
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifyEmails")]
        private InputList<string>? _notifyEmails;

        /// <summary>
        /// Emails to attach to the team
        /// </summary>
        public InputList<string> NotifyEmails
        {
            get => _notifyEmails ?? (_notifyEmails = new InputList<string>());
            set => _notifyEmails = value;
        }

        /// <summary>
        /// The Opsgenie group id associated to this team
        /// </summary>
        [Input("opsgenieId")]
        public Input<string>? OpsgenieId { get; set; }

        /// <summary>
        /// The PagerDuty group id associated to this team
        /// </summary>
        [Input("pagerdutyId")]
        public Input<string>? PagerdutyId { get; set; }

        /// <summary>
        /// The PagerDuty service id associated to this team
        /// </summary>
        [Input("pagerdutyServiceId")]
        public Input<string>? PagerdutyServiceId { get; set; }

        /// <summary>
        /// The PagerTree group id associated to this team
        /// </summary>
        [Input("pagertreeId")]
        public Input<string>? PagertreeId { get; set; }

        /// <summary>
        /// Position of the team
        /// </summary>
        [Input("position")]
        public Input<int>? Position { get; set; }

        [Input("slackAliases")]
        private InputList<Inputs.TeamSlackAliasGetArgs>? _slackAliases;

        /// <summary>
        /// Slack Aliases associated with this service
        /// </summary>
        public InputList<Inputs.TeamSlackAliasGetArgs> SlackAliases
        {
            get => _slackAliases ?? (_slackAliases = new InputList<Inputs.TeamSlackAliasGetArgs>());
            set => _slackAliases = value;
        }

        [Input("slackChannels")]
        private InputList<Inputs.TeamSlackChannelGetArgs>? _slackChannels;

        /// <summary>
        /// Slack Channels associated with this service
        /// </summary>
        public InputList<Inputs.TeamSlackChannelGetArgs> SlackChannels
        {
            get => _slackChannels ?? (_slackChannels = new InputList<Inputs.TeamSlackChannelGetArgs>());
            set => _slackChannels = value;
        }

        [Input("slug")]
        public Input<string>? Slug { get; set; }

        [Input("userIds")]
        private InputList<int>? _userIds;

        /// <summary>
        /// The User ID's members of this team
        /// </summary>
        public InputList<int> UserIds
        {
            get => _userIds ?? (_userIds = new InputList<int>());
            set => _userIds = value;
        }

        /// <summary>
        /// The VictorOps group id associated to this team
        /// </summary>
        [Input("victorOpsId")]
        public Input<string>? VictorOpsId { get; set; }

        public TeamState()
        {
        }
        public static new TeamState Empty => new TeamState();
    }
}
