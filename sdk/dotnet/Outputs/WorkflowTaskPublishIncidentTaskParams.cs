// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly.Outputs
{

    [OutputType]
    public sealed class WorkflowTaskPublishIncidentTaskParams
    {
        /// <summary>
        /// Incident event description
        /// </summary>
        public readonly string? Event;
        /// <summary>
        /// Map must contain two fields, `id` and `name`.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Incident;
        /// <summary>
        /// Additional API Payload you can pass to statuspage.io for example. Can contain liquid markup and need to be valid JSON
        /// </summary>
        public readonly string? IntegrationPayload;
        /// <summary>
        /// When true notifies subscribers of the status page by email/text. Value must be one of true or false
        /// </summary>
        public readonly bool? NotifySubscribers;
        public readonly string PublicTitle;
        /// <summary>
        /// For Statuspage.io integrated pages auto publishes a tweet for your update. Value must be one of true or false
        /// </summary>
        public readonly bool? ShouldTweet;
        /// <summary>
        /// Value must be one of `investigating`, `identified`, `monitoring`, `resolved`, `scheduled`, `in_progress`, `verifying`, `completed`.
        /// </summary>
        public readonly string Status;
        public readonly string StatusPageId;
        /// <summary>
        /// Map must contain two fields, `id` and `name`.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? StatusPageTemplate;
        public readonly string? TaskType;

        [OutputConstructor]
        private WorkflowTaskPublishIncidentTaskParams(
            string? @event,

            ImmutableDictionary<string, string> incident,

            string? integrationPayload,

            bool? notifySubscribers,

            string publicTitle,

            bool? shouldTweet,

            string status,

            string statusPageId,

            ImmutableDictionary<string, string>? statusPageTemplate,

            string? taskType)
        {
            Event = @event;
            Incident = incident;
            IntegrationPayload = integrationPayload;
            NotifySubscribers = notifySubscribers;
            PublicTitle = publicTitle;
            ShouldTweet = shouldTweet;
            Status = status;
            StatusPageId = statusPageId;
            StatusPageTemplate = statusPageTemplate;
            TaskType = taskType;
        }
    }
}
