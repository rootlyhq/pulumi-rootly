// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly.Outputs
{

    [OutputType]
    public sealed class WorkflowTaskCreateZendeskTicketTaskParams
    {
        /// <summary>
        /// The ticket comment
        /// </summary>
        public readonly string? Comment;
        /// <summary>
        /// Map must contain two fields, `id` and `name`. The completion id and display name
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Completion;
        /// <summary>
        /// Custom field mappings. Can contain liquid markup and need to be valid JSON
        /// </summary>
        public readonly string? CustomFieldsMapping;
        /// <summary>
        /// Value must be one of `problem`, `incident`, `question`, `task`.
        /// </summary>
        public readonly string Kind;
        /// <summary>
        /// Map must contain two fields, `id` and `name`. The priority id and display name
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Priority;
        /// <summary>
        /// The ticket subject
        /// </summary>
        public readonly string Subject;
        /// <summary>
        /// The ticket tags
        /// </summary>
        public readonly string? Tags;
        public readonly string? TaskType;
        /// <summary>
        /// Additional Zendesk ticket attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON
        /// </summary>
        public readonly string? TicketPayload;

        [OutputConstructor]
        private WorkflowTaskCreateZendeskTicketTaskParams(
            string? comment,

            ImmutableDictionary<string, string>? completion,

            string? customFieldsMapping,

            string kind,

            ImmutableDictionary<string, string>? priority,

            string subject,

            string? tags,

            string? taskType,

            string? ticketPayload)
        {
            Comment = comment;
            Completion = completion;
            CustomFieldsMapping = customFieldsMapping;
            Kind = kind;
            Priority = priority;
            Subject = subject;
            Tags = tags;
            TaskType = taskType;
            TicketPayload = ticketPayload;
        }
    }
}
