// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly.Outputs
{

    [OutputType]
    public sealed class WorkflowTaskInviteToSlackChannelRootlyTaskParams
    {
        public readonly ImmutableArray<Outputs.WorkflowTaskInviteToSlackChannelRootlyTaskParamsChannel> Channels;
        /// <summary>
        /// Map must contain two fields, `id` and `name`.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? EscalationPolicyTarget;
        /// <summary>
        /// Map must contain two fields, `id` and `name`.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? GroupTarget;
        /// <summary>
        /// Map must contain two fields, `id` and `name`.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? ScheduleTarget;
        /// <summary>
        /// Map must contain two fields, `id` and `name`.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? ServiceTarget;
        public readonly string? TaskType;
        /// <summary>
        /// Map must contain two fields, `id` and `name`.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? UserTarget;

        [OutputConstructor]
        private WorkflowTaskInviteToSlackChannelRootlyTaskParams(
            ImmutableArray<Outputs.WorkflowTaskInviteToSlackChannelRootlyTaskParamsChannel> channels,

            ImmutableDictionary<string, string>? escalationPolicyTarget,

            ImmutableDictionary<string, string>? groupTarget,

            ImmutableDictionary<string, string>? scheduleTarget,

            ImmutableDictionary<string, string>? serviceTarget,

            string? taskType,

            ImmutableDictionary<string, string>? userTarget)
        {
            Channels = channels;
            EscalationPolicyTarget = escalationPolicyTarget;
            GroupTarget = groupTarget;
            ScheduleTarget = scheduleTarget;
            ServiceTarget = serviceTarget;
            TaskType = taskType;
            UserTarget = userTarget;
        }
    }
}
