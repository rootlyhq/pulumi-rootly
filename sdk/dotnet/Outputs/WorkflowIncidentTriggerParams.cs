// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly.Outputs
{

    [OutputType]
    public sealed class WorkflowIncidentTriggerParams
    {
        /// <summary>
        /// Value must be one off `ALL`, `ANY`, `NONE`.
        /// </summary>
        public readonly string? IncidentCondition;
        public readonly string? IncidentConditionAcknowledgedAt;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionCause;
        public readonly string? IncidentConditionDetectedAt;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionEnvironment;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionFunctionality;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionGroup;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionIncidentRoles;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionIncidentType;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionKind;
        public readonly string? IncidentConditionMitigatedAt;
        public readonly string? IncidentConditionResolvedAt;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionService;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionSeverity;
        public readonly string? IncidentConditionStartedAt;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionStatus;
        public readonly string? IncidentConditionSummary;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionVisibility;
        public readonly string? IncidentConditionalInactivity;
        /// <summary>
        /// ex. 10 min, 1h, 3 days, 2 weeks
        /// </summary>
        public readonly string? IncidentInactivityDuration;
        /// <summary>
        /// Value must be one of `test`, `test_sub`, `example`, `example_sub`, `normal`, `normal_sub`, `backfilled`, `scheduled`.
        /// </summary>
        public readonly ImmutableArray<string> IncidentKinds;
        /// <summary>
        /// [DEPRECATED] Use incident*condition*cause instead. Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentPostMortemConditionCause;
        /// <summary>
        /// Value must be one of `in_triage`, `started`, `detected`, `acknowledged`, `mitigated`, `resolved`, `cancelled`, `scheduled`, `in_progress`, `completed`.
        /// </summary>
        public readonly ImmutableArray<string> IncidentStatuses;
        public readonly ImmutableArray<string> IncidentVisibilities;
        /// <summary>
        /// Value must be one off `incident`.
        /// </summary>
        public readonly string? TriggerType;
        /// <summary>
        /// Actions that trigger the workflow. One of custom*fields.\n\n.updated, incident*in*triage, incident*created, incident*started, incident*updated, title*updated, summary*updated, status*updated, severity*updated, environments*added, environments*removed, environments*updated, incident*types*added, incident*types*removed, incident*types*updated, services*added, services*removed, services*updated, visibility*updated, functionalities*added, functionalities*removed, functionalities*updated, teams*added, teams*removed, teams*updated, causes*added, causes*removed, causes*updated, timeline*updated, status*page*timeline*updated, role*assignments*updated, role*assignments*added, role*assignments*removed, slack*command, slack*channel*created, slack*channel*converted, subscribers*updated, subscribers*added, subscribers*removed, user*joined*slack*channel, user*left*slack*channel
        /// </summary>
        public readonly ImmutableArray<string> Triggers;

        [OutputConstructor]
        private WorkflowIncidentTriggerParams(
            string? incidentCondition,

            string? incidentConditionAcknowledgedAt,

            string? incidentConditionCause,

            string? incidentConditionDetectedAt,

            string? incidentConditionEnvironment,

            string? incidentConditionFunctionality,

            string? incidentConditionGroup,

            string? incidentConditionIncidentRoles,

            string? incidentConditionIncidentType,

            string? incidentConditionKind,

            string? incidentConditionMitigatedAt,

            string? incidentConditionResolvedAt,

            string? incidentConditionService,

            string? incidentConditionSeverity,

            string? incidentConditionStartedAt,

            string? incidentConditionStatus,

            string? incidentConditionSummary,

            string? incidentConditionVisibility,

            string? incidentConditionalInactivity,

            string? incidentInactivityDuration,

            ImmutableArray<string> incidentKinds,

            string? incidentPostMortemConditionCause,

            ImmutableArray<string> incidentStatuses,

            ImmutableArray<string> incidentVisibilities,

            string? triggerType,

            ImmutableArray<string> triggers)
        {
            IncidentCondition = incidentCondition;
            IncidentConditionAcknowledgedAt = incidentConditionAcknowledgedAt;
            IncidentConditionCause = incidentConditionCause;
            IncidentConditionDetectedAt = incidentConditionDetectedAt;
            IncidentConditionEnvironment = incidentConditionEnvironment;
            IncidentConditionFunctionality = incidentConditionFunctionality;
            IncidentConditionGroup = incidentConditionGroup;
            IncidentConditionIncidentRoles = incidentConditionIncidentRoles;
            IncidentConditionIncidentType = incidentConditionIncidentType;
            IncidentConditionKind = incidentConditionKind;
            IncidentConditionMitigatedAt = incidentConditionMitigatedAt;
            IncidentConditionResolvedAt = incidentConditionResolvedAt;
            IncidentConditionService = incidentConditionService;
            IncidentConditionSeverity = incidentConditionSeverity;
            IncidentConditionStartedAt = incidentConditionStartedAt;
            IncidentConditionStatus = incidentConditionStatus;
            IncidentConditionSummary = incidentConditionSummary;
            IncidentConditionVisibility = incidentConditionVisibility;
            IncidentConditionalInactivity = incidentConditionalInactivity;
            IncidentInactivityDuration = incidentInactivityDuration;
            IncidentKinds = incidentKinds;
            IncidentPostMortemConditionCause = incidentPostMortemConditionCause;
            IncidentStatuses = incidentStatuses;
            IncidentVisibilities = incidentVisibilities;
            TriggerType = triggerType;
            Triggers = triggers;
        }
    }
}
