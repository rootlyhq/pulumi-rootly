// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly.Outputs
{

    [OutputType]
    public sealed class WorkflowTaskUpdateLinearIssueTaskParams
    {
        /// <summary>
        /// The assigned user's email
        /// </summary>
        public readonly string? AssignUserEmail;
        /// <summary>
        /// The issue description
        /// </summary>
        public readonly string? Description;
        /// <summary>
        /// The issue id
        /// </summary>
        public readonly string IssueId;
        public readonly ImmutableArray<Outputs.WorkflowTaskUpdateLinearIssueTaskParamsLabel> Labels;
        /// <summary>
        /// Map must contain two fields, `id` and `name`. The priority id and display name
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Priority;
        /// <summary>
        /// Map must contain two fields, `id` and `name`. The project id and display name
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Project;
        /// <summary>
        /// Map must contain two fields, `id` and `name`. The state id and display name
        /// </summary>
        public readonly ImmutableDictionary<string, string>? State;
        public readonly string? TaskType;
        /// <summary>
        /// The issue title
        /// </summary>
        public readonly string? Title;

        [OutputConstructor]
        private WorkflowTaskUpdateLinearIssueTaskParams(
            string? assignUserEmail,

            string? description,

            string issueId,

            ImmutableArray<Outputs.WorkflowTaskUpdateLinearIssueTaskParamsLabel> labels,

            ImmutableDictionary<string, string>? priority,

            ImmutableDictionary<string, string>? project,

            ImmutableDictionary<string, string>? state,

            string? taskType,

            string? title)
        {
            AssignUserEmail = assignUserEmail;
            Description = description;
            IssueId = issueId;
            Labels = labels;
            Priority = priority;
            Project = project;
            State = state;
            TaskType = taskType;
            Title = title;
        }
    }
}
