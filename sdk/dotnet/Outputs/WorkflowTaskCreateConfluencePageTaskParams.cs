// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly.Outputs
{

    [OutputType]
    public sealed class WorkflowTaskCreateConfluencePageTaskParams
    {
        /// <summary>
        /// Map must contain two fields, `id` and `name`.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Ancestor;
        /// <summary>
        /// The page content
        /// </summary>
        public readonly string? Content;
        /// <summary>
        /// Map must contain two fields, `id` and `name`. Specify integration id if you have more than one Confluence instance
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Integration;
        /// <summary>
        /// Value must be one of true or false
        /// </summary>
        public readonly bool? MarkPostMortemAsPublished;
        /// <summary>
        /// The Retrospective template to use
        /// </summary>
        public readonly string? PostMortemTemplateId;
        /// <summary>
        /// Map must contain two fields, `id` and `name`.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Space;
        public readonly string? TaskType;
        /// <summary>
        /// Map must contain two fields, `id` and `name`.
        /// </summary>
        public readonly ImmutableDictionary<string, string>? Template;
        /// <summary>
        /// The page title
        /// </summary>
        public readonly string Title;

        [OutputConstructor]
        private WorkflowTaskCreateConfluencePageTaskParams(
            ImmutableDictionary<string, string>? ancestor,

            string? content,

            ImmutableDictionary<string, string>? integration,

            bool? markPostMortemAsPublished,

            string? postMortemTemplateId,

            ImmutableDictionary<string, string> space,

            string? taskType,

            ImmutableDictionary<string, string>? template,

            string title)
        {
            Ancestor = ancestor;
            Content = content;
            Integration = integration;
            MarkPostMortemAsPublished = markPostMortemAsPublished;
            PostMortemTemplateId = postMortemTemplateId;
            Space = space;
            TaskType = taskType;
            Template = template;
            Title = title;
        }
    }
}
