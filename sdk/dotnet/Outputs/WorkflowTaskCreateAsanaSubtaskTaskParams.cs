// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly.Outputs
{

    [OutputType]
    public sealed class WorkflowTaskCreateAsanaSubtaskTaskParams
    {
        /// <summary>
        /// The assigned user's email
        /// </summary>
        public readonly string? AssignUserEmail;
        /// <summary>
        /// Map must contain two fields, `id` and `name`.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Completion;
        /// <summary>
        /// Custom field mappings. Can contain liquid markup and need to be valid JSON
        /// </summary>
        public readonly string? CustomFieldsMapping;
        /// <summary>
        /// Value must be one of `blocking`, `blocked_by`.
        /// </summary>
        public readonly string? DependencyDirection;
        /// <summary>
        /// Dependent task ids. Supports liquid syntax
        /// </summary>
        public readonly ImmutableArray<string> DependentTaskIds;
        /// <summary>
        /// The due date
        /// </summary>
        public readonly string? DueDate;
        public readonly string? Notes;
        /// <summary>
        /// The parent task id
        /// </summary>
        public readonly string ParentTaskId;
        public readonly string? TaskType;
        /// <summary>
        /// The subtask title
        /// </summary>
        public readonly string Title;

        [OutputConstructor]
        private WorkflowTaskCreateAsanaSubtaskTaskParams(
            string? assignUserEmail,

            ImmutableDictionary<string, string> completion,

            string? customFieldsMapping,

            string? dependencyDirection,

            ImmutableArray<string> dependentTaskIds,

            string? dueDate,

            string? notes,

            string parentTaskId,

            string? taskType,

            string title)
        {
            AssignUserEmail = assignUserEmail;
            Completion = completion;
            CustomFieldsMapping = customFieldsMapping;
            DependencyDirection = dependencyDirection;
            DependentTaskIds = dependentTaskIds;
            DueDate = dueDate;
            Notes = notes;
            ParentTaskId = parentTaskId;
            TaskType = taskType;
            Title = title;
        }
    }
}
