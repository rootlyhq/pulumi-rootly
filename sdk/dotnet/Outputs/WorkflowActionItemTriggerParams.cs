// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly.Outputs
{

    [OutputType]
    public sealed class WorkflowActionItemTriggerParams
    {
        /// <summary>
        /// Value must be one off `ALL`, `ANY`, `NONE`.
        /// </summary>
        public readonly string? IncidentActionItemCondition;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentActionItemConditionGroup;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentActionItemConditionKind;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentActionItemConditionPriority;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentActionItemConditionStatus;
        public readonly ImmutableArray<string> IncidentActionItemGroupIds;
        /// <summary>
        /// Value must be one of `task`, `follow_up`.
        /// </summary>
        public readonly ImmutableArray<string> IncidentActionItemKinds;
        /// <summary>
        /// Value must be one of `high`, `medium`, `low`.
        /// </summary>
        public readonly ImmutableArray<string> IncidentActionItemPriorities;
        /// <summary>
        /// Value must be one of `open`, `in_progress`, `cancelled`, `done`.
        /// </summary>
        public readonly ImmutableArray<string> IncidentActionItemStatuses;
        /// <summary>
        /// Value must be one off `ALL`, `ANY`, `NONE`.
        /// </summary>
        public readonly string? IncidentCondition;
        public readonly string? IncidentConditionAcknowledgedAt;
        public readonly string? IncidentConditionDetectedAt;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionEnvironment;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionFunctionality;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionGroup;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionIncidentRoles;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionIncidentType;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionKind;
        public readonly string? IncidentConditionMitigatedAt;
        public readonly string? IncidentConditionResolvedAt;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionService;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionSeverity;
        public readonly string? IncidentConditionStartedAt;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionStatus;
        public readonly string? IncidentConditionSummary;
        /// <summary>
        /// Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        /// </summary>
        public readonly string? IncidentConditionVisibility;
        public readonly string? IncidentConditionalInactivity;
        /// <summary>
        /// ex. 10 min, 1h, 3 days, 2 weeks
        /// </summary>
        public readonly string? IncidentInactivityDuration;
        /// <summary>
        /// Value must be one of `test`, `test_sub`, `example`, `example_sub`, `normal`, `normal_sub`, `backfilled`, `scheduled`.
        /// </summary>
        public readonly ImmutableArray<string> IncidentKinds;
        /// <summary>
        /// Value must be one of `in_triage`, `started`, `detected`, `acknowledged`, `mitigated`, `resolved`, `cancelled`, `scheduled`, `in_progress`, `completed`.
        /// </summary>
        public readonly ImmutableArray<string> IncidentStatuses;
        public readonly ImmutableArray<string> IncidentVisibilities;
        /// <summary>
        /// Value must be one off `action_item`.
        /// </summary>
        public readonly string? TriggerType;
        /// <summary>
        /// Actions that trigger the workflow. One of custom*fields.\n\n.updated, incident*updated, action*item*created, action*item*updated, assigned*user*updated, summary*updated, description*updated, status*updated, priority*updated, due*date*updated, teams*updated, slack*command
        /// </summary>
        public readonly ImmutableArray<string> Triggers;

        [OutputConstructor]
        private WorkflowActionItemTriggerParams(
            string? incidentActionItemCondition,

            string? incidentActionItemConditionGroup,

            string? incidentActionItemConditionKind,

            string? incidentActionItemConditionPriority,

            string? incidentActionItemConditionStatus,

            ImmutableArray<string> incidentActionItemGroupIds,

            ImmutableArray<string> incidentActionItemKinds,

            ImmutableArray<string> incidentActionItemPriorities,

            ImmutableArray<string> incidentActionItemStatuses,

            string? incidentCondition,

            string? incidentConditionAcknowledgedAt,

            string? incidentConditionDetectedAt,

            string? incidentConditionEnvironment,

            string? incidentConditionFunctionality,

            string? incidentConditionGroup,

            string? incidentConditionIncidentRoles,

            string? incidentConditionIncidentType,

            string? incidentConditionKind,

            string? incidentConditionMitigatedAt,

            string? incidentConditionResolvedAt,

            string? incidentConditionService,

            string? incidentConditionSeverity,

            string? incidentConditionStartedAt,

            string? incidentConditionStatus,

            string? incidentConditionSummary,

            string? incidentConditionVisibility,

            string? incidentConditionalInactivity,

            string? incidentInactivityDuration,

            ImmutableArray<string> incidentKinds,

            ImmutableArray<string> incidentStatuses,

            ImmutableArray<string> incidentVisibilities,

            string? triggerType,

            ImmutableArray<string> triggers)
        {
            IncidentActionItemCondition = incidentActionItemCondition;
            IncidentActionItemConditionGroup = incidentActionItemConditionGroup;
            IncidentActionItemConditionKind = incidentActionItemConditionKind;
            IncidentActionItemConditionPriority = incidentActionItemConditionPriority;
            IncidentActionItemConditionStatus = incidentActionItemConditionStatus;
            IncidentActionItemGroupIds = incidentActionItemGroupIds;
            IncidentActionItemKinds = incidentActionItemKinds;
            IncidentActionItemPriorities = incidentActionItemPriorities;
            IncidentActionItemStatuses = incidentActionItemStatuses;
            IncidentCondition = incidentCondition;
            IncidentConditionAcknowledgedAt = incidentConditionAcknowledgedAt;
            IncidentConditionDetectedAt = incidentConditionDetectedAt;
            IncidentConditionEnvironment = incidentConditionEnvironment;
            IncidentConditionFunctionality = incidentConditionFunctionality;
            IncidentConditionGroup = incidentConditionGroup;
            IncidentConditionIncidentRoles = incidentConditionIncidentRoles;
            IncidentConditionIncidentType = incidentConditionIncidentType;
            IncidentConditionKind = incidentConditionKind;
            IncidentConditionMitigatedAt = incidentConditionMitigatedAt;
            IncidentConditionResolvedAt = incidentConditionResolvedAt;
            IncidentConditionService = incidentConditionService;
            IncidentConditionSeverity = incidentConditionSeverity;
            IncidentConditionStartedAt = incidentConditionStartedAt;
            IncidentConditionStatus = incidentConditionStatus;
            IncidentConditionSummary = incidentConditionSummary;
            IncidentConditionVisibility = incidentConditionVisibility;
            IncidentConditionalInactivity = incidentConditionalInactivity;
            IncidentInactivityDuration = incidentInactivityDuration;
            IncidentKinds = incidentKinds;
            IncidentStatuses = incidentStatuses;
            IncidentVisibilities = incidentVisibilities;
            TriggerType = triggerType;
            Triggers = triggers;
        }
    }
}
