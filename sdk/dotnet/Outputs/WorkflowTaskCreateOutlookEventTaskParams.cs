// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly.Outputs
{

    [OutputType]
    public sealed class WorkflowTaskCreateOutlookEventTaskParams
    {
        /// <summary>
        /// Emails of attendees
        /// </summary>
        public readonly ImmutableArray<string> Attendees;
        /// <summary>
        /// Map must contain two fields, `id` and `name`.
        /// </summary>
        public readonly ImmutableDictionary<string, string> Calendar;
        /// <summary>
        /// The days until meeting
        /// </summary>
        public readonly int DaysUntilMeeting;
        /// <summary>
        /// The event description
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Value must be one of true or false
        /// </summary>
        public readonly bool? ExcludeWeekends;
        /// <summary>
        /// Meeting duration in format like '1 hour', '30 minutes'
        /// </summary>
        public readonly string MeetingDuration;
        /// <summary>
        /// Value must be one of true or false
        /// </summary>
        public readonly bool? PostToIncidentTimeline;
        public readonly ImmutableArray<Outputs.WorkflowTaskCreateOutlookEventTaskParamsPostToSlackChannel> PostToSlackChannels;
        /// <summary>
        /// The event summary
        /// </summary>
        public readonly string Summary;
        public readonly string? TaskType;
        /// <summary>
        /// Time of meeting in format HH:MM
        /// </summary>
        public readonly string TimeOfMeeting;
        /// <summary>
        /// A valid IANA time zone name.
        /// </summary>
        public readonly string? TimeZone;

        [OutputConstructor]
        private WorkflowTaskCreateOutlookEventTaskParams(
            ImmutableArray<string> attendees,

            ImmutableDictionary<string, string> calendar,

            int daysUntilMeeting,

            string description,

            bool? excludeWeekends,

            string meetingDuration,

            bool? postToIncidentTimeline,

            ImmutableArray<Outputs.WorkflowTaskCreateOutlookEventTaskParamsPostToSlackChannel> postToSlackChannels,

            string summary,

            string? taskType,

            string timeOfMeeting,

            string? timeZone)
        {
            Attendees = attendees;
            Calendar = calendar;
            DaysUntilMeeting = daysUntilMeeting;
            Description = description;
            ExcludeWeekends = excludeWeekends;
            MeetingDuration = meetingDuration;
            PostToIncidentTimeline = postToIncidentTimeline;
            PostToSlackChannels = postToSlackChannels;
            Summary = summary;
            TaskType = taskType;
            TimeOfMeeting = timeOfMeeting;
            TimeZone = timeZone;
        }
    }
}
