// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly.Outputs
{

    [OutputType]
    public sealed class WorkflowTaskCreateZoomMeetingTaskParams
    {
        public readonly ImmutableArray<string> AlternativeHosts;
        /// <summary>
        /// Value must be one of `none`, `local`, `cloud`.
        /// </summary>
        public readonly string? AutoRecording;
        /// <summary>
        /// The email to use if creating as email
        /// </summary>
        public readonly string? CreateAsEmail;
        /// <summary>
        /// The meeting password
        /// </summary>
        public readonly string? Password;
        /// <summary>
        /// Value must be one of true or false
        /// </summary>
        public readonly bool? PostToIncidentTimeline;
        public readonly ImmutableArray<Outputs.WorkflowTaskCreateZoomMeetingTaskParamsPostToSlackChannel> PostToSlackChannels;
        /// <summary>
        /// We will invite Rootly Bot to your call and make the transcript available to you. Value must be one of true or false
        /// </summary>
        public readonly bool? RecordMeeting;
        public readonly string? TaskType;
        /// <summary>
        /// The meeting topic
        /// </summary>
        public readonly string Topic;

        [OutputConstructor]
        private WorkflowTaskCreateZoomMeetingTaskParams(
            ImmutableArray<string> alternativeHosts,

            string? autoRecording,

            string? createAsEmail,

            string? password,

            bool? postToIncidentTimeline,

            ImmutableArray<Outputs.WorkflowTaskCreateZoomMeetingTaskParamsPostToSlackChannel> postToSlackChannels,

            bool? recordMeeting,

            string? taskType,

            string topic)
        {
            AlternativeHosts = alternativeHosts;
            AutoRecording = autoRecording;
            CreateAsEmail = createAsEmail;
            Password = password;
            PostToIncidentTimeline = postToIncidentTimeline;
            PostToSlackChannels = postToSlackChannels;
            RecordMeeting = recordMeeting;
            TaskType = taskType;
            Topic = topic;
        }
    }
}
