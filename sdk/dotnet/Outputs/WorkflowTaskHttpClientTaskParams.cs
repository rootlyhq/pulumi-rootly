// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Rootly.Outputs
{

    [OutputType]
    public sealed class WorkflowTaskHttpClientTaskParams
    {
        /// <summary>
        /// HTTP body
        /// </summary>
        public readonly string? Body;
        public readonly string? EventMessage;
        public readonly string? EventUrl;
        /// <summary>
        /// JSON map of HTTP headers
        /// </summary>
        public readonly string? Headers;
        /// <summary>
        /// HTTP method. Value must be one of `GET`, `POST`, `PATCH`, `PUT`, `DELETE`, `OPTIONS`.
        /// </summary>
        public readonly string? Method;
        /// <summary>
        /// JSON map of HTTP query parameters
        /// </summary>
        public readonly string? Params;
        /// <summary>
        /// Value must be one of true or false
        /// </summary>
        public readonly bool? PostToIncidentTimeline;
        public readonly ImmutableArray<Outputs.WorkflowTaskHttpClientTaskParamsPostToSlackChannel> PostToSlackChannels;
        /// <summary>
        /// HTTP status code expected. Can be a regular expression. Eg: 200, 200|203, 20[0-3]
        /// </summary>
        public readonly string SucceedOnStatus;
        public readonly string? TaskType;
        /// <summary>
        /// URL endpoint
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private WorkflowTaskHttpClientTaskParams(
            string? body,

            string? eventMessage,

            string? eventUrl,

            string? headers,

            string? method,

            string? @params,

            bool? postToIncidentTimeline,

            ImmutableArray<Outputs.WorkflowTaskHttpClientTaskParamsPostToSlackChannel> postToSlackChannels,

            string succeedOnStatus,

            string? taskType,

            string url)
        {
            Body = body;
            EventMessage = eventMessage;
            EventUrl = eventUrl;
            Headers = headers;
            Method = method;
            Params = @params;
            PostToIncidentTimeline = postToIncidentTimeline;
            PostToSlackChannels = postToSlackChannels;
            SucceedOnStatus = succeedOnStatus;
            TaskType = taskType;
            Url = url;
        }
    }
}
