# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PostMortemTemplateArgs', 'PostMortemTemplate']

@pulumi.input_type
class PostMortemTemplateArgs:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a PostMortemTemplate resource.
        :param pulumi.Input[str] content: The postmortem template. Liquid syntax and markdown are supported
        :param pulumi.Input[bool] default: Default selected template when editing a postmortem. Value must be one of true or false
        :param pulumi.Input[str] format: The format of the input. Value must be one of `html`, `markdown`.
        :param pulumi.Input[str] name: The name of the postmortem template
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        The postmortem template. Liquid syntax and markdown are supported
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        """
        Default selected template when editing a postmortem. Value must be one of true or false
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        The format of the input. Value must be one of `html`, `markdown`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the postmortem template
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _PostMortemTemplateState:
    def __init__(__self__, *,
                 content: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering PostMortemTemplate resources.
        :param pulumi.Input[str] content: The postmortem template. Liquid syntax and markdown are supported
        :param pulumi.Input[bool] default: Default selected template when editing a postmortem. Value must be one of true or false
        :param pulumi.Input[str] format: The format of the input. Value must be one of `html`, `markdown`.
        :param pulumi.Input[str] name: The name of the postmortem template
        """
        if content is not None:
            pulumi.set(__self__, "content", content)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if format is not None:
            pulumi.set(__self__, "format", format)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        The postmortem template. Liquid syntax and markdown are supported
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        """
        Default selected template when editing a postmortem. Value must be one of true or false
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def format(self) -> Optional[pulumi.Input[str]]:
        """
        The format of the input. Value must be one of `html`, `markdown`.
        """
        return pulumi.get(self, "format")

    @format.setter
    def format(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "format", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the postmortem template
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class PostMortemTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a PostMortemTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: The postmortem template. Liquid syntax and markdown are supported
        :param pulumi.Input[bool] default: Default selected template when editing a postmortem. Value must be one of true or false
        :param pulumi.Input[str] format: The format of the input. Value must be one of `html`, `markdown`.
        :param pulumi.Input[str] name: The name of the postmortem template
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[PostMortemTemplateArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a PostMortemTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PostMortemTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PostMortemTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 format: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PostMortemTemplateArgs.__new__(PostMortemTemplateArgs)

            __props__.__dict__["content"] = content
            __props__.__dict__["default"] = default
            __props__.__dict__["format"] = format
            __props__.__dict__["name"] = name
        super(PostMortemTemplate, __self__).__init__(
            'rootly:index/postMortemTemplate:PostMortemTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            content: Optional[pulumi.Input[str]] = None,
            default: Optional[pulumi.Input[bool]] = None,
            format: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'PostMortemTemplate':
        """
        Get an existing PostMortemTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] content: The postmortem template. Liquid syntax and markdown are supported
        :param pulumi.Input[bool] default: Default selected template when editing a postmortem. Value must be one of true or false
        :param pulumi.Input[str] format: The format of the input. Value must be one of `html`, `markdown`.
        :param pulumi.Input[str] name: The name of the postmortem template
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PostMortemTemplateState.__new__(_PostMortemTemplateState)

        __props__.__dict__["content"] = content
        __props__.__dict__["default"] = default
        __props__.__dict__["format"] = format
        __props__.__dict__["name"] = name
        return PostMortemTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Output[str]:
        """
        The postmortem template. Liquid syntax and markdown are supported
        """
        return pulumi.get(self, "content")

    @property
    @pulumi.getter
    def default(self) -> pulumi.Output[bool]:
        """
        Default selected template when editing a postmortem. Value must be one of true or false
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter
    def format(self) -> pulumi.Output[Optional[str]]:
        """
        The format of the input. Value must be one of `html`, `markdown`.
        """
        return pulumi.get(self, "format")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the postmortem template
        """
        return pulumi.get(self, "name")

