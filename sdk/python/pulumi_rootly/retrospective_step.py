# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RetrospectiveStepArgs', 'RetrospectiveStep']

@pulumi.input_type
class RetrospectiveStepArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 due_after_days: Optional[pulumi.Input[int]] = None,
                 incident_role_id: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 retrospective_process_id: Optional[pulumi.Input[str]] = None,
                 skippable: Optional[pulumi.Input[bool]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RetrospectiveStep resource.
        :param pulumi.Input[str] title: The name of the step
        :param pulumi.Input[str] description: The description of the step
        :param pulumi.Input[int] due_after_days: Due date in days
        :param pulumi.Input[str] incident_role_id: Users assigned to the selected incident role will be the default owners for this step
        :param pulumi.Input[int] position: Position of the step
        :param pulumi.Input[bool] skippable: Is the step skippable?. Value must be one of true or false
        :param pulumi.Input[str] slug: The slug of the step
        """
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if due_after_days is not None:
            pulumi.set(__self__, "due_after_days", due_after_days)
        if incident_role_id is not None:
            pulumi.set(__self__, "incident_role_id", incident_role_id)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if retrospective_process_id is not None:
            pulumi.set(__self__, "retrospective_process_id", retrospective_process_id)
        if skippable is not None:
            pulumi.set(__self__, "skippable", skippable)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The name of the step
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the step
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dueAfterDays")
    def due_after_days(self) -> Optional[pulumi.Input[int]]:
        """
        Due date in days
        """
        return pulumi.get(self, "due_after_days")

    @due_after_days.setter
    def due_after_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "due_after_days", value)

    @property
    @pulumi.getter(name="incidentRoleId")
    def incident_role_id(self) -> Optional[pulumi.Input[str]]:
        """
        Users assigned to the selected incident role will be the default owners for this step
        """
        return pulumi.get(self, "incident_role_id")

    @incident_role_id.setter
    def incident_role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_role_id", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        Position of the step
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter(name="retrospectiveProcessId")
    def retrospective_process_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "retrospective_process_id")

    @retrospective_process_id.setter
    def retrospective_process_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retrospective_process_id", value)

    @property
    @pulumi.getter
    def skippable(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the step skippable?. Value must be one of true or false
        """
        return pulumi.get(self, "skippable")

    @skippable.setter
    def skippable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skippable", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the step
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class _RetrospectiveStepState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 due_after_days: Optional[pulumi.Input[int]] = None,
                 incident_role_id: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 retrospective_process_id: Optional[pulumi.Input[str]] = None,
                 skippable: Optional[pulumi.Input[bool]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RetrospectiveStep resources.
        :param pulumi.Input[str] description: The description of the step
        :param pulumi.Input[int] due_after_days: Due date in days
        :param pulumi.Input[str] incident_role_id: Users assigned to the selected incident role will be the default owners for this step
        :param pulumi.Input[int] position: Position of the step
        :param pulumi.Input[bool] skippable: Is the step skippable?. Value must be one of true or false
        :param pulumi.Input[str] slug: The slug of the step
        :param pulumi.Input[str] title: The name of the step
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if due_after_days is not None:
            pulumi.set(__self__, "due_after_days", due_after_days)
        if incident_role_id is not None:
            pulumi.set(__self__, "incident_role_id", incident_role_id)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if retrospective_process_id is not None:
            pulumi.set(__self__, "retrospective_process_id", retrospective_process_id)
        if skippable is not None:
            pulumi.set(__self__, "skippable", skippable)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the step
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dueAfterDays")
    def due_after_days(self) -> Optional[pulumi.Input[int]]:
        """
        Due date in days
        """
        return pulumi.get(self, "due_after_days")

    @due_after_days.setter
    def due_after_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "due_after_days", value)

    @property
    @pulumi.getter(name="incidentRoleId")
    def incident_role_id(self) -> Optional[pulumi.Input[str]]:
        """
        Users assigned to the selected incident role will be the default owners for this step
        """
        return pulumi.get(self, "incident_role_id")

    @incident_role_id.setter
    def incident_role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_role_id", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        Position of the step
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter(name="retrospectiveProcessId")
    def retrospective_process_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "retrospective_process_id")

    @retrospective_process_id.setter
    def retrospective_process_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "retrospective_process_id", value)

    @property
    @pulumi.getter
    def skippable(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the step skippable?. Value must be one of true or false
        """
        return pulumi.get(self, "skippable")

    @skippable.setter
    def skippable(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skippable", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the step
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the step
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


class RetrospectiveStep(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 due_after_days: Optional[pulumi.Input[int]] = None,
                 incident_role_id: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 retrospective_process_id: Optional[pulumi.Input[str]] = None,
                 skippable: Optional[pulumi.Input[bool]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a RetrospectiveStep resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the step
        :param pulumi.Input[int] due_after_days: Due date in days
        :param pulumi.Input[str] incident_role_id: Users assigned to the selected incident role will be the default owners for this step
        :param pulumi.Input[int] position: Position of the step
        :param pulumi.Input[bool] skippable: Is the step skippable?. Value must be one of true or false
        :param pulumi.Input[str] slug: The slug of the step
        :param pulumi.Input[str] title: The name of the step
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RetrospectiveStepArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RetrospectiveStep resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RetrospectiveStepArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RetrospectiveStepArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 due_after_days: Optional[pulumi.Input[int]] = None,
                 incident_role_id: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 retrospective_process_id: Optional[pulumi.Input[str]] = None,
                 skippable: Optional[pulumi.Input[bool]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RetrospectiveStepArgs.__new__(RetrospectiveStepArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["due_after_days"] = due_after_days
            __props__.__dict__["incident_role_id"] = incident_role_id
            __props__.__dict__["position"] = position
            __props__.__dict__["retrospective_process_id"] = retrospective_process_id
            __props__.__dict__["skippable"] = skippable
            __props__.__dict__["slug"] = slug
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
        super(RetrospectiveStep, __self__).__init__(
            'rootly:index/retrospectiveStep:RetrospectiveStep',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            due_after_days: Optional[pulumi.Input[int]] = None,
            incident_role_id: Optional[pulumi.Input[str]] = None,
            position: Optional[pulumi.Input[int]] = None,
            retrospective_process_id: Optional[pulumi.Input[str]] = None,
            skippable: Optional[pulumi.Input[bool]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            title: Optional[pulumi.Input[str]] = None) -> 'RetrospectiveStep':
        """
        Get an existing RetrospectiveStep resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the step
        :param pulumi.Input[int] due_after_days: Due date in days
        :param pulumi.Input[str] incident_role_id: Users assigned to the selected incident role will be the default owners for this step
        :param pulumi.Input[int] position: Position of the step
        :param pulumi.Input[bool] skippable: Is the step skippable?. Value must be one of true or false
        :param pulumi.Input[str] slug: The slug of the step
        :param pulumi.Input[str] title: The name of the step
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RetrospectiveStepState.__new__(_RetrospectiveStepState)

        __props__.__dict__["description"] = description
        __props__.__dict__["due_after_days"] = due_after_days
        __props__.__dict__["incident_role_id"] = incident_role_id
        __props__.__dict__["position"] = position
        __props__.__dict__["retrospective_process_id"] = retrospective_process_id
        __props__.__dict__["skippable"] = skippable
        __props__.__dict__["slug"] = slug
        __props__.__dict__["title"] = title
        return RetrospectiveStep(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the step
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dueAfterDays")
    def due_after_days(self) -> pulumi.Output[int]:
        """
        Due date in days
        """
        return pulumi.get(self, "due_after_days")

    @property
    @pulumi.getter(name="incidentRoleId")
    def incident_role_id(self) -> pulumi.Output[str]:
        """
        Users assigned to the selected incident role will be the default owners for this step
        """
        return pulumi.get(self, "incident_role_id")

    @property
    @pulumi.getter
    def position(self) -> pulumi.Output[int]:
        """
        Position of the step
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter(name="retrospectiveProcessId")
    def retrospective_process_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "retrospective_process_id")

    @property
    @pulumi.getter
    def skippable(self) -> pulumi.Output[bool]:
        """
        Is the step skippable?. Value must be one of true or false
        """
        return pulumi.get(self, "skippable")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        """
        The slug of the step
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        The name of the step
        """
        return pulumi.get(self, "title")

