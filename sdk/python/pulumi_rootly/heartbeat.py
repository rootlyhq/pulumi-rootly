# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['HeartbeatArgs', 'Heartbeat']

@pulumi.input_type
class HeartbeatArgs:
    def __init__(__self__, *,
                 alert_summary: pulumi.Input[str],
                 interval: pulumi.Input[int],
                 notification_target_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 expires_at: Optional[pulumi.Input[str]] = None,
                 interval_unit: Optional[pulumi.Input[str]] = None,
                 last_pinged_at: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_target_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Heartbeat resource.
        :param pulumi.Input[str] alert_summary: Summary of alerts triggered when heartbeat expires.
        :param pulumi.Input[str] description: The description of the heartbeat
        :param pulumi.Input[str] expires_at: When heartbeat expires
        :param pulumi.Input[str] interval_unit: Value must be one of `seconds`, `minutes`, `hours`.
        :param pulumi.Input[str] last_pinged_at: When the heartbeat was last pinged.
        :param pulumi.Input[str] name: The name of the heartbeat
        :param pulumi.Input[str] notification_target_type: Value must be one of `User`, `Group`, `Service`, `EscalationPolicy`.
        :param pulumi.Input[str] status: Value must be one of `waiting`, `active`, `expired`.
        """
        pulumi.set(__self__, "alert_summary", alert_summary)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "notification_target_id", notification_target_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)
        if interval_unit is not None:
            pulumi.set(__self__, "interval_unit", interval_unit)
        if last_pinged_at is not None:
            pulumi.set(__self__, "last_pinged_at", last_pinged_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_target_type is not None:
            pulumi.set(__self__, "notification_target_type", notification_target_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="alertSummary")
    def alert_summary(self) -> pulumi.Input[str]:
        """
        Summary of alerts triggered when heartbeat expires.
        """
        return pulumi.get(self, "alert_summary")

    @alert_summary.setter
    def alert_summary(self, value: pulumi.Input[str]):
        pulumi.set(self, "alert_summary", value)

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Input[int]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: pulumi.Input[int]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="notificationTargetId")
    def notification_target_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "notification_target_id")

    @notification_target_id.setter
    def notification_target_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "notification_target_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the heartbeat
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[pulumi.Input[str]]:
        """
        When heartbeat expires
        """
        return pulumi.get(self, "expires_at")

    @expires_at.setter
    def expires_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires_at", value)

    @property
    @pulumi.getter(name="intervalUnit")
    def interval_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `seconds`, `minutes`, `hours`.
        """
        return pulumi.get(self, "interval_unit")

    @interval_unit.setter
    def interval_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval_unit", value)

    @property
    @pulumi.getter(name="lastPingedAt")
    def last_pinged_at(self) -> Optional[pulumi.Input[str]]:
        """
        When the heartbeat was last pinged.
        """
        return pulumi.get(self, "last_pinged_at")

    @last_pinged_at.setter
    def last_pinged_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_pinged_at", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the heartbeat
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notificationTargetType")
    def notification_target_type(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `User`, `Group`, `Service`, `EscalationPolicy`.
        """
        return pulumi.get(self, "notification_target_type")

    @notification_target_type.setter
    def notification_target_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_target_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `waiting`, `active`, `expired`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


@pulumi.input_type
class _HeartbeatState:
    def __init__(__self__, *,
                 alert_summary: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 expires_at: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 interval_unit: Optional[pulumi.Input[str]] = None,
                 last_pinged_at: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_target_id: Optional[pulumi.Input[str]] = None,
                 notification_target_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Heartbeat resources.
        :param pulumi.Input[str] alert_summary: Summary of alerts triggered when heartbeat expires.
        :param pulumi.Input[str] description: The description of the heartbeat
        :param pulumi.Input[str] expires_at: When heartbeat expires
        :param pulumi.Input[str] interval_unit: Value must be one of `seconds`, `minutes`, `hours`.
        :param pulumi.Input[str] last_pinged_at: When the heartbeat was last pinged.
        :param pulumi.Input[str] name: The name of the heartbeat
        :param pulumi.Input[str] notification_target_type: Value must be one of `User`, `Group`, `Service`, `EscalationPolicy`.
        :param pulumi.Input[str] status: Value must be one of `waiting`, `active`, `expired`.
        """
        if alert_summary is not None:
            pulumi.set(__self__, "alert_summary", alert_summary)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if expires_at is not None:
            pulumi.set(__self__, "expires_at", expires_at)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if interval_unit is not None:
            pulumi.set(__self__, "interval_unit", interval_unit)
        if last_pinged_at is not None:
            pulumi.set(__self__, "last_pinged_at", last_pinged_at)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notification_target_id is not None:
            pulumi.set(__self__, "notification_target_id", notification_target_id)
        if notification_target_type is not None:
            pulumi.set(__self__, "notification_target_type", notification_target_type)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="alertSummary")
    def alert_summary(self) -> Optional[pulumi.Input[str]]:
        """
        Summary of alerts triggered when heartbeat expires.
        """
        return pulumi.get(self, "alert_summary")

    @alert_summary.setter
    def alert_summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_summary", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the heartbeat
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> Optional[pulumi.Input[str]]:
        """
        When heartbeat expires
        """
        return pulumi.get(self, "expires_at")

    @expires_at.setter
    def expires_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expires_at", value)

    @property
    @pulumi.getter
    def interval(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "interval")

    @interval.setter
    def interval(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "interval", value)

    @property
    @pulumi.getter(name="intervalUnit")
    def interval_unit(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `seconds`, `minutes`, `hours`.
        """
        return pulumi.get(self, "interval_unit")

    @interval_unit.setter
    def interval_unit(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interval_unit", value)

    @property
    @pulumi.getter(name="lastPingedAt")
    def last_pinged_at(self) -> Optional[pulumi.Input[str]]:
        """
        When the heartbeat was last pinged.
        """
        return pulumi.get(self, "last_pinged_at")

    @last_pinged_at.setter
    def last_pinged_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_pinged_at", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the heartbeat
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notificationTargetId")
    def notification_target_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notification_target_id")

    @notification_target_id.setter
    def notification_target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_target_id", value)

    @property
    @pulumi.getter(name="notificationTargetType")
    def notification_target_type(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `User`, `Group`, `Service`, `EscalationPolicy`.
        """
        return pulumi.get(self, "notification_target_type")

    @notification_target_type.setter
    def notification_target_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notification_target_type", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `waiting`, `active`, `expired`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class Heartbeat(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_summary: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 expires_at: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 interval_unit: Optional[pulumi.Input[str]] = None,
                 last_pinged_at: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_target_id: Optional[pulumi.Input[str]] = None,
                 notification_target_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Heartbeat resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alert_summary: Summary of alerts triggered when heartbeat expires.
        :param pulumi.Input[str] description: The description of the heartbeat
        :param pulumi.Input[str] expires_at: When heartbeat expires
        :param pulumi.Input[str] interval_unit: Value must be one of `seconds`, `minutes`, `hours`.
        :param pulumi.Input[str] last_pinged_at: When the heartbeat was last pinged.
        :param pulumi.Input[str] name: The name of the heartbeat
        :param pulumi.Input[str] notification_target_type: Value must be one of `User`, `Group`, `Service`, `EscalationPolicy`.
        :param pulumi.Input[str] status: Value must be one of `waiting`, `active`, `expired`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: HeartbeatArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Heartbeat resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param HeartbeatArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(HeartbeatArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 alert_summary: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 expires_at: Optional[pulumi.Input[str]] = None,
                 interval: Optional[pulumi.Input[int]] = None,
                 interval_unit: Optional[pulumi.Input[str]] = None,
                 last_pinged_at: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notification_target_id: Optional[pulumi.Input[str]] = None,
                 notification_target_type: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = HeartbeatArgs.__new__(HeartbeatArgs)

            if alert_summary is None and not opts.urn:
                raise TypeError("Missing required property 'alert_summary'")
            __props__.__dict__["alert_summary"] = alert_summary
            __props__.__dict__["description"] = description
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["expires_at"] = expires_at
            if interval is None and not opts.urn:
                raise TypeError("Missing required property 'interval'")
            __props__.__dict__["interval"] = interval
            __props__.__dict__["interval_unit"] = interval_unit
            __props__.__dict__["last_pinged_at"] = last_pinged_at
            __props__.__dict__["name"] = name
            if notification_target_id is None and not opts.urn:
                raise TypeError("Missing required property 'notification_target_id'")
            __props__.__dict__["notification_target_id"] = notification_target_id
            __props__.__dict__["notification_target_type"] = notification_target_type
            __props__.__dict__["status"] = status
        super(Heartbeat, __self__).__init__(
            'rootly:index/heartbeat:Heartbeat',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alert_summary: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            expires_at: Optional[pulumi.Input[str]] = None,
            interval: Optional[pulumi.Input[int]] = None,
            interval_unit: Optional[pulumi.Input[str]] = None,
            last_pinged_at: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notification_target_id: Optional[pulumi.Input[str]] = None,
            notification_target_type: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'Heartbeat':
        """
        Get an existing Heartbeat resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alert_summary: Summary of alerts triggered when heartbeat expires.
        :param pulumi.Input[str] description: The description of the heartbeat
        :param pulumi.Input[str] expires_at: When heartbeat expires
        :param pulumi.Input[str] interval_unit: Value must be one of `seconds`, `minutes`, `hours`.
        :param pulumi.Input[str] last_pinged_at: When the heartbeat was last pinged.
        :param pulumi.Input[str] name: The name of the heartbeat
        :param pulumi.Input[str] notification_target_type: Value must be one of `User`, `Group`, `Service`, `EscalationPolicy`.
        :param pulumi.Input[str] status: Value must be one of `waiting`, `active`, `expired`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _HeartbeatState.__new__(_HeartbeatState)

        __props__.__dict__["alert_summary"] = alert_summary
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["expires_at"] = expires_at
        __props__.__dict__["interval"] = interval
        __props__.__dict__["interval_unit"] = interval_unit
        __props__.__dict__["last_pinged_at"] = last_pinged_at
        __props__.__dict__["name"] = name
        __props__.__dict__["notification_target_id"] = notification_target_id
        __props__.__dict__["notification_target_type"] = notification_target_type
        __props__.__dict__["status"] = status
        return Heartbeat(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alertSummary")
    def alert_summary(self) -> pulumi.Output[str]:
        """
        Summary of alerts triggered when heartbeat expires.
        """
        return pulumi.get(self, "alert_summary")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the heartbeat
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="expiresAt")
    def expires_at(self) -> pulumi.Output[str]:
        """
        When heartbeat expires
        """
        return pulumi.get(self, "expires_at")

    @property
    @pulumi.getter
    def interval(self) -> pulumi.Output[int]:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="intervalUnit")
    def interval_unit(self) -> pulumi.Output[Optional[str]]:
        """
        Value must be one of `seconds`, `minutes`, `hours`.
        """
        return pulumi.get(self, "interval_unit")

    @property
    @pulumi.getter(name="lastPingedAt")
    def last_pinged_at(self) -> pulumi.Output[str]:
        """
        When the heartbeat was last pinged.
        """
        return pulumi.get(self, "last_pinged_at")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the heartbeat
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notificationTargetId")
    def notification_target_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "notification_target_id")

    @property
    @pulumi.getter(name="notificationTargetType")
    def notification_target_type(self) -> pulumi.Output[Optional[str]]:
        """
        Value must be one of `User`, `Group`, `Service`, `EscalationPolicy`.
        """
        return pulumi.get(self, "notification_target_type")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional[str]]:
        """
        Value must be one of `waiting`, `active`, `expired`.
        """
        return pulumi.get(self, "status")

