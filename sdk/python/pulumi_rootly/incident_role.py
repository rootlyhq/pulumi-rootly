# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['IncidentRoleArgs', 'IncidentRole']

@pulumi.input_type
class IncidentRoleArgs:
    def __init__(__self__, *,
                 allow_multi_user_assignment: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 summary: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a IncidentRole resource.
        :param pulumi.Input[bool] allow_multi_user_assignment: Value must be one of true or false
        :param pulumi.Input[str] description: The description of the incident role
        :param pulumi.Input[str] name: The name of the incident role
        :param pulumi.Input[bool] optional: Value must be one of true or false
        :param pulumi.Input[int] position: Position of the incident role
        :param pulumi.Input[str] slug: The slug of the incident role
        :param pulumi.Input[str] summary: The summary of the incident role
        """
        if allow_multi_user_assignment is not None:
            pulumi.set(__self__, "allow_multi_user_assignment", allow_multi_user_assignment)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)

    @property
    @pulumi.getter(name="allowMultiUserAssignment")
    def allow_multi_user_assignment(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "allow_multi_user_assignment")

    @allow_multi_user_assignment.setter
    def allow_multi_user_assignment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_multi_user_assignment", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the incident role
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the incident role
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        Position of the incident role
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the incident role
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def summary(self) -> Optional[pulumi.Input[str]]:
        """
        The summary of the incident role
        """
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary", value)


@pulumi.input_type
class _IncidentRoleState:
    def __init__(__self__, *,
                 allow_multi_user_assignment: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 summary: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IncidentRole resources.
        :param pulumi.Input[bool] allow_multi_user_assignment: Value must be one of true or false
        :param pulumi.Input[str] description: The description of the incident role
        :param pulumi.Input[str] name: The name of the incident role
        :param pulumi.Input[bool] optional: Value must be one of true or false
        :param pulumi.Input[int] position: Position of the incident role
        :param pulumi.Input[str] slug: The slug of the incident role
        :param pulumi.Input[str] summary: The summary of the incident role
        """
        if allow_multi_user_assignment is not None:
            pulumi.set(__self__, "allow_multi_user_assignment", allow_multi_user_assignment)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if optional is not None:
            pulumi.set(__self__, "optional", optional)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)

    @property
    @pulumi.getter(name="allowMultiUserAssignment")
    def allow_multi_user_assignment(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "allow_multi_user_assignment")

    @allow_multi_user_assignment.setter
    def allow_multi_user_assignment(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_multi_user_assignment", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the incident role
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the incident role
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def optional(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "optional")

    @optional.setter
    def optional(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "optional", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        Position of the incident role
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the incident role
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter
    def summary(self) -> Optional[pulumi.Input[str]]:
        """
        The summary of the incident role
        """
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary", value)


class IncidentRole(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_multi_user_assignment: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 summary: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a IncidentRole resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_multi_user_assignment: Value must be one of true or false
        :param pulumi.Input[str] description: The description of the incident role
        :param pulumi.Input[str] name: The name of the incident role
        :param pulumi.Input[bool] optional: Value must be one of true or false
        :param pulumi.Input[int] position: Position of the incident role
        :param pulumi.Input[str] slug: The slug of the incident role
        :param pulumi.Input[str] summary: The summary of the incident role
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[IncidentRoleArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IncidentRole resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IncidentRoleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IncidentRoleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_multi_user_assignment: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 optional: Optional[pulumi.Input[bool]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 summary: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IncidentRoleArgs.__new__(IncidentRoleArgs)

            __props__.__dict__["allow_multi_user_assignment"] = allow_multi_user_assignment
            __props__.__dict__["description"] = description
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["optional"] = optional
            __props__.__dict__["position"] = position
            __props__.__dict__["slug"] = slug
            __props__.__dict__["summary"] = summary
        super(IncidentRole, __self__).__init__(
            'rootly:index/incidentRole:IncidentRole',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_multi_user_assignment: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            optional: Optional[pulumi.Input[bool]] = None,
            position: Optional[pulumi.Input[int]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            summary: Optional[pulumi.Input[str]] = None) -> 'IncidentRole':
        """
        Get an existing IncidentRole resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_multi_user_assignment: Value must be one of true or false
        :param pulumi.Input[str] description: The description of the incident role
        :param pulumi.Input[str] name: The name of the incident role
        :param pulumi.Input[bool] optional: Value must be one of true or false
        :param pulumi.Input[int] position: Position of the incident role
        :param pulumi.Input[str] slug: The slug of the incident role
        :param pulumi.Input[str] summary: The summary of the incident role
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IncidentRoleState.__new__(_IncidentRoleState)

        __props__.__dict__["allow_multi_user_assignment"] = allow_multi_user_assignment
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["optional"] = optional
        __props__.__dict__["position"] = position
        __props__.__dict__["slug"] = slug
        __props__.__dict__["summary"] = summary
        return IncidentRole(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowMultiUserAssignment")
    def allow_multi_user_assignment(self) -> pulumi.Output[bool]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "allow_multi_user_assignment")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the incident role
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the incident role
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def optional(self) -> pulumi.Output[bool]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "optional")

    @property
    @pulumi.getter
    def position(self) -> pulumi.Output[int]:
        """
        Position of the incident role
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        """
        The slug of the incident role
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter
    def summary(self) -> pulumi.Output[str]:
        """
        The summary of the incident role
        """
        return pulumi.get(self, "summary")

