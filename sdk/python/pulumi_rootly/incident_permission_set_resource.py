# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['IncidentPermissionSetResourceArgs', 'IncidentPermissionSetResource']

@pulumi.input_type
class IncidentPermissionSetResourceArgs:
    def __init__(__self__, *,
                 incident_permission_set_id: pulumi.Input[str],
                 kind: Optional[pulumi.Input[str]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a IncidentPermissionSetResource resource.
        :param pulumi.Input[str] kind: Value must be one of `severities`, `incident_types`, `statuses`.
        :param pulumi.Input[bool] private: Value must be one of true or false
        """
        pulumi.set(__self__, "incident_permission_set_id", incident_permission_set_id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if private is not None:
            pulumi.set(__self__, "private", private)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="incidentPermissionSetId")
    def incident_permission_set_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "incident_permission_set_id")

    @incident_permission_set_id.setter
    def incident_permission_set_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "incident_permission_set_id", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `severities`, `incident_types`, `statuses`.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def private(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)


@pulumi.input_type
class _IncidentPermissionSetResourceState:
    def __init__(__self__, *,
                 incident_permission_set_id: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IncidentPermissionSetResource resources.
        :param pulumi.Input[str] kind: Value must be one of `severities`, `incident_types`, `statuses`.
        :param pulumi.Input[bool] private: Value must be one of true or false
        """
        if incident_permission_set_id is not None:
            pulumi.set(__self__, "incident_permission_set_id", incident_permission_set_id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if private is not None:
            pulumi.set(__self__, "private", private)
        if resource_id is not None:
            pulumi.set(__self__, "resource_id", resource_id)
        if resource_type is not None:
            pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="incidentPermissionSetId")
    def incident_permission_set_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_permission_set_id")

    @incident_permission_set_id.setter
    def incident_permission_set_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_permission_set_id", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `severities`, `incident_types`, `statuses`.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def private(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private", value)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_id")

    @resource_id.setter
    def resource_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_id", value)

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resource_type")

    @resource_type.setter
    def resource_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resource_type", value)


class IncidentPermissionSetResource(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 incident_permission_set_id: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a IncidentPermissionSetResource resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] kind: Value must be one of `severities`, `incident_types`, `statuses`.
        :param pulumi.Input[bool] private: Value must be one of true or false
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IncidentPermissionSetResourceArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IncidentPermissionSetResource resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IncidentPermissionSetResourceArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IncidentPermissionSetResourceArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 incident_permission_set_id: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 resource_id: Optional[pulumi.Input[str]] = None,
                 resource_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IncidentPermissionSetResourceArgs.__new__(IncidentPermissionSetResourceArgs)

            if incident_permission_set_id is None and not opts.urn:
                raise TypeError("Missing required property 'incident_permission_set_id'")
            __props__.__dict__["incident_permission_set_id"] = incident_permission_set_id
            __props__.__dict__["kind"] = kind
            __props__.__dict__["private"] = private
            __props__.__dict__["resource_id"] = resource_id
            __props__.__dict__["resource_type"] = resource_type
        super(IncidentPermissionSetResource, __self__).__init__(
            'rootly:index/incidentPermissionSetResource:IncidentPermissionSetResource',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            incident_permission_set_id: Optional[pulumi.Input[str]] = None,
            kind: Optional[pulumi.Input[str]] = None,
            private: Optional[pulumi.Input[bool]] = None,
            resource_id: Optional[pulumi.Input[str]] = None,
            resource_type: Optional[pulumi.Input[str]] = None) -> 'IncidentPermissionSetResource':
        """
        Get an existing IncidentPermissionSetResource resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] kind: Value must be one of `severities`, `incident_types`, `statuses`.
        :param pulumi.Input[bool] private: Value must be one of true or false
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IncidentPermissionSetResourceState.__new__(_IncidentPermissionSetResourceState)

        __props__.__dict__["incident_permission_set_id"] = incident_permission_set_id
        __props__.__dict__["kind"] = kind
        __props__.__dict__["private"] = private
        __props__.__dict__["resource_id"] = resource_id
        __props__.__dict__["resource_type"] = resource_type
        return IncidentPermissionSetResource(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="incidentPermissionSetId")
    def incident_permission_set_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "incident_permission_set_id")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[Optional[str]]:
        """
        Value must be one of `severities`, `incident_types`, `statuses`.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def private(self) -> pulumi.Output[bool]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "private")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> pulumi.Output[str]:
        return pulumi.get(self, "resource_type")

