# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['OnCallShadowArgs', 'OnCallShadow']

@pulumi.input_type
class OnCallShadowArgs:
    def __init__(__self__, *,
                 ends_at: pulumi.Input[str],
                 shadow_user_id: pulumi.Input[int],
                 shadowable_id: pulumi.Input[str],
                 starts_at: pulumi.Input[str],
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 shadowable_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a OnCallShadow resource.
        :param pulumi.Input[str] ends_at: End datetime for shadow shift
        :param pulumi.Input[int] shadow_user_id: Which user the shadow shift belongs to.
        :param pulumi.Input[str] shadowable_id: ID of schedule or user the shadow user is shadowing
        :param pulumi.Input[str] starts_at: Start datetime of shadow shift
        :param pulumi.Input[str] schedule_id: ID of schedule the shadow shift belongs to
        :param pulumi.Input[str] shadowable_type: Value must be one of `User`, `Schedule`.
        """
        pulumi.set(__self__, "ends_at", ends_at)
        pulumi.set(__self__, "shadow_user_id", shadow_user_id)
        pulumi.set(__self__, "shadowable_id", shadowable_id)
        pulumi.set(__self__, "starts_at", starts_at)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if shadowable_type is not None:
            pulumi.set(__self__, "shadowable_type", shadowable_type)

    @property
    @pulumi.getter(name="endsAt")
    def ends_at(self) -> pulumi.Input[str]:
        """
        End datetime for shadow shift
        """
        return pulumi.get(self, "ends_at")

    @ends_at.setter
    def ends_at(self, value: pulumi.Input[str]):
        pulumi.set(self, "ends_at", value)

    @property
    @pulumi.getter(name="shadowUserId")
    def shadow_user_id(self) -> pulumi.Input[int]:
        """
        Which user the shadow shift belongs to.
        """
        return pulumi.get(self, "shadow_user_id")

    @shadow_user_id.setter
    def shadow_user_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "shadow_user_id", value)

    @property
    @pulumi.getter(name="shadowableId")
    def shadowable_id(self) -> pulumi.Input[str]:
        """
        ID of schedule or user the shadow user is shadowing
        """
        return pulumi.get(self, "shadowable_id")

    @shadowable_id.setter
    def shadowable_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "shadowable_id", value)

    @property
    @pulumi.getter(name="startsAt")
    def starts_at(self) -> pulumi.Input[str]:
        """
        Start datetime of shadow shift
        """
        return pulumi.get(self, "starts_at")

    @starts_at.setter
    def starts_at(self, value: pulumi.Input[str]):
        pulumi.set(self, "starts_at", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of schedule the shadow shift belongs to
        """
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter(name="shadowableType")
    def shadowable_type(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `User`, `Schedule`.
        """
        return pulumi.get(self, "shadowable_type")

    @shadowable_type.setter
    def shadowable_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shadowable_type", value)


@pulumi.input_type
class _OnCallShadowState:
    def __init__(__self__, *,
                 ends_at: Optional[pulumi.Input[str]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 shadow_user_id: Optional[pulumi.Input[int]] = None,
                 shadowable_id: Optional[pulumi.Input[str]] = None,
                 shadowable_type: Optional[pulumi.Input[str]] = None,
                 starts_at: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering OnCallShadow resources.
        :param pulumi.Input[str] ends_at: End datetime for shadow shift
        :param pulumi.Input[str] schedule_id: ID of schedule the shadow shift belongs to
        :param pulumi.Input[int] shadow_user_id: Which user the shadow shift belongs to.
        :param pulumi.Input[str] shadowable_id: ID of schedule or user the shadow user is shadowing
        :param pulumi.Input[str] shadowable_type: Value must be one of `User`, `Schedule`.
        :param pulumi.Input[str] starts_at: Start datetime of shadow shift
        """
        if ends_at is not None:
            pulumi.set(__self__, "ends_at", ends_at)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if shadow_user_id is not None:
            pulumi.set(__self__, "shadow_user_id", shadow_user_id)
        if shadowable_id is not None:
            pulumi.set(__self__, "shadowable_id", shadowable_id)
        if shadowable_type is not None:
            pulumi.set(__self__, "shadowable_type", shadowable_type)
        if starts_at is not None:
            pulumi.set(__self__, "starts_at", starts_at)

    @property
    @pulumi.getter(name="endsAt")
    def ends_at(self) -> Optional[pulumi.Input[str]]:
        """
        End datetime for shadow shift
        """
        return pulumi.get(self, "ends_at")

    @ends_at.setter
    def ends_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ends_at", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of schedule the shadow shift belongs to
        """
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter(name="shadowUserId")
    def shadow_user_id(self) -> Optional[pulumi.Input[int]]:
        """
        Which user the shadow shift belongs to.
        """
        return pulumi.get(self, "shadow_user_id")

    @shadow_user_id.setter
    def shadow_user_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "shadow_user_id", value)

    @property
    @pulumi.getter(name="shadowableId")
    def shadowable_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of schedule or user the shadow user is shadowing
        """
        return pulumi.get(self, "shadowable_id")

    @shadowable_id.setter
    def shadowable_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shadowable_id", value)

    @property
    @pulumi.getter(name="shadowableType")
    def shadowable_type(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `User`, `Schedule`.
        """
        return pulumi.get(self, "shadowable_type")

    @shadowable_type.setter
    def shadowable_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shadowable_type", value)

    @property
    @pulumi.getter(name="startsAt")
    def starts_at(self) -> Optional[pulumi.Input[str]]:
        """
        Start datetime of shadow shift
        """
        return pulumi.get(self, "starts_at")

    @starts_at.setter
    def starts_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "starts_at", value)


class OnCallShadow(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ends_at: Optional[pulumi.Input[str]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 shadow_user_id: Optional[pulumi.Input[int]] = None,
                 shadowable_id: Optional[pulumi.Input[str]] = None,
                 shadowable_type: Optional[pulumi.Input[str]] = None,
                 starts_at: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a OnCallShadow resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ends_at: End datetime for shadow shift
        :param pulumi.Input[str] schedule_id: ID of schedule the shadow shift belongs to
        :param pulumi.Input[int] shadow_user_id: Which user the shadow shift belongs to.
        :param pulumi.Input[str] shadowable_id: ID of schedule or user the shadow user is shadowing
        :param pulumi.Input[str] shadowable_type: Value must be one of `User`, `Schedule`.
        :param pulumi.Input[str] starts_at: Start datetime of shadow shift
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OnCallShadowArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OnCallShadow resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OnCallShadowArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OnCallShadowArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ends_at: Optional[pulumi.Input[str]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 shadow_user_id: Optional[pulumi.Input[int]] = None,
                 shadowable_id: Optional[pulumi.Input[str]] = None,
                 shadowable_type: Optional[pulumi.Input[str]] = None,
                 starts_at: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OnCallShadowArgs.__new__(OnCallShadowArgs)

            if ends_at is None and not opts.urn:
                raise TypeError("Missing required property 'ends_at'")
            __props__.__dict__["ends_at"] = ends_at
            __props__.__dict__["schedule_id"] = schedule_id
            if shadow_user_id is None and not opts.urn:
                raise TypeError("Missing required property 'shadow_user_id'")
            __props__.__dict__["shadow_user_id"] = shadow_user_id
            if shadowable_id is None and not opts.urn:
                raise TypeError("Missing required property 'shadowable_id'")
            __props__.__dict__["shadowable_id"] = shadowable_id
            __props__.__dict__["shadowable_type"] = shadowable_type
            if starts_at is None and not opts.urn:
                raise TypeError("Missing required property 'starts_at'")
            __props__.__dict__["starts_at"] = starts_at
        super(OnCallShadow, __self__).__init__(
            'rootly:index/onCallShadow:OnCallShadow',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ends_at: Optional[pulumi.Input[str]] = None,
            schedule_id: Optional[pulumi.Input[str]] = None,
            shadow_user_id: Optional[pulumi.Input[int]] = None,
            shadowable_id: Optional[pulumi.Input[str]] = None,
            shadowable_type: Optional[pulumi.Input[str]] = None,
            starts_at: Optional[pulumi.Input[str]] = None) -> 'OnCallShadow':
        """
        Get an existing OnCallShadow resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ends_at: End datetime for shadow shift
        :param pulumi.Input[str] schedule_id: ID of schedule the shadow shift belongs to
        :param pulumi.Input[int] shadow_user_id: Which user the shadow shift belongs to.
        :param pulumi.Input[str] shadowable_id: ID of schedule or user the shadow user is shadowing
        :param pulumi.Input[str] shadowable_type: Value must be one of `User`, `Schedule`.
        :param pulumi.Input[str] starts_at: Start datetime of shadow shift
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OnCallShadowState.__new__(_OnCallShadowState)

        __props__.__dict__["ends_at"] = ends_at
        __props__.__dict__["schedule_id"] = schedule_id
        __props__.__dict__["shadow_user_id"] = shadow_user_id
        __props__.__dict__["shadowable_id"] = shadowable_id
        __props__.__dict__["shadowable_type"] = shadowable_type
        __props__.__dict__["starts_at"] = starts_at
        return OnCallShadow(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="endsAt")
    def ends_at(self) -> pulumi.Output[str]:
        """
        End datetime for shadow shift
        """
        return pulumi.get(self, "ends_at")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> pulumi.Output[str]:
        """
        ID of schedule the shadow shift belongs to
        """
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter(name="shadowUserId")
    def shadow_user_id(self) -> pulumi.Output[int]:
        """
        Which user the shadow shift belongs to.
        """
        return pulumi.get(self, "shadow_user_id")

    @property
    @pulumi.getter(name="shadowableId")
    def shadowable_id(self) -> pulumi.Output[str]:
        """
        ID of schedule or user the shadow user is shadowing
        """
        return pulumi.get(self, "shadowable_id")

    @property
    @pulumi.getter(name="shadowableType")
    def shadowable_type(self) -> pulumi.Output[Optional[str]]:
        """
        Value must be one of `User`, `Schedule`.
        """
        return pulumi.get(self, "shadowable_type")

    @property
    @pulumi.getter(name="startsAt")
    def starts_at(self) -> pulumi.Output[str]:
        """
        Start datetime of shadow shift
        """
        return pulumi.get(self, "starts_at")

