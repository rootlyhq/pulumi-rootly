# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['EscalationLevelArgs', 'EscalationLevel']

@pulumi.input_type
class EscalationLevelArgs:
    def __init__(__self__, *,
                 notification_target_params: pulumi.Input[Sequence[pulumi.Input['EscalationLevelNotificationTargetParamArgs']]],
                 position: pulumi.Input[int],
                 delay: Optional[pulumi.Input[int]] = None,
                 escalation_policy_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a EscalationLevel resource.
        :param pulumi.Input[Sequence[pulumi.Input['EscalationLevelNotificationTargetParamArgs']]] notification_target_params: Escalation level's notification targets
        :param pulumi.Input[int] position: Position of the escalation policy level
        :param pulumi.Input[int] delay: Delay before notification targets will be alerted.
        :param pulumi.Input[str] escalation_policy_id: The ID of the escalation policy
        """
        pulumi.set(__self__, "notification_target_params", notification_target_params)
        pulumi.set(__self__, "position", position)
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if escalation_policy_id is not None:
            pulumi.set(__self__, "escalation_policy_id", escalation_policy_id)

    @property
    @pulumi.getter(name="notificationTargetParams")
    def notification_target_params(self) -> pulumi.Input[Sequence[pulumi.Input['EscalationLevelNotificationTargetParamArgs']]]:
        """
        Escalation level's notification targets
        """
        return pulumi.get(self, "notification_target_params")

    @notification_target_params.setter
    def notification_target_params(self, value: pulumi.Input[Sequence[pulumi.Input['EscalationLevelNotificationTargetParamArgs']]]):
        pulumi.set(self, "notification_target_params", value)

    @property
    @pulumi.getter
    def position(self) -> pulumi.Input[int]:
        """
        Position of the escalation policy level
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: pulumi.Input[int]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input[int]]:
        """
        Delay before notification targets will be alerted.
        """
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter(name="escalationPolicyId")
    def escalation_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the escalation policy
        """
        return pulumi.get(self, "escalation_policy_id")

    @escalation_policy_id.setter
    def escalation_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "escalation_policy_id", value)


@pulumi.input_type
class _EscalationLevelState:
    def __init__(__self__, *,
                 delay: Optional[pulumi.Input[int]] = None,
                 escalation_policy_id: Optional[pulumi.Input[str]] = None,
                 notification_target_params: Optional[pulumi.Input[Sequence[pulumi.Input['EscalationLevelNotificationTargetParamArgs']]]] = None,
                 position: Optional[pulumi.Input[int]] = None):
        """
        Input properties used for looking up and filtering EscalationLevel resources.
        :param pulumi.Input[int] delay: Delay before notification targets will be alerted.
        :param pulumi.Input[str] escalation_policy_id: The ID of the escalation policy
        :param pulumi.Input[Sequence[pulumi.Input['EscalationLevelNotificationTargetParamArgs']]] notification_target_params: Escalation level's notification targets
        :param pulumi.Input[int] position: Position of the escalation policy level
        """
        if delay is not None:
            pulumi.set(__self__, "delay", delay)
        if escalation_policy_id is not None:
            pulumi.set(__self__, "escalation_policy_id", escalation_policy_id)
        if notification_target_params is not None:
            pulumi.set(__self__, "notification_target_params", notification_target_params)
        if position is not None:
            pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter
    def delay(self) -> Optional[pulumi.Input[int]]:
        """
        Delay before notification targets will be alerted.
        """
        return pulumi.get(self, "delay")

    @delay.setter
    def delay(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "delay", value)

    @property
    @pulumi.getter(name="escalationPolicyId")
    def escalation_policy_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the escalation policy
        """
        return pulumi.get(self, "escalation_policy_id")

    @escalation_policy_id.setter
    def escalation_policy_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "escalation_policy_id", value)

    @property
    @pulumi.getter(name="notificationTargetParams")
    def notification_target_params(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['EscalationLevelNotificationTargetParamArgs']]]]:
        """
        Escalation level's notification targets
        """
        return pulumi.get(self, "notification_target_params")

    @notification_target_params.setter
    def notification_target_params(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['EscalationLevelNotificationTargetParamArgs']]]]):
        pulumi.set(self, "notification_target_params", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        Position of the escalation policy level
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)


class EscalationLevel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delay: Optional[pulumi.Input[int]] = None,
                 escalation_policy_id: Optional[pulumi.Input[str]] = None,
                 notification_target_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EscalationLevelNotificationTargetParamArgs', 'EscalationLevelNotificationTargetParamArgsDict']]]]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        """
        Create a EscalationLevel resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] delay: Delay before notification targets will be alerted.
        :param pulumi.Input[str] escalation_policy_id: The ID of the escalation policy
        :param pulumi.Input[Sequence[pulumi.Input[Union['EscalationLevelNotificationTargetParamArgs', 'EscalationLevelNotificationTargetParamArgsDict']]]] notification_target_params: Escalation level's notification targets
        :param pulumi.Input[int] position: Position of the escalation policy level
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: EscalationLevelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a EscalationLevel resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param EscalationLevelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(EscalationLevelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 delay: Optional[pulumi.Input[int]] = None,
                 escalation_policy_id: Optional[pulumi.Input[str]] = None,
                 notification_target_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EscalationLevelNotificationTargetParamArgs', 'EscalationLevelNotificationTargetParamArgsDict']]]]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = EscalationLevelArgs.__new__(EscalationLevelArgs)

            __props__.__dict__["delay"] = delay
            __props__.__dict__["escalation_policy_id"] = escalation_policy_id
            if notification_target_params is None and not opts.urn:
                raise TypeError("Missing required property 'notification_target_params'")
            __props__.__dict__["notification_target_params"] = notification_target_params
            if position is None and not opts.urn:
                raise TypeError("Missing required property 'position'")
            __props__.__dict__["position"] = position
        super(EscalationLevel, __self__).__init__(
            'rootly:index/escalationLevel:EscalationLevel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            delay: Optional[pulumi.Input[int]] = None,
            escalation_policy_id: Optional[pulumi.Input[str]] = None,
            notification_target_params: Optional[pulumi.Input[Sequence[pulumi.Input[Union['EscalationLevelNotificationTargetParamArgs', 'EscalationLevelNotificationTargetParamArgsDict']]]]] = None,
            position: Optional[pulumi.Input[int]] = None) -> 'EscalationLevel':
        """
        Get an existing EscalationLevel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] delay: Delay before notification targets will be alerted.
        :param pulumi.Input[str] escalation_policy_id: The ID of the escalation policy
        :param pulumi.Input[Sequence[pulumi.Input[Union['EscalationLevelNotificationTargetParamArgs', 'EscalationLevelNotificationTargetParamArgsDict']]]] notification_target_params: Escalation level's notification targets
        :param pulumi.Input[int] position: Position of the escalation policy level
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _EscalationLevelState.__new__(_EscalationLevelState)

        __props__.__dict__["delay"] = delay
        __props__.__dict__["escalation_policy_id"] = escalation_policy_id
        __props__.__dict__["notification_target_params"] = notification_target_params
        __props__.__dict__["position"] = position
        return EscalationLevel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def delay(self) -> pulumi.Output[int]:
        """
        Delay before notification targets will be alerted.
        """
        return pulumi.get(self, "delay")

    @property
    @pulumi.getter(name="escalationPolicyId")
    def escalation_policy_id(self) -> pulumi.Output[str]:
        """
        The ID of the escalation policy
        """
        return pulumi.get(self, "escalation_policy_id")

    @property
    @pulumi.getter(name="notificationTargetParams")
    def notification_target_params(self) -> pulumi.Output[Sequence['outputs.EscalationLevelNotificationTargetParam']]:
        """
        Escalation level's notification targets
        """
        return pulumi.get(self, "notification_target_params")

    @property
    @pulumi.getter
    def position(self) -> pulumi.Output[int]:
        """
        Position of the escalation policy level
        """
        return pulumi.get(self, "position")

