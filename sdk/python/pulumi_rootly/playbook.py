# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['PlaybookArgs', 'Playbook']

@pulumi.input_type
class PlaybookArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_url: Optional[pulumi.Input[str]] = None,
                 functionality_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_type_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 severity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 summary: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Playbook resource.
        :param pulumi.Input[str] title: The title of the playbook
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_ids: The Environment ID's to attach to the incident
        :param pulumi.Input[str] external_url: The external url of the playbook
        :param pulumi.Input[Sequence[pulumi.Input[str]]] functionality_ids: The Functionality ID's to attach to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_ids: The Team ID's to attach to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] incident_type_ids: The Incident Type ID's to attach to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_ids: The Service ID's to attach to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] severity_ids: The Severity ID's to attach to the incident
        :param pulumi.Input[str] summary: The summary of the playbook
        """
        pulumi.set(__self__, "title", title)
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if external_url is not None:
            pulumi.set(__self__, "external_url", external_url)
        if functionality_ids is not None:
            pulumi.set(__self__, "functionality_ids", functionality_ids)
        if group_ids is not None:
            pulumi.set(__self__, "group_ids", group_ids)
        if incident_type_ids is not None:
            pulumi.set(__self__, "incident_type_ids", incident_type_ids)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if severity_ids is not None:
            pulumi.set(__self__, "severity_ids", severity_ids)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The title of the playbook
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Environment ID's to attach to the incident
        """
        return pulumi.get(self, "environment_ids")

    @environment_ids.setter
    def environment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_ids", value)

    @property
    @pulumi.getter(name="externalUrl")
    def external_url(self) -> Optional[pulumi.Input[str]]:
        """
        The external url of the playbook
        """
        return pulumi.get(self, "external_url")

    @external_url.setter
    def external_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_url", value)

    @property
    @pulumi.getter(name="functionalityIds")
    def functionality_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Functionality ID's to attach to the incident
        """
        return pulumi.get(self, "functionality_ids")

    @functionality_ids.setter
    def functionality_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "functionality_ids", value)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Team ID's to attach to the incident
        """
        return pulumi.get(self, "group_ids")

    @group_ids.setter
    def group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_ids", value)

    @property
    @pulumi.getter(name="incidentTypeIds")
    def incident_type_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Incident Type ID's to attach to the incident
        """
        return pulumi.get(self, "incident_type_ids")

    @incident_type_ids.setter
    def incident_type_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_type_ids", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Service ID's to attach to the incident
        """
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter(name="severityIds")
    def severity_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Severity ID's to attach to the incident
        """
        return pulumi.get(self, "severity_ids")

    @severity_ids.setter
    def severity_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "severity_ids", value)

    @property
    @pulumi.getter
    def summary(self) -> Optional[pulumi.Input[str]]:
        """
        The summary of the playbook
        """
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary", value)


@pulumi.input_type
class _PlaybookState:
    def __init__(__self__, *,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_url: Optional[pulumi.Input[str]] = None,
                 functionality_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_type_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 severity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 summary: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Playbook resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_ids: The Environment ID's to attach to the incident
        :param pulumi.Input[str] external_url: The external url of the playbook
        :param pulumi.Input[Sequence[pulumi.Input[str]]] functionality_ids: The Functionality ID's to attach to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_ids: The Team ID's to attach to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] incident_type_ids: The Incident Type ID's to attach to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_ids: The Service ID's to attach to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] severity_ids: The Severity ID's to attach to the incident
        :param pulumi.Input[str] summary: The summary of the playbook
        :param pulumi.Input[str] title: The title of the playbook
        """
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if external_url is not None:
            pulumi.set(__self__, "external_url", external_url)
        if functionality_ids is not None:
            pulumi.set(__self__, "functionality_ids", functionality_ids)
        if group_ids is not None:
            pulumi.set(__self__, "group_ids", group_ids)
        if incident_type_ids is not None:
            pulumi.set(__self__, "incident_type_ids", incident_type_ids)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if severity_ids is not None:
            pulumi.set(__self__, "severity_ids", severity_ids)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Environment ID's to attach to the incident
        """
        return pulumi.get(self, "environment_ids")

    @environment_ids.setter
    def environment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_ids", value)

    @property
    @pulumi.getter(name="externalUrl")
    def external_url(self) -> Optional[pulumi.Input[str]]:
        """
        The external url of the playbook
        """
        return pulumi.get(self, "external_url")

    @external_url.setter
    def external_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "external_url", value)

    @property
    @pulumi.getter(name="functionalityIds")
    def functionality_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Functionality ID's to attach to the incident
        """
        return pulumi.get(self, "functionality_ids")

    @functionality_ids.setter
    def functionality_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "functionality_ids", value)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Team ID's to attach to the incident
        """
        return pulumi.get(self, "group_ids")

    @group_ids.setter
    def group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_ids", value)

    @property
    @pulumi.getter(name="incidentTypeIds")
    def incident_type_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Incident Type ID's to attach to the incident
        """
        return pulumi.get(self, "incident_type_ids")

    @incident_type_ids.setter
    def incident_type_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_type_ids", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Service ID's to attach to the incident
        """
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter(name="severityIds")
    def severity_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The Severity ID's to attach to the incident
        """
        return pulumi.get(self, "severity_ids")

    @severity_ids.setter
    def severity_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "severity_ids", value)

    @property
    @pulumi.getter
    def summary(self) -> Optional[pulumi.Input[str]]:
        """
        The summary of the playbook
        """
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the playbook
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


class Playbook(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_url: Optional[pulumi.Input[str]] = None,
                 functionality_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_type_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 severity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 summary: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Playbook resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_ids: The Environment ID's to attach to the incident
        :param pulumi.Input[str] external_url: The external url of the playbook
        :param pulumi.Input[Sequence[pulumi.Input[str]]] functionality_ids: The Functionality ID's to attach to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_ids: The Team ID's to attach to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] incident_type_ids: The Incident Type ID's to attach to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_ids: The Service ID's to attach to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] severity_ids: The Severity ID's to attach to the incident
        :param pulumi.Input[str] summary: The summary of the playbook
        :param pulumi.Input[str] title: The title of the playbook
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: PlaybookArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Playbook resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param PlaybookArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(PlaybookArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 external_url: Optional[pulumi.Input[str]] = None,
                 functionality_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_type_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 severity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 summary: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = PlaybookArgs.__new__(PlaybookArgs)

            __props__.__dict__["environment_ids"] = environment_ids
            __props__.__dict__["external_url"] = external_url
            __props__.__dict__["functionality_ids"] = functionality_ids
            __props__.__dict__["group_ids"] = group_ids
            __props__.__dict__["incident_type_ids"] = incident_type_ids
            __props__.__dict__["service_ids"] = service_ids
            __props__.__dict__["severity_ids"] = severity_ids
            __props__.__dict__["summary"] = summary
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
        super(Playbook, __self__).__init__(
            'rootly:index/playbook:Playbook',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            external_url: Optional[pulumi.Input[str]] = None,
            functionality_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            incident_type_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            severity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            summary: Optional[pulumi.Input[str]] = None,
            title: Optional[pulumi.Input[str]] = None) -> 'Playbook':
        """
        Get an existing Playbook resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_ids: The Environment ID's to attach to the incident
        :param pulumi.Input[str] external_url: The external url of the playbook
        :param pulumi.Input[Sequence[pulumi.Input[str]]] functionality_ids: The Functionality ID's to attach to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_ids: The Team ID's to attach to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] incident_type_ids: The Incident Type ID's to attach to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_ids: The Service ID's to attach to the incident
        :param pulumi.Input[Sequence[pulumi.Input[str]]] severity_ids: The Severity ID's to attach to the incident
        :param pulumi.Input[str] summary: The summary of the playbook
        :param pulumi.Input[str] title: The title of the playbook
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _PlaybookState.__new__(_PlaybookState)

        __props__.__dict__["environment_ids"] = environment_ids
        __props__.__dict__["external_url"] = external_url
        __props__.__dict__["functionality_ids"] = functionality_ids
        __props__.__dict__["group_ids"] = group_ids
        __props__.__dict__["incident_type_ids"] = incident_type_ids
        __props__.__dict__["service_ids"] = service_ids
        __props__.__dict__["severity_ids"] = severity_ids
        __props__.__dict__["summary"] = summary
        __props__.__dict__["title"] = title
        return Playbook(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The Environment ID's to attach to the incident
        """
        return pulumi.get(self, "environment_ids")

    @property
    @pulumi.getter(name="externalUrl")
    def external_url(self) -> pulumi.Output[str]:
        """
        The external url of the playbook
        """
        return pulumi.get(self, "external_url")

    @property
    @pulumi.getter(name="functionalityIds")
    def functionality_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The Functionality ID's to attach to the incident
        """
        return pulumi.get(self, "functionality_ids")

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The Team ID's to attach to the incident
        """
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter(name="incidentTypeIds")
    def incident_type_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The Incident Type ID's to attach to the incident
        """
        return pulumi.get(self, "incident_type_ids")

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The Service ID's to attach to the incident
        """
        return pulumi.get(self, "service_ids")

    @property
    @pulumi.getter(name="severityIds")
    def severity_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        The Severity ID's to attach to the incident
        """
        return pulumi.get(self, "severity_ids")

    @property
    @pulumi.getter
    def summary(self) -> pulumi.Output[str]:
        """
        The summary of the playbook
        """
        return pulumi.get(self, "summary")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        The title of the playbook
        """
        return pulumi.get(self, "title")

