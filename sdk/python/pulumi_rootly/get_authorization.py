# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetAuthorizationResult',
    'AwaitableGetAuthorizationResult',
    'get_authorization',
    'get_authorization_output',
]

@pulumi.output_type
class GetAuthorizationResult:
    """
    A collection of values returned by getAuthorization.
    """
    def __init__(__self__, authorizable_id=None, authorizable_type=None, created_at=None, grantee_id=None, grantee_type=None, id=None):
        if authorizable_id and not isinstance(authorizable_id, str):
            raise TypeError("Expected argument 'authorizable_id' to be a str")
        pulumi.set(__self__, "authorizable_id", authorizable_id)
        if authorizable_type and not isinstance(authorizable_type, str):
            raise TypeError("Expected argument 'authorizable_type' to be a str")
        pulumi.set(__self__, "authorizable_type", authorizable_type)
        if created_at and not isinstance(created_at, dict):
            raise TypeError("Expected argument 'created_at' to be a dict")
        pulumi.set(__self__, "created_at", created_at)
        if grantee_id and not isinstance(grantee_id, str):
            raise TypeError("Expected argument 'grantee_id' to be a str")
        pulumi.set(__self__, "grantee_id", grantee_id)
        if grantee_type and not isinstance(grantee_type, str):
            raise TypeError("Expected argument 'grantee_type' to be a str")
        pulumi.set(__self__, "grantee_type", grantee_type)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="authorizableId")
    def authorizable_id(self) -> str:
        return pulumi.get(self, "authorizable_id")

    @property
    @pulumi.getter(name="authorizableType")
    def authorizable_type(self) -> str:
        return pulumi.get(self, "authorizable_type")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[Mapping[str, str]]:
        """
        Filter by date range using 'lt' and 'gt'.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="granteeId")
    def grantee_id(self) -> str:
        return pulumi.get(self, "grantee_id")

    @property
    @pulumi.getter(name="granteeType")
    def grantee_type(self) -> str:
        return pulumi.get(self, "grantee_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")


class AwaitableGetAuthorizationResult(GetAuthorizationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuthorizationResult(
            authorizable_id=self.authorizable_id,
            authorizable_type=self.authorizable_type,
            created_at=self.created_at,
            grantee_id=self.grantee_id,
            grantee_type=self.grantee_type,
            id=self.id)


def get_authorization(authorizable_id: Optional[str] = None,
                      authorizable_type: Optional[str] = None,
                      created_at: Optional[Mapping[str, str]] = None,
                      grantee_id: Optional[str] = None,
                      grantee_type: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuthorizationResult:
    """
    Use this data source to access information about an existing resource.

    :param Mapping[str, str] created_at: Filter by date range using 'lt' and 'gt'.
    """
    __args__ = dict()
    __args__['authorizableId'] = authorizable_id
    __args__['authorizableType'] = authorizable_type
    __args__['createdAt'] = created_at
    __args__['granteeId'] = grantee_id
    __args__['granteeType'] = grantee_type
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('rootly:index/getAuthorization:getAuthorization', __args__, opts=opts, typ=GetAuthorizationResult).value

    return AwaitableGetAuthorizationResult(
        authorizable_id=pulumi.get(__ret__, 'authorizable_id'),
        authorizable_type=pulumi.get(__ret__, 'authorizable_type'),
        created_at=pulumi.get(__ret__, 'created_at'),
        grantee_id=pulumi.get(__ret__, 'grantee_id'),
        grantee_type=pulumi.get(__ret__, 'grantee_type'),
        id=pulumi.get(__ret__, 'id'))


@_utilities.lift_output_func(get_authorization)
def get_authorization_output(authorizable_id: Optional[pulumi.Input[Optional[str]]] = None,
                             authorizable_type: Optional[pulumi.Input[Optional[str]]] = None,
                             created_at: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                             grantee_id: Optional[pulumi.Input[Optional[str]]] = None,
                             grantee_type: Optional[pulumi.Input[Optional[str]]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAuthorizationResult]:
    """
    Use this data source to access information about an existing resource.

    :param Mapping[str, str] created_at: Filter by date range using 'lt' and 'gt'.
    """
    ...
