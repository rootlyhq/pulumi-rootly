# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['DashboardPanelArgs', 'DashboardPanel']

@pulumi.input_type
class DashboardPanelArgs:
    def __init__(__self__, *,
                 dashboard_id: pulumi.Input[str],
                 params: pulumi.Input['DashboardPanelParamsArgs'],
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input['DashboardPanelPositionArgs']] = None):
        """
        The set of arguments for constructing a DashboardPanel resource.
        :param pulumi.Input[str] dashboard_id: The id of the parent dashboard
        :param pulumi.Input['DashboardPanelParamsArgs'] params: The params JSON of the dashboard_panel. See rootly API docs for schema.
        :param pulumi.Input[str] name: The name of the dashboard_panel
        """
        pulumi.set(__self__, "dashboard_id", dashboard_id)
        pulumi.set(__self__, "params", params)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if position is not None:
            pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> pulumi.Input[str]:
        """
        The id of the parent dashboard
        """
        return pulumi.get(self, "dashboard_id")

    @dashboard_id.setter
    def dashboard_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "dashboard_id", value)

    @property
    @pulumi.getter
    def params(self) -> pulumi.Input['DashboardPanelParamsArgs']:
        """
        The params JSON of the dashboard_panel. See rootly API docs for schema.
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: pulumi.Input['DashboardPanelParamsArgs']):
        pulumi.set(self, "params", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the dashboard_panel
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['DashboardPanelPositionArgs']]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['DashboardPanelPositionArgs']]):
        pulumi.set(self, "position", value)


@pulumi.input_type
class _DashboardPanelState:
    def __init__(__self__, *,
                 dashboard_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 params: Optional[pulumi.Input['DashboardPanelParamsArgs']] = None,
                 position: Optional[pulumi.Input['DashboardPanelPositionArgs']] = None):
        """
        Input properties used for looking up and filtering DashboardPanel resources.
        :param pulumi.Input[str] dashboard_id: The id of the parent dashboard
        :param pulumi.Input[str] name: The name of the dashboard_panel
        :param pulumi.Input['DashboardPanelParamsArgs'] params: The params JSON of the dashboard_panel. See rootly API docs for schema.
        """
        if dashboard_id is not None:
            pulumi.set(__self__, "dashboard_id", dashboard_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if position is not None:
            pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> Optional[pulumi.Input[str]]:
        """
        The id of the parent dashboard
        """
        return pulumi.get(self, "dashboard_id")

    @dashboard_id.setter
    def dashboard_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dashboard_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the dashboard_panel
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input['DashboardPanelParamsArgs']]:
        """
        The params JSON of the dashboard_panel. See rootly API docs for schema.
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input['DashboardPanelParamsArgs']]):
        pulumi.set(self, "params", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input['DashboardPanelPositionArgs']]:
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input['DashboardPanelPositionArgs']]):
        pulumi.set(self, "position", value)


class DashboardPanel(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dashboard_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 params: Optional[pulumi.Input[Union['DashboardPanelParamsArgs', 'DashboardPanelParamsArgsDict']]] = None,
                 position: Optional[pulumi.Input[Union['DashboardPanelPositionArgs', 'DashboardPanelPositionArgsDict']]] = None,
                 __props__=None):
        """
        Manages dashboard_panels.

        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dashboard_id: The id of the parent dashboard
        :param pulumi.Input[str] name: The name of the dashboard_panel
        :param pulumi.Input[Union['DashboardPanelParamsArgs', 'DashboardPanelParamsArgsDict']] params: The params JSON of the dashboard_panel. See rootly API docs for schema.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DashboardPanelArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages dashboard_panels.

        ## Example Usage

        :param str resource_name: The name of the resource.
        :param DashboardPanelArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DashboardPanelArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 dashboard_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 params: Optional[pulumi.Input[Union['DashboardPanelParamsArgs', 'DashboardPanelParamsArgsDict']]] = None,
                 position: Optional[pulumi.Input[Union['DashboardPanelPositionArgs', 'DashboardPanelPositionArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DashboardPanelArgs.__new__(DashboardPanelArgs)

            if dashboard_id is None and not opts.urn:
                raise TypeError("Missing required property 'dashboard_id'")
            __props__.__dict__["dashboard_id"] = dashboard_id
            __props__.__dict__["name"] = name
            if params is None and not opts.urn:
                raise TypeError("Missing required property 'params'")
            __props__.__dict__["params"] = params
            __props__.__dict__["position"] = position
        super(DashboardPanel, __self__).__init__(
            'rootly:index/dashboardPanel:DashboardPanel',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            dashboard_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            params: Optional[pulumi.Input[Union['DashboardPanelParamsArgs', 'DashboardPanelParamsArgsDict']]] = None,
            position: Optional[pulumi.Input[Union['DashboardPanelPositionArgs', 'DashboardPanelPositionArgsDict']]] = None) -> 'DashboardPanel':
        """
        Get an existing DashboardPanel resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] dashboard_id: The id of the parent dashboard
        :param pulumi.Input[str] name: The name of the dashboard_panel
        :param pulumi.Input[Union['DashboardPanelParamsArgs', 'DashboardPanelParamsArgsDict']] params: The params JSON of the dashboard_panel. See rootly API docs for schema.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DashboardPanelState.__new__(_DashboardPanelState)

        __props__.__dict__["dashboard_id"] = dashboard_id
        __props__.__dict__["name"] = name
        __props__.__dict__["params"] = params
        __props__.__dict__["position"] = position
        return DashboardPanel(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="dashboardId")
    def dashboard_id(self) -> pulumi.Output[str]:
        """
        The id of the parent dashboard
        """
        return pulumi.get(self, "dashboard_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the dashboard_panel
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def params(self) -> pulumi.Output['outputs.DashboardPanelParams']:
        """
        The params JSON of the dashboard_panel. See rootly API docs for schema.
        """
        return pulumi.get(self, "params")

    @property
    @pulumi.getter
    def position(self) -> pulumi.Output[Optional['outputs.DashboardPanelPosition']]:
        return pulumi.get(self, "position")

