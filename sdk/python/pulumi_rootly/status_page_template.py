# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['StatusPageTemplateArgs', 'StatusPageTemplate']

@pulumi.input_type
class StatusPageTemplateArgs:
    def __init__(__self__, *,
                 body: pulumi.Input[str],
                 title: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 should_notify_subscribers: Optional[pulumi.Input[bool]] = None,
                 status_page_id: Optional[pulumi.Input[str]] = None,
                 update_status: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a StatusPageTemplate resource.
        :param pulumi.Input[str] body: Description of the event the template will populate
        :param pulumi.Input[str] title: Title of the template
        :param pulumi.Input[str] kind: The kind of the status page template. Value must be one of `normal`, `scheduled`.
        :param pulumi.Input[int] position: Position of the workflow task
        :param pulumi.Input[bool] should_notify_subscribers: Controls if incident subscribers should be notified. Value must be one of true or false
        :param pulumi.Input[str] update_status: Status of the event the template will populate
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "title", title)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if should_notify_subscribers is not None:
            pulumi.set(__self__, "should_notify_subscribers", should_notify_subscribers)
        if status_page_id is not None:
            pulumi.set(__self__, "status_page_id", status_page_id)
        if update_status is not None:
            pulumi.set(__self__, "update_status", update_status)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Input[str]:
        """
        Description of the event the template will populate
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: pulumi.Input[str]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Title of the template
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        The kind of the status page template. Value must be one of `normal`, `scheduled`.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        Position of the workflow task
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter(name="shouldNotifySubscribers")
    def should_notify_subscribers(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls if incident subscribers should be notified. Value must be one of true or false
        """
        return pulumi.get(self, "should_notify_subscribers")

    @should_notify_subscribers.setter
    def should_notify_subscribers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_notify_subscribers", value)

    @property
    @pulumi.getter(name="statusPageId")
    def status_page_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status_page_id")

    @status_page_id.setter
    def status_page_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_page_id", value)

    @property
    @pulumi.getter(name="updateStatus")
    def update_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the event the template will populate
        """
        return pulumi.get(self, "update_status")

    @update_status.setter
    def update_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_status", value)


@pulumi.input_type
class _StatusPageTemplateState:
    def __init__(__self__, *,
                 body: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 should_notify_subscribers: Optional[pulumi.Input[bool]] = None,
                 status_page_id: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 update_status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering StatusPageTemplate resources.
        :param pulumi.Input[str] body: Description of the event the template will populate
        :param pulumi.Input[str] kind: The kind of the status page template. Value must be one of `normal`, `scheduled`.
        :param pulumi.Input[int] position: Position of the workflow task
        :param pulumi.Input[bool] should_notify_subscribers: Controls if incident subscribers should be notified. Value must be one of true or false
        :param pulumi.Input[str] title: Title of the template
        :param pulumi.Input[str] update_status: Status of the event the template will populate
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if should_notify_subscribers is not None:
            pulumi.set(__self__, "should_notify_subscribers", should_notify_subscribers)
        if status_page_id is not None:
            pulumi.set(__self__, "status_page_id", status_page_id)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if update_status is not None:
            pulumi.set(__self__, "update_status", update_status)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the event the template will populate
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        The kind of the status page template. Value must be one of `normal`, `scheduled`.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        Position of the workflow task
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter(name="shouldNotifySubscribers")
    def should_notify_subscribers(self) -> Optional[pulumi.Input[bool]]:
        """
        Controls if incident subscribers should be notified. Value must be one of true or false
        """
        return pulumi.get(self, "should_notify_subscribers")

    @should_notify_subscribers.setter
    def should_notify_subscribers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_notify_subscribers", value)

    @property
    @pulumi.getter(name="statusPageId")
    def status_page_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status_page_id")

    @status_page_id.setter
    def status_page_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status_page_id", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Title of the template
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="updateStatus")
    def update_status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the event the template will populate
        """
        return pulumi.get(self, "update_status")

    @update_status.setter
    def update_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_status", value)


class StatusPageTemplate(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 should_notify_subscribers: Optional[pulumi.Input[bool]] = None,
                 status_page_id: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 update_status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a StatusPageTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] body: Description of the event the template will populate
        :param pulumi.Input[str] kind: The kind of the status page template. Value must be one of `normal`, `scheduled`.
        :param pulumi.Input[int] position: Position of the workflow task
        :param pulumi.Input[bool] should_notify_subscribers: Controls if incident subscribers should be notified. Value must be one of true or false
        :param pulumi.Input[str] title: Title of the template
        :param pulumi.Input[str] update_status: Status of the event the template will populate
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StatusPageTemplateArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a StatusPageTemplate resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param StatusPageTemplateArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StatusPageTemplateArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 body: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 should_notify_subscribers: Optional[pulumi.Input[bool]] = None,
                 status_page_id: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 update_status: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StatusPageTemplateArgs.__new__(StatusPageTemplateArgs)

            if body is None and not opts.urn:
                raise TypeError("Missing required property 'body'")
            __props__.__dict__["body"] = body
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["kind"] = kind
            __props__.__dict__["position"] = position
            __props__.__dict__["should_notify_subscribers"] = should_notify_subscribers
            __props__.__dict__["status_page_id"] = status_page_id
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            __props__.__dict__["update_status"] = update_status
        super(StatusPageTemplate, __self__).__init__(
            'rootly:index/statusPageTemplate:StatusPageTemplate',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            body: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            kind: Optional[pulumi.Input[str]] = None,
            position: Optional[pulumi.Input[int]] = None,
            should_notify_subscribers: Optional[pulumi.Input[bool]] = None,
            status_page_id: Optional[pulumi.Input[str]] = None,
            title: Optional[pulumi.Input[str]] = None,
            update_status: Optional[pulumi.Input[str]] = None) -> 'StatusPageTemplate':
        """
        Get an existing StatusPageTemplate resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] body: Description of the event the template will populate
        :param pulumi.Input[str] kind: The kind of the status page template. Value must be one of `normal`, `scheduled`.
        :param pulumi.Input[int] position: Position of the workflow task
        :param pulumi.Input[bool] should_notify_subscribers: Controls if incident subscribers should be notified. Value must be one of true or false
        :param pulumi.Input[str] title: Title of the template
        :param pulumi.Input[str] update_status: Status of the event the template will populate
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StatusPageTemplateState.__new__(_StatusPageTemplateState)

        __props__.__dict__["body"] = body
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["kind"] = kind
        __props__.__dict__["position"] = position
        __props__.__dict__["should_notify_subscribers"] = should_notify_subscribers
        __props__.__dict__["status_page_id"] = status_page_id
        __props__.__dict__["title"] = title
        __props__.__dict__["update_status"] = update_status
        return StatusPageTemplate(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Output[str]:
        """
        Description of the event the template will populate
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[Optional[str]]:
        """
        The kind of the status page template. Value must be one of `normal`, `scheduled`.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def position(self) -> pulumi.Output[int]:
        """
        Position of the workflow task
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter(name="shouldNotifySubscribers")
    def should_notify_subscribers(self) -> pulumi.Output[bool]:
        """
        Controls if incident subscribers should be notified. Value must be one of true or false
        """
        return pulumi.get(self, "should_notify_subscribers")

    @property
    @pulumi.getter(name="statusPageId")
    def status_page_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "status_page_id")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        Title of the template
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="updateStatus")
    def update_status(self) -> pulumi.Output[str]:
        """
        Status of the event the template will populate
        """
        return pulumi.get(self, "update_status")

