# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WorkflowTaskUpdateVictorOpsIncidentArgs', 'WorkflowTaskUpdateVictorOpsIncident']

@pulumi.input_type
class WorkflowTaskUpdateVictorOpsIncidentArgs:
    def __init__(__self__, *,
                 task_params: pulumi.Input['WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgs'],
                 workflow_id: pulumi.Input[str],
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 skip_on_failure: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a WorkflowTaskUpdateVictorOpsIncident resource.
        :param pulumi.Input['WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgs'] task_params: The parameters for this workflow task.
        :param pulumi.Input[str] workflow_id: The ID of the parent workflow
        :param pulumi.Input[bool] enabled: Enable/disable this workflow task
        :param pulumi.Input[str] name: Name of the workflow task
        :param pulumi.Input[int] position: The position of the workflow task (1 being top of list)
        :param pulumi.Input[bool] skip_on_failure: Skip workflow task if any failures
        """
        pulumi.set(__self__, "task_params", task_params)
        pulumi.set(__self__, "workflow_id", workflow_id)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if skip_on_failure is not None:
            pulumi.set(__self__, "skip_on_failure", skip_on_failure)

    @property
    @pulumi.getter(name="taskParams")
    def task_params(self) -> pulumi.Input['WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgs']:
        """
        The parameters for this workflow task.
        """
        return pulumi.get(self, "task_params")

    @task_params.setter
    def task_params(self, value: pulumi.Input['WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgs']):
        pulumi.set(self, "task_params", value)

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> pulumi.Input[str]:
        """
        The ID of the parent workflow
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "workflow_id", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable/disable this workflow task
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the workflow task
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        The position of the workflow task (1 being top of list)
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter(name="skipOnFailure")
    def skip_on_failure(self) -> Optional[pulumi.Input[bool]]:
        """
        Skip workflow task if any failures
        """
        return pulumi.get(self, "skip_on_failure")

    @skip_on_failure.setter
    def skip_on_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_on_failure", value)


@pulumi.input_type
class _WorkflowTaskUpdateVictorOpsIncidentState:
    def __init__(__self__, *,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 skip_on_failure: Optional[pulumi.Input[bool]] = None,
                 task_params: Optional[pulumi.Input['WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgs']] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WorkflowTaskUpdateVictorOpsIncident resources.
        :param pulumi.Input[bool] enabled: Enable/disable this workflow task
        :param pulumi.Input[str] name: Name of the workflow task
        :param pulumi.Input[int] position: The position of the workflow task (1 being top of list)
        :param pulumi.Input[bool] skip_on_failure: Skip workflow task if any failures
        :param pulumi.Input['WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgs'] task_params: The parameters for this workflow task.
        :param pulumi.Input[str] workflow_id: The ID of the parent workflow
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if skip_on_failure is not None:
            pulumi.set(__self__, "skip_on_failure", skip_on_failure)
        if task_params is not None:
            pulumi.set(__self__, "task_params", task_params)
        if workflow_id is not None:
            pulumi.set(__self__, "workflow_id", workflow_id)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable/disable this workflow task
        """
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the workflow task
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        The position of the workflow task (1 being top of list)
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter(name="skipOnFailure")
    def skip_on_failure(self) -> Optional[pulumi.Input[bool]]:
        """
        Skip workflow task if any failures
        """
        return pulumi.get(self, "skip_on_failure")

    @skip_on_failure.setter
    def skip_on_failure(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_on_failure", value)

    @property
    @pulumi.getter(name="taskParams")
    def task_params(self) -> Optional[pulumi.Input['WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgs']]:
        """
        The parameters for this workflow task.
        """
        return pulumi.get(self, "task_params")

    @task_params.setter
    def task_params(self, value: Optional[pulumi.Input['WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgs']]):
        pulumi.set(self, "task_params", value)

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the parent workflow
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workflow_id", value)


class WorkflowTaskUpdateVictorOpsIncident(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 skip_on_failure: Optional[pulumi.Input[bool]] = None,
                 task_params: Optional[pulumi.Input[Union['WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgs', 'WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgsDict']]] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages workflow update_victor_ops_incident task.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: Enable/disable this workflow task
        :param pulumi.Input[str] name: Name of the workflow task
        :param pulumi.Input[int] position: The position of the workflow task (1 being top of list)
        :param pulumi.Input[bool] skip_on_failure: Skip workflow task if any failures
        :param pulumi.Input[Union['WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgs', 'WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgsDict']] task_params: The parameters for this workflow task.
        :param pulumi.Input[str] workflow_id: The ID of the parent workflow
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkflowTaskUpdateVictorOpsIncidentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages workflow update_victor_ops_incident task.

        :param str resource_name: The name of the resource.
        :param WorkflowTaskUpdateVictorOpsIncidentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkflowTaskUpdateVictorOpsIncidentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 skip_on_failure: Optional[pulumi.Input[bool]] = None,
                 task_params: Optional[pulumi.Input[Union['WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgs', 'WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgsDict']]] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkflowTaskUpdateVictorOpsIncidentArgs.__new__(WorkflowTaskUpdateVictorOpsIncidentArgs)

            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["name"] = name
            __props__.__dict__["position"] = position
            __props__.__dict__["skip_on_failure"] = skip_on_failure
            if task_params is None and not opts.urn:
                raise TypeError("Missing required property 'task_params'")
            __props__.__dict__["task_params"] = task_params
            if workflow_id is None and not opts.urn:
                raise TypeError("Missing required property 'workflow_id'")
            __props__.__dict__["workflow_id"] = workflow_id
        super(WorkflowTaskUpdateVictorOpsIncident, __self__).__init__(
            'rootly:index/workflowTaskUpdateVictorOpsIncident:WorkflowTaskUpdateVictorOpsIncident',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            position: Optional[pulumi.Input[int]] = None,
            skip_on_failure: Optional[pulumi.Input[bool]] = None,
            task_params: Optional[pulumi.Input[Union['WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgs', 'WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgsDict']]] = None,
            workflow_id: Optional[pulumi.Input[str]] = None) -> 'WorkflowTaskUpdateVictorOpsIncident':
        """
        Get an existing WorkflowTaskUpdateVictorOpsIncident resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: Enable/disable this workflow task
        :param pulumi.Input[str] name: Name of the workflow task
        :param pulumi.Input[int] position: The position of the workflow task (1 being top of list)
        :param pulumi.Input[bool] skip_on_failure: Skip workflow task if any failures
        :param pulumi.Input[Union['WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgs', 'WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgsDict']] task_params: The parameters for this workflow task.
        :param pulumi.Input[str] workflow_id: The ID of the parent workflow
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkflowTaskUpdateVictorOpsIncidentState.__new__(_WorkflowTaskUpdateVictorOpsIncidentState)

        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["name"] = name
        __props__.__dict__["position"] = position
        __props__.__dict__["skip_on_failure"] = skip_on_failure
        __props__.__dict__["task_params"] = task_params
        __props__.__dict__["workflow_id"] = workflow_id
        return WorkflowTaskUpdateVictorOpsIncident(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Enable/disable this workflow task
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the workflow task
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def position(self) -> pulumi.Output[int]:
        """
        The position of the workflow task (1 being top of list)
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter(name="skipOnFailure")
    def skip_on_failure(self) -> pulumi.Output[Optional[bool]]:
        """
        Skip workflow task if any failures
        """
        return pulumi.get(self, "skip_on_failure")

    @property
    @pulumi.getter(name="taskParams")
    def task_params(self) -> pulumi.Output['outputs.WorkflowTaskUpdateVictorOpsIncidentTaskParams']:
        """
        The parameters for this workflow task.
        """
        return pulumi.get(self, "task_params")

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> pulumi.Output[str]:
        """
        The ID of the parent workflow
        """
        return pulumi.get(self, "workflow_id")

