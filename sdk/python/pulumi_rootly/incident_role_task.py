# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['IncidentRoleTaskArgs', 'IncidentRoleTask']

@pulumi.input_type
class IncidentRoleTaskArgs:
    def __init__(__self__, *,
                 task: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 incident_role_id: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a IncidentRoleTask resource.
        :param pulumi.Input[str] task: The task of the incident task
        :param pulumi.Input[str] description: The description of incident task
        :param pulumi.Input[str] priority: The priority of the incident task. Value must be one of `high`, `medium`, `low`.
        """
        pulumi.set(__self__, "task", task)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if incident_role_id is not None:
            pulumi.set(__self__, "incident_role_id", incident_role_id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def task(self) -> pulumi.Input[str]:
        """
        The task of the incident task
        """
        return pulumi.get(self, "task")

    @task.setter
    def task(self, value: pulumi.Input[str]):
        pulumi.set(self, "task", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of incident task
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="incidentRoleId")
    def incident_role_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_role_id")

    @incident_role_id.setter
    def incident_role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_role_id", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        The priority of the incident task. Value must be one of `high`, `medium`, `low`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)


@pulumi.input_type
class _IncidentRoleTaskState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 incident_role_id: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 task: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering IncidentRoleTask resources.
        :param pulumi.Input[str] description: The description of incident task
        :param pulumi.Input[str] priority: The priority of the incident task. Value must be one of `high`, `medium`, `low`.
        :param pulumi.Input[str] task: The task of the incident task
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if incident_role_id is not None:
            pulumi.set(__self__, "incident_role_id", incident_role_id)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if task is not None:
            pulumi.set(__self__, "task", task)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of incident task
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="incidentRoleId")
    def incident_role_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_role_id")

    @incident_role_id.setter
    def incident_role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_role_id", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        The priority of the incident task. Value must be one of `high`, `medium`, `low`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def task(self) -> Optional[pulumi.Input[str]]:
        """
        The task of the incident task
        """
        return pulumi.get(self, "task")

    @task.setter
    def task(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task", value)


class IncidentRoleTask(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 incident_role_id: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 task: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a IncidentRoleTask resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of incident task
        :param pulumi.Input[str] priority: The priority of the incident task. Value must be one of `high`, `medium`, `low`.
        :param pulumi.Input[str] task: The task of the incident task
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: IncidentRoleTaskArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a IncidentRoleTask resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param IncidentRoleTaskArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(IncidentRoleTaskArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 incident_role_id: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 task: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = IncidentRoleTaskArgs.__new__(IncidentRoleTaskArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["incident_role_id"] = incident_role_id
            __props__.__dict__["priority"] = priority
            if task is None and not opts.urn:
                raise TypeError("Missing required property 'task'")
            __props__.__dict__["task"] = task
        super(IncidentRoleTask, __self__).__init__(
            'rootly:index/incidentRoleTask:IncidentRoleTask',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            incident_role_id: Optional[pulumi.Input[str]] = None,
            priority: Optional[pulumi.Input[str]] = None,
            task: Optional[pulumi.Input[str]] = None) -> 'IncidentRoleTask':
        """
        Get an existing IncidentRoleTask resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of incident task
        :param pulumi.Input[str] priority: The priority of the incident task. Value must be one of `high`, `medium`, `low`.
        :param pulumi.Input[str] task: The task of the incident task
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _IncidentRoleTaskState.__new__(_IncidentRoleTaskState)

        __props__.__dict__["description"] = description
        __props__.__dict__["incident_role_id"] = incident_role_id
        __props__.__dict__["priority"] = priority
        __props__.__dict__["task"] = task
        return IncidentRoleTask(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of incident task
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="incidentRoleId")
    def incident_role_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "incident_role_id")

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Output[Optional[str]]:
        """
        The priority of the incident task. Value must be one of `high`, `medium`, `low`.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def task(self) -> pulumi.Output[str]:
        """
        The task of the incident task
        """
        return pulumi.get(self, "task")

