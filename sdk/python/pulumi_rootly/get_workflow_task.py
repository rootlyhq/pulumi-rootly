# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetWorkflowTaskResult',
    'AwaitableGetWorkflowTaskResult',
    'get_workflow_task',
    'get_workflow_task_output',
]

@pulumi.output_type
class GetWorkflowTaskResult:
    """
    A collection of values returned by getWorkflowTask.
    """
    def __init__(__self__, id=None, name=None, slug=None, workflow_id=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)
        if workflow_id and not isinstance(workflow_id, str):
            raise TypeError("Expected argument 'workflow_id' to be a str")
        pulumi.set(__self__, "workflow_id", workflow_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> str:
        return pulumi.get(self, "workflow_id")


class AwaitableGetWorkflowTaskResult(GetWorkflowTaskResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkflowTaskResult(
            id=self.id,
            name=self.name,
            slug=self.slug,
            workflow_id=self.workflow_id)


def get_workflow_task(name: Optional[str] = None,
                      slug: Optional[str] = None,
                      workflow_id: Optional[str] = None,
                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkflowTaskResult:
    """
    ## Example Usage
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['slug'] = slug
    __args__['workflowId'] = workflow_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('rootly:index/getWorkflowTask:getWorkflowTask', __args__, opts=opts, typ=GetWorkflowTaskResult).value

    return AwaitableGetWorkflowTaskResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        slug=pulumi.get(__ret__, 'slug'),
        workflow_id=pulumi.get(__ret__, 'workflow_id'))


@_utilities.lift_output_func(get_workflow_task)
def get_workflow_task_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                             slug: Optional[pulumi.Input[Optional[str]]] = None,
                             workflow_id: Optional[pulumi.Input[str]] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetWorkflowTaskResult]:
    """
    ## Example Usage
    """
    ...
