# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'DashboardPanelParamsArgs',
    'DashboardPanelParamsDatasetArgs',
    'DashboardPanelParamsDatasetAggregateArgs',
    'DashboardPanelParamsDatasetFilterArgs',
    'DashboardPanelParamsDatasetFilterRuleArgs',
    'DashboardPanelParamsLegendArgs',
    'DashboardPanelPositionArgs',
    'EnvironmentSlackAliasArgs',
    'EnvironmentSlackChannelArgs',
    'EscalationLevelNotificationTargetParamArgs',
    'FunctionalitySlackAliasArgs',
    'FunctionalitySlackChannelArgs',
    'IncidentTypeSlackAliasArgs',
    'IncidentTypeSlackChannelArgs',
    'RetrospectiveProcessRetrospectiveProcessMatchingCriteriaArgs',
    'ScheduleRotationActiveDayActiveTimeAttributeArgs',
    'ScheduleRotationActiveTimeAttributeArgs',
    'ServiceSlackAliasArgs',
    'ServiceSlackChannelArgs',
    'SeveritySlackAliasArgs',
    'SeveritySlackChannelArgs',
    'TeamSlackAliasArgs',
    'TeamSlackChannelArgs',
    'WorkflowActionItemTriggerParamsArgs',
    'WorkflowAlertTriggerParamsArgs',
    'WorkflowIncidentTriggerParamsArgs',
    'WorkflowPostMortemTriggerParamsArgs',
    'WorkflowPulseTriggerParamsArgs',
    'WorkflowSimpleTriggerParamsArgs',
    'WorkflowTaskAddActionItemTaskParamsArgs',
    'WorkflowTaskAddActionItemTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskAddRoleTaskParamsArgs',
    'WorkflowTaskAddSlackBookmarkTaskParamsArgs',
    'WorkflowTaskAddTeamTaskParamsArgs',
    'WorkflowTaskAddToTimelineTaskParamsArgs',
    'WorkflowTaskAddToTimelineTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskArchiveSlackChannelsTaskParamsArgs',
    'WorkflowTaskArchiveSlackChannelsTaskParamsChannelArgs',
    'WorkflowTaskAttachDatadogDashboardsTaskParamsArgs',
    'WorkflowTaskAttachDatadogDashboardsTaskParamsDashboardArgs',
    'WorkflowTaskAttachDatadogDashboardsTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskAutoAssignRoleOpsgenieTaskParamsArgs',
    'WorkflowTaskAutoAssignRolePagerdutyTaskParamsArgs',
    'WorkflowTaskAutoAssignRoleRootlyTaskParamsArgs',
    'WorkflowTaskAutoAssignRoleVictorOpsTaskParamsArgs',
    'WorkflowTaskCallPeopleTaskParamsArgs',
    'WorkflowTaskChangeSlackChannelPrivacyTaskParamsArgs',
    'WorkflowTaskCreateAirtableTableRecordTaskParamsArgs',
    'WorkflowTaskCreateAsanaSubtaskTaskParamsArgs',
    'WorkflowTaskCreateAsanaTaskTaskParamsArgs',
    'WorkflowTaskCreateAsanaTaskTaskParamsProjectArgs',
    'WorkflowTaskCreateClickupTaskTaskParamsArgs',
    'WorkflowTaskCreateConfluencePageTaskParamsArgs',
    'WorkflowTaskCreateDatadogNotebookTaskParamsArgs',
    'WorkflowTaskCreateDropboxPaperPageTaskParamsArgs',
    'WorkflowTaskCreateGithubIssueTaskParamsArgs',
    'WorkflowTaskCreateGitlabIssueTaskParamsArgs',
    'WorkflowTaskCreateGoToMeetingTaskParamsArgs',
    'WorkflowTaskCreateGoToMeetingTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskCreateGoogleCalendarEventTaskParamsArgs',
    'WorkflowTaskCreateGoogleCalendarEventTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskCreateGoogleDocsPageTaskParamsArgs',
    'WorkflowTaskCreateGoogleDocsPermissionsTaskParamsArgs',
    'WorkflowTaskCreateGoogleMeetingTaskParamsArgs',
    'WorkflowTaskCreateGoogleMeetingTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskCreateIncidentPostmortemTaskParamsArgs',
    'WorkflowTaskCreateIncidentTaskParamsArgs',
    'WorkflowTaskCreateJiraIssueTaskParamsArgs',
    'WorkflowTaskCreateJiraSubtaskTaskParamsArgs',
    'WorkflowTaskCreateLinearIssueCommentTaskParamsArgs',
    'WorkflowTaskCreateLinearIssueTaskParamsArgs',
    'WorkflowTaskCreateLinearIssueTaskParamsLabelArgs',
    'WorkflowTaskCreateLinearSubtaskIssueTaskParamsArgs',
    'WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsArgs',
    'WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskCreateNotionPageTaskParamsArgs',
    'WorkflowTaskCreateOpsgenieAlertTaskParamsArgs',
    'WorkflowTaskCreateOpsgenieAlertTaskParamsEscalationArgs',
    'WorkflowTaskCreateOpsgenieAlertTaskParamsScheduleArgs',
    'WorkflowTaskCreateOpsgenieAlertTaskParamsTeamArgs',
    'WorkflowTaskCreateOpsgenieAlertTaskParamsUserArgs',
    'WorkflowTaskCreateOutlookEventTaskParamsArgs',
    'WorkflowTaskCreateOutlookEventTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskCreatePagerdutyStatusUpdateTaskParamsArgs',
    'WorkflowTaskCreatePagertreeAlertTaskParamsArgs',
    'WorkflowTaskCreatePagertreeAlertTaskParamsTeamArgs',
    'WorkflowTaskCreatePagertreeAlertTaskParamsUserArgs',
    'WorkflowTaskCreateQuipPageTaskParamsArgs',
    'WorkflowTaskCreateServiceNowIncidentTaskParamsArgs',
    'WorkflowTaskCreateSharepointPageTaskParamsArgs',
    'WorkflowTaskCreateShortcutStoryTaskParamsArgs',
    'WorkflowTaskCreateShortcutTaskTaskParamsArgs',
    'WorkflowTaskCreateSlackChannelTaskParamsArgs',
    'WorkflowTaskCreateTrelloCardTaskParamsArgs',
    'WorkflowTaskCreateTrelloCardTaskParamsLabelArgs',
    'WorkflowTaskCreateWebexMeetingTaskParamsArgs',
    'WorkflowTaskCreateWebexMeetingTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskCreateZendeskJiraLinkTaskParamsArgs',
    'WorkflowTaskCreateZendeskTicketTaskParamsArgs',
    'WorkflowTaskCreateZoomMeetingTaskParamsArgs',
    'WorkflowTaskCreateZoomMeetingTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskGetAlertsTaskParamsArgs',
    'WorkflowTaskGetAlertsTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskGetGithubCommitsTaskParamsArgs',
    'WorkflowTaskGetGithubCommitsTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskGetGitlabCommitsTaskParamsArgs',
    'WorkflowTaskGetGitlabCommitsTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskGetPulsesTaskParamsArgs',
    'WorkflowTaskGetPulsesTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskHttpClientTaskParamsArgs',
    'WorkflowTaskHttpClientTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskInviteToSlackChannelOpsgenieTaskParamsArgs',
    'WorkflowTaskInviteToSlackChannelOpsgenieTaskParamsChannelArgs',
    'WorkflowTaskInviteToSlackChannelPagerdutyTaskParamsArgs',
    'WorkflowTaskInviteToSlackChannelPagerdutyTaskParamsChannelArgs',
    'WorkflowTaskInviteToSlackChannelRootlyTaskParamsArgs',
    'WorkflowTaskInviteToSlackChannelRootlyTaskParamsChannelArgs',
    'WorkflowTaskInviteToSlackChannelTaskParamsArgs',
    'WorkflowTaskInviteToSlackChannelTaskParamsSlackUserArgs',
    'WorkflowTaskInviteToSlackChannelTaskParamsSlackUserGroupArgs',
    'WorkflowTaskInviteToSlackChannelVictorOpsTaskParamsArgs',
    'WorkflowTaskInviteToSlackChannelVictorOpsTaskParamsChannelArgs',
    'WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsArgs',
    'WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsTeamArgs',
    'WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsUserArgs',
    'WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsArgs',
    'WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsEscalationPolicyArgs',
    'WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsUserArgs',
    'WorkflowTaskPageRootlyOnCallRespondersTaskParamsArgs',
    'WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsArgs',
    'WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsEscalationPolicyArgs',
    'WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsUserArgs',
    'WorkflowTaskPrintTaskParamsArgs',
    'WorkflowTaskPublishIncidentTaskParamsArgs',
    'WorkflowTaskRedisClientTaskParamsArgs',
    'WorkflowTaskRedisClientTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskRemoveGoogleDocsPermissionsTaskParamsArgs',
    'WorkflowTaskRenameSlackChannelTaskParamsArgs',
    'WorkflowTaskRunCommandHerokuTaskParamsArgs',
    'WorkflowTaskRunCommandHerokuTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskSendDashboardReportTaskParamsArgs',
    'WorkflowTaskSendEmailTaskParamsArgs',
    'WorkflowTaskSendSlackBlocksTaskParamsArgs',
    'WorkflowTaskSendSlackBlocksTaskParamsChannelArgs',
    'WorkflowTaskSendSlackBlocksTaskParamsSlackUserArgs',
    'WorkflowTaskSendSlackBlocksTaskParamsSlackUserGroupArgs',
    'WorkflowTaskSendSlackMessageTaskParamsArgs',
    'WorkflowTaskSendSlackMessageTaskParamsChannelArgs',
    'WorkflowTaskSendSlackMessageTaskParamsSlackUserArgs',
    'WorkflowTaskSendSlackMessageTaskParamsSlackUserGroupArgs',
    'WorkflowTaskSendSmsTaskParamsArgs',
    'WorkflowTaskSendWhatsappMessageTaskParamsArgs',
    'WorkflowTaskSnapshotDatadogGraphTaskParamsArgs',
    'WorkflowTaskSnapshotDatadogGraphTaskParamsDashboardArgs',
    'WorkflowTaskSnapshotDatadogGraphTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskSnapshotGrafanaDashboardTaskParamsArgs',
    'WorkflowTaskSnapshotGrafanaDashboardTaskParamsDashboardArgs',
    'WorkflowTaskSnapshotGrafanaDashboardTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskSnapshotLookerLookTaskParamsArgs',
    'WorkflowTaskSnapshotLookerLookTaskParamsDashboardArgs',
    'WorkflowTaskSnapshotLookerLookTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskSnapshotNewRelicGraphTaskParamsArgs',
    'WorkflowTaskSnapshotNewRelicGraphTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskTriggerWorkflowTaskParamsArgs',
    'WorkflowTaskTweetTwitterMessageTaskParamsArgs',
    'WorkflowTaskUpdateActionItemTaskParamsArgs',
    'WorkflowTaskUpdateAirtableTableRecordTaskParamsArgs',
    'WorkflowTaskUpdateAsanaTaskTaskParamsArgs',
    'WorkflowTaskUpdateAttachedAlertsTaskParamsArgs',
    'WorkflowTaskUpdateClickupTaskTaskParamsArgs',
    'WorkflowTaskUpdateGithubIssueTaskParamsArgs',
    'WorkflowTaskUpdateGitlabIssueTaskParamsArgs',
    'WorkflowTaskUpdateGoogleCalendarEventTaskParamsArgs',
    'WorkflowTaskUpdateGoogleCalendarEventTaskParamsPostToSlackChannelArgs',
    'WorkflowTaskUpdateGoogleDocsPageTaskParamsArgs',
    'WorkflowTaskUpdateIncidentPostmortemTaskParamsArgs',
    'WorkflowTaskUpdateIncidentTaskParamsArgs',
    'WorkflowTaskUpdateJiraIssueTaskParamsArgs',
    'WorkflowTaskUpdateLinearIssueTaskParamsArgs',
    'WorkflowTaskUpdateLinearIssueTaskParamsLabelArgs',
    'WorkflowTaskUpdateNotionPageTaskParamsArgs',
    'WorkflowTaskUpdateOpsgenieAlertTaskParamsArgs',
    'WorkflowTaskUpdateOpsgenieIncidentTaskParamsArgs',
    'WorkflowTaskUpdatePagerdutyIncidentTaskParamsArgs',
    'WorkflowTaskUpdatePagertreeAlertTaskParamsArgs',
    'WorkflowTaskUpdatePagertreeAlertTaskParamsTeamArgs',
    'WorkflowTaskUpdatePagertreeAlertTaskParamsUserArgs',
    'WorkflowTaskUpdateServiceNowIncidentTaskParamsArgs',
    'WorkflowTaskUpdateShortcutStoryTaskParamsArgs',
    'WorkflowTaskUpdateShortcutTaskTaskParamsArgs',
    'WorkflowTaskUpdateSlackChannelTopicTaskParamsArgs',
    'WorkflowTaskUpdateStatusTaskParamsArgs',
    'WorkflowTaskUpdateTrelloCardTaskParamsArgs',
    'WorkflowTaskUpdateTrelloCardTaskParamsLabelArgs',
    'WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgs',
    'WorkflowTaskUpdateZendeskTicketTaskParamsArgs',
]

@pulumi.input_type
class DashboardPanelParamsArgs:
    def __init__(__self__, *,
                 display: pulumi.Input[str],
                 datasets: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPanelParamsDatasetArgs']]]] = None,
                 legend: Optional[pulumi.Input['DashboardPanelParamsLegendArgs']] = None):
        pulumi.set(__self__, "display", display)
        if datasets is not None:
            pulumi.set(__self__, "datasets", datasets)
        if legend is not None:
            pulumi.set(__self__, "legend", legend)

    @property
    @pulumi.getter
    def display(self) -> pulumi.Input[str]:
        return pulumi.get(self, "display")

    @display.setter
    def display(self, value: pulumi.Input[str]):
        pulumi.set(self, "display", value)

    @property
    @pulumi.getter
    def datasets(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPanelParamsDatasetArgs']]]]:
        return pulumi.get(self, "datasets")

    @datasets.setter
    def datasets(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPanelParamsDatasetArgs']]]]):
        pulumi.set(self, "datasets", value)

    @property
    @pulumi.getter
    def legend(self) -> Optional[pulumi.Input['DashboardPanelParamsLegendArgs']]:
        return pulumi.get(self, "legend")

    @legend.setter
    def legend(self, value: Optional[pulumi.Input['DashboardPanelParamsLegendArgs']]):
        pulumi.set(self, "legend", value)


@pulumi.input_type
class DashboardPanelParamsDatasetArgs:
    def __init__(__self__, *,
                 collection: pulumi.Input[str],
                 aggregate: Optional[pulumi.Input['DashboardPanelParamsDatasetAggregateArgs']] = None,
                 filters: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPanelParamsDatasetFilterArgs']]]] = None,
                 group_by: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "collection", collection)
        if aggregate is not None:
            pulumi.set(__self__, "aggregate", aggregate)
        if filters is not None:
            pulumi.set(__self__, "filters", filters)
        if group_by is not None:
            pulumi.set(__self__, "group_by", group_by)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def collection(self) -> pulumi.Input[str]:
        return pulumi.get(self, "collection")

    @collection.setter
    def collection(self, value: pulumi.Input[str]):
        pulumi.set(self, "collection", value)

    @property
    @pulumi.getter
    def aggregate(self) -> Optional[pulumi.Input['DashboardPanelParamsDatasetAggregateArgs']]:
        return pulumi.get(self, "aggregate")

    @aggregate.setter
    def aggregate(self, value: Optional[pulumi.Input['DashboardPanelParamsDatasetAggregateArgs']]):
        pulumi.set(self, "aggregate", value)

    @property
    @pulumi.getter
    def filters(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPanelParamsDatasetFilterArgs']]]]:
        return pulumi.get(self, "filters")

    @filters.setter
    def filters(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPanelParamsDatasetFilterArgs']]]]):
        pulumi.set(self, "filters", value)

    @property
    @pulumi.getter(name="groupBy")
    def group_by(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "group_by")

    @group_by.setter
    def group_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group_by", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class DashboardPanelParamsDatasetAggregateArgs:
    def __init__(__self__, *,
                 cumulative: pulumi.Input[bool],
                 key: pulumi.Input[str],
                 operation: pulumi.Input[str]):
        pulumi.set(__self__, "cumulative", cumulative)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operation", operation)

    @property
    @pulumi.getter
    def cumulative(self) -> pulumi.Input[bool]:
        return pulumi.get(self, "cumulative")

    @cumulative.setter
    def cumulative(self, value: pulumi.Input[bool]):
        pulumi.set(self, "cumulative", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)


@pulumi.input_type
class DashboardPanelParamsDatasetFilterArgs:
    def __init__(__self__, *,
                 operation: pulumi.Input[str],
                 rules: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPanelParamsDatasetFilterRuleArgs']]]] = None):
        pulumi.set(__self__, "operation", operation)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPanelParamsDatasetFilterRuleArgs']]]]:
        return pulumi.get(self, "rules")

    @rules.setter
    def rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['DashboardPanelParamsDatasetFilterRuleArgs']]]]):
        pulumi.set(self, "rules", value)


@pulumi.input_type
class DashboardPanelParamsDatasetFilterRuleArgs:
    def __init__(__self__, *,
                 condition: pulumi.Input[str],
                 key: pulumi.Input[str],
                 operation: pulumi.Input[str],
                 value: pulumi.Input[str]):
        pulumi.set(__self__, "condition", condition)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operation", operation)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def condition(self) -> pulumi.Input[str]:
        return pulumi.get(self, "condition")

    @condition.setter
    def condition(self, value: pulumi.Input[str]):
        pulumi.set(self, "condition", value)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operation(self) -> pulumi.Input[str]:
        return pulumi.get(self, "operation")

    @operation.setter
    def operation(self, value: pulumi.Input[str]):
        pulumi.set(self, "operation", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class DashboardPanelParamsLegendArgs:
    def __init__(__self__, *,
                 groups: pulumi.Input[str]):
        pulumi.set(__self__, "groups", groups)

    @property
    @pulumi.getter
    def groups(self) -> pulumi.Input[str]:
        return pulumi.get(self, "groups")

    @groups.setter
    def groups(self, value: pulumi.Input[str]):
        pulumi.set(self, "groups", value)


@pulumi.input_type
class DashboardPanelPositionArgs:
    def __init__(__self__, *,
                 h: pulumi.Input[int],
                 w: pulumi.Input[int],
                 x: pulumi.Input[int],
                 y: pulumi.Input[int]):
        pulumi.set(__self__, "h", h)
        pulumi.set(__self__, "w", w)
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter
    def h(self) -> pulumi.Input[int]:
        return pulumi.get(self, "h")

    @h.setter
    def h(self, value: pulumi.Input[int]):
        pulumi.set(self, "h", value)

    @property
    @pulumi.getter
    def w(self) -> pulumi.Input[int]:
        return pulumi.get(self, "w")

    @w.setter
    def w(self, value: pulumi.Input[int]):
        pulumi.set(self, "w", value)

    @property
    @pulumi.getter
    def x(self) -> pulumi.Input[int]:
        return pulumi.get(self, "x")

    @x.setter
    def x(self, value: pulumi.Input[int]):
        pulumi.set(self, "x", value)

    @property
    @pulumi.getter
    def y(self) -> pulumi.Input[int]:
        return pulumi.get(self, "y")

    @y.setter
    def y(self, value: pulumi.Input[int]):
        pulumi.set(self, "y", value)


@pulumi.input_type
class EnvironmentSlackAliasArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class EnvironmentSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class EscalationLevelNotificationTargetParamArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 type: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class FunctionalitySlackAliasArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class FunctionalitySlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class IncidentTypeSlackAliasArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class IncidentTypeSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class RetrospectiveProcessRetrospectiveProcessMatchingCriteriaArgs:
    def __init__(__self__, *,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_type_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 severity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Sequence[pulumi.Input[str]]] group_ids: Teams for process matching criteria.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] incident_type_ids: Incident types for process matching criteria.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] severity_ids: Severities for process matching criteria.
        """
        if group_ids is not None:
            pulumi.set(__self__, "group_ids", group_ids)
        if incident_type_ids is not None:
            pulumi.set(__self__, "incident_type_ids", incident_type_ids)
        if severity_ids is not None:
            pulumi.set(__self__, "severity_ids", severity_ids)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Teams for process matching criteria.
        """
        return pulumi.get(self, "group_ids")

    @group_ids.setter
    def group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_ids", value)

    @property
    @pulumi.getter(name="incidentTypeIds")
    def incident_type_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Incident types for process matching criteria.
        """
        return pulumi.get(self, "incident_type_ids")

    @incident_type_ids.setter
    def incident_type_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_type_ids", value)

    @property
    @pulumi.getter(name="severityIds")
    def severity_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Severities for process matching criteria.
        """
        return pulumi.get(self, "severity_ids")

    @severity_ids.setter
    def severity_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "severity_ids", value)


@pulumi.input_type
class ScheduleRotationActiveDayActiveTimeAttributeArgs:
    def __init__(__self__, *,
                 end_time: pulumi.Input[str],
                 start_time: pulumi.Input[str]):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class ScheduleRotationActiveTimeAttributeArgs:
    def __init__(__self__, *,
                 end_time: pulumi.Input[str],
                 start_time: pulumi.Input[str]):
        pulumi.set(__self__, "end_time", end_time)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter(name="endTime")
    def end_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "end_time")

    @end_time.setter
    def end_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "end_time", value)

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> pulumi.Input[str]:
        return pulumi.get(self, "start_time")

    @start_time.setter
    def start_time(self, value: pulumi.Input[str]):
        pulumi.set(self, "start_time", value)


@pulumi.input_type
class ServiceSlackAliasArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ServiceSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SeveritySlackAliasArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class SeveritySlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TeamSlackAliasArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class TeamSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowActionItemTriggerParamsArgs:
    def __init__(__self__, *,
                 incident_action_item_condition: Optional[pulumi.Input[str]] = None,
                 incident_action_item_condition_group: Optional[pulumi.Input[str]] = None,
                 incident_action_item_condition_kind: Optional[pulumi.Input[str]] = None,
                 incident_action_item_condition_priority: Optional[pulumi.Input[str]] = None,
                 incident_action_item_condition_status: Optional[pulumi.Input[str]] = None,
                 incident_action_item_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_action_item_kinds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_action_item_priorities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_action_item_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_condition: Optional[pulumi.Input[str]] = None,
                 incident_condition_acknowledged_at: Optional[pulumi.Input[str]] = None,
                 incident_condition_detected_at: Optional[pulumi.Input[str]] = None,
                 incident_condition_environment: Optional[pulumi.Input[str]] = None,
                 incident_condition_functionality: Optional[pulumi.Input[str]] = None,
                 incident_condition_group: Optional[pulumi.Input[str]] = None,
                 incident_condition_incident_roles: Optional[pulumi.Input[str]] = None,
                 incident_condition_incident_type: Optional[pulumi.Input[str]] = None,
                 incident_condition_kind: Optional[pulumi.Input[str]] = None,
                 incident_condition_mitigated_at: Optional[pulumi.Input[str]] = None,
                 incident_condition_resolved_at: Optional[pulumi.Input[str]] = None,
                 incident_condition_service: Optional[pulumi.Input[str]] = None,
                 incident_condition_severity: Optional[pulumi.Input[str]] = None,
                 incident_condition_started_at: Optional[pulumi.Input[str]] = None,
                 incident_condition_status: Optional[pulumi.Input[str]] = None,
                 incident_condition_summary: Optional[pulumi.Input[str]] = None,
                 incident_condition_visibility: Optional[pulumi.Input[str]] = None,
                 incident_conditional_inactivity: Optional[pulumi.Input[str]] = None,
                 incident_inactivity_duration: Optional[pulumi.Input[str]] = None,
                 incident_kinds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_visibilities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 trigger_type: Optional[pulumi.Input[str]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] incident_action_item_condition: Value must be one off `ALL`, `ANY`, `NONE`.
        :param pulumi.Input[str] incident_action_item_condition_group: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_action_item_condition_kind: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_action_item_condition_priority: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_action_item_condition_status: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] incident_action_item_kinds: Value must be one of `task`, `follow_up`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] incident_action_item_priorities: Value must be one of `high`, `medium`, `low`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] incident_action_item_statuses: Value must be one of `open`, `in_progress`, `cancelled`, `done`.
        :param pulumi.Input[str] incident_condition: Value must be one off `ALL`, `ANY`, `NONE`.
        :param pulumi.Input[str] incident_condition_environment: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_functionality: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_group: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_incident_roles: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_incident_type: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_kind: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_service: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_severity: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_status: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_visibility: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_inactivity_duration: ex. 10 min, 1h, 3 days, 2 weeks
        :param pulumi.Input[Sequence[pulumi.Input[str]]] incident_kinds: Value must be one of `test`, `test_sub`, `example`, `example_sub`, `normal`, `normal_sub`, `backfilled`, `scheduled`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] incident_statuses: Value must be one of `in_triage`, `started`, `detected`, `acknowledged`, `mitigated`, `resolved`, `cancelled`, `scheduled`, `in_progress`, `completed`.
        :param pulumi.Input[str] trigger_type: Value must be one off `action_item`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] triggers: Actions that trigger the workflow. One of custom*fields.\\n\\n.updated, incident*updated, action*item*created, action*item*updated, assigned*user*updated, summary*updated, description*updated, status*updated, priority*updated, due*date*updated, teams*updated, slack*command
        """
        if incident_action_item_condition is not None:
            pulumi.set(__self__, "incident_action_item_condition", incident_action_item_condition)
        if incident_action_item_condition_group is not None:
            pulumi.set(__self__, "incident_action_item_condition_group", incident_action_item_condition_group)
        if incident_action_item_condition_kind is not None:
            pulumi.set(__self__, "incident_action_item_condition_kind", incident_action_item_condition_kind)
        if incident_action_item_condition_priority is not None:
            pulumi.set(__self__, "incident_action_item_condition_priority", incident_action_item_condition_priority)
        if incident_action_item_condition_status is not None:
            pulumi.set(__self__, "incident_action_item_condition_status", incident_action_item_condition_status)
        if incident_action_item_group_ids is not None:
            pulumi.set(__self__, "incident_action_item_group_ids", incident_action_item_group_ids)
        if incident_action_item_kinds is not None:
            pulumi.set(__self__, "incident_action_item_kinds", incident_action_item_kinds)
        if incident_action_item_priorities is not None:
            pulumi.set(__self__, "incident_action_item_priorities", incident_action_item_priorities)
        if incident_action_item_statuses is not None:
            pulumi.set(__self__, "incident_action_item_statuses", incident_action_item_statuses)
        if incident_condition is not None:
            pulumi.set(__self__, "incident_condition", incident_condition)
        if incident_condition_acknowledged_at is not None:
            pulumi.set(__self__, "incident_condition_acknowledged_at", incident_condition_acknowledged_at)
        if incident_condition_detected_at is not None:
            pulumi.set(__self__, "incident_condition_detected_at", incident_condition_detected_at)
        if incident_condition_environment is not None:
            pulumi.set(__self__, "incident_condition_environment", incident_condition_environment)
        if incident_condition_functionality is not None:
            pulumi.set(__self__, "incident_condition_functionality", incident_condition_functionality)
        if incident_condition_group is not None:
            pulumi.set(__self__, "incident_condition_group", incident_condition_group)
        if incident_condition_incident_roles is not None:
            pulumi.set(__self__, "incident_condition_incident_roles", incident_condition_incident_roles)
        if incident_condition_incident_type is not None:
            pulumi.set(__self__, "incident_condition_incident_type", incident_condition_incident_type)
        if incident_condition_kind is not None:
            pulumi.set(__self__, "incident_condition_kind", incident_condition_kind)
        if incident_condition_mitigated_at is not None:
            pulumi.set(__self__, "incident_condition_mitigated_at", incident_condition_mitigated_at)
        if incident_condition_resolved_at is not None:
            pulumi.set(__self__, "incident_condition_resolved_at", incident_condition_resolved_at)
        if incident_condition_service is not None:
            pulumi.set(__self__, "incident_condition_service", incident_condition_service)
        if incident_condition_severity is not None:
            pulumi.set(__self__, "incident_condition_severity", incident_condition_severity)
        if incident_condition_started_at is not None:
            pulumi.set(__self__, "incident_condition_started_at", incident_condition_started_at)
        if incident_condition_status is not None:
            pulumi.set(__self__, "incident_condition_status", incident_condition_status)
        if incident_condition_summary is not None:
            pulumi.set(__self__, "incident_condition_summary", incident_condition_summary)
        if incident_condition_visibility is not None:
            pulumi.set(__self__, "incident_condition_visibility", incident_condition_visibility)
        if incident_conditional_inactivity is not None:
            pulumi.set(__self__, "incident_conditional_inactivity", incident_conditional_inactivity)
        if incident_inactivity_duration is not None:
            pulumi.set(__self__, "incident_inactivity_duration", incident_inactivity_duration)
        if incident_kinds is not None:
            pulumi.set(__self__, "incident_kinds", incident_kinds)
        if incident_statuses is not None:
            pulumi.set(__self__, "incident_statuses", incident_statuses)
        if incident_visibilities is not None:
            pulumi.set(__self__, "incident_visibilities", incident_visibilities)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter(name="incidentActionItemCondition")
    def incident_action_item_condition(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `ALL`, `ANY`, `NONE`.
        """
        return pulumi.get(self, "incident_action_item_condition")

    @incident_action_item_condition.setter
    def incident_action_item_condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_action_item_condition", value)

    @property
    @pulumi.getter(name="incidentActionItemConditionGroup")
    def incident_action_item_condition_group(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_action_item_condition_group")

    @incident_action_item_condition_group.setter
    def incident_action_item_condition_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_action_item_condition_group", value)

    @property
    @pulumi.getter(name="incidentActionItemConditionKind")
    def incident_action_item_condition_kind(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_action_item_condition_kind")

    @incident_action_item_condition_kind.setter
    def incident_action_item_condition_kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_action_item_condition_kind", value)

    @property
    @pulumi.getter(name="incidentActionItemConditionPriority")
    def incident_action_item_condition_priority(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_action_item_condition_priority")

    @incident_action_item_condition_priority.setter
    def incident_action_item_condition_priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_action_item_condition_priority", value)

    @property
    @pulumi.getter(name="incidentActionItemConditionStatus")
    def incident_action_item_condition_status(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_action_item_condition_status")

    @incident_action_item_condition_status.setter
    def incident_action_item_condition_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_action_item_condition_status", value)

    @property
    @pulumi.getter(name="incidentActionItemGroupIds")
    def incident_action_item_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "incident_action_item_group_ids")

    @incident_action_item_group_ids.setter
    def incident_action_item_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_action_item_group_ids", value)

    @property
    @pulumi.getter(name="incidentActionItemKinds")
    def incident_action_item_kinds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Value must be one of `task`, `follow_up`.
        """
        return pulumi.get(self, "incident_action_item_kinds")

    @incident_action_item_kinds.setter
    def incident_action_item_kinds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_action_item_kinds", value)

    @property
    @pulumi.getter(name="incidentActionItemPriorities")
    def incident_action_item_priorities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Value must be one of `high`, `medium`, `low`.
        """
        return pulumi.get(self, "incident_action_item_priorities")

    @incident_action_item_priorities.setter
    def incident_action_item_priorities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_action_item_priorities", value)

    @property
    @pulumi.getter(name="incidentActionItemStatuses")
    def incident_action_item_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Value must be one of `open`, `in_progress`, `cancelled`, `done`.
        """
        return pulumi.get(self, "incident_action_item_statuses")

    @incident_action_item_statuses.setter
    def incident_action_item_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_action_item_statuses", value)

    @property
    @pulumi.getter(name="incidentCondition")
    def incident_condition(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `ALL`, `ANY`, `NONE`.
        """
        return pulumi.get(self, "incident_condition")

    @incident_condition.setter
    def incident_condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition", value)

    @property
    @pulumi.getter(name="incidentConditionAcknowledgedAt")
    def incident_condition_acknowledged_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_condition_acknowledged_at")

    @incident_condition_acknowledged_at.setter
    def incident_condition_acknowledged_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_acknowledged_at", value)

    @property
    @pulumi.getter(name="incidentConditionDetectedAt")
    def incident_condition_detected_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_condition_detected_at")

    @incident_condition_detected_at.setter
    def incident_condition_detected_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_detected_at", value)

    @property
    @pulumi.getter(name="incidentConditionEnvironment")
    def incident_condition_environment(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_environment")

    @incident_condition_environment.setter
    def incident_condition_environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_environment", value)

    @property
    @pulumi.getter(name="incidentConditionFunctionality")
    def incident_condition_functionality(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_functionality")

    @incident_condition_functionality.setter
    def incident_condition_functionality(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_functionality", value)

    @property
    @pulumi.getter(name="incidentConditionGroup")
    def incident_condition_group(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_group")

    @incident_condition_group.setter
    def incident_condition_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_group", value)

    @property
    @pulumi.getter(name="incidentConditionIncidentRoles")
    def incident_condition_incident_roles(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_incident_roles")

    @incident_condition_incident_roles.setter
    def incident_condition_incident_roles(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_incident_roles", value)

    @property
    @pulumi.getter(name="incidentConditionIncidentType")
    def incident_condition_incident_type(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_incident_type")

    @incident_condition_incident_type.setter
    def incident_condition_incident_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_incident_type", value)

    @property
    @pulumi.getter(name="incidentConditionKind")
    def incident_condition_kind(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_kind")

    @incident_condition_kind.setter
    def incident_condition_kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_kind", value)

    @property
    @pulumi.getter(name="incidentConditionMitigatedAt")
    def incident_condition_mitigated_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_condition_mitigated_at")

    @incident_condition_mitigated_at.setter
    def incident_condition_mitigated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_mitigated_at", value)

    @property
    @pulumi.getter(name="incidentConditionResolvedAt")
    def incident_condition_resolved_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_condition_resolved_at")

    @incident_condition_resolved_at.setter
    def incident_condition_resolved_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_resolved_at", value)

    @property
    @pulumi.getter(name="incidentConditionService")
    def incident_condition_service(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_service")

    @incident_condition_service.setter
    def incident_condition_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_service", value)

    @property
    @pulumi.getter(name="incidentConditionSeverity")
    def incident_condition_severity(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_severity")

    @incident_condition_severity.setter
    def incident_condition_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_severity", value)

    @property
    @pulumi.getter(name="incidentConditionStartedAt")
    def incident_condition_started_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_condition_started_at")

    @incident_condition_started_at.setter
    def incident_condition_started_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_started_at", value)

    @property
    @pulumi.getter(name="incidentConditionStatus")
    def incident_condition_status(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_status")

    @incident_condition_status.setter
    def incident_condition_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_status", value)

    @property
    @pulumi.getter(name="incidentConditionSummary")
    def incident_condition_summary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_condition_summary")

    @incident_condition_summary.setter
    def incident_condition_summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_summary", value)

    @property
    @pulumi.getter(name="incidentConditionVisibility")
    def incident_condition_visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_visibility")

    @incident_condition_visibility.setter
    def incident_condition_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_visibility", value)

    @property
    @pulumi.getter(name="incidentConditionalInactivity")
    def incident_conditional_inactivity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_conditional_inactivity")

    @incident_conditional_inactivity.setter
    def incident_conditional_inactivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_conditional_inactivity", value)

    @property
    @pulumi.getter(name="incidentInactivityDuration")
    def incident_inactivity_duration(self) -> Optional[pulumi.Input[str]]:
        """
        ex. 10 min, 1h, 3 days, 2 weeks
        """
        return pulumi.get(self, "incident_inactivity_duration")

    @incident_inactivity_duration.setter
    def incident_inactivity_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_inactivity_duration", value)

    @property
    @pulumi.getter(name="incidentKinds")
    def incident_kinds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Value must be one of `test`, `test_sub`, `example`, `example_sub`, `normal`, `normal_sub`, `backfilled`, `scheduled`.
        """
        return pulumi.get(self, "incident_kinds")

    @incident_kinds.setter
    def incident_kinds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_kinds", value)

    @property
    @pulumi.getter(name="incidentStatuses")
    def incident_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Value must be one of `in_triage`, `started`, `detected`, `acknowledged`, `mitigated`, `resolved`, `cancelled`, `scheduled`, `in_progress`, `completed`.
        """
        return pulumi.get(self, "incident_statuses")

    @incident_statuses.setter
    def incident_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_statuses", value)

    @property
    @pulumi.getter(name="incidentVisibilities")
    def incident_visibilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "incident_visibilities")

    @incident_visibilities.setter
    def incident_visibilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_visibilities", value)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `action_item`.
        """
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_type", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Actions that trigger the workflow. One of custom*fields.\\n\\n.updated, incident*updated, action*item*created, action*item*updated, assigned*user*updated, summary*updated, description*updated, status*updated, priority*updated, due*date*updated, teams*updated, slack*command
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "triggers", value)


@pulumi.input_type
class WorkflowAlertTriggerParamsArgs:
    def __init__(__self__, *,
                 alert_condition: Optional[pulumi.Input[str]] = None,
                 alert_condition_label: Optional[pulumi.Input[str]] = None,
                 alert_condition_label_use_regexp: Optional[pulumi.Input[bool]] = None,
                 alert_condition_payload: Optional[pulumi.Input[str]] = None,
                 alert_condition_payload_use_regexp: Optional[pulumi.Input[bool]] = None,
                 alert_condition_source: Optional[pulumi.Input[str]] = None,
                 alert_condition_source_use_regexp: Optional[pulumi.Input[bool]] = None,
                 alert_labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 alert_payloads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 alert_query_payload: Optional[pulumi.Input[str]] = None,
                 alert_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 trigger_type: Optional[pulumi.Input[str]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] alert_condition: Value must be one off `ALL`, `ANY`, `NONE`.
        :param pulumi.Input[str] alert_condition_label: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[bool] alert_condition_label_use_regexp: Value must be one of true or false
        :param pulumi.Input[str] alert_condition_payload: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[bool] alert_condition_payload_use_regexp: Value must be one of true or false
        :param pulumi.Input[str] alert_condition_source: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[bool] alert_condition_source_use_regexp: Value must be one of true or false
        :param pulumi.Input[str] alert_query_payload: You can use jsonpath syntax. eg: $.incident.teams[*]
        :param pulumi.Input[str] trigger_type: Value must be one off `alert`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] triggers: Actions that trigger the workflow. Value must be one of `alert_created`.
        """
        if alert_condition is not None:
            pulumi.set(__self__, "alert_condition", alert_condition)
        if alert_condition_label is not None:
            pulumi.set(__self__, "alert_condition_label", alert_condition_label)
        if alert_condition_label_use_regexp is not None:
            pulumi.set(__self__, "alert_condition_label_use_regexp", alert_condition_label_use_regexp)
        if alert_condition_payload is not None:
            pulumi.set(__self__, "alert_condition_payload", alert_condition_payload)
        if alert_condition_payload_use_regexp is not None:
            pulumi.set(__self__, "alert_condition_payload_use_regexp", alert_condition_payload_use_regexp)
        if alert_condition_source is not None:
            pulumi.set(__self__, "alert_condition_source", alert_condition_source)
        if alert_condition_source_use_regexp is not None:
            pulumi.set(__self__, "alert_condition_source_use_regexp", alert_condition_source_use_regexp)
        if alert_labels is not None:
            pulumi.set(__self__, "alert_labels", alert_labels)
        if alert_payloads is not None:
            pulumi.set(__self__, "alert_payloads", alert_payloads)
        if alert_query_payload is not None:
            pulumi.set(__self__, "alert_query_payload", alert_query_payload)
        if alert_sources is not None:
            pulumi.set(__self__, "alert_sources", alert_sources)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter(name="alertCondition")
    def alert_condition(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `ALL`, `ANY`, `NONE`.
        """
        return pulumi.get(self, "alert_condition")

    @alert_condition.setter
    def alert_condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_condition", value)

    @property
    @pulumi.getter(name="alertConditionLabel")
    def alert_condition_label(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "alert_condition_label")

    @alert_condition_label.setter
    def alert_condition_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_condition_label", value)

    @property
    @pulumi.getter(name="alertConditionLabelUseRegexp")
    def alert_condition_label_use_regexp(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "alert_condition_label_use_regexp")

    @alert_condition_label_use_regexp.setter
    def alert_condition_label_use_regexp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "alert_condition_label_use_regexp", value)

    @property
    @pulumi.getter(name="alertConditionPayload")
    def alert_condition_payload(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "alert_condition_payload")

    @alert_condition_payload.setter
    def alert_condition_payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_condition_payload", value)

    @property
    @pulumi.getter(name="alertConditionPayloadUseRegexp")
    def alert_condition_payload_use_regexp(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "alert_condition_payload_use_regexp")

    @alert_condition_payload_use_regexp.setter
    def alert_condition_payload_use_regexp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "alert_condition_payload_use_regexp", value)

    @property
    @pulumi.getter(name="alertConditionSource")
    def alert_condition_source(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "alert_condition_source")

    @alert_condition_source.setter
    def alert_condition_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_condition_source", value)

    @property
    @pulumi.getter(name="alertConditionSourceUseRegexp")
    def alert_condition_source_use_regexp(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "alert_condition_source_use_regexp")

    @alert_condition_source_use_regexp.setter
    def alert_condition_source_use_regexp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "alert_condition_source_use_regexp", value)

    @property
    @pulumi.getter(name="alertLabels")
    def alert_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "alert_labels")

    @alert_labels.setter
    def alert_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "alert_labels", value)

    @property
    @pulumi.getter(name="alertPayloads")
    def alert_payloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "alert_payloads")

    @alert_payloads.setter
    def alert_payloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "alert_payloads", value)

    @property
    @pulumi.getter(name="alertQueryPayload")
    def alert_query_payload(self) -> Optional[pulumi.Input[str]]:
        """
        You can use jsonpath syntax. eg: $.incident.teams[*]
        """
        return pulumi.get(self, "alert_query_payload")

    @alert_query_payload.setter
    def alert_query_payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_query_payload", value)

    @property
    @pulumi.getter(name="alertSources")
    def alert_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "alert_sources")

    @alert_sources.setter
    def alert_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "alert_sources", value)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `alert`.
        """
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_type", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Actions that trigger the workflow. Value must be one of `alert_created`.
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "triggers", value)


@pulumi.input_type
class WorkflowIncidentTriggerParamsArgs:
    def __init__(__self__, *,
                 incident_condition: Optional[pulumi.Input[str]] = None,
                 incident_condition_acknowledged_at: Optional[pulumi.Input[str]] = None,
                 incident_condition_cause: Optional[pulumi.Input[str]] = None,
                 incident_condition_detected_at: Optional[pulumi.Input[str]] = None,
                 incident_condition_environment: Optional[pulumi.Input[str]] = None,
                 incident_condition_functionality: Optional[pulumi.Input[str]] = None,
                 incident_condition_group: Optional[pulumi.Input[str]] = None,
                 incident_condition_incident_roles: Optional[pulumi.Input[str]] = None,
                 incident_condition_incident_type: Optional[pulumi.Input[str]] = None,
                 incident_condition_kind: Optional[pulumi.Input[str]] = None,
                 incident_condition_mitigated_at: Optional[pulumi.Input[str]] = None,
                 incident_condition_resolved_at: Optional[pulumi.Input[str]] = None,
                 incident_condition_service: Optional[pulumi.Input[str]] = None,
                 incident_condition_severity: Optional[pulumi.Input[str]] = None,
                 incident_condition_started_at: Optional[pulumi.Input[str]] = None,
                 incident_condition_status: Optional[pulumi.Input[str]] = None,
                 incident_condition_summary: Optional[pulumi.Input[str]] = None,
                 incident_condition_visibility: Optional[pulumi.Input[str]] = None,
                 incident_conditional_inactivity: Optional[pulumi.Input[str]] = None,
                 incident_inactivity_duration: Optional[pulumi.Input[str]] = None,
                 incident_kinds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_post_mortem_condition_cause: Optional[pulumi.Input[str]] = None,
                 incident_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_visibilities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 trigger_type: Optional[pulumi.Input[str]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] incident_condition: Value must be one off `ALL`, `ANY`, `NONE`.
        :param pulumi.Input[str] incident_condition_cause: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_environment: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_functionality: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_group: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_incident_roles: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_incident_type: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_kind: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_service: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_severity: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_status: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_visibility: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_inactivity_duration: ex. 10 min, 1h, 3 days, 2 weeks
        :param pulumi.Input[Sequence[pulumi.Input[str]]] incident_kinds: Value must be one of `test`, `test_sub`, `example`, `example_sub`, `normal`, `normal_sub`, `backfilled`, `scheduled`.
        :param pulumi.Input[str] incident_post_mortem_condition_cause: [DEPRECATED] Use incident*condition*cause instead. Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] incident_statuses: Value must be one of `in_triage`, `started`, `detected`, `acknowledged`, `mitigated`, `resolved`, `cancelled`, `scheduled`, `in_progress`, `completed`.
        :param pulumi.Input[str] trigger_type: Value must be one off `incident`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] triggers: Actions that trigger the workflow. One of custom*fields.\\n\\n.updated, incident*in*triage, incident*created, incident*started, incident*updated, title*updated, summary*updated, status*updated, severity*updated, environments*added, environments*removed, environments*updated, incident*types*added, incident*types*removed, incident*types*updated, services*added, services*removed, services*updated, visibility*updated, functionalities*added, functionalities*removed, functionalities*updated, teams*added, teams*removed, teams*updated, causes*added, causes*removed, causes*updated, timeline*updated, status*page*timeline*updated, role*assignments*updated, role*assignments*added, role*assignments*removed, slack*command, slack*channel*created, slack*channel*converted, subscribers*updated, subscribers*added, subscribers*removed, user*joined*slack*channel, user*left*slack*channel
        """
        if incident_condition is not None:
            pulumi.set(__self__, "incident_condition", incident_condition)
        if incident_condition_acknowledged_at is not None:
            pulumi.set(__self__, "incident_condition_acknowledged_at", incident_condition_acknowledged_at)
        if incident_condition_cause is not None:
            pulumi.set(__self__, "incident_condition_cause", incident_condition_cause)
        if incident_condition_detected_at is not None:
            pulumi.set(__self__, "incident_condition_detected_at", incident_condition_detected_at)
        if incident_condition_environment is not None:
            pulumi.set(__self__, "incident_condition_environment", incident_condition_environment)
        if incident_condition_functionality is not None:
            pulumi.set(__self__, "incident_condition_functionality", incident_condition_functionality)
        if incident_condition_group is not None:
            pulumi.set(__self__, "incident_condition_group", incident_condition_group)
        if incident_condition_incident_roles is not None:
            pulumi.set(__self__, "incident_condition_incident_roles", incident_condition_incident_roles)
        if incident_condition_incident_type is not None:
            pulumi.set(__self__, "incident_condition_incident_type", incident_condition_incident_type)
        if incident_condition_kind is not None:
            pulumi.set(__self__, "incident_condition_kind", incident_condition_kind)
        if incident_condition_mitigated_at is not None:
            pulumi.set(__self__, "incident_condition_mitigated_at", incident_condition_mitigated_at)
        if incident_condition_resolved_at is not None:
            pulumi.set(__self__, "incident_condition_resolved_at", incident_condition_resolved_at)
        if incident_condition_service is not None:
            pulumi.set(__self__, "incident_condition_service", incident_condition_service)
        if incident_condition_severity is not None:
            pulumi.set(__self__, "incident_condition_severity", incident_condition_severity)
        if incident_condition_started_at is not None:
            pulumi.set(__self__, "incident_condition_started_at", incident_condition_started_at)
        if incident_condition_status is not None:
            pulumi.set(__self__, "incident_condition_status", incident_condition_status)
        if incident_condition_summary is not None:
            pulumi.set(__self__, "incident_condition_summary", incident_condition_summary)
        if incident_condition_visibility is not None:
            pulumi.set(__self__, "incident_condition_visibility", incident_condition_visibility)
        if incident_conditional_inactivity is not None:
            pulumi.set(__self__, "incident_conditional_inactivity", incident_conditional_inactivity)
        if incident_inactivity_duration is not None:
            pulumi.set(__self__, "incident_inactivity_duration", incident_inactivity_duration)
        if incident_kinds is not None:
            pulumi.set(__self__, "incident_kinds", incident_kinds)
        if incident_post_mortem_condition_cause is not None:
            pulumi.set(__self__, "incident_post_mortem_condition_cause", incident_post_mortem_condition_cause)
        if incident_statuses is not None:
            pulumi.set(__self__, "incident_statuses", incident_statuses)
        if incident_visibilities is not None:
            pulumi.set(__self__, "incident_visibilities", incident_visibilities)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter(name="incidentCondition")
    def incident_condition(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `ALL`, `ANY`, `NONE`.
        """
        return pulumi.get(self, "incident_condition")

    @incident_condition.setter
    def incident_condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition", value)

    @property
    @pulumi.getter(name="incidentConditionAcknowledgedAt")
    def incident_condition_acknowledged_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_condition_acknowledged_at")

    @incident_condition_acknowledged_at.setter
    def incident_condition_acknowledged_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_acknowledged_at", value)

    @property
    @pulumi.getter(name="incidentConditionCause")
    def incident_condition_cause(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_cause")

    @incident_condition_cause.setter
    def incident_condition_cause(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_cause", value)

    @property
    @pulumi.getter(name="incidentConditionDetectedAt")
    def incident_condition_detected_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_condition_detected_at")

    @incident_condition_detected_at.setter
    def incident_condition_detected_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_detected_at", value)

    @property
    @pulumi.getter(name="incidentConditionEnvironment")
    def incident_condition_environment(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_environment")

    @incident_condition_environment.setter
    def incident_condition_environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_environment", value)

    @property
    @pulumi.getter(name="incidentConditionFunctionality")
    def incident_condition_functionality(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_functionality")

    @incident_condition_functionality.setter
    def incident_condition_functionality(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_functionality", value)

    @property
    @pulumi.getter(name="incidentConditionGroup")
    def incident_condition_group(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_group")

    @incident_condition_group.setter
    def incident_condition_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_group", value)

    @property
    @pulumi.getter(name="incidentConditionIncidentRoles")
    def incident_condition_incident_roles(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_incident_roles")

    @incident_condition_incident_roles.setter
    def incident_condition_incident_roles(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_incident_roles", value)

    @property
    @pulumi.getter(name="incidentConditionIncidentType")
    def incident_condition_incident_type(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_incident_type")

    @incident_condition_incident_type.setter
    def incident_condition_incident_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_incident_type", value)

    @property
    @pulumi.getter(name="incidentConditionKind")
    def incident_condition_kind(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_kind")

    @incident_condition_kind.setter
    def incident_condition_kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_kind", value)

    @property
    @pulumi.getter(name="incidentConditionMitigatedAt")
    def incident_condition_mitigated_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_condition_mitigated_at")

    @incident_condition_mitigated_at.setter
    def incident_condition_mitigated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_mitigated_at", value)

    @property
    @pulumi.getter(name="incidentConditionResolvedAt")
    def incident_condition_resolved_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_condition_resolved_at")

    @incident_condition_resolved_at.setter
    def incident_condition_resolved_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_resolved_at", value)

    @property
    @pulumi.getter(name="incidentConditionService")
    def incident_condition_service(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_service")

    @incident_condition_service.setter
    def incident_condition_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_service", value)

    @property
    @pulumi.getter(name="incidentConditionSeverity")
    def incident_condition_severity(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_severity")

    @incident_condition_severity.setter
    def incident_condition_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_severity", value)

    @property
    @pulumi.getter(name="incidentConditionStartedAt")
    def incident_condition_started_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_condition_started_at")

    @incident_condition_started_at.setter
    def incident_condition_started_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_started_at", value)

    @property
    @pulumi.getter(name="incidentConditionStatus")
    def incident_condition_status(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_status")

    @incident_condition_status.setter
    def incident_condition_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_status", value)

    @property
    @pulumi.getter(name="incidentConditionSummary")
    def incident_condition_summary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_condition_summary")

    @incident_condition_summary.setter
    def incident_condition_summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_summary", value)

    @property
    @pulumi.getter(name="incidentConditionVisibility")
    def incident_condition_visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_visibility")

    @incident_condition_visibility.setter
    def incident_condition_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_visibility", value)

    @property
    @pulumi.getter(name="incidentConditionalInactivity")
    def incident_conditional_inactivity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_conditional_inactivity")

    @incident_conditional_inactivity.setter
    def incident_conditional_inactivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_conditional_inactivity", value)

    @property
    @pulumi.getter(name="incidentInactivityDuration")
    def incident_inactivity_duration(self) -> Optional[pulumi.Input[str]]:
        """
        ex. 10 min, 1h, 3 days, 2 weeks
        """
        return pulumi.get(self, "incident_inactivity_duration")

    @incident_inactivity_duration.setter
    def incident_inactivity_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_inactivity_duration", value)

    @property
    @pulumi.getter(name="incidentKinds")
    def incident_kinds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Value must be one of `test`, `test_sub`, `example`, `example_sub`, `normal`, `normal_sub`, `backfilled`, `scheduled`.
        """
        return pulumi.get(self, "incident_kinds")

    @incident_kinds.setter
    def incident_kinds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_kinds", value)

    @property
    @pulumi.getter(name="incidentPostMortemConditionCause")
    def incident_post_mortem_condition_cause(self) -> Optional[pulumi.Input[str]]:
        """
        [DEPRECATED] Use incident*condition*cause instead. Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_post_mortem_condition_cause")

    @incident_post_mortem_condition_cause.setter
    def incident_post_mortem_condition_cause(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_post_mortem_condition_cause", value)

    @property
    @pulumi.getter(name="incidentStatuses")
    def incident_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Value must be one of `in_triage`, `started`, `detected`, `acknowledged`, `mitigated`, `resolved`, `cancelled`, `scheduled`, `in_progress`, `completed`.
        """
        return pulumi.get(self, "incident_statuses")

    @incident_statuses.setter
    def incident_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_statuses", value)

    @property
    @pulumi.getter(name="incidentVisibilities")
    def incident_visibilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "incident_visibilities")

    @incident_visibilities.setter
    def incident_visibilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_visibilities", value)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `incident`.
        """
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_type", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Actions that trigger the workflow. One of custom*fields.\\n\\n.updated, incident*in*triage, incident*created, incident*started, incident*updated, title*updated, summary*updated, status*updated, severity*updated, environments*added, environments*removed, environments*updated, incident*types*added, incident*types*removed, incident*types*updated, services*added, services*removed, services*updated, visibility*updated, functionalities*added, functionalities*removed, functionalities*updated, teams*added, teams*removed, teams*updated, causes*added, causes*removed, causes*updated, timeline*updated, status*page*timeline*updated, role*assignments*updated, role*assignments*added, role*assignments*removed, slack*command, slack*channel*created, slack*channel*converted, subscribers*updated, subscribers*added, subscribers*removed, user*joined*slack*channel, user*left*slack*channel
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "triggers", value)


@pulumi.input_type
class WorkflowPostMortemTriggerParamsArgs:
    def __init__(__self__, *,
                 incident_condition: Optional[pulumi.Input[str]] = None,
                 incident_condition_acknowledged_at: Optional[pulumi.Input[str]] = None,
                 incident_condition_cause: Optional[pulumi.Input[str]] = None,
                 incident_condition_detected_at: Optional[pulumi.Input[str]] = None,
                 incident_condition_environment: Optional[pulumi.Input[str]] = None,
                 incident_condition_functionality: Optional[pulumi.Input[str]] = None,
                 incident_condition_group: Optional[pulumi.Input[str]] = None,
                 incident_condition_incident_roles: Optional[pulumi.Input[str]] = None,
                 incident_condition_incident_type: Optional[pulumi.Input[str]] = None,
                 incident_condition_kind: Optional[pulumi.Input[str]] = None,
                 incident_condition_mitigated_at: Optional[pulumi.Input[str]] = None,
                 incident_condition_resolved_at: Optional[pulumi.Input[str]] = None,
                 incident_condition_service: Optional[pulumi.Input[str]] = None,
                 incident_condition_severity: Optional[pulumi.Input[str]] = None,
                 incident_condition_started_at: Optional[pulumi.Input[str]] = None,
                 incident_condition_status: Optional[pulumi.Input[str]] = None,
                 incident_condition_summary: Optional[pulumi.Input[str]] = None,
                 incident_condition_visibility: Optional[pulumi.Input[str]] = None,
                 incident_conditional_inactivity: Optional[pulumi.Input[str]] = None,
                 incident_inactivity_duration: Optional[pulumi.Input[str]] = None,
                 incident_kinds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_post_mortem_condition: Optional[pulumi.Input[str]] = None,
                 incident_post_mortem_condition_cause: Optional[pulumi.Input[str]] = None,
                 incident_post_mortem_condition_status: Optional[pulumi.Input[str]] = None,
                 incident_post_mortem_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_statuses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_visibilities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 trigger_type: Optional[pulumi.Input[str]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] incident_condition: Value must be one off `ALL`, `ANY`, `NONE`.
        :param pulumi.Input[str] incident_condition_cause: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_environment: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_functionality: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_group: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_incident_roles: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_incident_type: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_kind: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_service: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_severity: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_status: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_condition_visibility: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_inactivity_duration: ex. 10 min, 1h, 3 days, 2 weeks
        :param pulumi.Input[Sequence[pulumi.Input[str]]] incident_kinds: Value must be one of `test`, `test_sub`, `example`, `example_sub`, `normal`, `normal_sub`, `backfilled`, `scheduled`.
        :param pulumi.Input[str] incident_post_mortem_condition: Value must be one off `ALL`, `ANY`, `NONE`.
        :param pulumi.Input[str] incident_post_mortem_condition_cause: [DEPRECATED] Use incident*condition*cause instead. Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] incident_post_mortem_condition_status: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] incident_post_mortem_statuses: Value must be one of `draft`, `published`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] incident_statuses: Value must be one of `in_triage`, `started`, `detected`, `acknowledged`, `mitigated`, `resolved`, `cancelled`, `scheduled`, `in_progress`, `completed`.
        :param pulumi.Input[str] trigger_type: Value must be one off `post_mortem`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] triggers: Actions that trigger the workflow. One of custom*fields.\\n\\n.updated, post*mortem*created, post*mortem*updated, status*updated, slack_command
        """
        if incident_condition is not None:
            pulumi.set(__self__, "incident_condition", incident_condition)
        if incident_condition_acknowledged_at is not None:
            pulumi.set(__self__, "incident_condition_acknowledged_at", incident_condition_acknowledged_at)
        if incident_condition_cause is not None:
            pulumi.set(__self__, "incident_condition_cause", incident_condition_cause)
        if incident_condition_detected_at is not None:
            pulumi.set(__self__, "incident_condition_detected_at", incident_condition_detected_at)
        if incident_condition_environment is not None:
            pulumi.set(__self__, "incident_condition_environment", incident_condition_environment)
        if incident_condition_functionality is not None:
            pulumi.set(__self__, "incident_condition_functionality", incident_condition_functionality)
        if incident_condition_group is not None:
            pulumi.set(__self__, "incident_condition_group", incident_condition_group)
        if incident_condition_incident_roles is not None:
            pulumi.set(__self__, "incident_condition_incident_roles", incident_condition_incident_roles)
        if incident_condition_incident_type is not None:
            pulumi.set(__self__, "incident_condition_incident_type", incident_condition_incident_type)
        if incident_condition_kind is not None:
            pulumi.set(__self__, "incident_condition_kind", incident_condition_kind)
        if incident_condition_mitigated_at is not None:
            pulumi.set(__self__, "incident_condition_mitigated_at", incident_condition_mitigated_at)
        if incident_condition_resolved_at is not None:
            pulumi.set(__self__, "incident_condition_resolved_at", incident_condition_resolved_at)
        if incident_condition_service is not None:
            pulumi.set(__self__, "incident_condition_service", incident_condition_service)
        if incident_condition_severity is not None:
            pulumi.set(__self__, "incident_condition_severity", incident_condition_severity)
        if incident_condition_started_at is not None:
            pulumi.set(__self__, "incident_condition_started_at", incident_condition_started_at)
        if incident_condition_status is not None:
            pulumi.set(__self__, "incident_condition_status", incident_condition_status)
        if incident_condition_summary is not None:
            pulumi.set(__self__, "incident_condition_summary", incident_condition_summary)
        if incident_condition_visibility is not None:
            pulumi.set(__self__, "incident_condition_visibility", incident_condition_visibility)
        if incident_conditional_inactivity is not None:
            pulumi.set(__self__, "incident_conditional_inactivity", incident_conditional_inactivity)
        if incident_inactivity_duration is not None:
            pulumi.set(__self__, "incident_inactivity_duration", incident_inactivity_duration)
        if incident_kinds is not None:
            pulumi.set(__self__, "incident_kinds", incident_kinds)
        if incident_post_mortem_condition is not None:
            pulumi.set(__self__, "incident_post_mortem_condition", incident_post_mortem_condition)
        if incident_post_mortem_condition_cause is not None:
            pulumi.set(__self__, "incident_post_mortem_condition_cause", incident_post_mortem_condition_cause)
        if incident_post_mortem_condition_status is not None:
            pulumi.set(__self__, "incident_post_mortem_condition_status", incident_post_mortem_condition_status)
        if incident_post_mortem_statuses is not None:
            pulumi.set(__self__, "incident_post_mortem_statuses", incident_post_mortem_statuses)
        if incident_statuses is not None:
            pulumi.set(__self__, "incident_statuses", incident_statuses)
        if incident_visibilities is not None:
            pulumi.set(__self__, "incident_visibilities", incident_visibilities)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter(name="incidentCondition")
    def incident_condition(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `ALL`, `ANY`, `NONE`.
        """
        return pulumi.get(self, "incident_condition")

    @incident_condition.setter
    def incident_condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition", value)

    @property
    @pulumi.getter(name="incidentConditionAcknowledgedAt")
    def incident_condition_acknowledged_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_condition_acknowledged_at")

    @incident_condition_acknowledged_at.setter
    def incident_condition_acknowledged_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_acknowledged_at", value)

    @property
    @pulumi.getter(name="incidentConditionCause")
    def incident_condition_cause(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_cause")

    @incident_condition_cause.setter
    def incident_condition_cause(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_cause", value)

    @property
    @pulumi.getter(name="incidentConditionDetectedAt")
    def incident_condition_detected_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_condition_detected_at")

    @incident_condition_detected_at.setter
    def incident_condition_detected_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_detected_at", value)

    @property
    @pulumi.getter(name="incidentConditionEnvironment")
    def incident_condition_environment(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_environment")

    @incident_condition_environment.setter
    def incident_condition_environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_environment", value)

    @property
    @pulumi.getter(name="incidentConditionFunctionality")
    def incident_condition_functionality(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_functionality")

    @incident_condition_functionality.setter
    def incident_condition_functionality(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_functionality", value)

    @property
    @pulumi.getter(name="incidentConditionGroup")
    def incident_condition_group(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_group")

    @incident_condition_group.setter
    def incident_condition_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_group", value)

    @property
    @pulumi.getter(name="incidentConditionIncidentRoles")
    def incident_condition_incident_roles(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_incident_roles")

    @incident_condition_incident_roles.setter
    def incident_condition_incident_roles(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_incident_roles", value)

    @property
    @pulumi.getter(name="incidentConditionIncidentType")
    def incident_condition_incident_type(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_incident_type")

    @incident_condition_incident_type.setter
    def incident_condition_incident_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_incident_type", value)

    @property
    @pulumi.getter(name="incidentConditionKind")
    def incident_condition_kind(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_kind")

    @incident_condition_kind.setter
    def incident_condition_kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_kind", value)

    @property
    @pulumi.getter(name="incidentConditionMitigatedAt")
    def incident_condition_mitigated_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_condition_mitigated_at")

    @incident_condition_mitigated_at.setter
    def incident_condition_mitigated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_mitigated_at", value)

    @property
    @pulumi.getter(name="incidentConditionResolvedAt")
    def incident_condition_resolved_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_condition_resolved_at")

    @incident_condition_resolved_at.setter
    def incident_condition_resolved_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_resolved_at", value)

    @property
    @pulumi.getter(name="incidentConditionService")
    def incident_condition_service(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_service")

    @incident_condition_service.setter
    def incident_condition_service(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_service", value)

    @property
    @pulumi.getter(name="incidentConditionSeverity")
    def incident_condition_severity(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_severity")

    @incident_condition_severity.setter
    def incident_condition_severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_severity", value)

    @property
    @pulumi.getter(name="incidentConditionStartedAt")
    def incident_condition_started_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_condition_started_at")

    @incident_condition_started_at.setter
    def incident_condition_started_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_started_at", value)

    @property
    @pulumi.getter(name="incidentConditionStatus")
    def incident_condition_status(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_status")

    @incident_condition_status.setter
    def incident_condition_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_status", value)

    @property
    @pulumi.getter(name="incidentConditionSummary")
    def incident_condition_summary(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_condition_summary")

    @incident_condition_summary.setter
    def incident_condition_summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_summary", value)

    @property
    @pulumi.getter(name="incidentConditionVisibility")
    def incident_condition_visibility(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition_visibility")

    @incident_condition_visibility.setter
    def incident_condition_visibility(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition_visibility", value)

    @property
    @pulumi.getter(name="incidentConditionalInactivity")
    def incident_conditional_inactivity(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "incident_conditional_inactivity")

    @incident_conditional_inactivity.setter
    def incident_conditional_inactivity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_conditional_inactivity", value)

    @property
    @pulumi.getter(name="incidentInactivityDuration")
    def incident_inactivity_duration(self) -> Optional[pulumi.Input[str]]:
        """
        ex. 10 min, 1h, 3 days, 2 weeks
        """
        return pulumi.get(self, "incident_inactivity_duration")

    @incident_inactivity_duration.setter
    def incident_inactivity_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_inactivity_duration", value)

    @property
    @pulumi.getter(name="incidentKinds")
    def incident_kinds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Value must be one of `test`, `test_sub`, `example`, `example_sub`, `normal`, `normal_sub`, `backfilled`, `scheduled`.
        """
        return pulumi.get(self, "incident_kinds")

    @incident_kinds.setter
    def incident_kinds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_kinds", value)

    @property
    @pulumi.getter(name="incidentPostMortemCondition")
    def incident_post_mortem_condition(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `ALL`, `ANY`, `NONE`.
        """
        return pulumi.get(self, "incident_post_mortem_condition")

    @incident_post_mortem_condition.setter
    def incident_post_mortem_condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_post_mortem_condition", value)

    @property
    @pulumi.getter(name="incidentPostMortemConditionCause")
    def incident_post_mortem_condition_cause(self) -> Optional[pulumi.Input[str]]:
        """
        [DEPRECATED] Use incident*condition*cause instead. Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_post_mortem_condition_cause")

    @incident_post_mortem_condition_cause.setter
    def incident_post_mortem_condition_cause(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_post_mortem_condition_cause", value)

    @property
    @pulumi.getter(name="incidentPostMortemConditionStatus")
    def incident_post_mortem_condition_status(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_post_mortem_condition_status")

    @incident_post_mortem_condition_status.setter
    def incident_post_mortem_condition_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_post_mortem_condition_status", value)

    @property
    @pulumi.getter(name="incidentPostMortemStatuses")
    def incident_post_mortem_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Value must be one of `draft`, `published`.
        """
        return pulumi.get(self, "incident_post_mortem_statuses")

    @incident_post_mortem_statuses.setter
    def incident_post_mortem_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_post_mortem_statuses", value)

    @property
    @pulumi.getter(name="incidentStatuses")
    def incident_statuses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Value must be one of `in_triage`, `started`, `detected`, `acknowledged`, `mitigated`, `resolved`, `cancelled`, `scheduled`, `in_progress`, `completed`.
        """
        return pulumi.get(self, "incident_statuses")

    @incident_statuses.setter
    def incident_statuses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_statuses", value)

    @property
    @pulumi.getter(name="incidentVisibilities")
    def incident_visibilities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "incident_visibilities")

    @incident_visibilities.setter
    def incident_visibilities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_visibilities", value)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `post_mortem`.
        """
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_type", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Actions that trigger the workflow. One of custom*fields.\\n\\n.updated, post*mortem*created, post*mortem*updated, status*updated, slack_command
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "triggers", value)


@pulumi.input_type
class WorkflowPulseTriggerParamsArgs:
    def __init__(__self__, *,
                 pulse_condition: Optional[pulumi.Input[str]] = None,
                 pulse_condition_label: Optional[pulumi.Input[str]] = None,
                 pulse_condition_label_use_regexp: Optional[pulumi.Input[bool]] = None,
                 pulse_condition_payload: Optional[pulumi.Input[str]] = None,
                 pulse_condition_payload_use_regexp: Optional[pulumi.Input[bool]] = None,
                 pulse_condition_source: Optional[pulumi.Input[str]] = None,
                 pulse_condition_source_use_regexp: Optional[pulumi.Input[bool]] = None,
                 pulse_labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pulse_payloads: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 pulse_query_payload: Optional[pulumi.Input[str]] = None,
                 pulse_sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 trigger_type: Optional[pulumi.Input[str]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] pulse_condition: Value must be one off `ALL`, `ANY`, `NONE`.
        :param pulumi.Input[str] pulse_condition_label: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[bool] pulse_condition_label_use_regexp: Value must be one of true or false
        :param pulumi.Input[str] pulse_condition_payload: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[bool] pulse_condition_payload_use_regexp: Value must be one of true or false
        :param pulumi.Input[str] pulse_condition_source: Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[bool] pulse_condition_source_use_regexp: Value must be one of true or false
        :param pulumi.Input[str] pulse_query_payload: You can use jsonpath syntax. eg: $.incident.teams[*]
        :param pulumi.Input[str] trigger_type: Value must be one off `pulse`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] triggers: Actions that trigger the workflow. Value must be one of `pulse_created`.
        """
        if pulse_condition is not None:
            pulumi.set(__self__, "pulse_condition", pulse_condition)
        if pulse_condition_label is not None:
            pulumi.set(__self__, "pulse_condition_label", pulse_condition_label)
        if pulse_condition_label_use_regexp is not None:
            pulumi.set(__self__, "pulse_condition_label_use_regexp", pulse_condition_label_use_regexp)
        if pulse_condition_payload is not None:
            pulumi.set(__self__, "pulse_condition_payload", pulse_condition_payload)
        if pulse_condition_payload_use_regexp is not None:
            pulumi.set(__self__, "pulse_condition_payload_use_regexp", pulse_condition_payload_use_regexp)
        if pulse_condition_source is not None:
            pulumi.set(__self__, "pulse_condition_source", pulse_condition_source)
        if pulse_condition_source_use_regexp is not None:
            pulumi.set(__self__, "pulse_condition_source_use_regexp", pulse_condition_source_use_regexp)
        if pulse_labels is not None:
            pulumi.set(__self__, "pulse_labels", pulse_labels)
        if pulse_payloads is not None:
            pulumi.set(__self__, "pulse_payloads", pulse_payloads)
        if pulse_query_payload is not None:
            pulumi.set(__self__, "pulse_query_payload", pulse_query_payload)
        if pulse_sources is not None:
            pulumi.set(__self__, "pulse_sources", pulse_sources)
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter(name="pulseCondition")
    def pulse_condition(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `ALL`, `ANY`, `NONE`.
        """
        return pulumi.get(self, "pulse_condition")

    @pulse_condition.setter
    def pulse_condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pulse_condition", value)

    @property
    @pulumi.getter(name="pulseConditionLabel")
    def pulse_condition_label(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "pulse_condition_label")

    @pulse_condition_label.setter
    def pulse_condition_label(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pulse_condition_label", value)

    @property
    @pulumi.getter(name="pulseConditionLabelUseRegexp")
    def pulse_condition_label_use_regexp(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "pulse_condition_label_use_regexp")

    @pulse_condition_label_use_regexp.setter
    def pulse_condition_label_use_regexp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pulse_condition_label_use_regexp", value)

    @property
    @pulumi.getter(name="pulseConditionPayload")
    def pulse_condition_payload(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "pulse_condition_payload")

    @pulse_condition_payload.setter
    def pulse_condition_payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pulse_condition_payload", value)

    @property
    @pulumi.getter(name="pulseConditionPayloadUseRegexp")
    def pulse_condition_payload_use_regexp(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "pulse_condition_payload_use_regexp")

    @pulse_condition_payload_use_regexp.setter
    def pulse_condition_payload_use_regexp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pulse_condition_payload_use_regexp", value)

    @property
    @pulumi.getter(name="pulseConditionSource")
    def pulse_condition_source(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "pulse_condition_source")

    @pulse_condition_source.setter
    def pulse_condition_source(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pulse_condition_source", value)

    @property
    @pulumi.getter(name="pulseConditionSourceUseRegexp")
    def pulse_condition_source_use_regexp(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "pulse_condition_source_use_regexp")

    @pulse_condition_source_use_regexp.setter
    def pulse_condition_source_use_regexp(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pulse_condition_source_use_regexp", value)

    @property
    @pulumi.getter(name="pulseLabels")
    def pulse_labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "pulse_labels")

    @pulse_labels.setter
    def pulse_labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pulse_labels", value)

    @property
    @pulumi.getter(name="pulsePayloads")
    def pulse_payloads(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "pulse_payloads")

    @pulse_payloads.setter
    def pulse_payloads(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pulse_payloads", value)

    @property
    @pulumi.getter(name="pulseQueryPayload")
    def pulse_query_payload(self) -> Optional[pulumi.Input[str]]:
        """
        You can use jsonpath syntax. eg: $.incident.teams[*]
        """
        return pulumi.get(self, "pulse_query_payload")

    @pulse_query_payload.setter
    def pulse_query_payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pulse_query_payload", value)

    @property
    @pulumi.getter(name="pulseSources")
    def pulse_sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "pulse_sources")

    @pulse_sources.setter
    def pulse_sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "pulse_sources", value)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `pulse`.
        """
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_type", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Actions that trigger the workflow. Value must be one of `pulse_created`.
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "triggers", value)


@pulumi.input_type
class WorkflowSimpleTriggerParamsArgs:
    def __init__(__self__, *,
                 trigger_type: Optional[pulumi.Input[str]] = None,
                 triggers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] trigger_type: Value must be one off `simple`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] triggers: Actions that trigger the workflow. Value must be one of `slack_command`.
        """
        if trigger_type is not None:
            pulumi.set(__self__, "trigger_type", trigger_type)
        if triggers is not None:
            pulumi.set(__self__, "triggers", triggers)

    @property
    @pulumi.getter(name="triggerType")
    def trigger_type(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one off `simple`.
        """
        return pulumi.get(self, "trigger_type")

    @trigger_type.setter
    def trigger_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "trigger_type", value)

    @property
    @pulumi.getter
    def triggers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Actions that trigger the workflow. Value must be one of `slack_command`.
        """
        return pulumi.get(self, "triggers")

    @triggers.setter
    def triggers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "triggers", value)


@pulumi.input_type
class WorkflowTaskAddActionItemTaskParamsArgs:
    def __init__(__self__, *,
                 priority: pulumi.Input[str],
                 status: pulumi.Input[str],
                 summary: pulumi.Input[str],
                 assigned_to_user: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 assigned_to_user_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 incident_role_id: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskAddActionItemTaskParamsPostToSlackChannelArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] priority: The action item priority. Value must be one of `high`, `medium`, `low`.
        :param pulumi.Input[str] status: The action item status. Value must be one of `open`, `in_progress`, `cancelled`, `done`.
        :param pulumi.Input[str] summary: The action item summary
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] assigned_to_user: Map must contain two fields, `id` and `name`.  The user this action item is assigned to
        :param pulumi.Input[str] assigned_to_user_id: [DEPRECATED] Use assigned*to*user attribute instead. The user id this action item is assigned to
        :param pulumi.Input[str] description: The action item description
        :param pulumi.Input[str] incident_role_id: The role id this action item is associated with
        :param pulumi.Input[str] kind: The action item kind
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        """
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "summary", summary)
        if assigned_to_user is not None:
            pulumi.set(__self__, "assigned_to_user", assigned_to_user)
        if assigned_to_user_id is not None:
            pulumi.set(__self__, "assigned_to_user_id", assigned_to_user_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if incident_role_id is not None:
            pulumi.set(__self__, "incident_role_id", incident_role_id)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[str]:
        """
        The action item priority. Value must be one of `high`, `medium`, `low`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[str]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        The action item status. Value must be one of `open`, `in_progress`, `cancelled`, `done`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def summary(self) -> pulumi.Input[str]:
        """
        The action item summary
        """
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: pulumi.Input[str]):
        pulumi.set(self, "summary", value)

    @property
    @pulumi.getter(name="assignedToUser")
    def assigned_to_user(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.  The user this action item is assigned to
        """
        return pulumi.get(self, "assigned_to_user")

    @assigned_to_user.setter
    def assigned_to_user(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "assigned_to_user", value)

    @property
    @pulumi.getter(name="assignedToUserId")
    def assigned_to_user_id(self) -> Optional[pulumi.Input[str]]:
        """
        [DEPRECATED] Use assigned*to*user attribute instead. The user id this action item is assigned to
        """
        return pulumi.get(self, "assigned_to_user_id")

    @assigned_to_user_id.setter
    def assigned_to_user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assigned_to_user_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The action item description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="incidentRoleId")
    def incident_role_id(self) -> Optional[pulumi.Input[str]]:
        """
        The role id this action item is associated with
        """
        return pulumi.get(self, "incident_role_id")

    @incident_role_id.setter
    def incident_role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_role_id", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        The action item kind
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskAddActionItemTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskAddActionItemTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskAddActionItemTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskAddRoleTaskParamsArgs:
    def __init__(__self__, *,
                 incident_role_id: pulumi.Input[str],
                 assigned_to_user: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 assigned_to_user_id: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] incident_role_id: The role id to add to the incident
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] assigned_to_user: Map must contain two fields, `id` and `name`.  The user this role is assigned to
        :param pulumi.Input[str] assigned_to_user_id: [DEPRECATED] Use assigned*to*user attribute instead. The user id this role is assigned to
        """
        pulumi.set(__self__, "incident_role_id", incident_role_id)
        if assigned_to_user is not None:
            pulumi.set(__self__, "assigned_to_user", assigned_to_user)
        if assigned_to_user_id is not None:
            pulumi.set(__self__, "assigned_to_user_id", assigned_to_user_id)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="incidentRoleId")
    def incident_role_id(self) -> pulumi.Input[str]:
        """
        The role id to add to the incident
        """
        return pulumi.get(self, "incident_role_id")

    @incident_role_id.setter
    def incident_role_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "incident_role_id", value)

    @property
    @pulumi.getter(name="assignedToUser")
    def assigned_to_user(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.  The user this role is assigned to
        """
        return pulumi.get(self, "assigned_to_user")

    @assigned_to_user.setter
    def assigned_to_user(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "assigned_to_user", value)

    @property
    @pulumi.getter(name="assignedToUserId")
    def assigned_to_user_id(self) -> Optional[pulumi.Input[str]]:
        """
        [DEPRECATED] Use assigned*to*user attribute instead. The user id this role is assigned to
        """
        return pulumi.get(self, "assigned_to_user_id")

    @assigned_to_user_id.setter
    def assigned_to_user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assigned_to_user_id", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskAddSlackBookmarkTaskParamsArgs:
    def __init__(__self__, *,
                 channel: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 emoji: Optional[pulumi.Input[str]] = None,
                 link: Optional[pulumi.Input[str]] = None,
                 playbook_id: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] channel: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[str] emoji: The bookmark emoji
        :param pulumi.Input[str] link: The bookmark link. Required if not a playbook bookmark
        :param pulumi.Input[str] playbook_id: The playbook id if bookmark is of an incident playbook
        :param pulumi.Input[str] title: The bookmark title. Required if not a playbook bookmark
        """
        pulumi.set(__self__, "channel", channel)
        if emoji is not None:
            pulumi.set(__self__, "emoji", emoji)
        if link is not None:
            pulumi.set(__self__, "link", link)
        if playbook_id is not None:
            pulumi.set(__self__, "playbook_id", playbook_id)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def channel(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def emoji(self) -> Optional[pulumi.Input[str]]:
        """
        The bookmark emoji
        """
        return pulumi.get(self, "emoji")

    @emoji.setter
    def emoji(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "emoji", value)

    @property
    @pulumi.getter
    def link(self) -> Optional[pulumi.Input[str]]:
        """
        The bookmark link. Required if not a playbook bookmark
        """
        return pulumi.get(self, "link")

    @link.setter
    def link(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "link", value)

    @property
    @pulumi.getter(name="playbookId")
    def playbook_id(self) -> Optional[pulumi.Input[str]]:
        """
        The playbook id if bookmark is of an incident playbook
        """
        return pulumi.get(self, "playbook_id")

    @playbook_id.setter
    def playbook_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "playbook_id", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The bookmark title. Required if not a playbook bookmark
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class WorkflowTaskAddTeamTaskParamsArgs:
    def __init__(__self__, *,
                 group_id: pulumi.Input[str],
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] group_id: The team id
        """
        pulumi.set(__self__, "group_id", group_id)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> pulumi.Input[str]:
        """
        The team id
        """
        return pulumi.get(self, "group_id")

    @group_id.setter
    def group_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_id", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskAddToTimelineTaskParamsArgs:
    def __init__(__self__, *,
                 event: pulumi.Input[str],
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskAddToTimelineTaskParamsPostToSlackChannelArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 url: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] event: The timeline event description
        :param pulumi.Input[str] url: A URL for the timeline event
        """
        pulumi.set(__self__, "event", event)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter
    def event(self) -> pulumi.Input[str]:
        """
        The timeline event description
        """
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: pulumi.Input[str]):
        pulumi.set(self, "event", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskAddToTimelineTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskAddToTimelineTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        A URL for the timeline event
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class WorkflowTaskAddToTimelineTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskArchiveSlackChannelsTaskParamsArgs:
    def __init__(__self__, *,
                 channels: pulumi.Input[Sequence[pulumi.Input['WorkflowTaskArchiveSlackChannelsTaskParamsChannelArgs']]],
                 task_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "channels", channels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def channels(self) -> pulumi.Input[Sequence[pulumi.Input['WorkflowTaskArchiveSlackChannelsTaskParamsChannelArgs']]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: pulumi.Input[Sequence[pulumi.Input['WorkflowTaskArchiveSlackChannelsTaskParamsChannelArgs']]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskArchiveSlackChannelsTaskParamsChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskAttachDatadogDashboardsTaskParamsArgs:
    def __init__(__self__, *,
                 dashboards: pulumi.Input[Sequence[pulumi.Input['WorkflowTaskAttachDatadogDashboardsTaskParamsDashboardArgs']]],
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskAttachDatadogDashboardsTaskParamsPostToSlackChannelArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        """
        pulumi.set(__self__, "dashboards", dashboards)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def dashboards(self) -> pulumi.Input[Sequence[pulumi.Input['WorkflowTaskAttachDatadogDashboardsTaskParamsDashboardArgs']]]:
        return pulumi.get(self, "dashboards")

    @dashboards.setter
    def dashboards(self, value: pulumi.Input[Sequence[pulumi.Input['WorkflowTaskAttachDatadogDashboardsTaskParamsDashboardArgs']]]):
        pulumi.set(self, "dashboards", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskAttachDatadogDashboardsTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskAttachDatadogDashboardsTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskAttachDatadogDashboardsTaskParamsDashboardArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskAttachDatadogDashboardsTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskAutoAssignRoleOpsgenieTaskParamsArgs:
    def __init__(__self__, *,
                 incident_role_id: pulumi.Input[str],
                 schedule: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] incident_role_id: The role id
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] schedule: Map must contain two fields, `id` and `name`.
        """
        pulumi.set(__self__, "incident_role_id", incident_role_id)
        pulumi.set(__self__, "schedule", schedule)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="incidentRoleId")
    def incident_role_id(self) -> pulumi.Input[str]:
        """
        The role id
        """
        return pulumi.get(self, "incident_role_id")

    @incident_role_id.setter
    def incident_role_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "incident_role_id", value)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskAutoAssignRolePagerdutyTaskParamsArgs:
    def __init__(__self__, *,
                 incident_role_id: pulumi.Input[str],
                 escalation_policy: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 schedule: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 service: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] incident_role_id: The role id
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] escalation_policy: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] schedule: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] service: Map must contain two fields, `id` and `name`.
        """
        pulumi.set(__self__, "incident_role_id", incident_role_id)
        if escalation_policy is not None:
            pulumi.set(__self__, "escalation_policy", escalation_policy)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="incidentRoleId")
    def incident_role_id(self) -> pulumi.Input[str]:
        """
        The role id
        """
        return pulumi.get(self, "incident_role_id")

    @incident_role_id.setter
    def incident_role_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "incident_role_id", value)

    @property
    @pulumi.getter(name="escalationPolicy")
    def escalation_policy(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "escalation_policy")

    @escalation_policy.setter
    def escalation_policy(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "escalation_policy", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskAutoAssignRoleRootlyTaskParamsArgs:
    def __init__(__self__, *,
                 incident_role_id: pulumi.Input[str],
                 escalation_policy_target: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 group_target: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 schedule_target: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 service_target: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 user_target: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] incident_role_id: The role id
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] escalation_policy_target: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] group_target: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] schedule_target: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] service_target: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] user_target: Map must contain two fields, `id` and `name`.
        """
        pulumi.set(__self__, "incident_role_id", incident_role_id)
        if escalation_policy_target is not None:
            pulumi.set(__self__, "escalation_policy_target", escalation_policy_target)
        if group_target is not None:
            pulumi.set(__self__, "group_target", group_target)
        if schedule_target is not None:
            pulumi.set(__self__, "schedule_target", schedule_target)
        if service_target is not None:
            pulumi.set(__self__, "service_target", service_target)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if user_target is not None:
            pulumi.set(__self__, "user_target", user_target)

    @property
    @pulumi.getter(name="incidentRoleId")
    def incident_role_id(self) -> pulumi.Input[str]:
        """
        The role id
        """
        return pulumi.get(self, "incident_role_id")

    @incident_role_id.setter
    def incident_role_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "incident_role_id", value)

    @property
    @pulumi.getter(name="escalationPolicyTarget")
    def escalation_policy_target(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "escalation_policy_target")

    @escalation_policy_target.setter
    def escalation_policy_target(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "escalation_policy_target", value)

    @property
    @pulumi.getter(name="groupTarget")
    def group_target(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "group_target")

    @group_target.setter
    def group_target(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "group_target", value)

    @property
    @pulumi.getter(name="scheduleTarget")
    def schedule_target(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "schedule_target")

    @schedule_target.setter
    def schedule_target(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "schedule_target", value)

    @property
    @pulumi.getter(name="serviceTarget")
    def service_target(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "service_target")

    @service_target.setter
    def service_target(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "service_target", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="userTarget")
    def user_target(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "user_target")

    @user_target.setter
    def user_target(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "user_target", value)


@pulumi.input_type
class WorkflowTaskAutoAssignRoleVictorOpsTaskParamsArgs:
    def __init__(__self__, *,
                 incident_role_id: pulumi.Input[str],
                 team: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] incident_role_id: The role id
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] team: Map must contain two fields, `id` and `name`.
        """
        pulumi.set(__self__, "incident_role_id", incident_role_id)
        pulumi.set(__self__, "team", team)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="incidentRoleId")
    def incident_role_id(self) -> pulumi.Input[str]:
        """
        The role id
        """
        return pulumi.get(self, "incident_role_id")

    @incident_role_id.setter
    def incident_role_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "incident_role_id", value)

    @property
    @pulumi.getter
    def team(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "team")

    @team.setter
    def team(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "team", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCallPeopleTaskParamsArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 name: pulumi.Input[str],
                 phone_numbers: pulumi.Input[Sequence[pulumi.Input[str]]],
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: The message to be read by text-to-voice
        :param pulumi.Input[str] name: The name
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phone_numbers", phone_numbers)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The message to be read by text-to-voice
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="phoneNumbers")
    def phone_numbers(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "phone_numbers")

    @phone_numbers.setter
    def phone_numbers(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "phone_numbers", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskChangeSlackChannelPrivacyTaskParamsArgs:
    def __init__(__self__, *,
                 privacy: pulumi.Input[str],
                 channel: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] privacy: Value must be one of `private`, `public`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] channel: Map must contain two fields, `id` and `name`.
        """
        pulumi.set(__self__, "privacy", privacy)
        if channel is not None:
            pulumi.set(__self__, "channel", channel)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def privacy(self) -> pulumi.Input[str]:
        """
        Value must be one of `private`, `public`.
        """
        return pulumi.get(self, "privacy")

    @privacy.setter
    def privacy(self, value: pulumi.Input[str]):
        pulumi.set(self, "privacy", value)

    @property
    @pulumi.getter
    def channel(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateAirtableTableRecordTaskParamsArgs:
    def __init__(__self__, *,
                 base: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 table: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 custom_fields_mapping: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] base: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] table: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[str] custom_fields_mapping: Custom field mappings. Can contain liquid markup and need to be valid JSON
        """
        pulumi.set(__self__, "base", base)
        pulumi.set(__self__, "table", table)
        if custom_fields_mapping is not None:
            pulumi.set(__self__, "custom_fields_mapping", custom_fields_mapping)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def base(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "base")

    @base.setter
    def base(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "base", value)

    @property
    @pulumi.getter
    def table(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "table")

    @table.setter
    def table(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "table", value)

    @property
    @pulumi.getter(name="customFieldsMapping")
    def custom_fields_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Custom field mappings. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "custom_fields_mapping")

    @custom_fields_mapping.setter
    def custom_fields_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fields_mapping", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateAsanaSubtaskTaskParamsArgs:
    def __init__(__self__, *,
                 completion: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 parent_task_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 assign_user_email: Optional[pulumi.Input[str]] = None,
                 custom_fields_mapping: Optional[pulumi.Input[str]] = None,
                 dependency_direction: Optional[pulumi.Input[str]] = None,
                 dependent_task_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 due_date: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] completion: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[str] parent_task_id: The parent task id
        :param pulumi.Input[str] title: The subtask title
        :param pulumi.Input[str] assign_user_email: The assigned user's email
        :param pulumi.Input[str] custom_fields_mapping: Custom field mappings. Can contain liquid markup and need to be valid JSON
        :param pulumi.Input[str] dependency_direction: Value must be one of `blocking`, `blocked_by`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dependent_task_ids: Dependent task ids. Supports liquid syntax
        :param pulumi.Input[str] due_date: The due date
        """
        pulumi.set(__self__, "completion", completion)
        pulumi.set(__self__, "parent_task_id", parent_task_id)
        pulumi.set(__self__, "title", title)
        if assign_user_email is not None:
            pulumi.set(__self__, "assign_user_email", assign_user_email)
        if custom_fields_mapping is not None:
            pulumi.set(__self__, "custom_fields_mapping", custom_fields_mapping)
        if dependency_direction is not None:
            pulumi.set(__self__, "dependency_direction", dependency_direction)
        if dependent_task_ids is not None:
            pulumi.set(__self__, "dependent_task_ids", dependent_task_ids)
        if due_date is not None:
            pulumi.set(__self__, "due_date", due_date)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def completion(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "completion")

    @completion.setter
    def completion(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "completion", value)

    @property
    @pulumi.getter(name="parentTaskId")
    def parent_task_id(self) -> pulumi.Input[str]:
        """
        The parent task id
        """
        return pulumi.get(self, "parent_task_id")

    @parent_task_id.setter
    def parent_task_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parent_task_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The subtask title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="assignUserEmail")
    def assign_user_email(self) -> Optional[pulumi.Input[str]]:
        """
        The assigned user's email
        """
        return pulumi.get(self, "assign_user_email")

    @assign_user_email.setter
    def assign_user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_user_email", value)

    @property
    @pulumi.getter(name="customFieldsMapping")
    def custom_fields_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Custom field mappings. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "custom_fields_mapping")

    @custom_fields_mapping.setter
    def custom_fields_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fields_mapping", value)

    @property
    @pulumi.getter(name="dependencyDirection")
    def dependency_direction(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `blocking`, `blocked_by`.
        """
        return pulumi.get(self, "dependency_direction")

    @dependency_direction.setter
    def dependency_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dependency_direction", value)

    @property
    @pulumi.getter(name="dependentTaskIds")
    def dependent_task_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Dependent task ids. Supports liquid syntax
        """
        return pulumi.get(self, "dependent_task_ids")

    @dependent_task_ids.setter
    def dependent_task_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dependent_task_ids", value)

    @property
    @pulumi.getter(name="dueDate")
    def due_date(self) -> Optional[pulumi.Input[str]]:
        """
        The due date
        """
        return pulumi.get(self, "due_date")

    @due_date.setter
    def due_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "due_date", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateAsanaTaskTaskParamsArgs:
    def __init__(__self__, *,
                 completion: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 projects: pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateAsanaTaskTaskParamsProjectArgs']]],
                 title: pulumi.Input[str],
                 workspace: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 assign_user_email: Optional[pulumi.Input[str]] = None,
                 custom_fields_mapping: Optional[pulumi.Input[str]] = None,
                 dependency_direction: Optional[pulumi.Input[str]] = None,
                 dependent_task_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 due_date: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] completion: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[str] title: The task title
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] workspace: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[str] assign_user_email: The assigned user's email
        :param pulumi.Input[str] custom_fields_mapping: Custom field mappings. Can contain liquid markup and need to be valid JSON
        :param pulumi.Input[str] dependency_direction: Value must be one of `blocking`, `blocked_by`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dependent_task_ids: Dependent task ids. Supports liquid syntax
        :param pulumi.Input[str] due_date: The due date
        """
        pulumi.set(__self__, "completion", completion)
        pulumi.set(__self__, "projects", projects)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "workspace", workspace)
        if assign_user_email is not None:
            pulumi.set(__self__, "assign_user_email", assign_user_email)
        if custom_fields_mapping is not None:
            pulumi.set(__self__, "custom_fields_mapping", custom_fields_mapping)
        if dependency_direction is not None:
            pulumi.set(__self__, "dependency_direction", dependency_direction)
        if dependent_task_ids is not None:
            pulumi.set(__self__, "dependent_task_ids", dependent_task_ids)
        if due_date is not None:
            pulumi.set(__self__, "due_date", due_date)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def completion(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "completion")

    @completion.setter
    def completion(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "completion", value)

    @property
    @pulumi.getter
    def projects(self) -> pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateAsanaTaskTaskParamsProjectArgs']]]:
        return pulumi.get(self, "projects")

    @projects.setter
    def projects(self, value: pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateAsanaTaskTaskParamsProjectArgs']]]):
        pulumi.set(self, "projects", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The task title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def workspace(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "workspace", value)

    @property
    @pulumi.getter(name="assignUserEmail")
    def assign_user_email(self) -> Optional[pulumi.Input[str]]:
        """
        The assigned user's email
        """
        return pulumi.get(self, "assign_user_email")

    @assign_user_email.setter
    def assign_user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_user_email", value)

    @property
    @pulumi.getter(name="customFieldsMapping")
    def custom_fields_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Custom field mappings. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "custom_fields_mapping")

    @custom_fields_mapping.setter
    def custom_fields_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fields_mapping", value)

    @property
    @pulumi.getter(name="dependencyDirection")
    def dependency_direction(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `blocking`, `blocked_by`.
        """
        return pulumi.get(self, "dependency_direction")

    @dependency_direction.setter
    def dependency_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dependency_direction", value)

    @property
    @pulumi.getter(name="dependentTaskIds")
    def dependent_task_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Dependent task ids. Supports liquid syntax
        """
        return pulumi.get(self, "dependent_task_ids")

    @dependent_task_ids.setter
    def dependent_task_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dependent_task_ids", value)

    @property
    @pulumi.getter(name="dueDate")
    def due_date(self) -> Optional[pulumi.Input[str]]:
        """
        The due date
        """
        return pulumi.get(self, "due_date")

    @due_date.setter
    def due_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "due_date", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateAsanaTaskTaskParamsProjectArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskCreateClickupTaskTaskParamsArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 custom_fields_mapping: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 due_date: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[str]] = None,
                 task_payload: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: The task title
        :param pulumi.Input[str] custom_fields_mapping: Custom field mappings. Can contain liquid markup and need to be valid JSON
        :param pulumi.Input[str] description: The task description
        :param pulumi.Input[str] due_date: The due date
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] priority: Map must contain two fields, `id` and `name`. The priority id and display name
        :param pulumi.Input[str] tags: The task tags
        :param pulumi.Input[str] task_payload: Additional ClickUp task attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON
        """
        pulumi.set(__self__, "title", title)
        if custom_fields_mapping is not None:
            pulumi.set(__self__, "custom_fields_mapping", custom_fields_mapping)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if due_date is not None:
            pulumi.set(__self__, "due_date", due_date)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if task_payload is not None:
            pulumi.set(__self__, "task_payload", task_payload)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The task title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="customFieldsMapping")
    def custom_fields_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Custom field mappings. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "custom_fields_mapping")

    @custom_fields_mapping.setter
    def custom_fields_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fields_mapping", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The task description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dueDate")
    def due_date(self) -> Optional[pulumi.Input[str]]:
        """
        The due date
        """
        return pulumi.get(self, "due_date")

    @due_date.setter
    def due_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "due_date", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The priority id and display name
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[str]]:
        """
        The task tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="taskPayload")
    def task_payload(self) -> Optional[pulumi.Input[str]]:
        """
        Additional ClickUp task attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "task_payload")

    @task_payload.setter
    def task_payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_payload", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateConfluencePageTaskParamsArgs:
    def __init__(__self__, *,
                 space: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 title: pulumi.Input[str],
                 ancestor: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 content: Optional[pulumi.Input[str]] = None,
                 integration: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 mark_post_mortem_as_published: Optional[pulumi.Input[bool]] = None,
                 post_mortem_template_id: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 template: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] space: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[str] title: The page title
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] ancestor: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[str] content: The page content
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] integration: Map must contain two fields, `id` and `name`. Specify integration id if you have more than one Confluence instance
        :param pulumi.Input[bool] mark_post_mortem_as_published: Value must be one of true or false
        :param pulumi.Input[str] post_mortem_template_id: The Retrospective template to use
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] template: Map must contain two fields, `id` and `name`.
        """
        pulumi.set(__self__, "space", space)
        pulumi.set(__self__, "title", title)
        if ancestor is not None:
            pulumi.set(__self__, "ancestor", ancestor)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if integration is not None:
            pulumi.set(__self__, "integration", integration)
        if mark_post_mortem_as_published is not None:
            pulumi.set(__self__, "mark_post_mortem_as_published", mark_post_mortem_as_published)
        if post_mortem_template_id is not None:
            pulumi.set(__self__, "post_mortem_template_id", post_mortem_template_id)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def space(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "space")

    @space.setter
    def space(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "space", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The page title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def ancestor(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "ancestor")

    @ancestor.setter
    def ancestor(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "ancestor", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        The page content
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def integration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. Specify integration id if you have more than one Confluence instance
        """
        return pulumi.get(self, "integration")

    @integration.setter
    def integration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "integration", value)

    @property
    @pulumi.getter(name="markPostMortemAsPublished")
    def mark_post_mortem_as_published(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "mark_post_mortem_as_published")

    @mark_post_mortem_as_published.setter
    def mark_post_mortem_as_published(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mark_post_mortem_as_published", value)

    @property
    @pulumi.getter(name="postMortemTemplateId")
    def post_mortem_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Retrospective template to use
        """
        return pulumi.get(self, "post_mortem_template_id")

    @post_mortem_template_id.setter
    def post_mortem_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_mortem_template_id", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "template", value)


@pulumi.input_type
class WorkflowTaskCreateDatadogNotebookTaskParamsArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 title: pulumi.Input[str],
                 content: Optional[pulumi.Input[str]] = None,
                 mark_post_mortem_as_published: Optional[pulumi.Input[bool]] = None,
                 post_mortem_template_id: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 template: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] kind: The notebook kind. Value must be one of `postmortem`, `runbook`, `investigation`, `documentation`, `report`.
        :param pulumi.Input[str] title: The notebook title
        :param pulumi.Input[str] content: The notebook content
        :param pulumi.Input[bool] mark_post_mortem_as_published: Value must be one of true or false
        :param pulumi.Input[str] post_mortem_template_id: Retrospective template to use when creating notebook, if desired
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] template: Map must contain two fields, `id` and `name`.
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "title", title)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if mark_post_mortem_as_published is not None:
            pulumi.set(__self__, "mark_post_mortem_as_published", mark_post_mortem_as_published)
        if post_mortem_template_id is not None:
            pulumi.set(__self__, "post_mortem_template_id", post_mortem_template_id)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        The notebook kind. Value must be one of `postmortem`, `runbook`, `investigation`, `documentation`, `report`.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The notebook title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        The notebook content
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="markPostMortemAsPublished")
    def mark_post_mortem_as_published(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "mark_post_mortem_as_published")

    @mark_post_mortem_as_published.setter
    def mark_post_mortem_as_published(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mark_post_mortem_as_published", value)

    @property
    @pulumi.getter(name="postMortemTemplateId")
    def post_mortem_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Retrospective template to use when creating notebook, if desired
        """
        return pulumi.get(self, "post_mortem_template_id")

    @post_mortem_template_id.setter
    def post_mortem_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_mortem_template_id", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "template", value)


@pulumi.input_type
class WorkflowTaskCreateDropboxPaperPageTaskParamsArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 content: Optional[pulumi.Input[str]] = None,
                 mark_post_mortem_as_published: Optional[pulumi.Input[bool]] = None,
                 namespace: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 parent_folder: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 post_mortem_template_id: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: The page task title
        :param pulumi.Input[str] content: The page content
        :param pulumi.Input[bool] mark_post_mortem_as_published: Value must be one of true or false
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] namespace: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parent_folder: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[str] post_mortem_template_id: Retrospective template to use when creating page task, if desired
        """
        pulumi.set(__self__, "title", title)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if mark_post_mortem_as_published is not None:
            pulumi.set(__self__, "mark_post_mortem_as_published", mark_post_mortem_as_published)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if parent_folder is not None:
            pulumi.set(__self__, "parent_folder", parent_folder)
        if post_mortem_template_id is not None:
            pulumi.set(__self__, "post_mortem_template_id", post_mortem_template_id)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The page task title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        The page content
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="markPostMortemAsPublished")
    def mark_post_mortem_as_published(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "mark_post_mortem_as_published")

    @mark_post_mortem_as_published.setter
    def mark_post_mortem_as_published(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mark_post_mortem_as_published", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="parentFolder")
    def parent_folder(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "parent_folder")

    @parent_folder.setter
    def parent_folder(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parent_folder", value)

    @property
    @pulumi.getter(name="postMortemTemplateId")
    def post_mortem_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Retrospective template to use when creating page task, if desired
        """
        return pulumi.get(self, "post_mortem_template_id")

    @post_mortem_template_id.setter
    def post_mortem_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_mortem_template_id", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateGithubIssueTaskParamsArgs:
    def __init__(__self__, *,
                 repository: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 title: pulumi.Input[str],
                 body: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] repository: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[str] title: The issue title
        :param pulumi.Input[str] body: The issue body
        """
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "title", title)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The issue title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        The issue body
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateGitlabIssueTaskParamsArgs:
    def __init__(__self__, *,
                 repository: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 due_date: Optional[pulumi.Input[str]] = None,
                 issue_type: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] repository: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[str] title: The issue title
        :param pulumi.Input[str] description: The issue description
        :param pulumi.Input[str] due_date: The due date
        :param pulumi.Input[str] issue_type: The issue type. Value must be one of `issue`, `incident`, `test_case`, `task`.
        :param pulumi.Input[str] labels: The issue labels
        """
        pulumi.set(__self__, "repository", repository)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if due_date is not None:
            pulumi.set(__self__, "due_date", due_date)
        if issue_type is not None:
            pulumi.set(__self__, "issue_type", issue_type)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def repository(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "repository")

    @repository.setter
    def repository(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "repository", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The issue title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The issue description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dueDate")
    def due_date(self) -> Optional[pulumi.Input[str]]:
        """
        The due date
        """
        return pulumi.get(self, "due_date")

    @due_date.setter
    def due_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "due_date", value)

    @property
    @pulumi.getter(name="issueType")
    def issue_type(self) -> Optional[pulumi.Input[str]]:
        """
        The issue type. Value must be one of `issue`, `incident`, `test_case`, `task`.
        """
        return pulumi.get(self, "issue_type")

    @issue_type.setter
    def issue_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issue_type", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[str]]:
        """
        The issue labels
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateGoToMeetingTaskParamsArgs:
    def __init__(__self__, *,
                 subject: pulumi.Input[str],
                 conference_call_info: Optional[pulumi.Input[str]] = None,
                 password_required: Optional[pulumi.Input[bool]] = None,
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateGoToMeetingTaskParamsPostToSlackChannelArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] subject: The meeting subject
        :param pulumi.Input[str] conference_call_info: Value must be one of `ptsn`, `free`, `hyrid`, `voip`.
        :param pulumi.Input[bool] password_required: Value must be one of true or false
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        """
        pulumi.set(__self__, "subject", subject)
        if conference_call_info is not None:
            pulumi.set(__self__, "conference_call_info", conference_call_info)
        if password_required is not None:
            pulumi.set(__self__, "password_required", password_required)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The meeting subject
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="conferenceCallInfo")
    def conference_call_info(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `ptsn`, `free`, `hyrid`, `voip`.
        """
        return pulumi.get(self, "conference_call_info")

    @conference_call_info.setter
    def conference_call_info(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "conference_call_info", value)

    @property
    @pulumi.getter(name="passwordRequired")
    def password_required(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "password_required")

    @password_required.setter
    def password_required(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "password_required", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateGoToMeetingTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateGoToMeetingTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateGoToMeetingTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskCreateGoogleCalendarEventTaskParamsArgs:
    def __init__(__self__, *,
                 days_until_meeting: pulumi.Input[int],
                 description: pulumi.Input[str],
                 meeting_duration: pulumi.Input[str],
                 summary: pulumi.Input[str],
                 time_of_meeting: pulumi.Input[str],
                 attendees: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 can_guests_invite_others: Optional[pulumi.Input[bool]] = None,
                 can_guests_modify_event: Optional[pulumi.Input[bool]] = None,
                 can_guests_see_other_guests: Optional[pulumi.Input[bool]] = None,
                 conference_solution_key: Optional[pulumi.Input[str]] = None,
                 exclude_weekends: Optional[pulumi.Input[bool]] = None,
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateGoogleCalendarEventTaskParamsPostToSlackChannelArgs']]]] = None,
                 send_updates: Optional[pulumi.Input[bool]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[int] days_until_meeting: The days until meeting
        :param pulumi.Input[str] description: The event description
        :param pulumi.Input[str] meeting_duration: Meeting duration in format like '1 hour', '30 minutes'
        :param pulumi.Input[str] summary: The event summary
        :param pulumi.Input[str] time_of_meeting: Time of meeting in format HH:MM
        :param pulumi.Input[Sequence[pulumi.Input[str]]] attendees: Emails of attendees
        :param pulumi.Input[bool] can_guests_invite_others: Value must be one of true or false
        :param pulumi.Input[bool] can_guests_modify_event: Value must be one of true or false
        :param pulumi.Input[bool] can_guests_see_other_guests: Value must be one of true or false
        :param pulumi.Input[str] conference_solution_key: Sets the video conference type attached to the meeting. Value must be one of `eventHangout`, `eventNamedHangout`, `hangoutsMeet`, `addOn`.
        :param pulumi.Input[bool] exclude_weekends: Value must be one of true or false
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        :param pulumi.Input[bool] send_updates: Send an email to the attendees notifying them of the event. Value must be one of true or false
        :param pulumi.Input[str] time_zone: A valid IANA time zone name.
        """
        pulumi.set(__self__, "days_until_meeting", days_until_meeting)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "meeting_duration", meeting_duration)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "time_of_meeting", time_of_meeting)
        if attendees is not None:
            pulumi.set(__self__, "attendees", attendees)
        if can_guests_invite_others is not None:
            pulumi.set(__self__, "can_guests_invite_others", can_guests_invite_others)
        if can_guests_modify_event is not None:
            pulumi.set(__self__, "can_guests_modify_event", can_guests_modify_event)
        if can_guests_see_other_guests is not None:
            pulumi.set(__self__, "can_guests_see_other_guests", can_guests_see_other_guests)
        if conference_solution_key is not None:
            pulumi.set(__self__, "conference_solution_key", conference_solution_key)
        if exclude_weekends is not None:
            pulumi.set(__self__, "exclude_weekends", exclude_weekends)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if send_updates is not None:
            pulumi.set(__self__, "send_updates", send_updates)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter(name="daysUntilMeeting")
    def days_until_meeting(self) -> pulumi.Input[int]:
        """
        The days until meeting
        """
        return pulumi.get(self, "days_until_meeting")

    @days_until_meeting.setter
    def days_until_meeting(self, value: pulumi.Input[int]):
        pulumi.set(self, "days_until_meeting", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        The event description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="meetingDuration")
    def meeting_duration(self) -> pulumi.Input[str]:
        """
        Meeting duration in format like '1 hour', '30 minutes'
        """
        return pulumi.get(self, "meeting_duration")

    @meeting_duration.setter
    def meeting_duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "meeting_duration", value)

    @property
    @pulumi.getter
    def summary(self) -> pulumi.Input[str]:
        """
        The event summary
        """
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: pulumi.Input[str]):
        pulumi.set(self, "summary", value)

    @property
    @pulumi.getter(name="timeOfMeeting")
    def time_of_meeting(self) -> pulumi.Input[str]:
        """
        Time of meeting in format HH:MM
        """
        return pulumi.get(self, "time_of_meeting")

    @time_of_meeting.setter
    def time_of_meeting(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_of_meeting", value)

    @property
    @pulumi.getter
    def attendees(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Emails of attendees
        """
        return pulumi.get(self, "attendees")

    @attendees.setter
    def attendees(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "attendees", value)

    @property
    @pulumi.getter(name="canGuestsInviteOthers")
    def can_guests_invite_others(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "can_guests_invite_others")

    @can_guests_invite_others.setter
    def can_guests_invite_others(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_guests_invite_others", value)

    @property
    @pulumi.getter(name="canGuestsModifyEvent")
    def can_guests_modify_event(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "can_guests_modify_event")

    @can_guests_modify_event.setter
    def can_guests_modify_event(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_guests_modify_event", value)

    @property
    @pulumi.getter(name="canGuestsSeeOtherGuests")
    def can_guests_see_other_guests(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "can_guests_see_other_guests")

    @can_guests_see_other_guests.setter
    def can_guests_see_other_guests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_guests_see_other_guests", value)

    @property
    @pulumi.getter(name="conferenceSolutionKey")
    def conference_solution_key(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the video conference type attached to the meeting. Value must be one of `eventHangout`, `eventNamedHangout`, `hangoutsMeet`, `addOn`.
        """
        return pulumi.get(self, "conference_solution_key")

    @conference_solution_key.setter
    def conference_solution_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "conference_solution_key", value)

    @property
    @pulumi.getter(name="excludeWeekends")
    def exclude_weekends(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "exclude_weekends")

    @exclude_weekends.setter
    def exclude_weekends(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude_weekends", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateGoogleCalendarEventTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateGoogleCalendarEventTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="sendUpdates")
    def send_updates(self) -> Optional[pulumi.Input[bool]]:
        """
        Send an email to the attendees notifying them of the event. Value must be one of true or false
        """
        return pulumi.get(self, "send_updates")

    @send_updates.setter
    def send_updates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_updates", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        A valid IANA time zone name.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class WorkflowTaskCreateGoogleCalendarEventTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskCreateGoogleDocsPageTaskParamsArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 content: Optional[pulumi.Input[str]] = None,
                 drive: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 mark_post_mortem_as_published: Optional[pulumi.Input[bool]] = None,
                 parent_folder: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 permissions: Optional[pulumi.Input[str]] = None,
                 post_mortem_template_id: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: The page title
        :param pulumi.Input[str] content: The page content
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] drive: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[bool] mark_post_mortem_as_published: Value must be one of true or false
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parent_folder: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[str] permissions: Page permissions JSON
        :param pulumi.Input[str] post_mortem_template_id: Retrospective template to use when creating page, if desired
        :param pulumi.Input[str] template_id: The Google Doc file ID to use as a template
        """
        pulumi.set(__self__, "title", title)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if drive is not None:
            pulumi.set(__self__, "drive", drive)
        if mark_post_mortem_as_published is not None:
            pulumi.set(__self__, "mark_post_mortem_as_published", mark_post_mortem_as_published)
        if parent_folder is not None:
            pulumi.set(__self__, "parent_folder", parent_folder)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if post_mortem_template_id is not None:
            pulumi.set(__self__, "post_mortem_template_id", post_mortem_template_id)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The page title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        The page content
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def drive(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "drive")

    @drive.setter
    def drive(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "drive", value)

    @property
    @pulumi.getter(name="markPostMortemAsPublished")
    def mark_post_mortem_as_published(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "mark_post_mortem_as_published")

    @mark_post_mortem_as_published.setter
    def mark_post_mortem_as_published(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mark_post_mortem_as_published", value)

    @property
    @pulumi.getter(name="parentFolder")
    def parent_folder(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "parent_folder")

    @parent_folder.setter
    def parent_folder(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parent_folder", value)

    @property
    @pulumi.getter
    def permissions(self) -> Optional[pulumi.Input[str]]:
        """
        Page permissions JSON
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter(name="postMortemTemplateId")
    def post_mortem_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Retrospective template to use when creating page, if desired
        """
        return pulumi.get(self, "post_mortem_template_id")

    @post_mortem_template_id.setter
    def post_mortem_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_mortem_template_id", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Google Doc file ID to use as a template
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_id", value)


@pulumi.input_type
class WorkflowTaskCreateGoogleDocsPermissionsTaskParamsArgs:
    def __init__(__self__, *,
                 file_id: pulumi.Input[str],
                 permissions: pulumi.Input[str],
                 email_message: Optional[pulumi.Input[str]] = None,
                 send_notification_email: Optional[pulumi.Input[bool]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] file_id: The Google Doc file ID
        :param pulumi.Input[str] permissions: Page permissions JSON
        :param pulumi.Input[str] email_message: Email message notification
        :param pulumi.Input[bool] send_notification_email: Value must be one of true or false
        """
        pulumi.set(__self__, "file_id", file_id)
        pulumi.set(__self__, "permissions", permissions)
        if email_message is not None:
            pulumi.set(__self__, "email_message", email_message)
        if send_notification_email is not None:
            pulumi.set(__self__, "send_notification_email", send_notification_email)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> pulumi.Input[str]:
        """
        The Google Doc file ID
        """
        return pulumi.get(self, "file_id")

    @file_id.setter
    def file_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_id", value)

    @property
    @pulumi.getter
    def permissions(self) -> pulumi.Input[str]:
        """
        Page permissions JSON
        """
        return pulumi.get(self, "permissions")

    @permissions.setter
    def permissions(self, value: pulumi.Input[str]):
        pulumi.set(self, "permissions", value)

    @property
    @pulumi.getter(name="emailMessage")
    def email_message(self) -> Optional[pulumi.Input[str]]:
        """
        Email message notification
        """
        return pulumi.get(self, "email_message")

    @email_message.setter
    def email_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email_message", value)

    @property
    @pulumi.getter(name="sendNotificationEmail")
    def send_notification_email(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "send_notification_email")

    @send_notification_email.setter
    def send_notification_email(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_notification_email", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateGoogleMeetingTaskParamsArgs:
    def __init__(__self__, *,
                 description: pulumi.Input[str],
                 summary: pulumi.Input[str],
                 conference_solution_key: Optional[pulumi.Input[str]] = None,
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateGoogleMeetingTaskParamsPostToSlackChannelArgs']]]] = None,
                 record_meeting: Optional[pulumi.Input[bool]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] description: The meeting description
        :param pulumi.Input[str] summary: The meeting summary
        :param pulumi.Input[str] conference_solution_key: Sets the video conference type attached to the meeting. Value must be one of `eventHangout`, `eventNamedHangout`, `hangoutsMeet`, `addOn`.
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        :param pulumi.Input[bool] record_meeting: We will invite Rootly Bot to your call and make the transcript available to you. Value must be one of true or false
        """
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "summary", summary)
        if conference_solution_key is not None:
            pulumi.set(__self__, "conference_solution_key", conference_solution_key)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if record_meeting is not None:
            pulumi.set(__self__, "record_meeting", record_meeting)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        The meeting description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def summary(self) -> pulumi.Input[str]:
        """
        The meeting summary
        """
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: pulumi.Input[str]):
        pulumi.set(self, "summary", value)

    @property
    @pulumi.getter(name="conferenceSolutionKey")
    def conference_solution_key(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the video conference type attached to the meeting. Value must be one of `eventHangout`, `eventNamedHangout`, `hangoutsMeet`, `addOn`.
        """
        return pulumi.get(self, "conference_solution_key")

    @conference_solution_key.setter
    def conference_solution_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "conference_solution_key", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateGoogleMeetingTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateGoogleMeetingTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="recordMeeting")
    def record_meeting(self) -> Optional[pulumi.Input[bool]]:
        """
        We will invite Rootly Bot to your call and make the transcript available to you. Value must be one of true or false
        """
        return pulumi.get(self, "record_meeting")

    @record_meeting.setter
    def record_meeting(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "record_meeting", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateGoogleMeetingTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskCreateIncidentPostmortemTaskParamsArgs:
    def __init__(__self__, *,
                 incident_id: pulumi.Input[str],
                 title: pulumi.Input[str],
                 status: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 template: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] incident_id: UUID of the incident that needs a retrospective
        :param pulumi.Input[str] title: The retrospective title
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] template: Map must contain two fields, `id` and `name`. Retrospective template to use
        """
        pulumi.set(__self__, "incident_id", incident_id)
        pulumi.set(__self__, "title", title)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if template is not None:
            pulumi.set(__self__, "template", template)

    @property
    @pulumi.getter(name="incidentId")
    def incident_id(self) -> pulumi.Input[str]:
        """
        UUID of the incident that needs a retrospective
        """
        return pulumi.get(self, "incident_id")

    @incident_id.setter
    def incident_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "incident_id", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The retrospective title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def template(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. Retrospective template to use
        """
        return pulumi.get(self, "template")

    @template.setter
    def template(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "template", value)


@pulumi.input_type
class WorkflowTaskCreateIncidentTaskParamsArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 custom_fields_mapping: Optional[pulumi.Input[str]] = None,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 functionality_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_type_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 severity_id: Optional[pulumi.Input[str]] = None,
                 summary: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: The incident title
        :param pulumi.Input[str] custom_fields_mapping: Custom field mappings. Can contain liquid markup and need to be valid JSON
        :param pulumi.Input[bool] private: Value must be one of true or false
        :param pulumi.Input[str] summary: The incident summary
        """
        pulumi.set(__self__, "title", title)
        if custom_fields_mapping is not None:
            pulumi.set(__self__, "custom_fields_mapping", custom_fields_mapping)
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if functionality_ids is not None:
            pulumi.set(__self__, "functionality_ids", functionality_ids)
        if group_ids is not None:
            pulumi.set(__self__, "group_ids", group_ids)
        if incident_type_ids is not None:
            pulumi.set(__self__, "incident_type_ids", incident_type_ids)
        if private is not None:
            pulumi.set(__self__, "private", private)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if severity_id is not None:
            pulumi.set(__self__, "severity_id", severity_id)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The incident title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="customFieldsMapping")
    def custom_fields_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Custom field mappings. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "custom_fields_mapping")

    @custom_fields_mapping.setter
    def custom_fields_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fields_mapping", value)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environment_ids")

    @environment_ids.setter
    def environment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_ids", value)

    @property
    @pulumi.getter(name="functionalityIds")
    def functionality_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "functionality_ids")

    @functionality_ids.setter
    def functionality_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "functionality_ids", value)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "group_ids")

    @group_ids.setter
    def group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_ids", value)

    @property
    @pulumi.getter(name="incidentTypeIds")
    def incident_type_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "incident_type_ids")

    @incident_type_ids.setter
    def incident_type_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_type_ids", value)

    @property
    @pulumi.getter
    def private(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter(name="severityId")
    def severity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity_id")

    @severity_id.setter
    def severity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity_id", value)

    @property
    @pulumi.getter
    def summary(self) -> Optional[pulumi.Input[str]]:
        """
        The incident summary
        """
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateJiraIssueTaskParamsArgs:
    def __init__(__self__, *,
                 issue_type: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 project_key: pulumi.Input[str],
                 title: pulumi.Input[str],
                 assign_user_email: Optional[pulumi.Input[str]] = None,
                 custom_fields_mapping: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 due_date: Optional[pulumi.Input[str]] = None,
                 integration: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 reporter_user_email: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 update_payload: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] issue_type: Map must contain two fields, `id` and `name`. The issue type id and display name
        :param pulumi.Input[str] project_key: The project key
        :param pulumi.Input[str] title: The issue title
        :param pulumi.Input[str] assign_user_email: The assigned user's email
        :param pulumi.Input[str] custom_fields_mapping: Custom field mappings. Can contain liquid markup and need to be valid JSON
        :param pulumi.Input[str] description: The issue description
        :param pulumi.Input[str] due_date: The due date
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] integration: Map must contain two fields, `id` and `name`. Specify integration id if you have more than one Jira instance
        :param pulumi.Input[str] labels: The issue labels
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] priority: Map must contain two fields, `id` and `name`. The priority id and display name
        :param pulumi.Input[str] reporter_user_email: The reporter user's email
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] status: Map must contain two fields, `id` and `name`. The status id and display name
        :param pulumi.Input[str] update_payload: Update payload. Can contain liquid markup and need to be valid JSON
        """
        pulumi.set(__self__, "issue_type", issue_type)
        pulumi.set(__self__, "project_key", project_key)
        pulumi.set(__self__, "title", title)
        if assign_user_email is not None:
            pulumi.set(__self__, "assign_user_email", assign_user_email)
        if custom_fields_mapping is not None:
            pulumi.set(__self__, "custom_fields_mapping", custom_fields_mapping)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if due_date is not None:
            pulumi.set(__self__, "due_date", due_date)
        if integration is not None:
            pulumi.set(__self__, "integration", integration)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if reporter_user_email is not None:
            pulumi.set(__self__, "reporter_user_email", reporter_user_email)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if update_payload is not None:
            pulumi.set(__self__, "update_payload", update_payload)

    @property
    @pulumi.getter(name="issueType")
    def issue_type(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`. The issue type id and display name
        """
        return pulumi.get(self, "issue_type")

    @issue_type.setter
    def issue_type(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "issue_type", value)

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> pulumi.Input[str]:
        """
        The project key
        """
        return pulumi.get(self, "project_key")

    @project_key.setter
    def project_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_key", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The issue title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="assignUserEmail")
    def assign_user_email(self) -> Optional[pulumi.Input[str]]:
        """
        The assigned user's email
        """
        return pulumi.get(self, "assign_user_email")

    @assign_user_email.setter
    def assign_user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_user_email", value)

    @property
    @pulumi.getter(name="customFieldsMapping")
    def custom_fields_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Custom field mappings. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "custom_fields_mapping")

    @custom_fields_mapping.setter
    def custom_fields_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fields_mapping", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The issue description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dueDate")
    def due_date(self) -> Optional[pulumi.Input[str]]:
        """
        The due date
        """
        return pulumi.get(self, "due_date")

    @due_date.setter
    def due_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "due_date", value)

    @property
    @pulumi.getter
    def integration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. Specify integration id if you have more than one Jira instance
        """
        return pulumi.get(self, "integration")

    @integration.setter
    def integration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "integration", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[str]]:
        """
        The issue labels
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The priority id and display name
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="reporterUserEmail")
    def reporter_user_email(self) -> Optional[pulumi.Input[str]]:
        """
        The reporter user's email
        """
        return pulumi.get(self, "reporter_user_email")

    @reporter_user_email.setter
    def reporter_user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reporter_user_email", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The status id and display name
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="updatePayload")
    def update_payload(self) -> Optional[pulumi.Input[str]]:
        """
        Update payload. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "update_payload")

    @update_payload.setter
    def update_payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_payload", value)


@pulumi.input_type
class WorkflowTaskCreateJiraSubtaskTaskParamsArgs:
    def __init__(__self__, *,
                 parent_issue_id: pulumi.Input[str],
                 project_key: pulumi.Input[str],
                 subtask_issue_type: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 title: pulumi.Input[str],
                 assign_user_email: Optional[pulumi.Input[str]] = None,
                 custom_fields_mapping: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 due_date: Optional[pulumi.Input[str]] = None,
                 integration: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 reporter_user_email: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 update_payload: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent_issue_id: The parent issue
        :param pulumi.Input[str] project_key: The project key
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] subtask_issue_type: Map must contain two fields, `id` and `name`. The issue type id and display name
        :param pulumi.Input[str] title: The issue title
        :param pulumi.Input[str] assign_user_email: The assigned user's email
        :param pulumi.Input[str] custom_fields_mapping: Custom field mappings. Can contain liquid markup and need to be valid JSON
        :param pulumi.Input[str] description: The issue description
        :param pulumi.Input[str] due_date: The due date
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] integration: Map must contain two fields, `id` and `name`. Specify integration id if you have more than one Jira instance
        :param pulumi.Input[str] labels: The issue labels
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] priority: Map must contain two fields, `id` and `name`. The priority id and display name
        :param pulumi.Input[str] reporter_user_email: The reporter user's email
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] status: Map must contain two fields, `id` and `name`. The status id and display name
        :param pulumi.Input[str] update_payload: Update payload. Can contain liquid markup and need to be valid JSON
        """
        pulumi.set(__self__, "parent_issue_id", parent_issue_id)
        pulumi.set(__self__, "project_key", project_key)
        pulumi.set(__self__, "subtask_issue_type", subtask_issue_type)
        pulumi.set(__self__, "title", title)
        if assign_user_email is not None:
            pulumi.set(__self__, "assign_user_email", assign_user_email)
        if custom_fields_mapping is not None:
            pulumi.set(__self__, "custom_fields_mapping", custom_fields_mapping)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if due_date is not None:
            pulumi.set(__self__, "due_date", due_date)
        if integration is not None:
            pulumi.set(__self__, "integration", integration)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if reporter_user_email is not None:
            pulumi.set(__self__, "reporter_user_email", reporter_user_email)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if update_payload is not None:
            pulumi.set(__self__, "update_payload", update_payload)

    @property
    @pulumi.getter(name="parentIssueId")
    def parent_issue_id(self) -> pulumi.Input[str]:
        """
        The parent issue
        """
        return pulumi.get(self, "parent_issue_id")

    @parent_issue_id.setter
    def parent_issue_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parent_issue_id", value)

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> pulumi.Input[str]:
        """
        The project key
        """
        return pulumi.get(self, "project_key")

    @project_key.setter
    def project_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_key", value)

    @property
    @pulumi.getter(name="subtaskIssueType")
    def subtask_issue_type(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`. The issue type id and display name
        """
        return pulumi.get(self, "subtask_issue_type")

    @subtask_issue_type.setter
    def subtask_issue_type(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "subtask_issue_type", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The issue title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="assignUserEmail")
    def assign_user_email(self) -> Optional[pulumi.Input[str]]:
        """
        The assigned user's email
        """
        return pulumi.get(self, "assign_user_email")

    @assign_user_email.setter
    def assign_user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_user_email", value)

    @property
    @pulumi.getter(name="customFieldsMapping")
    def custom_fields_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Custom field mappings. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "custom_fields_mapping")

    @custom_fields_mapping.setter
    def custom_fields_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fields_mapping", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The issue description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dueDate")
    def due_date(self) -> Optional[pulumi.Input[str]]:
        """
        The due date
        """
        return pulumi.get(self, "due_date")

    @due_date.setter
    def due_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "due_date", value)

    @property
    @pulumi.getter
    def integration(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. Specify integration id if you have more than one Jira instance
        """
        return pulumi.get(self, "integration")

    @integration.setter
    def integration(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "integration", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[str]]:
        """
        The issue labels
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The priority id and display name
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="reporterUserEmail")
    def reporter_user_email(self) -> Optional[pulumi.Input[str]]:
        """
        The reporter user's email
        """
        return pulumi.get(self, "reporter_user_email")

    @reporter_user_email.setter
    def reporter_user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reporter_user_email", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The status id and display name
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="updatePayload")
    def update_payload(self) -> Optional[pulumi.Input[str]]:
        """
        Update payload. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "update_payload")

    @update_payload.setter
    def update_payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_payload", value)


@pulumi.input_type
class WorkflowTaskCreateLinearIssueCommentTaskParamsArgs:
    def __init__(__self__, *,
                 body: pulumi.Input[str],
                 issue_id: pulumi.Input[str],
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] body: The issue description
        :param pulumi.Input[str] issue_id: The issue id
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "issue_id", issue_id)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Input[str]:
        """
        The issue description
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: pulumi.Input[str]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="issueId")
    def issue_id(self) -> pulumi.Input[str]:
        """
        The issue id
        """
        return pulumi.get(self, "issue_id")

    @issue_id.setter
    def issue_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "issue_id", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateLinearIssueTaskParamsArgs:
    def __init__(__self__, *,
                 state: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 team: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 title: pulumi.Input[str],
                 assign_user_email: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateLinearIssueTaskParamsLabelArgs']]]] = None,
                 priority: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 project: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] state: Map must contain two fields, `id` and `name`. The state id and display name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] team: Map must contain two fields, `id` and `name`. The team id and display name
        :param pulumi.Input[str] title: The issue title
        :param pulumi.Input[str] assign_user_email: The assigned user's email
        :param pulumi.Input[str] description: The issue description
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] priority: Map must contain two fields, `id` and `name`. The priority id and display name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] project: Map must contain two fields, `id` and `name`. The project id and display name
        """
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "team", team)
        pulumi.set(__self__, "title", title)
        if assign_user_email is not None:
            pulumi.set(__self__, "assign_user_email", assign_user_email)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`. The state id and display name
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def team(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`. The team id and display name
        """
        return pulumi.get(self, "team")

    @team.setter
    def team(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "team", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The issue title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="assignUserEmail")
    def assign_user_email(self) -> Optional[pulumi.Input[str]]:
        """
        The assigned user's email
        """
        return pulumi.get(self, "assign_user_email")

    @assign_user_email.setter
    def assign_user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_user_email", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The issue description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateLinearIssueTaskParamsLabelArgs']]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateLinearIssueTaskParamsLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The priority id and display name
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The project id and display name
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateLinearIssueTaskParamsLabelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskCreateLinearSubtaskIssueTaskParamsArgs:
    def __init__(__self__, *,
                 parent_issue_id: pulumi.Input[str],
                 state: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 title: pulumi.Input[str],
                 assign_user_email: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] parent_issue_id: The parent issue
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] state: Map must contain two fields, `id` and `name`. The state id and display name
        :param pulumi.Input[str] title: The issue title
        :param pulumi.Input[str] assign_user_email: The assigned user's email
        :param pulumi.Input[str] description: The issue description
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] priority: Map must contain two fields, `id` and `name`. The priority id and display name
        """
        pulumi.set(__self__, "parent_issue_id", parent_issue_id)
        pulumi.set(__self__, "state", state)
        pulumi.set(__self__, "title", title)
        if assign_user_email is not None:
            pulumi.set(__self__, "assign_user_email", assign_user_email)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="parentIssueId")
    def parent_issue_id(self) -> pulumi.Input[str]:
        """
        The parent issue
        """
        return pulumi.get(self, "parent_issue_id")

    @parent_issue_id.setter
    def parent_issue_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parent_issue_id", value)

    @property
    @pulumi.getter
    def state(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`. The state id and display name
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The issue title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="assignUserEmail")
    def assign_user_email(self) -> Optional[pulumi.Input[str]]:
        """
        The assigned user's email
        """
        return pulumi.get(self, "assign_user_email")

    @assign_user_email.setter
    def assign_user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_user_email", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The issue description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The priority id and display name
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsPostToSlackChannelArgs']]]] = None,
                 record_meeting: Optional[pulumi.Input[bool]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] name: The meeting name
        :param pulumi.Input[str] subject: The meeting subject
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        :param pulumi.Input[bool] record_meeting: We will invite Rootly Bot to your call and make the transcript available to you. Value must be one of true or false
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subject", subject)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if record_meeting is not None:
            pulumi.set(__self__, "record_meeting", record_meeting)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The meeting name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The meeting subject
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="recordMeeting")
    def record_meeting(self) -> Optional[pulumi.Input[bool]]:
        """
        We will invite Rootly Bot to your call and make the transcript available to you. Value must be one of true or false
        """
        return pulumi.get(self, "record_meeting")

    @record_meeting.setter
    def record_meeting(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "record_meeting", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskCreateNotionPageTaskParamsArgs:
    def __init__(__self__, *,
                 parent_page: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 title: pulumi.Input[str],
                 mark_post_mortem_as_published: Optional[pulumi.Input[bool]] = None,
                 post_mortem_template_id: Optional[pulumi.Input[str]] = None,
                 show_action_items_as_table: Optional[pulumi.Input[bool]] = None,
                 show_timeline_as_table: Optional[pulumi.Input[bool]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parent_page: Map must contain two fields, `id` and `name`. The parent page id and display name
        :param pulumi.Input[str] title: The Notion page title
        :param pulumi.Input[bool] mark_post_mortem_as_published: Value must be one of true or false
        :param pulumi.Input[str] post_mortem_template_id: Retrospective template to use when creating page task, if desired
        :param pulumi.Input[bool] show_action_items_as_table: Value must be one of true or false
        :param pulumi.Input[bool] show_timeline_as_table: Value must be one of true or false
        """
        pulumi.set(__self__, "parent_page", parent_page)
        pulumi.set(__self__, "title", title)
        if mark_post_mortem_as_published is not None:
            pulumi.set(__self__, "mark_post_mortem_as_published", mark_post_mortem_as_published)
        if post_mortem_template_id is not None:
            pulumi.set(__self__, "post_mortem_template_id", post_mortem_template_id)
        if show_action_items_as_table is not None:
            pulumi.set(__self__, "show_action_items_as_table", show_action_items_as_table)
        if show_timeline_as_table is not None:
            pulumi.set(__self__, "show_timeline_as_table", show_timeline_as_table)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="parentPage")
    def parent_page(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`. The parent page id and display name
        """
        return pulumi.get(self, "parent_page")

    @parent_page.setter
    def parent_page(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "parent_page", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The Notion page title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="markPostMortemAsPublished")
    def mark_post_mortem_as_published(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "mark_post_mortem_as_published")

    @mark_post_mortem_as_published.setter
    def mark_post_mortem_as_published(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mark_post_mortem_as_published", value)

    @property
    @pulumi.getter(name="postMortemTemplateId")
    def post_mortem_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Retrospective template to use when creating page task, if desired
        """
        return pulumi.get(self, "post_mortem_template_id")

    @post_mortem_template_id.setter
    def post_mortem_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_mortem_template_id", value)

    @property
    @pulumi.getter(name="showActionItemsAsTable")
    def show_action_items_as_table(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "show_action_items_as_table")

    @show_action_items_as_table.setter
    def show_action_items_as_table(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_action_items_as_table", value)

    @property
    @pulumi.getter(name="showTimelineAsTable")
    def show_timeline_as_table(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "show_timeline_as_table")

    @show_timeline_as_table.setter
    def show_timeline_as_table(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_timeline_as_table", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateOpsgenieAlertTaskParamsArgs:
    def __init__(__self__, *,
                 message: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 escalations: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateOpsgenieAlertTaskParamsEscalationArgs']]]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 schedules: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateOpsgenieAlertTaskParamsScheduleArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateOpsgenieAlertTaskParamsTeamArgs']]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateOpsgenieAlertTaskParamsUserArgs']]]] = None):
        """
        :param pulumi.Input[str] message: Message of the alert
        :param pulumi.Input[str] description: Description field of the alert that is generally used to provide a detailed information about the alert
        :param pulumi.Input[str] priority: Value must be one of `P1`, `P2`, `P3`, `P4`, `P5`, `auto`.
        """
        pulumi.set(__self__, "message", message)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if escalations is not None:
            pulumi.set(__self__, "escalations", escalations)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if schedules is not None:
            pulumi.set(__self__, "schedules", schedules)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        Message of the alert
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description field of the alert that is generally used to provide a detailed information about the alert
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def escalations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateOpsgenieAlertTaskParamsEscalationArgs']]]]:
        return pulumi.get(self, "escalations")

    @escalations.setter
    def escalations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateOpsgenieAlertTaskParamsEscalationArgs']]]]):
        pulumi.set(self, "escalations", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `P1`, `P2`, `P3`, `P4`, `P5`, `auto`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def schedules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateOpsgenieAlertTaskParamsScheduleArgs']]]]:
        return pulumi.get(self, "schedules")

    @schedules.setter
    def schedules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateOpsgenieAlertTaskParamsScheduleArgs']]]]):
        pulumi.set(self, "schedules", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateOpsgenieAlertTaskParamsTeamArgs']]]]:
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateOpsgenieAlertTaskParamsTeamArgs']]]]):
        pulumi.set(self, "teams", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateOpsgenieAlertTaskParamsUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateOpsgenieAlertTaskParamsUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class WorkflowTaskCreateOpsgenieAlertTaskParamsEscalationArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskCreateOpsgenieAlertTaskParamsScheduleArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskCreateOpsgenieAlertTaskParamsTeamArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskCreateOpsgenieAlertTaskParamsUserArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskCreateOutlookEventTaskParamsArgs:
    def __init__(__self__, *,
                 calendar: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 days_until_meeting: pulumi.Input[int],
                 description: pulumi.Input[str],
                 meeting_duration: pulumi.Input[str],
                 summary: pulumi.Input[str],
                 time_of_meeting: pulumi.Input[str],
                 attendees: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 exclude_weekends: Optional[pulumi.Input[bool]] = None,
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateOutlookEventTaskParamsPostToSlackChannelArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] calendar: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[int] days_until_meeting: The days until meeting
        :param pulumi.Input[str] description: The event description
        :param pulumi.Input[str] meeting_duration: Meeting duration in format like '1 hour', '30 minutes'
        :param pulumi.Input[str] summary: The event summary
        :param pulumi.Input[str] time_of_meeting: Time of meeting in format HH:MM
        :param pulumi.Input[Sequence[pulumi.Input[str]]] attendees: Emails of attendees
        :param pulumi.Input[bool] exclude_weekends: Value must be one of true or false
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        :param pulumi.Input[str] time_zone: A valid IANA time zone name.
        """
        pulumi.set(__self__, "calendar", calendar)
        pulumi.set(__self__, "days_until_meeting", days_until_meeting)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "meeting_duration", meeting_duration)
        pulumi.set(__self__, "summary", summary)
        pulumi.set(__self__, "time_of_meeting", time_of_meeting)
        if attendees is not None:
            pulumi.set(__self__, "attendees", attendees)
        if exclude_weekends is not None:
            pulumi.set(__self__, "exclude_weekends", exclude_weekends)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)

    @property
    @pulumi.getter
    def calendar(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "calendar")

    @calendar.setter
    def calendar(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "calendar", value)

    @property
    @pulumi.getter(name="daysUntilMeeting")
    def days_until_meeting(self) -> pulumi.Input[int]:
        """
        The days until meeting
        """
        return pulumi.get(self, "days_until_meeting")

    @days_until_meeting.setter
    def days_until_meeting(self, value: pulumi.Input[int]):
        pulumi.set(self, "days_until_meeting", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        The event description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="meetingDuration")
    def meeting_duration(self) -> pulumi.Input[str]:
        """
        Meeting duration in format like '1 hour', '30 minutes'
        """
        return pulumi.get(self, "meeting_duration")

    @meeting_duration.setter
    def meeting_duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "meeting_duration", value)

    @property
    @pulumi.getter
    def summary(self) -> pulumi.Input[str]:
        """
        The event summary
        """
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: pulumi.Input[str]):
        pulumi.set(self, "summary", value)

    @property
    @pulumi.getter(name="timeOfMeeting")
    def time_of_meeting(self) -> pulumi.Input[str]:
        """
        Time of meeting in format HH:MM
        """
        return pulumi.get(self, "time_of_meeting")

    @time_of_meeting.setter
    def time_of_meeting(self, value: pulumi.Input[str]):
        pulumi.set(self, "time_of_meeting", value)

    @property
    @pulumi.getter
    def attendees(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Emails of attendees
        """
        return pulumi.get(self, "attendees")

    @attendees.setter
    def attendees(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "attendees", value)

    @property
    @pulumi.getter(name="excludeWeekends")
    def exclude_weekends(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "exclude_weekends")

    @exclude_weekends.setter
    def exclude_weekends(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "exclude_weekends", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateOutlookEventTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateOutlookEventTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        A valid IANA time zone name.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)


@pulumi.input_type
class WorkflowTaskCreateOutlookEventTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskCreatePagerdutyStatusUpdateTaskParamsArgs:
    def __init__(__self__, *,
                 message: pulumi.Input[str],
                 pagerduty_incident_id: pulumi.Input[str],
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] message: A message outlining the incident's resolution in PagerDuty
        :param pulumi.Input[str] pagerduty_incident_id: PagerDuty incident id
        """
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "pagerduty_incident_id", pagerduty_incident_id)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        A message outlining the incident's resolution in PagerDuty
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="pagerdutyIncidentId")
    def pagerduty_incident_id(self) -> pulumi.Input[str]:
        """
        PagerDuty incident id
        """
        return pulumi.get(self, "pagerduty_incident_id")

    @pagerduty_incident_id.setter
    def pagerduty_incident_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "pagerduty_incident_id", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreatePagertreeAlertTaskParamsArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 incident: Optional[pulumi.Input[bool]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreatePagertreeAlertTaskParamsTeamArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 urgency: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreatePagertreeAlertTaskParamsUserArgs']]]] = None):
        """
        :param pulumi.Input[str] description: Description of alert as text
        :param pulumi.Input[bool] incident: Setting to true makes an alert a Pagertree incident. Value must be one of true or false
        :param pulumi.Input[str] severity: Value must be one of `auto`, `SEV-1`, `SEV-2`, `SEV-3`, `SEV-4`.
        :param pulumi.Input[str] title: Title of alert as text
        :param pulumi.Input[str] urgency: Value must be one of `auto`, `critical`, `high`, `medium`, `low`.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if incident is not None:
            pulumi.set(__self__, "incident", incident)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if urgency is not None:
            pulumi.set(__self__, "urgency", urgency)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of alert as text
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def incident(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting to true makes an alert a Pagertree incident. Value must be one of true or false
        """
        return pulumi.get(self, "incident")

    @incident.setter
    def incident(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "incident", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `auto`, `SEV-1`, `SEV-2`, `SEV-3`, `SEV-4`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreatePagertreeAlertTaskParamsTeamArgs']]]]:
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreatePagertreeAlertTaskParamsTeamArgs']]]]):
        pulumi.set(self, "teams", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Title of alert as text
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def urgency(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `auto`, `critical`, `high`, `medium`, `low`.
        """
        return pulumi.get(self, "urgency")

    @urgency.setter
    def urgency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "urgency", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreatePagertreeAlertTaskParamsUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreatePagertreeAlertTaskParamsUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class WorkflowTaskCreatePagertreeAlertTaskParamsTeamArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskCreatePagertreeAlertTaskParamsUserArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskCreateQuipPageTaskParamsArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 content: Optional[pulumi.Input[str]] = None,
                 mark_post_mortem_as_published: Optional[pulumi.Input[bool]] = None,
                 parent_folder_id: Optional[pulumi.Input[str]] = None,
                 post_mortem_template_id: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: The page title
        :param pulumi.Input[str] content: The page content
        :param pulumi.Input[bool] mark_post_mortem_as_published: Value must be one of true or false
        :param pulumi.Input[str] parent_folder_id: The parent folder id
        :param pulumi.Input[str] post_mortem_template_id: Retrospective template to use when creating page, if desired
        :param pulumi.Input[str] template_id: The Quip file ID to use as a template
        """
        pulumi.set(__self__, "title", title)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if mark_post_mortem_as_published is not None:
            pulumi.set(__self__, "mark_post_mortem_as_published", mark_post_mortem_as_published)
        if parent_folder_id is not None:
            pulumi.set(__self__, "parent_folder_id", parent_folder_id)
        if post_mortem_template_id is not None:
            pulumi.set(__self__, "post_mortem_template_id", post_mortem_template_id)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The page title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        The page content
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="markPostMortemAsPublished")
    def mark_post_mortem_as_published(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "mark_post_mortem_as_published")

    @mark_post_mortem_as_published.setter
    def mark_post_mortem_as_published(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mark_post_mortem_as_published", value)

    @property
    @pulumi.getter(name="parentFolderId")
    def parent_folder_id(self) -> Optional[pulumi.Input[str]]:
        """
        The parent folder id
        """
        return pulumi.get(self, "parent_folder_id")

    @parent_folder_id.setter
    def parent_folder_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "parent_folder_id", value)

    @property
    @pulumi.getter(name="postMortemTemplateId")
    def post_mortem_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Retrospective template to use when creating page, if desired
        """
        return pulumi.get(self, "post_mortem_template_id")

    @post_mortem_template_id.setter
    def post_mortem_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_mortem_template_id", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Quip file ID to use as a template
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_id", value)


@pulumi.input_type
class WorkflowTaskCreateServiceNowIncidentTaskParamsArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 completion: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 custom_fields_mapping: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: The incident title
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] completion: Map must contain two fields, `id` and `name`. The completion id and display name
        :param pulumi.Input[str] custom_fields_mapping: Custom field mappings. Can contain liquid markup and need to be valid JSON
        :param pulumi.Input[str] description: The incident description
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] priority: Map must contain two fields, `id` and `name`. The priority id and display name
        """
        pulumi.set(__self__, "title", title)
        if completion is not None:
            pulumi.set(__self__, "completion", completion)
        if custom_fields_mapping is not None:
            pulumi.set(__self__, "custom_fields_mapping", custom_fields_mapping)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The incident title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def completion(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The completion id and display name
        """
        return pulumi.get(self, "completion")

    @completion.setter
    def completion(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "completion", value)

    @property
    @pulumi.getter(name="customFieldsMapping")
    def custom_fields_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Custom field mappings. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "custom_fields_mapping")

    @custom_fields_mapping.setter
    def custom_fields_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fields_mapping", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The incident description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The priority id and display name
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateSharepointPageTaskParamsArgs:
    def __init__(__self__, *,
                 drive: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 site: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 title: pulumi.Input[str],
                 content: Optional[pulumi.Input[str]] = None,
                 mark_post_mortem_as_published: Optional[pulumi.Input[bool]] = None,
                 parent_folder: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 post_mortem_template_id: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] drive: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] site: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[str] title: The page title
        :param pulumi.Input[str] content: The page content
        :param pulumi.Input[bool] mark_post_mortem_as_published: Value must be one of true or false
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parent_folder: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[str] post_mortem_template_id: Retrospective template to use when creating page, if desired
        :param pulumi.Input[str] template_id: The SharePoint file ID to use as a template
        """
        pulumi.set(__self__, "drive", drive)
        pulumi.set(__self__, "site", site)
        pulumi.set(__self__, "title", title)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if mark_post_mortem_as_published is not None:
            pulumi.set(__self__, "mark_post_mortem_as_published", mark_post_mortem_as_published)
        if parent_folder is not None:
            pulumi.set(__self__, "parent_folder", parent_folder)
        if post_mortem_template_id is not None:
            pulumi.set(__self__, "post_mortem_template_id", post_mortem_template_id)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)

    @property
    @pulumi.getter
    def drive(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "drive")

    @drive.setter
    def drive(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "drive", value)

    @property
    @pulumi.getter
    def site(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "site")

    @site.setter
    def site(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "site", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The page title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        The page content
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="markPostMortemAsPublished")
    def mark_post_mortem_as_published(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "mark_post_mortem_as_published")

    @mark_post_mortem_as_published.setter
    def mark_post_mortem_as_published(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "mark_post_mortem_as_published", value)

    @property
    @pulumi.getter(name="parentFolder")
    def parent_folder(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "parent_folder")

    @parent_folder.setter
    def parent_folder(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parent_folder", value)

    @property
    @pulumi.getter(name="postMortemTemplateId")
    def post_mortem_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Retrospective template to use when creating page, if desired
        """
        return pulumi.get(self, "post_mortem_template_id")

    @post_mortem_template_id.setter
    def post_mortem_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_mortem_template_id", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The SharePoint file ID to use as a template
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_id", value)


@pulumi.input_type
class WorkflowTaskCreateShortcutStoryTaskParamsArgs:
    def __init__(__self__, *,
                 archivation: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 kind: pulumi.Input[str],
                 project: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 title: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 due_date: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] archivation: Map must contain two fields, `id` and `name`. The archivation id and display name
        :param pulumi.Input[str] kind: Value must be one of `bug`, `chore`, `feature`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] project: Map must contain two fields, `id` and `name`. The project id and display name
        :param pulumi.Input[str] title: The incident title
        :param pulumi.Input[str] description: The incident description
        :param pulumi.Input[str] due_date: The due date
        :param pulumi.Input[str] labels: The story labels
        """
        pulumi.set(__self__, "archivation", archivation)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "project", project)
        pulumi.set(__self__, "title", title)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if due_date is not None:
            pulumi.set(__self__, "due_date", due_date)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def archivation(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`. The archivation id and display name
        """
        return pulumi.get(self, "archivation")

    @archivation.setter
    def archivation(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "archivation", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Value must be one of `bug`, `chore`, `feature`.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`. The project id and display name
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The incident title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The incident description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dueDate")
    def due_date(self) -> Optional[pulumi.Input[str]]:
        """
        The due date
        """
        return pulumi.get(self, "due_date")

    @due_date.setter
    def due_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "due_date", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[str]]:
        """
        The story labels
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateShortcutTaskTaskParamsArgs:
    def __init__(__self__, *,
                 completion: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 description: pulumi.Input[str],
                 parent_story_id: pulumi.Input[str],
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] completion: Map must contain two fields, `id` and `name`. The completion id and display name
        :param pulumi.Input[str] description: The task description
        :param pulumi.Input[str] parent_story_id: The parent story
        """
        pulumi.set(__self__, "completion", completion)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "parent_story_id", parent_story_id)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def completion(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`. The completion id and display name
        """
        return pulumi.get(self, "completion")

    @completion.setter
    def completion(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "completion", value)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Input[str]:
        """
        The task description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: pulumi.Input[str]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="parentStoryId")
    def parent_story_id(self) -> pulumi.Input[str]:
        """
        The parent story
        """
        return pulumi.get(self, "parent_story_id")

    @parent_story_id.setter
    def parent_story_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parent_story_id", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateSlackChannelTaskParamsArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 workspace: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 private: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] title: Slack channel title
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] workspace: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[str] private: Value must be one of `auto`, `true`, `false`.
        """
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "workspace", workspace)
        if private is not None:
            pulumi.set(__self__, "private", private)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        Slack channel title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def workspace(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "workspace")

    @workspace.setter
    def workspace(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "workspace", value)

    @property
    @pulumi.getter
    def private(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `auto`, `true`, `false`.
        """
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "private", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateTrelloCardTaskParamsArgs:
    def __init__(__self__, *,
                 board: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 list: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 title: pulumi.Input[str],
                 archivation: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 due_date: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateTrelloCardTaskParamsLabelArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] board: Map must contain two fields, `id` and `name`. The board id and display name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] list: Map must contain two fields, `id` and `name`. The list id and display name
        :param pulumi.Input[str] title: The card title
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] archivation: Map must contain two fields, `id` and `name`. The archivation id and display name
        :param pulumi.Input[str] description: The card description
        :param pulumi.Input[str] due_date: The due date
        """
        pulumi.set(__self__, "board", board)
        pulumi.set(__self__, "list", list)
        pulumi.set(__self__, "title", title)
        if archivation is not None:
            pulumi.set(__self__, "archivation", archivation)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if due_date is not None:
            pulumi.set(__self__, "due_date", due_date)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def board(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`. The board id and display name
        """
        return pulumi.get(self, "board")

    @board.setter
    def board(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "board", value)

    @property
    @pulumi.getter
    def list(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`. The list id and display name
        """
        return pulumi.get(self, "list")

    @list.setter
    def list(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "list", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The card title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def archivation(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The archivation id and display name
        """
        return pulumi.get(self, "archivation")

    @archivation.setter
    def archivation(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "archivation", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The card description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dueDate")
    def due_date(self) -> Optional[pulumi.Input[str]]:
        """
        The due date
        """
        return pulumi.get(self, "due_date")

    @due_date.setter
    def due_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "due_date", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateTrelloCardTaskParamsLabelArgs']]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateTrelloCardTaskParamsLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateTrelloCardTaskParamsLabelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskCreateWebexMeetingTaskParamsArgs:
    def __init__(__self__, *,
                 topic: pulumi.Input[str],
                 password: Optional[pulumi.Input[str]] = None,
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateWebexMeetingTaskParamsPostToSlackChannelArgs']]]] = None,
                 record_meeting: Optional[pulumi.Input[bool]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] topic: The meeting topic
        :param pulumi.Input[str] password: The meeting password
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        :param pulumi.Input[bool] record_meeting: We will invite Rootly Bot to your call and make the transcript available to you. Value must be one of true or false
        """
        pulumi.set(__self__, "topic", topic)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if record_meeting is not None:
            pulumi.set(__self__, "record_meeting", record_meeting)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Input[str]:
        """
        The meeting topic
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The meeting password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateWebexMeetingTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateWebexMeetingTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="recordMeeting")
    def record_meeting(self) -> Optional[pulumi.Input[bool]]:
        """
        We will invite Rootly Bot to your call and make the transcript available to you. Value must be one of true or false
        """
        return pulumi.get(self, "record_meeting")

    @record_meeting.setter
    def record_meeting(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "record_meeting", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateWebexMeetingTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskCreateZendeskJiraLinkTaskParamsArgs:
    def __init__(__self__, *,
                 jira_issue_id: pulumi.Input[str],
                 jira_issue_key: pulumi.Input[str],
                 zendesk_ticket_id: pulumi.Input[str],
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] jira_issue_id: Jira Issue Id.
        :param pulumi.Input[str] jira_issue_key: Jira Issue Key.
        :param pulumi.Input[str] zendesk_ticket_id: Zendesk Ticket Id.
        """
        pulumi.set(__self__, "jira_issue_id", jira_issue_id)
        pulumi.set(__self__, "jira_issue_key", jira_issue_key)
        pulumi.set(__self__, "zendesk_ticket_id", zendesk_ticket_id)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="jiraIssueId")
    def jira_issue_id(self) -> pulumi.Input[str]:
        """
        Jira Issue Id.
        """
        return pulumi.get(self, "jira_issue_id")

    @jira_issue_id.setter
    def jira_issue_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "jira_issue_id", value)

    @property
    @pulumi.getter(name="jiraIssueKey")
    def jira_issue_key(self) -> pulumi.Input[str]:
        """
        Jira Issue Key.
        """
        return pulumi.get(self, "jira_issue_key")

    @jira_issue_key.setter
    def jira_issue_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "jira_issue_key", value)

    @property
    @pulumi.getter(name="zendeskTicketId")
    def zendesk_ticket_id(self) -> pulumi.Input[str]:
        """
        Zendesk Ticket Id.
        """
        return pulumi.get(self, "zendesk_ticket_id")

    @zendesk_ticket_id.setter
    def zendesk_ticket_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "zendesk_ticket_id", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateZendeskTicketTaskParamsArgs:
    def __init__(__self__, *,
                 kind: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 comment: Optional[pulumi.Input[str]] = None,
                 completion: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 custom_fields_mapping: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 ticket_payload: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] kind: Value must be one of `problem`, `incident`, `question`, `task`.
        :param pulumi.Input[str] subject: The ticket subject
        :param pulumi.Input[str] comment: The ticket comment
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] completion: Map must contain two fields, `id` and `name`. The completion id and display name
        :param pulumi.Input[str] custom_fields_mapping: Custom field mappings. Can contain liquid markup and need to be valid JSON
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] priority: Map must contain two fields, `id` and `name`. The priority id and display name
        :param pulumi.Input[str] tags: The ticket tags
        :param pulumi.Input[str] ticket_payload: Additional Zendesk ticket attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON
        """
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "subject", subject)
        if comment is not None:
            pulumi.set(__self__, "comment", comment)
        if completion is not None:
            pulumi.set(__self__, "completion", completion)
        if custom_fields_mapping is not None:
            pulumi.set(__self__, "custom_fields_mapping", custom_fields_mapping)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if ticket_payload is not None:
            pulumi.set(__self__, "ticket_payload", ticket_payload)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Value must be one of `problem`, `incident`, `question`, `task`.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The ticket subject
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter
    def comment(self) -> Optional[pulumi.Input[str]]:
        """
        The ticket comment
        """
        return pulumi.get(self, "comment")

    @comment.setter
    def comment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comment", value)

    @property
    @pulumi.getter
    def completion(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The completion id and display name
        """
        return pulumi.get(self, "completion")

    @completion.setter
    def completion(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "completion", value)

    @property
    @pulumi.getter(name="customFieldsMapping")
    def custom_fields_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Custom field mappings. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "custom_fields_mapping")

    @custom_fields_mapping.setter
    def custom_fields_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fields_mapping", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The priority id and display name
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[str]]:
        """
        The ticket tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="ticketPayload")
    def ticket_payload(self) -> Optional[pulumi.Input[str]]:
        """
        Additional Zendesk ticket attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "ticket_payload")

    @ticket_payload.setter
    def ticket_payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ticket_payload", value)


@pulumi.input_type
class WorkflowTaskCreateZoomMeetingTaskParamsArgs:
    def __init__(__self__, *,
                 topic: pulumi.Input[str],
                 alternative_hosts: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 auto_recording: Optional[pulumi.Input[str]] = None,
                 create_as_email: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateZoomMeetingTaskParamsPostToSlackChannelArgs']]]] = None,
                 record_meeting: Optional[pulumi.Input[bool]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] topic: The meeting topic
        :param pulumi.Input[str] auto_recording: Value must be one of `none`, `local`, `cloud`.
        :param pulumi.Input[str] create_as_email: The email to use if creating as email
        :param pulumi.Input[str] password: The meeting password
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        :param pulumi.Input[bool] record_meeting: We will invite Rootly Bot to your call and make the transcript available to you. Value must be one of true or false
        """
        pulumi.set(__self__, "topic", topic)
        if alternative_hosts is not None:
            pulumi.set(__self__, "alternative_hosts", alternative_hosts)
        if auto_recording is not None:
            pulumi.set(__self__, "auto_recording", auto_recording)
        if create_as_email is not None:
            pulumi.set(__self__, "create_as_email", create_as_email)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if record_meeting is not None:
            pulumi.set(__self__, "record_meeting", record_meeting)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Input[str]:
        """
        The meeting topic
        """
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="alternativeHosts")
    def alternative_hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "alternative_hosts")

    @alternative_hosts.setter
    def alternative_hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "alternative_hosts", value)

    @property
    @pulumi.getter(name="autoRecording")
    def auto_recording(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `none`, `local`, `cloud`.
        """
        return pulumi.get(self, "auto_recording")

    @auto_recording.setter
    def auto_recording(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "auto_recording", value)

    @property
    @pulumi.getter(name="createAsEmail")
    def create_as_email(self) -> Optional[pulumi.Input[str]]:
        """
        The email to use if creating as email
        """
        return pulumi.get(self, "create_as_email")

    @create_as_email.setter
    def create_as_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "create_as_email", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The meeting password
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateZoomMeetingTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskCreateZoomMeetingTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="recordMeeting")
    def record_meeting(self) -> Optional[pulumi.Input[bool]]:
        """
        We will invite Rootly Bot to your call and make the transcript available to you. Value must be one of true or false
        """
        return pulumi.get(self, "record_meeting")

    @record_meeting.setter
    def record_meeting(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "record_meeting", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskCreateZoomMeetingTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskGetAlertsTaskParamsArgs:
    def __init__(__self__, *,
                 past_duration: pulumi.Input[str],
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 environments_impacted_by_incident: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 parent_message_thread_task: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskGetAlertsTaskParamsPostToSlackChannelArgs']]]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 services_impacted_by_incident: Optional[pulumi.Input[bool]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] past_duration: How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)
        :param pulumi.Input[bool] environments_impacted_by_incident: Value must be one of true or false
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parent_message_thread_task: Map must contain two fields, `id` and `name`. A hash where [id] is the task id of the parent task that sent a message, and [name] is the name of the parent task
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        :param pulumi.Input[bool] services_impacted_by_incident: Value must be one of true or false
        """
        pulumi.set(__self__, "past_duration", past_duration)
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if environments_impacted_by_incident is not None:
            pulumi.set(__self__, "environments_impacted_by_incident", environments_impacted_by_incident)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if parent_message_thread_task is not None:
            pulumi.set(__self__, "parent_message_thread_task", parent_message_thread_task)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if services_impacted_by_incident is not None:
            pulumi.set(__self__, "services_impacted_by_incident", services_impacted_by_incident)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="pastDuration")
    def past_duration(self) -> pulumi.Input[str]:
        """
        How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)
        """
        return pulumi.get(self, "past_duration")

    @past_duration.setter
    def past_duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "past_duration", value)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environment_ids")

    @environment_ids.setter
    def environment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_ids", value)

    @property
    @pulumi.getter(name="environmentsImpactedByIncident")
    def environments_impacted_by_incident(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "environments_impacted_by_incident")

    @environments_impacted_by_incident.setter
    def environments_impacted_by_incident(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "environments_impacted_by_incident", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="parentMessageThreadTask")
    def parent_message_thread_task(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. A hash where [id] is the task id of the parent task that sent a message, and [name] is the name of the parent task
        """
        return pulumi.get(self, "parent_message_thread_task")

    @parent_message_thread_task.setter
    def parent_message_thread_task(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parent_message_thread_task", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskGetAlertsTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskGetAlertsTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter(name="servicesImpactedByIncident")
    def services_impacted_by_incident(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "services_impacted_by_incident")

    @services_impacted_by_incident.setter
    def services_impacted_by_incident(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "services_impacted_by_incident", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskGetAlertsTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskGetGithubCommitsTaskParamsArgs:
    def __init__(__self__, *,
                 branch: pulumi.Input[str],
                 past_duration: pulumi.Input[str],
                 github_repository_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskGetGithubCommitsTaskParamsPostToSlackChannelArgs']]]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 services_impacted_by_incident: Optional[pulumi.Input[bool]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] branch: The branch
        :param pulumi.Input[str] past_duration: How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        :param pulumi.Input[bool] services_impacted_by_incident: Value must be one of true or false
        """
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "past_duration", past_duration)
        if github_repository_names is not None:
            pulumi.set(__self__, "github_repository_names", github_repository_names)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if services_impacted_by_incident is not None:
            pulumi.set(__self__, "services_impacted_by_incident", services_impacted_by_incident)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def branch(self) -> pulumi.Input[str]:
        """
        The branch
        """
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter(name="pastDuration")
    def past_duration(self) -> pulumi.Input[str]:
        """
        How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)
        """
        return pulumi.get(self, "past_duration")

    @past_duration.setter
    def past_duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "past_duration", value)

    @property
    @pulumi.getter(name="githubRepositoryNames")
    def github_repository_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "github_repository_names")

    @github_repository_names.setter
    def github_repository_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "github_repository_names", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskGetGithubCommitsTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskGetGithubCommitsTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter(name="servicesImpactedByIncident")
    def services_impacted_by_incident(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "services_impacted_by_incident")

    @services_impacted_by_incident.setter
    def services_impacted_by_incident(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "services_impacted_by_incident", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskGetGithubCommitsTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskGetGitlabCommitsTaskParamsArgs:
    def __init__(__self__, *,
                 branch: pulumi.Input[str],
                 past_duration: pulumi.Input[str],
                 gitlab_repository_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskGetGitlabCommitsTaskParamsPostToSlackChannelArgs']]]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 services_impacted_by_incident: Optional[pulumi.Input[bool]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] branch: The branch
        :param pulumi.Input[str] past_duration: How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        :param pulumi.Input[bool] services_impacted_by_incident: Value must be one of true or false
        """
        pulumi.set(__self__, "branch", branch)
        pulumi.set(__self__, "past_duration", past_duration)
        if gitlab_repository_names is not None:
            pulumi.set(__self__, "gitlab_repository_names", gitlab_repository_names)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if services_impacted_by_incident is not None:
            pulumi.set(__self__, "services_impacted_by_incident", services_impacted_by_incident)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def branch(self) -> pulumi.Input[str]:
        """
        The branch
        """
        return pulumi.get(self, "branch")

    @branch.setter
    def branch(self, value: pulumi.Input[str]):
        pulumi.set(self, "branch", value)

    @property
    @pulumi.getter(name="pastDuration")
    def past_duration(self) -> pulumi.Input[str]:
        """
        How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)
        """
        return pulumi.get(self, "past_duration")

    @past_duration.setter
    def past_duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "past_duration", value)

    @property
    @pulumi.getter(name="gitlabRepositoryNames")
    def gitlab_repository_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "gitlab_repository_names")

    @gitlab_repository_names.setter
    def gitlab_repository_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "gitlab_repository_names", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskGetGitlabCommitsTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskGetGitlabCommitsTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter(name="servicesImpactedByIncident")
    def services_impacted_by_incident(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "services_impacted_by_incident")

    @services_impacted_by_incident.setter
    def services_impacted_by_incident(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "services_impacted_by_incident", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskGetGitlabCommitsTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskGetPulsesTaskParamsArgs:
    def __init__(__self__, *,
                 past_duration: pulumi.Input[str],
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 environments_impacted_by_incident: Optional[pulumi.Input[bool]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 parent_message_thread_task: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskGetPulsesTaskParamsPostToSlackChannelArgs']]]] = None,
                 refs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 services_impacted_by_incident: Optional[pulumi.Input[bool]] = None,
                 sources: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] past_duration: How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)
        :param pulumi.Input[bool] environments_impacted_by_incident: Value must be one of true or false
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parent_message_thread_task: Map must contain two fields, `id` and `name`. A hash where [id] is the task id of the parent task that sent a message, and [name] is the name of the parent task
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        :param pulumi.Input[bool] services_impacted_by_incident: Value must be one of true or false
        """
        pulumi.set(__self__, "past_duration", past_duration)
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if environments_impacted_by_incident is not None:
            pulumi.set(__self__, "environments_impacted_by_incident", environments_impacted_by_incident)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if parent_message_thread_task is not None:
            pulumi.set(__self__, "parent_message_thread_task", parent_message_thread_task)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if refs is not None:
            pulumi.set(__self__, "refs", refs)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if services_impacted_by_incident is not None:
            pulumi.set(__self__, "services_impacted_by_incident", services_impacted_by_incident)
        if sources is not None:
            pulumi.set(__self__, "sources", sources)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="pastDuration")
    def past_duration(self) -> pulumi.Input[str]:
        """
        How far back to fetch commits (in format '1 minute', '30 days', '3 months', etc.)
        """
        return pulumi.get(self, "past_duration")

    @past_duration.setter
    def past_duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "past_duration", value)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environment_ids")

    @environment_ids.setter
    def environment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_ids", value)

    @property
    @pulumi.getter(name="environmentsImpactedByIncident")
    def environments_impacted_by_incident(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "environments_impacted_by_incident")

    @environments_impacted_by_incident.setter
    def environments_impacted_by_incident(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "environments_impacted_by_incident", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="parentMessageThreadTask")
    def parent_message_thread_task(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. A hash where [id] is the task id of the parent task that sent a message, and [name] is the name of the parent task
        """
        return pulumi.get(self, "parent_message_thread_task")

    @parent_message_thread_task.setter
    def parent_message_thread_task(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parent_message_thread_task", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskGetPulsesTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskGetPulsesTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter
    def refs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "refs")

    @refs.setter
    def refs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "refs", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter(name="servicesImpactedByIncident")
    def services_impacted_by_incident(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "services_impacted_by_incident")

    @services_impacted_by_incident.setter
    def services_impacted_by_incident(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "services_impacted_by_incident", value)

    @property
    @pulumi.getter
    def sources(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "sources")

    @sources.setter
    def sources(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "sources", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskGetPulsesTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskHttpClientTaskParamsArgs:
    def __init__(__self__, *,
                 succeed_on_status: pulumi.Input[str],
                 url: pulumi.Input[str],
                 body: Optional[pulumi.Input[str]] = None,
                 event_message: Optional[pulumi.Input[str]] = None,
                 event_url: Optional[pulumi.Input[str]] = None,
                 headers: Optional[pulumi.Input[str]] = None,
                 method: Optional[pulumi.Input[str]] = None,
                 params: Optional[pulumi.Input[str]] = None,
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskHttpClientTaskParamsPostToSlackChannelArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] succeed_on_status: HTTP status code expected. Can be a regular expression. Eg: 200, 200|203, 20[0-3]
        :param pulumi.Input[str] url: URL endpoint
        :param pulumi.Input[str] body: HTTP body
        :param pulumi.Input[str] headers: JSON map of HTTP headers
        :param pulumi.Input[str] method: HTTP method. Value must be one of `GET`, `POST`, `PATCH`, `PUT`, `DELETE`, `OPTIONS`.
        :param pulumi.Input[str] params: JSON map of HTTP query parameters
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        """
        pulumi.set(__self__, "succeed_on_status", succeed_on_status)
        pulumi.set(__self__, "url", url)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if event_message is not None:
            pulumi.set(__self__, "event_message", event_message)
        if event_url is not None:
            pulumi.set(__self__, "event_url", event_url)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if params is not None:
            pulumi.set(__self__, "params", params)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="succeedOnStatus")
    def succeed_on_status(self) -> pulumi.Input[str]:
        """
        HTTP status code expected. Can be a regular expression. Eg: 200, 200|203, 20[0-3]
        """
        return pulumi.get(self, "succeed_on_status")

    @succeed_on_status.setter
    def succeed_on_status(self, value: pulumi.Input[str]):
        pulumi.set(self, "succeed_on_status", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        URL endpoint
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP body
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="eventMessage")
    def event_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event_message")

    @event_message.setter
    def event_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_message", value)

    @property
    @pulumi.getter(name="eventUrl")
    def event_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event_url")

    @event_url.setter
    def event_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_url", value)

    @property
    @pulumi.getter
    def headers(self) -> Optional[pulumi.Input[str]]:
        """
        JSON map of HTTP headers
        """
        return pulumi.get(self, "headers")

    @headers.setter
    def headers(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "headers", value)

    @property
    @pulumi.getter
    def method(self) -> Optional[pulumi.Input[str]]:
        """
        HTTP method. Value must be one of `GET`, `POST`, `PATCH`, `PUT`, `DELETE`, `OPTIONS`.
        """
        return pulumi.get(self, "method")

    @method.setter
    def method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "method", value)

    @property
    @pulumi.getter
    def params(self) -> Optional[pulumi.Input[str]]:
        """
        JSON map of HTTP query parameters
        """
        return pulumi.get(self, "params")

    @params.setter
    def params(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "params", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskHttpClientTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskHttpClientTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskHttpClientTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskInviteToSlackChannelOpsgenieTaskParamsArgs:
    def __init__(__self__, *,
                 schedule: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskInviteToSlackChannelOpsgenieTaskParamsChannelArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] schedule: Map must contain two fields, `id` and `name`.
        """
        pulumi.set(__self__, "schedule", schedule)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def schedule(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskInviteToSlackChannelOpsgenieTaskParamsChannelArgs']]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskInviteToSlackChannelOpsgenieTaskParamsChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskInviteToSlackChannelOpsgenieTaskParamsChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskInviteToSlackChannelPagerdutyTaskParamsArgs:
    def __init__(__self__, *,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskInviteToSlackChannelPagerdutyTaskParamsChannelArgs']]]] = None,
                 escalation_policy: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 schedule: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 service: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] escalation_policy: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] schedule: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] service: Map must contain two fields, `id` and `name`.
        """
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if escalation_policy is not None:
            pulumi.set(__self__, "escalation_policy", escalation_policy)
        if schedule is not None:
            pulumi.set(__self__, "schedule", schedule)
        if service is not None:
            pulumi.set(__self__, "service", service)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskInviteToSlackChannelPagerdutyTaskParamsChannelArgs']]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskInviteToSlackChannelPagerdutyTaskParamsChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="escalationPolicy")
    def escalation_policy(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "escalation_policy")

    @escalation_policy.setter
    def escalation_policy(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "escalation_policy", value)

    @property
    @pulumi.getter
    def schedule(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "schedule")

    @schedule.setter
    def schedule(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "schedule", value)

    @property
    @pulumi.getter
    def service(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskInviteToSlackChannelPagerdutyTaskParamsChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskInviteToSlackChannelRootlyTaskParamsArgs:
    def __init__(__self__, *,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskInviteToSlackChannelRootlyTaskParamsChannelArgs']]]] = None,
                 escalation_policy_target: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 group_target: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 schedule_target: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 service_target: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 user_target: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] escalation_policy_target: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] group_target: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] schedule_target: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] service_target: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] user_target: Map must contain two fields, `id` and `name`.
        """
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if escalation_policy_target is not None:
            pulumi.set(__self__, "escalation_policy_target", escalation_policy_target)
        if group_target is not None:
            pulumi.set(__self__, "group_target", group_target)
        if schedule_target is not None:
            pulumi.set(__self__, "schedule_target", schedule_target)
        if service_target is not None:
            pulumi.set(__self__, "service_target", service_target)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if user_target is not None:
            pulumi.set(__self__, "user_target", user_target)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskInviteToSlackChannelRootlyTaskParamsChannelArgs']]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskInviteToSlackChannelRootlyTaskParamsChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="escalationPolicyTarget")
    def escalation_policy_target(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "escalation_policy_target")

    @escalation_policy_target.setter
    def escalation_policy_target(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "escalation_policy_target", value)

    @property
    @pulumi.getter(name="groupTarget")
    def group_target(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "group_target")

    @group_target.setter
    def group_target(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "group_target", value)

    @property
    @pulumi.getter(name="scheduleTarget")
    def schedule_target(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "schedule_target")

    @schedule_target.setter
    def schedule_target(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "schedule_target", value)

    @property
    @pulumi.getter(name="serviceTarget")
    def service_target(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "service_target")

    @service_target.setter
    def service_target(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "service_target", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="userTarget")
    def user_target(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "user_target")

    @user_target.setter
    def user_target(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "user_target", value)


@pulumi.input_type
class WorkflowTaskInviteToSlackChannelRootlyTaskParamsChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskInviteToSlackChannelTaskParamsArgs:
    def __init__(__self__, *,
                 channel: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 slack_user_groups: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskInviteToSlackChannelTaskParamsSlackUserGroupArgs']]]] = None,
                 slack_users: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskInviteToSlackChannelTaskParamsSlackUserArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] channel: Map must contain two fields, `id` and `name`.
        """
        pulumi.set(__self__, "channel", channel)
        if slack_user_groups is not None:
            pulumi.set(__self__, "slack_user_groups", slack_user_groups)
        if slack_users is not None:
            pulumi.set(__self__, "slack_users", slack_users)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def channel(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter(name="slackUserGroups")
    def slack_user_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskInviteToSlackChannelTaskParamsSlackUserGroupArgs']]]]:
        return pulumi.get(self, "slack_user_groups")

    @slack_user_groups.setter
    def slack_user_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskInviteToSlackChannelTaskParamsSlackUserGroupArgs']]]]):
        pulumi.set(self, "slack_user_groups", value)

    @property
    @pulumi.getter(name="slackUsers")
    def slack_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskInviteToSlackChannelTaskParamsSlackUserArgs']]]]:
        return pulumi.get(self, "slack_users")

    @slack_users.setter
    def slack_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskInviteToSlackChannelTaskParamsSlackUserArgs']]]]):
        pulumi.set(self, "slack_users", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskInviteToSlackChannelTaskParamsSlackUserArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskInviteToSlackChannelTaskParamsSlackUserGroupArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskInviteToSlackChannelVictorOpsTaskParamsArgs:
    def __init__(__self__, *,
                 team: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskInviteToSlackChannelVictorOpsTaskParamsChannelArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] team: Map must contain two fields, `id` and `name`.
        """
        pulumi.set(__self__, "team", team)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def team(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "team")

    @team.setter
    def team(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "team", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskInviteToSlackChannelVictorOpsTaskParamsChannelArgs']]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskInviteToSlackChannelVictorOpsTaskParamsChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskInviteToSlackChannelVictorOpsTaskParamsChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsTeamArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsUserArgs']]]] = None):
        """
        :param pulumi.Input[str] description: Description field of the incident that is generally used to provide a detailed information about the incident
        :param pulumi.Input[str] message: Message of the incident
        :param pulumi.Input[str] priority: Value must be one of `P1`, `P2`, `P3`, `P4`, `P5`, `auto`.
        :param pulumi.Input[str] title: Incident title.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description field of the incident that is generally used to provide a detailed information about the incident
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message of the incident
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `P1`, `P2`, `P3`, `P4`, `P5`, `auto`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsTeamArgs']]]]:
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsTeamArgs']]]]):
        pulumi.set(self, "teams", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Incident title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsTeamArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsUserArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsArgs:
    def __init__(__self__, *,
                 service: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 create_new_incident_on_conflict: Optional[pulumi.Input[bool]] = None,
                 escalation_policies: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsEscalationPolicyArgs']]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 urgency: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsUserArgs']]]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] service: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[bool] create_new_incident_on_conflict: Rootly only supports linking to a single PagerDuty incident. If this feature is disabled Rootly will add responders from any additional pages to the existing PagerDuty incident that is linked to the Rootly incident. If enabled, Rootly will create a new PagerDuty incident that is not linked to any Rootly incidents. Value must be one of true or false
        :param pulumi.Input[str] priority: PagerDuty incident priority, selecting auto will let Rootly auto map our incident severity
        :param pulumi.Input[str] title: Incident title.
        :param pulumi.Input[str] urgency: Value must be one of `high`, `low`, `auto`.
        """
        pulumi.set(__self__, "service", service)
        if create_new_incident_on_conflict is not None:
            pulumi.set(__self__, "create_new_incident_on_conflict", create_new_incident_on_conflict)
        if escalation_policies is not None:
            pulumi.set(__self__, "escalation_policies", escalation_policies)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if urgency is not None:
            pulumi.set(__self__, "urgency", urgency)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def service(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "service")

    @service.setter
    def service(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "service", value)

    @property
    @pulumi.getter(name="createNewIncidentOnConflict")
    def create_new_incident_on_conflict(self) -> Optional[pulumi.Input[bool]]:
        """
        Rootly only supports linking to a single PagerDuty incident. If this feature is disabled Rootly will add responders from any additional pages to the existing PagerDuty incident that is linked to the Rootly incident. If enabled, Rootly will create a new PagerDuty incident that is not linked to any Rootly incidents. Value must be one of true or false
        """
        return pulumi.get(self, "create_new_incident_on_conflict")

    @create_new_incident_on_conflict.setter
    def create_new_incident_on_conflict(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "create_new_incident_on_conflict", value)

    @property
    @pulumi.getter(name="escalationPolicies")
    def escalation_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsEscalationPolicyArgs']]]]:
        return pulumi.get(self, "escalation_policies")

    @escalation_policies.setter
    def escalation_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsEscalationPolicyArgs']]]]):
        pulumi.set(self, "escalation_policies", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        PagerDuty incident priority, selecting auto will let Rootly auto map our incident severity
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Incident title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def urgency(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `high`, `low`, `auto`.
        """
        return pulumi.get(self, "urgency")

    @urgency.setter
    def urgency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "urgency", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsEscalationPolicyArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsUserArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskPageRootlyOnCallRespondersTaskParamsArgs:
    def __init__(__self__, *,
                 summary: pulumi.Input[str],
                 alert_urgency_id: Optional[pulumi.Input[str]] = None,
                 escalation_note: Optional[pulumi.Input[str]] = None,
                 escalation_policy_target: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 group_target: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 service_target: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 user_target: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        :param pulumi.Input[str] alert_urgency_id: Alert urgency ID
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] escalation_policy_target: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] group_target: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] service_target: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] user_target: Map must contain two fields, `id` and `name`.
        """
        pulumi.set(__self__, "summary", summary)
        if alert_urgency_id is not None:
            pulumi.set(__self__, "alert_urgency_id", alert_urgency_id)
        if escalation_note is not None:
            pulumi.set(__self__, "escalation_note", escalation_note)
        if escalation_policy_target is not None:
            pulumi.set(__self__, "escalation_policy_target", escalation_policy_target)
        if group_target is not None:
            pulumi.set(__self__, "group_target", group_target)
        if service_target is not None:
            pulumi.set(__self__, "service_target", service_target)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if user_target is not None:
            pulumi.set(__self__, "user_target", user_target)

    @property
    @pulumi.getter
    def summary(self) -> pulumi.Input[str]:
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: pulumi.Input[str]):
        pulumi.set(self, "summary", value)

    @property
    @pulumi.getter(name="alertUrgencyId")
    def alert_urgency_id(self) -> Optional[pulumi.Input[str]]:
        """
        Alert urgency ID
        """
        return pulumi.get(self, "alert_urgency_id")

    @alert_urgency_id.setter
    def alert_urgency_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "alert_urgency_id", value)

    @property
    @pulumi.getter(name="escalationNote")
    def escalation_note(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "escalation_note")

    @escalation_note.setter
    def escalation_note(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "escalation_note", value)

    @property
    @pulumi.getter(name="escalationPolicyTarget")
    def escalation_policy_target(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "escalation_policy_target")

    @escalation_policy_target.setter
    def escalation_policy_target(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "escalation_policy_target", value)

    @property
    @pulumi.getter(name="groupTarget")
    def group_target(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "group_target")

    @group_target.setter
    def group_target(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "group_target", value)

    @property
    @pulumi.getter(name="serviceTarget")
    def service_target(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "service_target")

    @service_target.setter
    def service_target(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "service_target", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="userTarget")
    def user_target(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "user_target")

    @user_target.setter
    def user_target(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "user_target", value)


@pulumi.input_type
class WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsArgs:
    def __init__(__self__, *,
                 escalation_policies: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsEscalationPolicyArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsUserArgs']]]] = None):
        """
        :param pulumi.Input[str] title: Alert title.
        """
        if escalation_policies is not None:
            pulumi.set(__self__, "escalation_policies", escalation_policies)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="escalationPolicies")
    def escalation_policies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsEscalationPolicyArgs']]]]:
        return pulumi.get(self, "escalation_policies")

    @escalation_policies.setter
    def escalation_policies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsEscalationPolicyArgs']]]]):
        pulumi.set(self, "escalation_policies", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Alert title.
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsEscalationPolicyArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsUserArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskPrintTaskParamsArgs:
    def __init__(__self__, *,
                 message: pulumi.Input[str],
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] message: The message to print
        """
        pulumi.set(__self__, "message", message)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        """
        The message to print
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskPublishIncidentTaskParamsArgs:
    def __init__(__self__, *,
                 incident: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 public_title: pulumi.Input[str],
                 status: pulumi.Input[str],
                 status_page_id: pulumi.Input[str],
                 event: Optional[pulumi.Input[str]] = None,
                 integration_payload: Optional[pulumi.Input[str]] = None,
                 notify_subscribers: Optional[pulumi.Input[bool]] = None,
                 should_tweet: Optional[pulumi.Input[bool]] = None,
                 status_page_template: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] incident: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[str] status: Value must be one of `investigating`, `identified`, `monitoring`, `resolved`, `scheduled`, `in_progress`, `verifying`, `completed`.
        :param pulumi.Input[str] event: Incident event description
        :param pulumi.Input[str] integration_payload: Additional API Payload you can pass to statuspage.io for example. Can contain liquid markup and need to be valid JSON
        :param pulumi.Input[bool] notify_subscribers: When true notifies subscribers of the status page by email/text. Value must be one of true or false
        :param pulumi.Input[bool] should_tweet: For Statuspage.io integrated pages auto publishes a tweet for your update. Value must be one of true or false
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] status_page_template: Map must contain two fields, `id` and `name`.
        """
        pulumi.set(__self__, "incident", incident)
        pulumi.set(__self__, "public_title", public_title)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_page_id", status_page_id)
        if event is not None:
            pulumi.set(__self__, "event", event)
        if integration_payload is not None:
            pulumi.set(__self__, "integration_payload", integration_payload)
        if notify_subscribers is not None:
            pulumi.set(__self__, "notify_subscribers", notify_subscribers)
        if should_tweet is not None:
            pulumi.set(__self__, "should_tweet", should_tweet)
        if status_page_template is not None:
            pulumi.set(__self__, "status_page_template", status_page_template)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def incident(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "incident")

    @incident.setter
    def incident(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "incident", value)

    @property
    @pulumi.getter(name="publicTitle")
    def public_title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "public_title")

    @public_title.setter
    def public_title(self, value: pulumi.Input[str]):
        pulumi.set(self, "public_title", value)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Value must be one of `investigating`, `identified`, `monitoring`, `resolved`, `scheduled`, `in_progress`, `verifying`, `completed`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="statusPageId")
    def status_page_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "status_page_id")

    @status_page_id.setter
    def status_page_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "status_page_id", value)

    @property
    @pulumi.getter
    def event(self) -> Optional[pulumi.Input[str]]:
        """
        Incident event description
        """
        return pulumi.get(self, "event")

    @event.setter
    def event(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event", value)

    @property
    @pulumi.getter(name="integrationPayload")
    def integration_payload(self) -> Optional[pulumi.Input[str]]:
        """
        Additional API Payload you can pass to statuspage.io for example. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "integration_payload")

    @integration_payload.setter
    def integration_payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "integration_payload", value)

    @property
    @pulumi.getter(name="notifySubscribers")
    def notify_subscribers(self) -> Optional[pulumi.Input[bool]]:
        """
        When true notifies subscribers of the status page by email/text. Value must be one of true or false
        """
        return pulumi.get(self, "notify_subscribers")

    @notify_subscribers.setter
    def notify_subscribers(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "notify_subscribers", value)

    @property
    @pulumi.getter(name="shouldTweet")
    def should_tweet(self) -> Optional[pulumi.Input[bool]]:
        """
        For Statuspage.io integrated pages auto publishes a tweet for your update. Value must be one of true or false
        """
        return pulumi.get(self, "should_tweet")

    @should_tweet.setter
    def should_tweet(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "should_tweet", value)

    @property
    @pulumi.getter(name="statusPageTemplate")
    def status_page_template(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "status_page_template")

    @status_page_template.setter
    def status_page_template(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "status_page_template", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskRedisClientTaskParamsArgs:
    def __init__(__self__, *,
                 commands: pulumi.Input[str],
                 url: pulumi.Input[str],
                 event_message: Optional[pulumi.Input[str]] = None,
                 event_url: Optional[pulumi.Input[str]] = None,
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskRedisClientTaskParamsPostToSlackChannelArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        """
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "url", url)
        if event_message is not None:
            pulumi.set(__self__, "event_message", event_message)
        if event_url is not None:
            pulumi.set(__self__, "event_url", event_url)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def commands(self) -> pulumi.Input[str]:
        return pulumi.get(self, "commands")

    @commands.setter
    def commands(self, value: pulumi.Input[str]):
        pulumi.set(self, "commands", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="eventMessage")
    def event_message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event_message")

    @event_message.setter
    def event_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_message", value)

    @property
    @pulumi.getter(name="eventUrl")
    def event_url(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "event_url")

    @event_url.setter
    def event_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "event_url", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskRedisClientTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskRedisClientTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskRedisClientTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskRemoveGoogleDocsPermissionsTaskParamsArgs:
    def __init__(__self__, *,
                 attribute_to_query_by: pulumi.Input[str],
                 file_id: pulumi.Input[str],
                 value: pulumi.Input[str],
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] attribute_to_query_by: Value must be one of `type`, `role`, `email_address`.
        :param pulumi.Input[str] file_id: The Google Doc file ID
        """
        pulumi.set(__self__, "attribute_to_query_by", attribute_to_query_by)
        pulumi.set(__self__, "file_id", file_id)
        pulumi.set(__self__, "value", value)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="attributeToQueryBy")
    def attribute_to_query_by(self) -> pulumi.Input[str]:
        """
        Value must be one of `type`, `role`, `email_address`.
        """
        return pulumi.get(self, "attribute_to_query_by")

    @attribute_to_query_by.setter
    def attribute_to_query_by(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute_to_query_by", value)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> pulumi.Input[str]:
        """
        The Google Doc file ID
        """
        return pulumi.get(self, "file_id")

    @file_id.setter
    def file_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_id", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskRenameSlackChannelTaskParamsArgs:
    def __init__(__self__, *,
                 channel: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 title: pulumi.Input[str],
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] channel: Map must contain two fields, `id` and `name`.
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "title", title)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def channel(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskRunCommandHerokuTaskParamsArgs:
    def __init__(__self__, *,
                 app_name: pulumi.Input[str],
                 command: pulumi.Input[str],
                 size: pulumi.Input[str],
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskRunCommandHerokuTaskParamsPostToSlackChannelArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] size: Value must be one of `standard-1X`, `standard-2X`.
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        """
        pulumi.set(__self__, "app_name", app_name)
        pulumi.set(__self__, "command", command)
        pulumi.set(__self__, "size", size)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="appName")
    def app_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "app_name")

    @app_name.setter
    def app_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "app_name", value)

    @property
    @pulumi.getter
    def command(self) -> pulumi.Input[str]:
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: pulumi.Input[str]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter
    def size(self) -> pulumi.Input[str]:
        """
        Value must be one of `standard-1X`, `standard-2X`.
        """
        return pulumi.get(self, "size")

    @size.setter
    def size(self, value: pulumi.Input[str]):
        pulumi.set(self, "size", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskRunCommandHerokuTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskRunCommandHerokuTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskRunCommandHerokuTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskSendDashboardReportTaskParamsArgs:
    def __init__(__self__, *,
                 body: pulumi.Input[str],
                 dashboard_ids: pulumi.Input[Sequence[pulumi.Input[str]]],
                 subject: pulumi.Input[str],
                 tos: pulumi.Input[Sequence[pulumi.Input[str]]],
                 from_: Optional[pulumi.Input[str]] = None,
                 preheader: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] body: The email body
        :param pulumi.Input[str] subject: The subject
        :param pulumi.Input[str] from_: The from email address. Need to use SMTP integration if different than rootly.com
        :param pulumi.Input[str] preheader: The preheader
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "dashboard_ids", dashboard_ids)
        pulumi.set(__self__, "subject", subject)
        pulumi.set(__self__, "tos", tos)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if preheader is not None:
            pulumi.set(__self__, "preheader", preheader)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Input[str]:
        """
        The email body
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: pulumi.Input[str]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="dashboardIds")
    def dashboard_ids(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "dashboard_ids")

    @dashboard_ids.setter
    def dashboard_ids(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "dashboard_ids", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter
    def tos(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[str]]:
        """
        The from email address. Need to use SMTP integration if different than rootly.com
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter
    def preheader(self) -> Optional[pulumi.Input[str]]:
        """
        The preheader
        """
        return pulumi.get(self, "preheader")

    @preheader.setter
    def preheader(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preheader", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskSendEmailTaskParamsArgs:
    def __init__(__self__, *,
                 body: pulumi.Input[str],
                 subject: pulumi.Input[str],
                 tos: pulumi.Input[Sequence[pulumi.Input[str]]],
                 bccs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ccs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 custom_logo_url: Optional[pulumi.Input[str]] = None,
                 from_: Optional[pulumi.Input[str]] = None,
                 include_footer: Optional[pulumi.Input[bool]] = None,
                 include_header: Optional[pulumi.Input[bool]] = None,
                 preheader: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] body: The email body
        :param pulumi.Input[str] subject: The subject
        :param pulumi.Input[str] custom_logo_url: URL to your custom email logo
        :param pulumi.Input[str] from_: The from email address. Need to use SMTP integration if different than rootly.com
        :param pulumi.Input[bool] include_footer: Value must be one of true or false
        :param pulumi.Input[bool] include_header: Value must be one of true or false
        :param pulumi.Input[str] preheader: The preheader
        """
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "subject", subject)
        pulumi.set(__self__, "tos", tos)
        if bccs is not None:
            pulumi.set(__self__, "bccs", bccs)
        if ccs is not None:
            pulumi.set(__self__, "ccs", ccs)
        if custom_logo_url is not None:
            pulumi.set(__self__, "custom_logo_url", custom_logo_url)
        if from_ is not None:
            pulumi.set(__self__, "from_", from_)
        if include_footer is not None:
            pulumi.set(__self__, "include_footer", include_footer)
        if include_header is not None:
            pulumi.set(__self__, "include_header", include_header)
        if preheader is not None:
            pulumi.set(__self__, "preheader", preheader)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def body(self) -> pulumi.Input[str]:
        """
        The email body
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: pulumi.Input[str]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter
    def subject(self) -> pulumi.Input[str]:
        """
        The subject
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: pulumi.Input[str]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter
    def tos(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "tos")

    @tos.setter
    def tos(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "tos", value)

    @property
    @pulumi.getter
    def bccs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "bccs")

    @bccs.setter
    def bccs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "bccs", value)

    @property
    @pulumi.getter
    def ccs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "ccs")

    @ccs.setter
    def ccs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ccs", value)

    @property
    @pulumi.getter(name="customLogoUrl")
    def custom_logo_url(self) -> Optional[pulumi.Input[str]]:
        """
        URL to your custom email logo
        """
        return pulumi.get(self, "custom_logo_url")

    @custom_logo_url.setter
    def custom_logo_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_logo_url", value)

    @property
    @pulumi.getter(name="from")
    def from_(self) -> Optional[pulumi.Input[str]]:
        """
        The from email address. Need to use SMTP integration if different than rootly.com
        """
        return pulumi.get(self, "from_")

    @from_.setter
    def from_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "from_", value)

    @property
    @pulumi.getter(name="includeFooter")
    def include_footer(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "include_footer")

    @include_footer.setter
    def include_footer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_footer", value)

    @property
    @pulumi.getter(name="includeHeader")
    def include_header(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "include_header")

    @include_header.setter
    def include_header(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_header", value)

    @property
    @pulumi.getter
    def preheader(self) -> Optional[pulumi.Input[str]]:
        """
        The preheader
        """
        return pulumi.get(self, "preheader")

    @preheader.setter
    def preheader(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preheader", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskSendSlackBlocksTaskParamsArgs:
    def __init__(__self__, *,
                 blocks: pulumi.Input[str],
                 attachments: Optional[pulumi.Input[str]] = None,
                 broadcast_thread_reply_to_channel: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSendSlackBlocksTaskParamsChannelArgs']]]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 parent_message_thread_task: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 pin_to_channel: Optional[pulumi.Input[bool]] = None,
                 send_as_ephemeral: Optional[pulumi.Input[bool]] = None,
                 send_only_as_threaded_message: Optional[pulumi.Input[bool]] = None,
                 slack_user_groups: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSendSlackBlocksTaskParamsSlackUserGroupArgs']]]] = None,
                 slack_users: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSendSlackBlocksTaskParamsSlackUserArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 update_parent_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] blocks: Support liquid markup. Needs to be a valid JSON string after liquid is parsed
        :param pulumi.Input[str] attachments: Support liquid markup. Needs to be a valid JSON string after liquid is parsed
        :param pulumi.Input[bool] broadcast_thread_reply_to_channel: Value must be one of true or false
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parent_message_thread_task: Map must contain two fields, `id` and `name`. A hash where [id] is the task id of the parent task that sent a message, and [name] is the name of the parent task
        :param pulumi.Input[bool] pin_to_channel: Value must be one of true or false
        :param pulumi.Input[bool] send_as_ephemeral: Value must be one of true or false
        :param pulumi.Input[bool] send_only_as_threaded_message: When set to true, if the parent for this threaded message cannot be found the message will be skipped.. Value must be one of true or false
        :param pulumi.Input[bool] update_parent_message: Value must be one of true or false
        """
        pulumi.set(__self__, "blocks", blocks)
        if attachments is not None:
            pulumi.set(__self__, "attachments", attachments)
        if broadcast_thread_reply_to_channel is not None:
            pulumi.set(__self__, "broadcast_thread_reply_to_channel", broadcast_thread_reply_to_channel)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if parent_message_thread_task is not None:
            pulumi.set(__self__, "parent_message_thread_task", parent_message_thread_task)
        if pin_to_channel is not None:
            pulumi.set(__self__, "pin_to_channel", pin_to_channel)
        if send_as_ephemeral is not None:
            pulumi.set(__self__, "send_as_ephemeral", send_as_ephemeral)
        if send_only_as_threaded_message is not None:
            pulumi.set(__self__, "send_only_as_threaded_message", send_only_as_threaded_message)
        if slack_user_groups is not None:
            pulumi.set(__self__, "slack_user_groups", slack_user_groups)
        if slack_users is not None:
            pulumi.set(__self__, "slack_users", slack_users)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if update_parent_message is not None:
            pulumi.set(__self__, "update_parent_message", update_parent_message)

    @property
    @pulumi.getter
    def blocks(self) -> pulumi.Input[str]:
        """
        Support liquid markup. Needs to be a valid JSON string after liquid is parsed
        """
        return pulumi.get(self, "blocks")

    @blocks.setter
    def blocks(self, value: pulumi.Input[str]):
        pulumi.set(self, "blocks", value)

    @property
    @pulumi.getter
    def attachments(self) -> Optional[pulumi.Input[str]]:
        """
        Support liquid markup. Needs to be a valid JSON string after liquid is parsed
        """
        return pulumi.get(self, "attachments")

    @attachments.setter
    def attachments(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attachments", value)

    @property
    @pulumi.getter(name="broadcastThreadReplyToChannel")
    def broadcast_thread_reply_to_channel(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "broadcast_thread_reply_to_channel")

    @broadcast_thread_reply_to_channel.setter
    def broadcast_thread_reply_to_channel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "broadcast_thread_reply_to_channel", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSendSlackBlocksTaskParamsChannelArgs']]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSendSlackBlocksTaskParamsChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="parentMessageThreadTask")
    def parent_message_thread_task(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. A hash where [id] is the task id of the parent task that sent a message, and [name] is the name of the parent task
        """
        return pulumi.get(self, "parent_message_thread_task")

    @parent_message_thread_task.setter
    def parent_message_thread_task(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parent_message_thread_task", value)

    @property
    @pulumi.getter(name="pinToChannel")
    def pin_to_channel(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "pin_to_channel")

    @pin_to_channel.setter
    def pin_to_channel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pin_to_channel", value)

    @property
    @pulumi.getter(name="sendAsEphemeral")
    def send_as_ephemeral(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "send_as_ephemeral")

    @send_as_ephemeral.setter
    def send_as_ephemeral(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_as_ephemeral", value)

    @property
    @pulumi.getter(name="sendOnlyAsThreadedMessage")
    def send_only_as_threaded_message(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, if the parent for this threaded message cannot be found the message will be skipped.. Value must be one of true or false
        """
        return pulumi.get(self, "send_only_as_threaded_message")

    @send_only_as_threaded_message.setter
    def send_only_as_threaded_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_only_as_threaded_message", value)

    @property
    @pulumi.getter(name="slackUserGroups")
    def slack_user_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSendSlackBlocksTaskParamsSlackUserGroupArgs']]]]:
        return pulumi.get(self, "slack_user_groups")

    @slack_user_groups.setter
    def slack_user_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSendSlackBlocksTaskParamsSlackUserGroupArgs']]]]):
        pulumi.set(self, "slack_user_groups", value)

    @property
    @pulumi.getter(name="slackUsers")
    def slack_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSendSlackBlocksTaskParamsSlackUserArgs']]]]:
        return pulumi.get(self, "slack_users")

    @slack_users.setter
    def slack_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSendSlackBlocksTaskParamsSlackUserArgs']]]]):
        pulumi.set(self, "slack_users", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="updateParentMessage")
    def update_parent_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "update_parent_message")

    @update_parent_message.setter
    def update_parent_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_parent_message", value)


@pulumi.input_type
class WorkflowTaskSendSlackBlocksTaskParamsChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskSendSlackBlocksTaskParamsSlackUserArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskSendSlackBlocksTaskParamsSlackUserGroupArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskSendSlackMessageTaskParamsArgs:
    def __init__(__self__, *,
                 text: pulumi.Input[str],
                 actionables: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 broadcast_thread_reply_to_channel: Optional[pulumi.Input[bool]] = None,
                 channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSendSlackMessageTaskParamsChannelArgs']]]] = None,
                 color: Optional[pulumi.Input[str]] = None,
                 parent_message_thread_task: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 pin_to_channel: Optional[pulumi.Input[bool]] = None,
                 send_as_ephemeral: Optional[pulumi.Input[bool]] = None,
                 send_only_as_threaded_message: Optional[pulumi.Input[bool]] = None,
                 slack_user_groups: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSendSlackMessageTaskParamsSlackUserGroupArgs']]]] = None,
                 slack_users: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSendSlackMessageTaskParamsSlackUserArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 update_parent_message: Optional[pulumi.Input[bool]] = None):
        """
        :param pulumi.Input[str] text: The message text
        :param pulumi.Input[Sequence[pulumi.Input[str]]] actionables: Value must be one of `update_summary`, `update_status`, `archive_channel`, `manage_incident_roles`, `update_incident`, `all_commands`, `leave_feedback`, `manage_form_fields`, `manage_action_items`, `view_tasks`, `add_pagerduty_responders`, `add_opsgenie_responders`, `add_victor_ops_responders`, `snooze_reminder`, `pause_reminder`, `restart_reminder`, `update_status_page`, `cancel_incident`.
        :param pulumi.Input[bool] broadcast_thread_reply_to_channel: Value must be one of true or false
        :param pulumi.Input[str] color: A hex color
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] parent_message_thread_task: Map must contain two fields, `id` and `name`. A hash where [id] is the task id of the parent task that sent a message, and [name] is the name of the parent task
        :param pulumi.Input[bool] pin_to_channel: Value must be one of true or false
        :param pulumi.Input[bool] send_as_ephemeral: Value must be one of true or false
        :param pulumi.Input[bool] send_only_as_threaded_message: When set to true, if the parent for this threaded message cannot be found the message will be skipped.. Value must be one of true or false
        :param pulumi.Input[bool] update_parent_message: Value must be one of true or false
        """
        pulumi.set(__self__, "text", text)
        if actionables is not None:
            pulumi.set(__self__, "actionables", actionables)
        if broadcast_thread_reply_to_channel is not None:
            pulumi.set(__self__, "broadcast_thread_reply_to_channel", broadcast_thread_reply_to_channel)
        if channels is not None:
            pulumi.set(__self__, "channels", channels)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if parent_message_thread_task is not None:
            pulumi.set(__self__, "parent_message_thread_task", parent_message_thread_task)
        if pin_to_channel is not None:
            pulumi.set(__self__, "pin_to_channel", pin_to_channel)
        if send_as_ephemeral is not None:
            pulumi.set(__self__, "send_as_ephemeral", send_as_ephemeral)
        if send_only_as_threaded_message is not None:
            pulumi.set(__self__, "send_only_as_threaded_message", send_only_as_threaded_message)
        if slack_user_groups is not None:
            pulumi.set(__self__, "slack_user_groups", slack_user_groups)
        if slack_users is not None:
            pulumi.set(__self__, "slack_users", slack_users)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if update_parent_message is not None:
            pulumi.set(__self__, "update_parent_message", update_parent_message)

    @property
    @pulumi.getter
    def text(self) -> pulumi.Input[str]:
        """
        The message text
        """
        return pulumi.get(self, "text")

    @text.setter
    def text(self, value: pulumi.Input[str]):
        pulumi.set(self, "text", value)

    @property
    @pulumi.getter
    def actionables(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Value must be one of `update_summary`, `update_status`, `archive_channel`, `manage_incident_roles`, `update_incident`, `all_commands`, `leave_feedback`, `manage_form_fields`, `manage_action_items`, `view_tasks`, `add_pagerduty_responders`, `add_opsgenie_responders`, `add_victor_ops_responders`, `snooze_reminder`, `pause_reminder`, `restart_reminder`, `update_status_page`, `cancel_incident`.
        """
        return pulumi.get(self, "actionables")

    @actionables.setter
    def actionables(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "actionables", value)

    @property
    @pulumi.getter(name="broadcastThreadReplyToChannel")
    def broadcast_thread_reply_to_channel(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "broadcast_thread_reply_to_channel")

    @broadcast_thread_reply_to_channel.setter
    def broadcast_thread_reply_to_channel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "broadcast_thread_reply_to_channel", value)

    @property
    @pulumi.getter
    def channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSendSlackMessageTaskParamsChannelArgs']]]]:
        return pulumi.get(self, "channels")

    @channels.setter
    def channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSendSlackMessageTaskParamsChannelArgs']]]]):
        pulumi.set(self, "channels", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        A hex color
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter(name="parentMessageThreadTask")
    def parent_message_thread_task(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. A hash where [id] is the task id of the parent task that sent a message, and [name] is the name of the parent task
        """
        return pulumi.get(self, "parent_message_thread_task")

    @parent_message_thread_task.setter
    def parent_message_thread_task(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "parent_message_thread_task", value)

    @property
    @pulumi.getter(name="pinToChannel")
    def pin_to_channel(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "pin_to_channel")

    @pin_to_channel.setter
    def pin_to_channel(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "pin_to_channel", value)

    @property
    @pulumi.getter(name="sendAsEphemeral")
    def send_as_ephemeral(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "send_as_ephemeral")

    @send_as_ephemeral.setter
    def send_as_ephemeral(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_as_ephemeral", value)

    @property
    @pulumi.getter(name="sendOnlyAsThreadedMessage")
    def send_only_as_threaded_message(self) -> Optional[pulumi.Input[bool]]:
        """
        When set to true, if the parent for this threaded message cannot be found the message will be skipped.. Value must be one of true or false
        """
        return pulumi.get(self, "send_only_as_threaded_message")

    @send_only_as_threaded_message.setter
    def send_only_as_threaded_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_only_as_threaded_message", value)

    @property
    @pulumi.getter(name="slackUserGroups")
    def slack_user_groups(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSendSlackMessageTaskParamsSlackUserGroupArgs']]]]:
        return pulumi.get(self, "slack_user_groups")

    @slack_user_groups.setter
    def slack_user_groups(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSendSlackMessageTaskParamsSlackUserGroupArgs']]]]):
        pulumi.set(self, "slack_user_groups", value)

    @property
    @pulumi.getter(name="slackUsers")
    def slack_users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSendSlackMessageTaskParamsSlackUserArgs']]]]:
        return pulumi.get(self, "slack_users")

    @slack_users.setter
    def slack_users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSendSlackMessageTaskParamsSlackUserArgs']]]]):
        pulumi.set(self, "slack_users", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="updateParentMessage")
    def update_parent_message(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "update_parent_message")

    @update_parent_message.setter
    def update_parent_message(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_parent_message", value)


@pulumi.input_type
class WorkflowTaskSendSlackMessageTaskParamsChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskSendSlackMessageTaskParamsSlackUserArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskSendSlackMessageTaskParamsSlackUserGroupArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskSendSmsTaskParamsArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 name: pulumi.Input[str],
                 phone_numbers: pulumi.Input[Sequence[pulumi.Input[str]]],
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: The SMS message
        :param pulumi.Input[str] name: The name
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phone_numbers", phone_numbers)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The SMS message
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="phoneNumbers")
    def phone_numbers(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "phone_numbers")

    @phone_numbers.setter
    def phone_numbers(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "phone_numbers", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskSendWhatsappMessageTaskParamsArgs:
    def __init__(__self__, *,
                 content: pulumi.Input[str],
                 name: pulumi.Input[str],
                 phone_numbers: pulumi.Input[Sequence[pulumi.Input[str]]],
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] content: The WhatsApp message
        :param pulumi.Input[str] name: The name
        """
        pulumi.set(__self__, "content", content)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "phone_numbers", phone_numbers)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def content(self) -> pulumi.Input[str]:
        """
        The WhatsApp message
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: pulumi.Input[str]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        The name
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="phoneNumbers")
    def phone_numbers(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        return pulumi.get(self, "phone_numbers")

    @phone_numbers.setter
    def phone_numbers(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "phone_numbers", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskSnapshotDatadogGraphTaskParamsArgs:
    def __init__(__self__, *,
                 past_duration: pulumi.Input[str],
                 dashboards: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotDatadogGraphTaskParamsDashboardArgs']]]] = None,
                 metric_queries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotDatadogGraphTaskParamsPostToSlackChannelArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] past_duration: in format '1 minute', '30 days', '3 months', etc
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        """
        pulumi.set(__self__, "past_duration", past_duration)
        if dashboards is not None:
            pulumi.set(__self__, "dashboards", dashboards)
        if metric_queries is not None:
            pulumi.set(__self__, "metric_queries", metric_queries)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="pastDuration")
    def past_duration(self) -> pulumi.Input[str]:
        """
        in format '1 minute', '30 days', '3 months', etc
        """
        return pulumi.get(self, "past_duration")

    @past_duration.setter
    def past_duration(self, value: pulumi.Input[str]):
        pulumi.set(self, "past_duration", value)

    @property
    @pulumi.getter
    def dashboards(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotDatadogGraphTaskParamsDashboardArgs']]]]:
        return pulumi.get(self, "dashboards")

    @dashboards.setter
    def dashboards(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotDatadogGraphTaskParamsDashboardArgs']]]]):
        pulumi.set(self, "dashboards", value)

    @property
    @pulumi.getter(name="metricQueries")
    def metric_queries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "metric_queries")

    @metric_queries.setter
    def metric_queries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "metric_queries", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotDatadogGraphTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotDatadogGraphTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskSnapshotDatadogGraphTaskParamsDashboardArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskSnapshotDatadogGraphTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskSnapshotGrafanaDashboardTaskParamsArgs:
    def __init__(__self__, *,
                 dashboards: pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotGrafanaDashboardTaskParamsDashboardArgs']]],
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotGrafanaDashboardTaskParamsPostToSlackChannelArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        """
        pulumi.set(__self__, "dashboards", dashboards)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def dashboards(self) -> pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotGrafanaDashboardTaskParamsDashboardArgs']]]:
        return pulumi.get(self, "dashboards")

    @dashboards.setter
    def dashboards(self, value: pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotGrafanaDashboardTaskParamsDashboardArgs']]]):
        pulumi.set(self, "dashboards", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotGrafanaDashboardTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotGrafanaDashboardTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskSnapshotGrafanaDashboardTaskParamsDashboardArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskSnapshotGrafanaDashboardTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskSnapshotLookerLookTaskParamsArgs:
    def __init__(__self__, *,
                 dashboards: pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotLookerLookTaskParamsDashboardArgs']]],
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotLookerLookTaskParamsPostToSlackChannelArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        """
        pulumi.set(__self__, "dashboards", dashboards)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def dashboards(self) -> pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotLookerLookTaskParamsDashboardArgs']]]:
        return pulumi.get(self, "dashboards")

    @dashboards.setter
    def dashboards(self, value: pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotLookerLookTaskParamsDashboardArgs']]]):
        pulumi.set(self, "dashboards", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotLookerLookTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotLookerLookTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskSnapshotLookerLookTaskParamsDashboardArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskSnapshotLookerLookTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskSnapshotNewRelicGraphTaskParamsArgs:
    def __init__(__self__, *,
                 metric_query: pulumi.Input[str],
                 metric_type: pulumi.Input[str],
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotNewRelicGraphTaskParamsPostToSlackChannelArgs']]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] metric_type: Value must be one of `APDEX`, `AREA`, `BAR`, `BASELINE`, `BILLBOARD`, `BULLET`, `EVENT_FEED`, `FUNNEL`, `HEATMAP`, `HISTOGRAM`, `LINE`, `PIE`, `SCATTER`, `STACKED_HORIZONTAL_BAR`, `TABLE`, `VERTICAL_BAR`.
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        """
        pulumi.set(__self__, "metric_query", metric_query)
        pulumi.set(__self__, "metric_type", metric_type)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="metricQuery")
    def metric_query(self) -> pulumi.Input[str]:
        return pulumi.get(self, "metric_query")

    @metric_query.setter
    def metric_query(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_query", value)

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> pulumi.Input[str]:
        """
        Value must be one of `APDEX`, `AREA`, `BAR`, `BASELINE`, `BILLBOARD`, `BULLET`, `EVENT_FEED`, `FUNNEL`, `HEATMAP`, `HISTOGRAM`, `LINE`, `PIE`, `SCATTER`, `STACKED_HORIZONTAL_BAR`, `TABLE`, `VERTICAL_BAR`.
        """
        return pulumi.get(self, "metric_type")

    @metric_type.setter
    def metric_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "metric_type", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotNewRelicGraphTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskSnapshotNewRelicGraphTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskSnapshotNewRelicGraphTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskTriggerWorkflowTaskParamsArgs:
    def __init__(__self__, *,
                 attribute_to_query_by: pulumi.Input[str],
                 kind: pulumi.Input[str],
                 resource: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 workflow: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 check_workflow_conditions: Optional[pulumi.Input[bool]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] attribute_to_query_by: ["(incident) kind can only match [:id, :slug, :sequential*id, :pagerduty*incident*id, :opsgenie*incident*id, :victor*ops*incident*id, :jira*issue*id, :asana*task*id, :shortcut*task*id, :linear*issue*id, :zendesk*ticket*id, :trello*card*id, :airtable*record*id, :shortcut*story*id, :github*issue*id, :freshservice*ticket*id, :freshservice*task*id, :clickup*task*id]", "(post*mortem) kind can only match [:id]", "(action*item) kind can only match [:id, :jira*issue*id, :asana*task*id, :shortcut*task*id, :linear*issue*id, :zendesk*ticket*id, :trello*card*id, :airtable*record*id, :shortcut*story*id, :github*issue*id, :freshservice*ticket*id, :freshservice*task*id, :clickup*task*id]", "(pulse) kind can only match [:id]", "(alert) kind can only match [:id]"]. Value must be one of `id`, `slug`, `sequential_id`, `pagerduty_incident_id`, `opsgenie_incident_id`, `victor_ops_incident_id`, `jira_issue_id`, `asana_task_id`, `shortcut_task_id`, `linear_issue_id`, `zendesk_ticket_id`, `trello_card_id`, `airtable_record_id`, `shortcut_story_id`, `github_issue_id`, `freshservice_ticket_id`, `freshservice_task_id`, `clickup_task_id`.
        :param pulumi.Input[str] kind: Value must be one of `incident`, `post_mortem`, `action_item`, `pulse`, `alert`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] resource: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] workflow: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[bool] check_workflow_conditions: Value must be one of true or false
        """
        pulumi.set(__self__, "attribute_to_query_by", attribute_to_query_by)
        pulumi.set(__self__, "kind", kind)
        pulumi.set(__self__, "resource", resource)
        pulumi.set(__self__, "workflow", workflow)
        if check_workflow_conditions is not None:
            pulumi.set(__self__, "check_workflow_conditions", check_workflow_conditions)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="attributeToQueryBy")
    def attribute_to_query_by(self) -> pulumi.Input[str]:
        """
        ["(incident) kind can only match [:id, :slug, :sequential*id, :pagerduty*incident*id, :opsgenie*incident*id, :victor*ops*incident*id, :jira*issue*id, :asana*task*id, :shortcut*task*id, :linear*issue*id, :zendesk*ticket*id, :trello*card*id, :airtable*record*id, :shortcut*story*id, :github*issue*id, :freshservice*ticket*id, :freshservice*task*id, :clickup*task*id]", "(post*mortem) kind can only match [:id]", "(action*item) kind can only match [:id, :jira*issue*id, :asana*task*id, :shortcut*task*id, :linear*issue*id, :zendesk*ticket*id, :trello*card*id, :airtable*record*id, :shortcut*story*id, :github*issue*id, :freshservice*ticket*id, :freshservice*task*id, :clickup*task*id]", "(pulse) kind can only match [:id]", "(alert) kind can only match [:id]"]. Value must be one of `id`, `slug`, `sequential_id`, `pagerduty_incident_id`, `opsgenie_incident_id`, `victor_ops_incident_id`, `jira_issue_id`, `asana_task_id`, `shortcut_task_id`, `linear_issue_id`, `zendesk_ticket_id`, `trello_card_id`, `airtable_record_id`, `shortcut_story_id`, `github_issue_id`, `freshservice_ticket_id`, `freshservice_task_id`, `clickup_task_id`.
        """
        return pulumi.get(self, "attribute_to_query_by")

    @attribute_to_query_by.setter
    def attribute_to_query_by(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute_to_query_by", value)

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Input[str]:
        """
        Value must be one of `incident`, `post_mortem`, `action_item`, `pulse`, `alert`.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: pulumi.Input[str]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def resource(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "resource")

    @resource.setter
    def resource(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "resource", value)

    @property
    @pulumi.getter
    def workflow(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "workflow")

    @workflow.setter
    def workflow(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "workflow", value)

    @property
    @pulumi.getter(name="checkWorkflowConditions")
    def check_workflow_conditions(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "check_workflow_conditions")

    @check_workflow_conditions.setter
    def check_workflow_conditions(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "check_workflow_conditions", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskTweetTwitterMessageTaskParamsArgs:
    def __init__(__self__, *,
                 message: pulumi.Input[str],
                 task_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "message", message)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def message(self) -> pulumi.Input[str]:
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: pulumi.Input[str]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskUpdateActionItemTaskParamsArgs:
    def __init__(__self__, *,
                 attribute_to_query_by: pulumi.Input[str],
                 query_value: pulumi.Input[str],
                 assigned_to_user: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 assigned_to_user_id: Optional[pulumi.Input[str]] = None,
                 custom_fields_mapping: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 summary: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] attribute_to_query_by: Attribute of the action item to match against. Value must be one of `id`, `jira_issue_id`, `asana_task_id`, `shortcut_task_id`, `linear_issue_id`, `zendesk_ticket_id`, `trello_card_id`, `airtable_record_id`, `shortcut_story_id`, `github_issue_id`, `gitlab_issue_id`, `freshservice_ticket_id`, `freshservice_task_id`, `clickup_task_id`.
        :param pulumi.Input[str] query_value: Value that attribute*to*query_by to uses to match against
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] assigned_to_user: Map must contain two fields, `id` and `name`.  The user this action item is assigned to
        :param pulumi.Input[str] assigned_to_user_id: [DEPRECATED] Use assigned*to*user attribute instead. The user id this action item is assigned to
        :param pulumi.Input[str] custom_fields_mapping: Custom field mappings. Can contain liquid markup and need to be valid JSON
        :param pulumi.Input[str] description: The action item description
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        :param pulumi.Input[str] priority: The action item priority. Value must be one of `high`, `medium`, `low`.
        :param pulumi.Input[str] status: The action item status. Value must be one of `open`, `in_progress`, `cancelled`, `done`.
        :param pulumi.Input[str] summary: Brief description of the action item
        """
        pulumi.set(__self__, "attribute_to_query_by", attribute_to_query_by)
        pulumi.set(__self__, "query_value", query_value)
        if assigned_to_user is not None:
            pulumi.set(__self__, "assigned_to_user", assigned_to_user)
        if assigned_to_user_id is not None:
            pulumi.set(__self__, "assigned_to_user_id", assigned_to_user_id)
        if custom_fields_mapping is not None:
            pulumi.set(__self__, "custom_fields_mapping", custom_fields_mapping)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if group_ids is not None:
            pulumi.set(__self__, "group_ids", group_ids)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="attributeToQueryBy")
    def attribute_to_query_by(self) -> pulumi.Input[str]:
        """
        Attribute of the action item to match against. Value must be one of `id`, `jira_issue_id`, `asana_task_id`, `shortcut_task_id`, `linear_issue_id`, `zendesk_ticket_id`, `trello_card_id`, `airtable_record_id`, `shortcut_story_id`, `github_issue_id`, `gitlab_issue_id`, `freshservice_ticket_id`, `freshservice_task_id`, `clickup_task_id`.
        """
        return pulumi.get(self, "attribute_to_query_by")

    @attribute_to_query_by.setter
    def attribute_to_query_by(self, value: pulumi.Input[str]):
        pulumi.set(self, "attribute_to_query_by", value)

    @property
    @pulumi.getter(name="queryValue")
    def query_value(self) -> pulumi.Input[str]:
        """
        Value that attribute*to*query_by to uses to match against
        """
        return pulumi.get(self, "query_value")

    @query_value.setter
    def query_value(self, value: pulumi.Input[str]):
        pulumi.set(self, "query_value", value)

    @property
    @pulumi.getter(name="assignedToUser")
    def assigned_to_user(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`.  The user this action item is assigned to
        """
        return pulumi.get(self, "assigned_to_user")

    @assigned_to_user.setter
    def assigned_to_user(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "assigned_to_user", value)

    @property
    @pulumi.getter(name="assignedToUserId")
    def assigned_to_user_id(self) -> Optional[pulumi.Input[str]]:
        """
        [DEPRECATED] Use assigned*to*user attribute instead. The user id this action item is assigned to
        """
        return pulumi.get(self, "assigned_to_user_id")

    @assigned_to_user_id.setter
    def assigned_to_user_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assigned_to_user_id", value)

    @property
    @pulumi.getter(name="customFieldsMapping")
    def custom_fields_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Custom field mappings. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "custom_fields_mapping")

    @custom_fields_mapping.setter
    def custom_fields_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fields_mapping", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The action item description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "group_ids")

    @group_ids.setter
    def group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_ids", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        The action item priority. Value must be one of `high`, `medium`, `low`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The action item status. Value must be one of `open`, `in_progress`, `cancelled`, `done`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def summary(self) -> Optional[pulumi.Input[str]]:
        """
        Brief description of the action item
        """
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskUpdateAirtableTableRecordTaskParamsArgs:
    def __init__(__self__, *,
                 base_key: pulumi.Input[str],
                 record_id: pulumi.Input[str],
                 table_name: pulumi.Input[str],
                 custom_fields_mapping: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] base_key: The base key
        :param pulumi.Input[str] record_id: The record id
        :param pulumi.Input[str] table_name: The table name
        :param pulumi.Input[str] custom_fields_mapping: Custom field mappings. Can contain liquid markup and need to be valid JSON
        """
        pulumi.set(__self__, "base_key", base_key)
        pulumi.set(__self__, "record_id", record_id)
        pulumi.set(__self__, "table_name", table_name)
        if custom_fields_mapping is not None:
            pulumi.set(__self__, "custom_fields_mapping", custom_fields_mapping)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="baseKey")
    def base_key(self) -> pulumi.Input[str]:
        """
        The base key
        """
        return pulumi.get(self, "base_key")

    @base_key.setter
    def base_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "base_key", value)

    @property
    @pulumi.getter(name="recordId")
    def record_id(self) -> pulumi.Input[str]:
        """
        The record id
        """
        return pulumi.get(self, "record_id")

    @record_id.setter
    def record_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "record_id", value)

    @property
    @pulumi.getter(name="tableName")
    def table_name(self) -> pulumi.Input[str]:
        """
        The table name
        """
        return pulumi.get(self, "table_name")

    @table_name.setter
    def table_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "table_name", value)

    @property
    @pulumi.getter(name="customFieldsMapping")
    def custom_fields_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Custom field mappings. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "custom_fields_mapping")

    @custom_fields_mapping.setter
    def custom_fields_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fields_mapping", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskUpdateAsanaTaskTaskParamsArgs:
    def __init__(__self__, *,
                 completion: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 task_id: pulumi.Input[str],
                 assign_user_email: Optional[pulumi.Input[str]] = None,
                 custom_fields_mapping: Optional[pulumi.Input[str]] = None,
                 dependency_direction: Optional[pulumi.Input[str]] = None,
                 dependent_task_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 due_date: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] completion: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[str] task_id: The task id
        :param pulumi.Input[str] assign_user_email: The assigned user's email
        :param pulumi.Input[str] custom_fields_mapping: Custom field mappings. Can contain liquid markup and need to be valid JSON
        :param pulumi.Input[str] dependency_direction: Value must be one of `blocking`, `blocked_by`.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dependent_task_ids: Dependent task ids. Supports liquid syntax
        :param pulumi.Input[str] due_date: The due date
        :param pulumi.Input[str] title: The task title
        """
        pulumi.set(__self__, "completion", completion)
        pulumi.set(__self__, "task_id", task_id)
        if assign_user_email is not None:
            pulumi.set(__self__, "assign_user_email", assign_user_email)
        if custom_fields_mapping is not None:
            pulumi.set(__self__, "custom_fields_mapping", custom_fields_mapping)
        if dependency_direction is not None:
            pulumi.set(__self__, "dependency_direction", dependency_direction)
        if dependent_task_ids is not None:
            pulumi.set(__self__, "dependent_task_ids", dependent_task_ids)
        if due_date is not None:
            pulumi.set(__self__, "due_date", due_date)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def completion(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "completion")

    @completion.setter
    def completion(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "completion", value)

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Input[str]:
        """
        The task id
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_id", value)

    @property
    @pulumi.getter(name="assignUserEmail")
    def assign_user_email(self) -> Optional[pulumi.Input[str]]:
        """
        The assigned user's email
        """
        return pulumi.get(self, "assign_user_email")

    @assign_user_email.setter
    def assign_user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_user_email", value)

    @property
    @pulumi.getter(name="customFieldsMapping")
    def custom_fields_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Custom field mappings. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "custom_fields_mapping")

    @custom_fields_mapping.setter
    def custom_fields_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fields_mapping", value)

    @property
    @pulumi.getter(name="dependencyDirection")
    def dependency_direction(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `blocking`, `blocked_by`.
        """
        return pulumi.get(self, "dependency_direction")

    @dependency_direction.setter
    def dependency_direction(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "dependency_direction", value)

    @property
    @pulumi.getter(name="dependentTaskIds")
    def dependent_task_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Dependent task ids. Supports liquid syntax
        """
        return pulumi.get(self, "dependent_task_ids")

    @dependent_task_ids.setter
    def dependent_task_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dependent_task_ids", value)

    @property
    @pulumi.getter(name="dueDate")
    def due_date(self) -> Optional[pulumi.Input[str]]:
        """
        The due date
        """
        return pulumi.get(self, "due_date")

    @due_date.setter
    def due_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "due_date", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The task title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class WorkflowTaskUpdateAttachedAlertsTaskParamsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: Value must be one of `acknowledged`, `resolved`.
        """
        pulumi.set(__self__, "status", status)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Value must be one of `acknowledged`, `resolved`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskUpdateClickupTaskTaskParamsArgs:
    def __init__(__self__, *,
                 task_id: pulumi.Input[str],
                 custom_fields_mapping: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 due_date: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 tags: Optional[pulumi.Input[str]] = None,
                 task_payload: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] task_id: The task id
        :param pulumi.Input[str] custom_fields_mapping: Custom field mappings. Can contain liquid markup and need to be valid JSON
        :param pulumi.Input[str] description: The task description
        :param pulumi.Input[str] due_date: The due date
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] priority: Map must contain two fields, `id` and `name`. The priority id and display name
        :param pulumi.Input[str] tags: The task tags
        :param pulumi.Input[str] task_payload: Additional ClickUp task attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON
        :param pulumi.Input[str] title: The task title
        """
        pulumi.set(__self__, "task_id", task_id)
        if custom_fields_mapping is not None:
            pulumi.set(__self__, "custom_fields_mapping", custom_fields_mapping)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if due_date is not None:
            pulumi.set(__self__, "due_date", due_date)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if task_payload is not None:
            pulumi.set(__self__, "task_payload", task_payload)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Input[str]:
        """
        The task id
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_id", value)

    @property
    @pulumi.getter(name="customFieldsMapping")
    def custom_fields_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Custom field mappings. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "custom_fields_mapping")

    @custom_fields_mapping.setter
    def custom_fields_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fields_mapping", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The task description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dueDate")
    def due_date(self) -> Optional[pulumi.Input[str]]:
        """
        The due date
        """
        return pulumi.get(self, "due_date")

    @due_date.setter
    def due_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "due_date", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The priority id and display name
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[str]]:
        """
        The task tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="taskPayload")
    def task_payload(self) -> Optional[pulumi.Input[str]]:
        """
        Additional ClickUp task attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "task_payload")

    @task_payload.setter
    def task_payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_payload", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The task title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class WorkflowTaskUpdateGithubIssueTaskParamsArgs:
    def __init__(__self__, *,
                 completion: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 issue_id: pulumi.Input[str],
                 body: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] completion: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[str] issue_id: The issue id
        :param pulumi.Input[str] body: The issue body
        :param pulumi.Input[str] title: The issue title
        """
        pulumi.set(__self__, "completion", completion)
        pulumi.set(__self__, "issue_id", issue_id)
        if body is not None:
            pulumi.set(__self__, "body", body)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def completion(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "completion")

    @completion.setter
    def completion(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "completion", value)

    @property
    @pulumi.getter(name="issueId")
    def issue_id(self) -> pulumi.Input[str]:
        """
        The issue id
        """
        return pulumi.get(self, "issue_id")

    @issue_id.setter
    def issue_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "issue_id", value)

    @property
    @pulumi.getter
    def body(self) -> Optional[pulumi.Input[str]]:
        """
        The issue body
        """
        return pulumi.get(self, "body")

    @body.setter
    def body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "body", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The issue title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class WorkflowTaskUpdateGitlabIssueTaskParamsArgs:
    def __init__(__self__, *,
                 completion: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 issue_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 due_date: Optional[pulumi.Input[str]] = None,
                 issue_type: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] completion: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[str] issue_id: The issue id
        :param pulumi.Input[str] description: The issue description
        :param pulumi.Input[str] due_date: The due date
        :param pulumi.Input[str] issue_type: The issue type. Value must be one of `issue`, `incident`, `test_case`, `task`.
        :param pulumi.Input[str] labels: The issue labels
        :param pulumi.Input[str] title: The issue title
        """
        pulumi.set(__self__, "completion", completion)
        pulumi.set(__self__, "issue_id", issue_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if due_date is not None:
            pulumi.set(__self__, "due_date", due_date)
        if issue_type is not None:
            pulumi.set(__self__, "issue_type", issue_type)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def completion(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "completion")

    @completion.setter
    def completion(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "completion", value)

    @property
    @pulumi.getter(name="issueId")
    def issue_id(self) -> pulumi.Input[str]:
        """
        The issue id
        """
        return pulumi.get(self, "issue_id")

    @issue_id.setter
    def issue_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "issue_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The issue description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dueDate")
    def due_date(self) -> Optional[pulumi.Input[str]]:
        """
        The due date
        """
        return pulumi.get(self, "due_date")

    @due_date.setter
    def due_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "due_date", value)

    @property
    @pulumi.getter(name="issueType")
    def issue_type(self) -> Optional[pulumi.Input[str]]:
        """
        The issue type. Value must be one of `issue`, `incident`, `test_case`, `task`.
        """
        return pulumi.get(self, "issue_type")

    @issue_type.setter
    def issue_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issue_type", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[str]]:
        """
        The issue labels
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The issue title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class WorkflowTaskUpdateGoogleCalendarEventTaskParamsArgs:
    def __init__(__self__, *,
                 event_id: pulumi.Input[str],
                 adjustment_days: Optional[pulumi.Input[int]] = None,
                 attendees: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 can_guests_invite_others: Optional[pulumi.Input[bool]] = None,
                 can_guests_modify_event: Optional[pulumi.Input[bool]] = None,
                 can_guests_see_other_guests: Optional[pulumi.Input[bool]] = None,
                 conference_solution_key: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 meeting_duration: Optional[pulumi.Input[str]] = None,
                 post_to_incident_timeline: Optional[pulumi.Input[bool]] = None,
                 post_to_slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskUpdateGoogleCalendarEventTaskParamsPostToSlackChannelArgs']]]] = None,
                 replace_attendees: Optional[pulumi.Input[bool]] = None,
                 send_updates: Optional[pulumi.Input[bool]] = None,
                 summary: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 time_of_meeting: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] event_id: The event ID
        :param pulumi.Input[int] adjustment_days: Days to adjust meeting by
        :param pulumi.Input[Sequence[pulumi.Input[str]]] attendees: Emails of attendees
        :param pulumi.Input[bool] can_guests_invite_others: Value must be one of true or false
        :param pulumi.Input[bool] can_guests_modify_event: Value must be one of true or false
        :param pulumi.Input[bool] can_guests_see_other_guests: Value must be one of true or false
        :param pulumi.Input[str] conference_solution_key: Sets the video conference type attached to the meeting. Value must be one of `eventHangout`, `eventNamedHangout`, `hangoutsMeet`, `addOn`.
        :param pulumi.Input[str] description: The event description
        :param pulumi.Input[str] meeting_duration: Meeting duration in format like '1 hour', '30 minutes'
        :param pulumi.Input[bool] post_to_incident_timeline: Value must be one of true or false
        :param pulumi.Input[bool] replace_attendees: Value must be one of true or false
        :param pulumi.Input[bool] send_updates: Send an email to the attendees notifying them of the event. Value must be one of true or false
        :param pulumi.Input[str] summary: The event summary
        :param pulumi.Input[str] time_of_meeting: Time of meeting in format HH:MM
        """
        pulumi.set(__self__, "event_id", event_id)
        if adjustment_days is not None:
            pulumi.set(__self__, "adjustment_days", adjustment_days)
        if attendees is not None:
            pulumi.set(__self__, "attendees", attendees)
        if can_guests_invite_others is not None:
            pulumi.set(__self__, "can_guests_invite_others", can_guests_invite_others)
        if can_guests_modify_event is not None:
            pulumi.set(__self__, "can_guests_modify_event", can_guests_modify_event)
        if can_guests_see_other_guests is not None:
            pulumi.set(__self__, "can_guests_see_other_guests", can_guests_see_other_guests)
        if conference_solution_key is not None:
            pulumi.set(__self__, "conference_solution_key", conference_solution_key)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if meeting_duration is not None:
            pulumi.set(__self__, "meeting_duration", meeting_duration)
        if post_to_incident_timeline is not None:
            pulumi.set(__self__, "post_to_incident_timeline", post_to_incident_timeline)
        if post_to_slack_channels is not None:
            pulumi.set(__self__, "post_to_slack_channels", post_to_slack_channels)
        if replace_attendees is not None:
            pulumi.set(__self__, "replace_attendees", replace_attendees)
        if send_updates is not None:
            pulumi.set(__self__, "send_updates", send_updates)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if time_of_meeting is not None:
            pulumi.set(__self__, "time_of_meeting", time_of_meeting)

    @property
    @pulumi.getter(name="eventId")
    def event_id(self) -> pulumi.Input[str]:
        """
        The event ID
        """
        return pulumi.get(self, "event_id")

    @event_id.setter
    def event_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "event_id", value)

    @property
    @pulumi.getter(name="adjustmentDays")
    def adjustment_days(self) -> Optional[pulumi.Input[int]]:
        """
        Days to adjust meeting by
        """
        return pulumi.get(self, "adjustment_days")

    @adjustment_days.setter
    def adjustment_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "adjustment_days", value)

    @property
    @pulumi.getter
    def attendees(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Emails of attendees
        """
        return pulumi.get(self, "attendees")

    @attendees.setter
    def attendees(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "attendees", value)

    @property
    @pulumi.getter(name="canGuestsInviteOthers")
    def can_guests_invite_others(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "can_guests_invite_others")

    @can_guests_invite_others.setter
    def can_guests_invite_others(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_guests_invite_others", value)

    @property
    @pulumi.getter(name="canGuestsModifyEvent")
    def can_guests_modify_event(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "can_guests_modify_event")

    @can_guests_modify_event.setter
    def can_guests_modify_event(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_guests_modify_event", value)

    @property
    @pulumi.getter(name="canGuestsSeeOtherGuests")
    def can_guests_see_other_guests(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "can_guests_see_other_guests")

    @can_guests_see_other_guests.setter
    def can_guests_see_other_guests(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "can_guests_see_other_guests", value)

    @property
    @pulumi.getter(name="conferenceSolutionKey")
    def conference_solution_key(self) -> Optional[pulumi.Input[str]]:
        """
        Sets the video conference type attached to the meeting. Value must be one of `eventHangout`, `eventNamedHangout`, `hangoutsMeet`, `addOn`.
        """
        return pulumi.get(self, "conference_solution_key")

    @conference_solution_key.setter
    def conference_solution_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "conference_solution_key", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The event description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="meetingDuration")
    def meeting_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Meeting duration in format like '1 hour', '30 minutes'
        """
        return pulumi.get(self, "meeting_duration")

    @meeting_duration.setter
    def meeting_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "meeting_duration", value)

    @property
    @pulumi.getter(name="postToIncidentTimeline")
    def post_to_incident_timeline(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "post_to_incident_timeline")

    @post_to_incident_timeline.setter
    def post_to_incident_timeline(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "post_to_incident_timeline", value)

    @property
    @pulumi.getter(name="postToSlackChannels")
    def post_to_slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskUpdateGoogleCalendarEventTaskParamsPostToSlackChannelArgs']]]]:
        return pulumi.get(self, "post_to_slack_channels")

    @post_to_slack_channels.setter
    def post_to_slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskUpdateGoogleCalendarEventTaskParamsPostToSlackChannelArgs']]]]):
        pulumi.set(self, "post_to_slack_channels", value)

    @property
    @pulumi.getter(name="replaceAttendees")
    def replace_attendees(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "replace_attendees")

    @replace_attendees.setter
    def replace_attendees(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "replace_attendees", value)

    @property
    @pulumi.getter(name="sendUpdates")
    def send_updates(self) -> Optional[pulumi.Input[bool]]:
        """
        Send an email to the attendees notifying them of the event. Value must be one of true or false
        """
        return pulumi.get(self, "send_updates")

    @send_updates.setter
    def send_updates(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_updates", value)

    @property
    @pulumi.getter
    def summary(self) -> Optional[pulumi.Input[str]]:
        """
        The event summary
        """
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="timeOfMeeting")
    def time_of_meeting(self) -> Optional[pulumi.Input[str]]:
        """
        Time of meeting in format HH:MM
        """
        return pulumi.get(self, "time_of_meeting")

    @time_of_meeting.setter
    def time_of_meeting(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_of_meeting", value)


@pulumi.input_type
class WorkflowTaskUpdateGoogleCalendarEventTaskParamsPostToSlackChannelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskUpdateGoogleDocsPageTaskParamsArgs:
    def __init__(__self__, *,
                 file_id: pulumi.Input[str],
                 content: Optional[pulumi.Input[str]] = None,
                 post_mortem_template_id: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 template_id: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] file_id: The Google Doc file ID
        :param pulumi.Input[str] content: The Google Doc content
        :param pulumi.Input[str] post_mortem_template_id: Retrospective template to use when updating page, if desired
        :param pulumi.Input[str] template_id: The Google Doc file ID to use as a template.
        :param pulumi.Input[str] title: The Google Doc title
        """
        pulumi.set(__self__, "file_id", file_id)
        if content is not None:
            pulumi.set(__self__, "content", content)
        if post_mortem_template_id is not None:
            pulumi.set(__self__, "post_mortem_template_id", post_mortem_template_id)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if template_id is not None:
            pulumi.set(__self__, "template_id", template_id)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> pulumi.Input[str]:
        """
        The Google Doc file ID
        """
        return pulumi.get(self, "file_id")

    @file_id.setter
    def file_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_id", value)

    @property
    @pulumi.getter
    def content(self) -> Optional[pulumi.Input[str]]:
        """
        The Google Doc content
        """
        return pulumi.get(self, "content")

    @content.setter
    def content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "content", value)

    @property
    @pulumi.getter(name="postMortemTemplateId")
    def post_mortem_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Retrospective template to use when updating page, if desired
        """
        return pulumi.get(self, "post_mortem_template_id")

    @post_mortem_template_id.setter
    def post_mortem_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_mortem_template_id", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="templateId")
    def template_id(self) -> Optional[pulumi.Input[str]]:
        """
        The Google Doc file ID to use as a template.
        """
        return pulumi.get(self, "template_id")

    @template_id.setter
    def template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "template_id", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The Google Doc title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class WorkflowTaskUpdateIncidentPostmortemTaskParamsArgs:
    def __init__(__self__, *,
                 postmortem_id: pulumi.Input[str],
                 status: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] postmortem_id: UUID of the retrospective that needs to be updated
        :param pulumi.Input[str] title: The incident title
        """
        pulumi.set(__self__, "postmortem_id", postmortem_id)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="postmortemId")
    def postmortem_id(self) -> pulumi.Input[str]:
        """
        UUID of the retrospective that needs to be updated
        """
        return pulumi.get(self, "postmortem_id")

    @postmortem_id.setter
    def postmortem_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "postmortem_id", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The incident title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class WorkflowTaskUpdateIncidentTaskParamsArgs:
    def __init__(__self__, *,
                 incident_id: pulumi.Input[str],
                 acknowledged_at: Optional[pulumi.Input[str]] = None,
                 attribute_to_query_by: Optional[pulumi.Input[str]] = None,
                 custom_fields_mapping: Optional[pulumi.Input[str]] = None,
                 detected_at: Optional[pulumi.Input[str]] = None,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 functionality_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_type_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 mitigated_at: Optional[pulumi.Input[str]] = None,
                 private: Optional[pulumi.Input[bool]] = None,
                 resolved_at: Optional[pulumi.Input[str]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 severity_id: Optional[pulumi.Input[str]] = None,
                 started_at: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 summary: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] incident_id: The incident id to update or id of any attribute on the incident
        :param pulumi.Input[str] attribute_to_query_by: Value must be one of `id`, `slug`, `sequential_id`, `pagerduty_incident_id`, `opsgenie_incident_id`, `victor_ops_incident_id`, `jira_issue_id`, `asana_task_id`, `shortcut_task_id`, `linear_issue_id`, `zendesk_ticket_id`, `trello_card_id`, `airtable_record_id`, `shortcut_story_id`, `github_issue_id`, `gitlab_issue_id`, `freshservice_ticket_id`, `freshservice_task_id`, `clickup_task_id`.
        :param pulumi.Input[str] custom_fields_mapping: Custom field mappings. Can contain liquid markup and need to be valid JSON
        :param pulumi.Input[bool] private: Value must be one of true or false
        :param pulumi.Input[str] summary: The incident summary
        :param pulumi.Input[str] title: The incident title
        """
        pulumi.set(__self__, "incident_id", incident_id)
        if acknowledged_at is not None:
            pulumi.set(__self__, "acknowledged_at", acknowledged_at)
        if attribute_to_query_by is not None:
            pulumi.set(__self__, "attribute_to_query_by", attribute_to_query_by)
        if custom_fields_mapping is not None:
            pulumi.set(__self__, "custom_fields_mapping", custom_fields_mapping)
        if detected_at is not None:
            pulumi.set(__self__, "detected_at", detected_at)
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if functionality_ids is not None:
            pulumi.set(__self__, "functionality_ids", functionality_ids)
        if group_ids is not None:
            pulumi.set(__self__, "group_ids", group_ids)
        if incident_type_ids is not None:
            pulumi.set(__self__, "incident_type_ids", incident_type_ids)
        if mitigated_at is not None:
            pulumi.set(__self__, "mitigated_at", mitigated_at)
        if private is not None:
            pulumi.set(__self__, "private", private)
        if resolved_at is not None:
            pulumi.set(__self__, "resolved_at", resolved_at)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if severity_id is not None:
            pulumi.set(__self__, "severity_id", severity_id)
        if started_at is not None:
            pulumi.set(__self__, "started_at", started_at)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if summary is not None:
            pulumi.set(__self__, "summary", summary)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="incidentId")
    def incident_id(self) -> pulumi.Input[str]:
        """
        The incident id to update or id of any attribute on the incident
        """
        return pulumi.get(self, "incident_id")

    @incident_id.setter
    def incident_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "incident_id", value)

    @property
    @pulumi.getter(name="acknowledgedAt")
    def acknowledged_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "acknowledged_at")

    @acknowledged_at.setter
    def acknowledged_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acknowledged_at", value)

    @property
    @pulumi.getter(name="attributeToQueryBy")
    def attribute_to_query_by(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `id`, `slug`, `sequential_id`, `pagerduty_incident_id`, `opsgenie_incident_id`, `victor_ops_incident_id`, `jira_issue_id`, `asana_task_id`, `shortcut_task_id`, `linear_issue_id`, `zendesk_ticket_id`, `trello_card_id`, `airtable_record_id`, `shortcut_story_id`, `github_issue_id`, `gitlab_issue_id`, `freshservice_ticket_id`, `freshservice_task_id`, `clickup_task_id`.
        """
        return pulumi.get(self, "attribute_to_query_by")

    @attribute_to_query_by.setter
    def attribute_to_query_by(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "attribute_to_query_by", value)

    @property
    @pulumi.getter(name="customFieldsMapping")
    def custom_fields_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Custom field mappings. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "custom_fields_mapping")

    @custom_fields_mapping.setter
    def custom_fields_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fields_mapping", value)

    @property
    @pulumi.getter(name="detectedAt")
    def detected_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "detected_at")

    @detected_at.setter
    def detected_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "detected_at", value)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environment_ids")

    @environment_ids.setter
    def environment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_ids", value)

    @property
    @pulumi.getter(name="functionalityIds")
    def functionality_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "functionality_ids")

    @functionality_ids.setter
    def functionality_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "functionality_ids", value)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "group_ids")

    @group_ids.setter
    def group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_ids", value)

    @property
    @pulumi.getter(name="incidentTypeIds")
    def incident_type_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "incident_type_ids")

    @incident_type_ids.setter
    def incident_type_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_type_ids", value)

    @property
    @pulumi.getter(name="mitigatedAt")
    def mitigated_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "mitigated_at")

    @mitigated_at.setter
    def mitigated_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mitigated_at", value)

    @property
    @pulumi.getter
    def private(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "private")

    @private.setter
    def private(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "private", value)

    @property
    @pulumi.getter(name="resolvedAt")
    def resolved_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "resolved_at")

    @resolved_at.setter
    def resolved_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolved_at", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter(name="severityId")
    def severity_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "severity_id")

    @severity_id.setter
    def severity_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity_id", value)

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "started_at")

    @started_at.setter
    def started_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "started_at", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def summary(self) -> Optional[pulumi.Input[str]]:
        """
        The incident summary
        """
        return pulumi.get(self, "summary")

    @summary.setter
    def summary(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "summary", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The incident title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class WorkflowTaskUpdateJiraIssueTaskParamsArgs:
    def __init__(__self__, *,
                 issue_id: pulumi.Input[str],
                 project_key: pulumi.Input[str],
                 assign_user_email: Optional[pulumi.Input[str]] = None,
                 custom_fields_mapping: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 due_date: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 reporter_user_email: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 update_payload: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] issue_id: The issue id
        :param pulumi.Input[str] project_key: The project key
        :param pulumi.Input[str] assign_user_email: The assigned user's email
        :param pulumi.Input[str] custom_fields_mapping: Custom field mappings. Can contain liquid markup and need to be valid JSON
        :param pulumi.Input[str] description: The issue description
        :param pulumi.Input[str] due_date: The due date
        :param pulumi.Input[str] labels: The issue labels
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] priority: Map must contain two fields, `id` and `name`. The priority id and display name
        :param pulumi.Input[str] reporter_user_email: The reporter user's email
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] status: Map must contain two fields, `id` and `name`. The status id and display name
        :param pulumi.Input[str] title: The issue title
        :param pulumi.Input[str] update_payload: Update payload. Can contain liquid markup and need to be valid JSON
        """
        pulumi.set(__self__, "issue_id", issue_id)
        pulumi.set(__self__, "project_key", project_key)
        if assign_user_email is not None:
            pulumi.set(__self__, "assign_user_email", assign_user_email)
        if custom_fields_mapping is not None:
            pulumi.set(__self__, "custom_fields_mapping", custom_fields_mapping)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if due_date is not None:
            pulumi.set(__self__, "due_date", due_date)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if reporter_user_email is not None:
            pulumi.set(__self__, "reporter_user_email", reporter_user_email)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if update_payload is not None:
            pulumi.set(__self__, "update_payload", update_payload)

    @property
    @pulumi.getter(name="issueId")
    def issue_id(self) -> pulumi.Input[str]:
        """
        The issue id
        """
        return pulumi.get(self, "issue_id")

    @issue_id.setter
    def issue_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "issue_id", value)

    @property
    @pulumi.getter(name="projectKey")
    def project_key(self) -> pulumi.Input[str]:
        """
        The project key
        """
        return pulumi.get(self, "project_key")

    @project_key.setter
    def project_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_key", value)

    @property
    @pulumi.getter(name="assignUserEmail")
    def assign_user_email(self) -> Optional[pulumi.Input[str]]:
        """
        The assigned user's email
        """
        return pulumi.get(self, "assign_user_email")

    @assign_user_email.setter
    def assign_user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_user_email", value)

    @property
    @pulumi.getter(name="customFieldsMapping")
    def custom_fields_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Custom field mappings. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "custom_fields_mapping")

    @custom_fields_mapping.setter
    def custom_fields_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fields_mapping", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The issue description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dueDate")
    def due_date(self) -> Optional[pulumi.Input[str]]:
        """
        The due date
        """
        return pulumi.get(self, "due_date")

    @due_date.setter
    def due_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "due_date", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[str]]:
        """
        The issue labels
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The priority id and display name
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="reporterUserEmail")
    def reporter_user_email(self) -> Optional[pulumi.Input[str]]:
        """
        The reporter user's email
        """
        return pulumi.get(self, "reporter_user_email")

    @reporter_user_email.setter
    def reporter_user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reporter_user_email", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The status id and display name
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The issue title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="updatePayload")
    def update_payload(self) -> Optional[pulumi.Input[str]]:
        """
        Update payload. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "update_payload")

    @update_payload.setter
    def update_payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "update_payload", value)


@pulumi.input_type
class WorkflowTaskUpdateLinearIssueTaskParamsArgs:
    def __init__(__self__, *,
                 issue_id: pulumi.Input[str],
                 assign_user_email: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskUpdateLinearIssueTaskParamsLabelArgs']]]] = None,
                 priority: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 project: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] issue_id: The issue id
        :param pulumi.Input[str] assign_user_email: The assigned user's email
        :param pulumi.Input[str] description: The issue description
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] priority: Map must contain two fields, `id` and `name`. The priority id and display name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] project: Map must contain two fields, `id` and `name`. The project id and display name
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] state: Map must contain two fields, `id` and `name`. The state id and display name
        :param pulumi.Input[str] title: The issue title
        """
        pulumi.set(__self__, "issue_id", issue_id)
        if assign_user_email is not None:
            pulumi.set(__self__, "assign_user_email", assign_user_email)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if project is not None:
            pulumi.set(__self__, "project", project)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="issueId")
    def issue_id(self) -> pulumi.Input[str]:
        """
        The issue id
        """
        return pulumi.get(self, "issue_id")

    @issue_id.setter
    def issue_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "issue_id", value)

    @property
    @pulumi.getter(name="assignUserEmail")
    def assign_user_email(self) -> Optional[pulumi.Input[str]]:
        """
        The assigned user's email
        """
        return pulumi.get(self, "assign_user_email")

    @assign_user_email.setter
    def assign_user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assign_user_email", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The issue description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskUpdateLinearIssueTaskParamsLabelArgs']]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskUpdateLinearIssueTaskParamsLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The priority id and display name
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def project(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The project id and display name
        """
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The state id and display name
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The issue title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class WorkflowTaskUpdateLinearIssueTaskParamsLabelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskUpdateNotionPageTaskParamsArgs:
    def __init__(__self__, *,
                 file_id: pulumi.Input[str],
                 post_mortem_template_id: Optional[pulumi.Input[str]] = None,
                 show_action_items_as_table: Optional[pulumi.Input[bool]] = None,
                 show_timeline_as_table: Optional[pulumi.Input[bool]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] file_id: The Notion page ID
        :param pulumi.Input[str] post_mortem_template_id: Retrospective template to use when creating page task, if desired
        :param pulumi.Input[bool] show_action_items_as_table: Value must be one of true or false
        :param pulumi.Input[bool] show_timeline_as_table: Value must be one of true or false
        :param pulumi.Input[str] title: The Notion page title
        """
        pulumi.set(__self__, "file_id", file_id)
        if post_mortem_template_id is not None:
            pulumi.set(__self__, "post_mortem_template_id", post_mortem_template_id)
        if show_action_items_as_table is not None:
            pulumi.set(__self__, "show_action_items_as_table", show_action_items_as_table)
        if show_timeline_as_table is not None:
            pulumi.set(__self__, "show_timeline_as_table", show_timeline_as_table)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="fileId")
    def file_id(self) -> pulumi.Input[str]:
        """
        The Notion page ID
        """
        return pulumi.get(self, "file_id")

    @file_id.setter
    def file_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "file_id", value)

    @property
    @pulumi.getter(name="postMortemTemplateId")
    def post_mortem_template_id(self) -> Optional[pulumi.Input[str]]:
        """
        Retrospective template to use when creating page task, if desired
        """
        return pulumi.get(self, "post_mortem_template_id")

    @post_mortem_template_id.setter
    def post_mortem_template_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "post_mortem_template_id", value)

    @property
    @pulumi.getter(name="showActionItemsAsTable")
    def show_action_items_as_table(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "show_action_items_as_table")

    @show_action_items_as_table.setter
    def show_action_items_as_table(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_action_items_as_table", value)

    @property
    @pulumi.getter(name="showTimelineAsTable")
    def show_timeline_as_table(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "show_timeline_as_table")

    @show_timeline_as_table.setter
    def show_timeline_as_table(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_timeline_as_table", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The Notion page title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class WorkflowTaskUpdateOpsgenieAlertTaskParamsArgs:
    def __init__(__self__, *,
                 alert_id: pulumi.Input[str],
                 completion: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 priority: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] alert_id: Opsgenie Alert ID
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] completion: Map must contain two fields, `id` and `name`.
        :param pulumi.Input[str] priority: Value must be one of `P1`, `P2`, `P3`, `P4`, `P5`, `auto`.
        :param pulumi.Input[str] description: Description field of the alert that is generally used to provide a detailed information about the alert
        :param pulumi.Input[str] message: Message of the alert
        """
        pulumi.set(__self__, "alert_id", alert_id)
        pulumi.set(__self__, "completion", completion)
        pulumi.set(__self__, "priority", priority)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="alertId")
    def alert_id(self) -> pulumi.Input[str]:
        """
        Opsgenie Alert ID
        """
        return pulumi.get(self, "alert_id")

    @alert_id.setter
    def alert_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "alert_id", value)

    @property
    @pulumi.getter
    def completion(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "completion")

    @completion.setter
    def completion(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "completion", value)

    @property
    @pulumi.getter
    def priority(self) -> pulumi.Input[str]:
        """
        Value must be one of `P1`, `P2`, `P3`, `P4`, `P5`, `auto`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: pulumi.Input[str]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description field of the alert that is generally used to provide a detailed information about the alert
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message of the alert
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskUpdateOpsgenieIncidentTaskParamsArgs:
    def __init__(__self__, *,
                 opsgenie_incident_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] opsgenie_incident_id: The Opsgenie incident ID, this can also be a Rootly incident variable
        :param pulumi.Input[str] description: Description field of the alert that is generally used to provide a detailed information about the alert
        :param pulumi.Input[str] message: Message of the alert
        :param pulumi.Input[str] priority: Value must be one of `P1`, `P2`, `P3`, `P4`, `P5`, `auto`.
        :param pulumi.Input[str] status: Value must be one of `resolve`, `open`, `close`, `auto`.
        """
        pulumi.set(__self__, "opsgenie_incident_id", opsgenie_incident_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter(name="opsgenieIncidentId")
    def opsgenie_incident_id(self) -> pulumi.Input[str]:
        """
        The Opsgenie incident ID, this can also be a Rootly incident variable
        """
        return pulumi.get(self, "opsgenie_incident_id")

    @opsgenie_incident_id.setter
    def opsgenie_incident_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "opsgenie_incident_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description field of the alert that is generally used to provide a detailed information about the alert
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message of the alert
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `P1`, `P2`, `P3`, `P4`, `P5`, `auto`.
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `resolve`, `open`, `close`, `auto`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskUpdatePagerdutyIncidentTaskParamsArgs:
    def __init__(__self__, *,
                 pagerduty_incident_id: pulumi.Input[str],
                 escalation_level: Optional[pulumi.Input[int]] = None,
                 priority: Optional[pulumi.Input[str]] = None,
                 resolution: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 urgency: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] pagerduty_incident_id: Pagerduty incident id
        :param pulumi.Input[int] escalation_level: Escalation level of policy attached to incident
        :param pulumi.Input[str] priority: PagerDuty incident priority, selecting auto will let Rootly auto map our incident severity
        :param pulumi.Input[str] resolution: A message outlining the incident's resolution in PagerDuty
        :param pulumi.Input[str] status: Value must be one of `resolved`, `acknowledged`, `auto`.
        :param pulumi.Input[str] title: Title to update to
        :param pulumi.Input[str] urgency: PagerDuty incident urgency, selecting auto will let Rootly auto map our incident severity. Value must be one of `high`, `low`, `auto`.
        """
        pulumi.set(__self__, "pagerduty_incident_id", pagerduty_incident_id)
        if escalation_level is not None:
            pulumi.set(__self__, "escalation_level", escalation_level)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if resolution is not None:
            pulumi.set(__self__, "resolution", resolution)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if urgency is not None:
            pulumi.set(__self__, "urgency", urgency)

    @property
    @pulumi.getter(name="pagerdutyIncidentId")
    def pagerduty_incident_id(self) -> pulumi.Input[str]:
        """
        Pagerduty incident id
        """
        return pulumi.get(self, "pagerduty_incident_id")

    @pagerduty_incident_id.setter
    def pagerduty_incident_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "pagerduty_incident_id", value)

    @property
    @pulumi.getter(name="escalationLevel")
    def escalation_level(self) -> Optional[pulumi.Input[int]]:
        """
        Escalation level of policy attached to incident
        """
        return pulumi.get(self, "escalation_level")

    @escalation_level.setter
    def escalation_level(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "escalation_level", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[str]]:
        """
        PagerDuty incident priority, selecting auto will let Rootly auto map our incident severity
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def resolution(self) -> Optional[pulumi.Input[str]]:
        """
        A message outlining the incident's resolution in PagerDuty
        """
        return pulumi.get(self, "resolution")

    @resolution.setter
    def resolution(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `resolved`, `acknowledged`, `auto`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Title to update to
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def urgency(self) -> Optional[pulumi.Input[str]]:
        """
        PagerDuty incident urgency, selecting auto will let Rootly auto map our incident severity. Value must be one of `high`, `low`, `auto`.
        """
        return pulumi.get(self, "urgency")

    @urgency.setter
    def urgency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "urgency", value)


@pulumi.input_type
class WorkflowTaskUpdatePagertreeAlertTaskParamsArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 incident: Optional[pulumi.Input[bool]] = None,
                 pagertree_alert_id: Optional[pulumi.Input[str]] = None,
                 severity: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 teams: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskUpdatePagertreeAlertTaskParamsTeamArgs']]]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 urgency: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskUpdatePagertreeAlertTaskParamsUserArgs']]]] = None):
        """
        :param pulumi.Input[str] description: Description of alert as text
        :param pulumi.Input[bool] incident: Setting to true makes an alert a Pagertree incident. Value must be one of true or false
        :param pulumi.Input[str] pagertree_alert_id: The prefix ID of the Pagertree alert
        :param pulumi.Input[str] severity: Value must be one of `auto`, `SEV-1`, `SEV-2`, `SEV-3`, `SEV-4`.
        :param pulumi.Input[str] title: Title of alert as text
        :param pulumi.Input[str] urgency: Value must be one of `auto`, `critical`, `high`, `medium`, `low`.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if incident is not None:
            pulumi.set(__self__, "incident", incident)
        if pagertree_alert_id is not None:
            pulumi.set(__self__, "pagertree_alert_id", pagertree_alert_id)
        if severity is not None:
            pulumi.set(__self__, "severity", severity)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if teams is not None:
            pulumi.set(__self__, "teams", teams)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if urgency is not None:
            pulumi.set(__self__, "urgency", urgency)
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of alert as text
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def incident(self) -> Optional[pulumi.Input[bool]]:
        """
        Setting to true makes an alert a Pagertree incident. Value must be one of true or false
        """
        return pulumi.get(self, "incident")

    @incident.setter
    def incident(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "incident", value)

    @property
    @pulumi.getter(name="pagertreeAlertId")
    def pagertree_alert_id(self) -> Optional[pulumi.Input[str]]:
        """
        The prefix ID of the Pagertree alert
        """
        return pulumi.get(self, "pagertree_alert_id")

    @pagertree_alert_id.setter
    def pagertree_alert_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "pagertree_alert_id", value)

    @property
    @pulumi.getter
    def severity(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `auto`, `SEV-1`, `SEV-2`, `SEV-3`, `SEV-4`.
        """
        return pulumi.get(self, "severity")

    @severity.setter
    def severity(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "severity", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def teams(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskUpdatePagertreeAlertTaskParamsTeamArgs']]]]:
        return pulumi.get(self, "teams")

    @teams.setter
    def teams(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskUpdatePagertreeAlertTaskParamsTeamArgs']]]]):
        pulumi.set(self, "teams", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        Title of alert as text
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter
    def urgency(self) -> Optional[pulumi.Input[str]]:
        """
        Value must be one of `auto`, `critical`, `high`, `medium`, `low`.
        """
        return pulumi.get(self, "urgency")

    @urgency.setter
    def urgency(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "urgency", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskUpdatePagertreeAlertTaskParamsUserArgs']]]]:
        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskUpdatePagertreeAlertTaskParamsUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class WorkflowTaskUpdatePagertreeAlertTaskParamsTeamArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskUpdatePagertreeAlertTaskParamsUserArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskUpdateServiceNowIncidentTaskParamsArgs:
    def __init__(__self__, *,
                 incident_id: pulumi.Input[str],
                 completion: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 custom_fields_mapping: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] incident_id: The incident id
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] completion: Map must contain two fields, `id` and `name`. The completion id and display name
        :param pulumi.Input[str] custom_fields_mapping: Custom field mappings. Can contain liquid markup and need to be valid JSON
        :param pulumi.Input[str] description: The incident description
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] priority: Map must contain two fields, `id` and `name`. The priority id and display name
        :param pulumi.Input[str] title: The incident title
        """
        pulumi.set(__self__, "incident_id", incident_id)
        if completion is not None:
            pulumi.set(__self__, "completion", completion)
        if custom_fields_mapping is not None:
            pulumi.set(__self__, "custom_fields_mapping", custom_fields_mapping)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter(name="incidentId")
    def incident_id(self) -> pulumi.Input[str]:
        """
        The incident id
        """
        return pulumi.get(self, "incident_id")

    @incident_id.setter
    def incident_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "incident_id", value)

    @property
    @pulumi.getter
    def completion(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The completion id and display name
        """
        return pulumi.get(self, "completion")

    @completion.setter
    def completion(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "completion", value)

    @property
    @pulumi.getter(name="customFieldsMapping")
    def custom_fields_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Custom field mappings. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "custom_fields_mapping")

    @custom_fields_mapping.setter
    def custom_fields_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fields_mapping", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The incident description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The priority id and display name
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The incident title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class WorkflowTaskUpdateShortcutStoryTaskParamsArgs:
    def __init__(__self__, *,
                 archivation: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 story_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 due_date: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] archivation: Map must contain two fields, `id` and `name`. The archivation id and display name
        :param pulumi.Input[str] story_id: The story id
        :param pulumi.Input[str] description: The incident description
        :param pulumi.Input[str] due_date: The due date
        :param pulumi.Input[str] labels: The story labels
        :param pulumi.Input[str] title: The incident title
        """
        pulumi.set(__self__, "archivation", archivation)
        pulumi.set(__self__, "story_id", story_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if due_date is not None:
            pulumi.set(__self__, "due_date", due_date)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def archivation(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`. The archivation id and display name
        """
        return pulumi.get(self, "archivation")

    @archivation.setter
    def archivation(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "archivation", value)

    @property
    @pulumi.getter(name="storyId")
    def story_id(self) -> pulumi.Input[str]:
        """
        The story id
        """
        return pulumi.get(self, "story_id")

    @story_id.setter
    def story_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "story_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The incident description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dueDate")
    def due_date(self) -> Optional[pulumi.Input[str]]:
        """
        The due date
        """
        return pulumi.get(self, "due_date")

    @due_date.setter
    def due_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "due_date", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[str]]:
        """
        The story labels
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The incident title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class WorkflowTaskUpdateShortcutTaskTaskParamsArgs:
    def __init__(__self__, *,
                 completion: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 parent_story_id: pulumi.Input[str],
                 task_id: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] completion: Map must contain two fields, `id` and `name`. The completion id and display name
        :param pulumi.Input[str] parent_story_id: The parent story
        :param pulumi.Input[str] task_id: The task id
        :param pulumi.Input[str] description: The task description
        """
        pulumi.set(__self__, "completion", completion)
        pulumi.set(__self__, "parent_story_id", parent_story_id)
        pulumi.set(__self__, "task_id", task_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def completion(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`. The completion id and display name
        """
        return pulumi.get(self, "completion")

    @completion.setter
    def completion(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "completion", value)

    @property
    @pulumi.getter(name="parentStoryId")
    def parent_story_id(self) -> pulumi.Input[str]:
        """
        The parent story
        """
        return pulumi.get(self, "parent_story_id")

    @parent_story_id.setter
    def parent_story_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "parent_story_id", value)

    @property
    @pulumi.getter(name="taskId")
    def task_id(self) -> pulumi.Input[str]:
        """
        The task id
        """
        return pulumi.get(self, "task_id")

    @task_id.setter
    def task_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "task_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The task description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskUpdateSlackChannelTopicTaskParamsArgs:
    def __init__(__self__, *,
                 channel: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 topic: pulumi.Input[str],
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] channel: Map must contain two fields, `id` and `name`.
        """
        pulumi.set(__self__, "channel", channel)
        pulumi.set(__self__, "topic", topic)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def channel(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`.
        """
        return pulumi.get(self, "channel")

    @channel.setter
    def channel(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "channel", value)

    @property
    @pulumi.getter
    def topic(self) -> pulumi.Input[str]:
        return pulumi.get(self, "topic")

    @topic.setter
    def topic(self, value: pulumi.Input[str]):
        pulumi.set(self, "topic", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskUpdateStatusTaskParamsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 inactivity_timeout: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: Value must be one of `in_triage`, `started`, `mitigated`, `resolved`, `cancelled`.
        :param pulumi.Input[str] inactivity_timeout: In format '1 hour', '1 day', etc
        """
        pulumi.set(__self__, "status", status)
        if inactivity_timeout is not None:
            pulumi.set(__self__, "inactivity_timeout", inactivity_timeout)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Value must be one of `in_triage`, `started`, `mitigated`, `resolved`, `cancelled`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="inactivityTimeout")
    def inactivity_timeout(self) -> Optional[pulumi.Input[str]]:
        """
        In format '1 hour', '1 day', etc
        """
        return pulumi.get(self, "inactivity_timeout")

    @inactivity_timeout.setter
    def inactivity_timeout(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "inactivity_timeout", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskUpdateTrelloCardTaskParamsArgs:
    def __init__(__self__, *,
                 archivation: pulumi.Input[Mapping[str, pulumi.Input[str]]],
                 card_id: pulumi.Input[str],
                 board: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 due_date: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskUpdateTrelloCardTaskParamsLabelArgs']]]] = None,
                 list: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] archivation: Map must contain two fields, `id` and `name`. The archivation id and display name
        :param pulumi.Input[str] card_id: The card id
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] board: Map must contain two fields, `id` and `name`. The board id and display name
        :param pulumi.Input[str] description: The card description
        :param pulumi.Input[str] due_date: The due date
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] list: Map must contain two fields, `id` and `name`. The list id and display name
        :param pulumi.Input[str] title: The card title
        """
        pulumi.set(__self__, "archivation", archivation)
        pulumi.set(__self__, "card_id", card_id)
        if board is not None:
            pulumi.set(__self__, "board", board)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if due_date is not None:
            pulumi.set(__self__, "due_date", due_date)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if list is not None:
            pulumi.set(__self__, "list", list)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def archivation(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        Map must contain two fields, `id` and `name`. The archivation id and display name
        """
        return pulumi.get(self, "archivation")

    @archivation.setter
    def archivation(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "archivation", value)

    @property
    @pulumi.getter(name="cardId")
    def card_id(self) -> pulumi.Input[str]:
        """
        The card id
        """
        return pulumi.get(self, "card_id")

    @card_id.setter
    def card_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "card_id", value)

    @property
    @pulumi.getter
    def board(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The board id and display name
        """
        return pulumi.get(self, "board")

    @board.setter
    def board(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "board", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The card description
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="dueDate")
    def due_date(self) -> Optional[pulumi.Input[str]]:
        """
        The due date
        """
        return pulumi.get(self, "due_date")

    @due_date.setter
    def due_date(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "due_date", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskUpdateTrelloCardTaskParamsLabelArgs']]]]:
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['WorkflowTaskUpdateTrelloCardTaskParamsLabelArgs']]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def list(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The list id and display name
        """
        return pulumi.get(self, "list")

    @list.setter
    def list(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "list", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The card title
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class WorkflowTaskUpdateTrelloCardTaskParamsLabelArgs:
    def __init__(__self__, *,
                 id: pulumi.Input[str],
                 name: pulumi.Input[str]):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: pulumi.Input[str]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class WorkflowTaskUpdateVictorOpsIncidentTaskParamsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 victor_ops_incident_id: pulumi.Input[str],
                 resolution_message: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] status: Value must be one of `resolve`, `ack`, `auto`.
        :param pulumi.Input[str] victor_ops_incident_id: The victor_ops incident ID, this can also be a Rootly incident variable
        :param pulumi.Input[str] resolution_message: Resolution message
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "victor_ops_incident_id", victor_ops_incident_id)
        if resolution_message is not None:
            pulumi.set(__self__, "resolution_message", resolution_message)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Value must be one of `resolve`, `ack`, `auto`.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter(name="victorOpsIncidentId")
    def victor_ops_incident_id(self) -> pulumi.Input[str]:
        """
        The victor_ops incident ID, this can also be a Rootly incident variable
        """
        return pulumi.get(self, "victor_ops_incident_id")

    @victor_ops_incident_id.setter
    def victor_ops_incident_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "victor_ops_incident_id", value)

    @property
    @pulumi.getter(name="resolutionMessage")
    def resolution_message(self) -> Optional[pulumi.Input[str]]:
        """
        Resolution message
        """
        return pulumi.get(self, "resolution_message")

    @resolution_message.setter
    def resolution_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "resolution_message", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)


@pulumi.input_type
class WorkflowTaskUpdateZendeskTicketTaskParamsArgs:
    def __init__(__self__, *,
                 ticket_id: pulumi.Input[str],
                 completion: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 custom_fields_mapping: Optional[pulumi.Input[str]] = None,
                 priority: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 subject: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[str]] = None,
                 task_type: Optional[pulumi.Input[str]] = None,
                 ticket_payload: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] ticket_id: The ticket id
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] completion: Map must contain two fields, `id` and `name`. The completion id and display name
        :param pulumi.Input[str] custom_fields_mapping: Custom field mappings. Can contain liquid markup and need to be valid JSON
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] priority: Map must contain two fields, `id` and `name`. The priority id and display name
        :param pulumi.Input[str] subject: The ticket subject
        :param pulumi.Input[str] tags: The ticket tags
        :param pulumi.Input[str] ticket_payload: Additional Zendesk ticket attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON
        """
        pulumi.set(__self__, "ticket_id", ticket_id)
        if completion is not None:
            pulumi.set(__self__, "completion", completion)
        if custom_fields_mapping is not None:
            pulumi.set(__self__, "custom_fields_mapping", custom_fields_mapping)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if task_type is not None:
            pulumi.set(__self__, "task_type", task_type)
        if ticket_payload is not None:
            pulumi.set(__self__, "ticket_payload", ticket_payload)

    @property
    @pulumi.getter(name="ticketId")
    def ticket_id(self) -> pulumi.Input[str]:
        """
        The ticket id
        """
        return pulumi.get(self, "ticket_id")

    @ticket_id.setter
    def ticket_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "ticket_id", value)

    @property
    @pulumi.getter
    def completion(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The completion id and display name
        """
        return pulumi.get(self, "completion")

    @completion.setter
    def completion(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "completion", value)

    @property
    @pulumi.getter(name="customFieldsMapping")
    def custom_fields_mapping(self) -> Optional[pulumi.Input[str]]:
        """
        Custom field mappings. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "custom_fields_mapping")

    @custom_fields_mapping.setter
    def custom_fields_mapping(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_fields_mapping", value)

    @property
    @pulumi.getter
    def priority(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Map must contain two fields, `id` and `name`. The priority id and display name
        """
        return pulumi.get(self, "priority")

    @priority.setter
    def priority(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "priority", value)

    @property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input[str]]:
        """
        The ticket subject
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[str]]:
        """
        The ticket tags
        """
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter(name="taskType")
    def task_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "task_type")

    @task_type.setter
    def task_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "task_type", value)

    @property
    @pulumi.getter(name="ticketPayload")
    def ticket_payload(self) -> Optional[pulumi.Input[str]]:
        """
        Additional Zendesk ticket attributes. Will be merged into whatever was specified in this tasks current parameters. Can contain liquid markup and need to be valid JSON
        """
        return pulumi.get(self, "ticket_payload")

    @ticket_payload.setter
    def ticket_payload(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ticket_payload", value)


