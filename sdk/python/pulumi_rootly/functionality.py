# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['FunctionalityArgs', 'Functionality']

@pulumi.input_type
class FunctionalityArgs:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owners_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owners_user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 public_description: Optional[pulumi.Input[str]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slack_aliases: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionalitySlackAliasArgs']]]] = None,
                 slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionalitySlackChannelArgs']]]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Functionality resource.
        :param pulumi.Input[str] color: The hex color of the functionality
        :param pulumi.Input[str] description: The description of the functionality
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_ids: Environments associated with this functionality
        :param pulumi.Input[str] name: The name of the functionality
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notify_emails: Emails attached to the functionality
        :param pulumi.Input[Sequence[pulumi.Input[str]]] owners_group_ids: Owner Teams associated with this functionality
        :param pulumi.Input[Sequence[pulumi.Input[int]]] owners_user_ids: Owner Users associated with this service
        :param pulumi.Input[int] position: Position of the functionality
        :param pulumi.Input[str] public_description: The public description of the functionality
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_ids: Services associated with this functionality
        :param pulumi.Input[Sequence[pulumi.Input['FunctionalitySlackAliasArgs']]] slack_aliases: Slack Aliases associated with this service
        :param pulumi.Input[Sequence[pulumi.Input['FunctionalitySlackChannelArgs']]] slack_channels: Slack Channels associated with this service
        :param pulumi.Input[str] slug: The slug of the functionality
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_emails is not None:
            pulumi.set(__self__, "notify_emails", notify_emails)
        if owners_group_ids is not None:
            pulumi.set(__self__, "owners_group_ids", owners_group_ids)
        if owners_user_ids is not None:
            pulumi.set(__self__, "owners_user_ids", owners_user_ids)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if public_description is not None:
            pulumi.set(__self__, "public_description", public_description)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if slack_aliases is not None:
            pulumi.set(__self__, "slack_aliases", slack_aliases)
        if slack_channels is not None:
            pulumi.set(__self__, "slack_channels", slack_channels)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        The hex color of the functionality
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the functionality
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Environments associated with this functionality
        """
        return pulumi.get(self, "environment_ids")

    @environment_ids.setter
    def environment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_ids", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the functionality
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifyEmails")
    def notify_emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Emails attached to the functionality
        """
        return pulumi.get(self, "notify_emails")

    @notify_emails.setter
    def notify_emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "notify_emails", value)

    @property
    @pulumi.getter(name="ownersGroupIds")
    def owners_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Owner Teams associated with this functionality
        """
        return pulumi.get(self, "owners_group_ids")

    @owners_group_ids.setter
    def owners_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "owners_group_ids", value)

    @property
    @pulumi.getter(name="ownersUserIds")
    def owners_user_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Owner Users associated with this service
        """
        return pulumi.get(self, "owners_user_ids")

    @owners_user_ids.setter
    def owners_user_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "owners_user_ids", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        Position of the functionality
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter(name="publicDescription")
    def public_description(self) -> Optional[pulumi.Input[str]]:
        """
        The public description of the functionality
        """
        return pulumi.get(self, "public_description")

    @public_description.setter
    def public_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_description", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Services associated with this functionality
        """
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter(name="slackAliases")
    def slack_aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionalitySlackAliasArgs']]]]:
        """
        Slack Aliases associated with this service
        """
        return pulumi.get(self, "slack_aliases")

    @slack_aliases.setter
    def slack_aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionalitySlackAliasArgs']]]]):
        pulumi.set(self, "slack_aliases", value)

    @property
    @pulumi.getter(name="slackChannels")
    def slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionalitySlackChannelArgs']]]]:
        """
        Slack Channels associated with this service
        """
        return pulumi.get(self, "slack_channels")

    @slack_channels.setter
    def slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionalitySlackChannelArgs']]]]):
        pulumi.set(self, "slack_channels", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the functionality
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class _FunctionalityState:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owners_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owners_user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 public_description: Optional[pulumi.Input[str]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slack_aliases: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionalitySlackAliasArgs']]]] = None,
                 slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionalitySlackChannelArgs']]]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Functionality resources.
        :param pulumi.Input[str] color: The hex color of the functionality
        :param pulumi.Input[str] description: The description of the functionality
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_ids: Environments associated with this functionality
        :param pulumi.Input[str] name: The name of the functionality
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notify_emails: Emails attached to the functionality
        :param pulumi.Input[Sequence[pulumi.Input[str]]] owners_group_ids: Owner Teams associated with this functionality
        :param pulumi.Input[Sequence[pulumi.Input[int]]] owners_user_ids: Owner Users associated with this service
        :param pulumi.Input[int] position: Position of the functionality
        :param pulumi.Input[str] public_description: The public description of the functionality
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_ids: Services associated with this functionality
        :param pulumi.Input[Sequence[pulumi.Input['FunctionalitySlackAliasArgs']]] slack_aliases: Slack Aliases associated with this service
        :param pulumi.Input[Sequence[pulumi.Input['FunctionalitySlackChannelArgs']]] slack_channels: Slack Channels associated with this service
        :param pulumi.Input[str] slug: The slug of the functionality
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if notify_emails is not None:
            pulumi.set(__self__, "notify_emails", notify_emails)
        if owners_group_ids is not None:
            pulumi.set(__self__, "owners_group_ids", owners_group_ids)
        if owners_user_ids is not None:
            pulumi.set(__self__, "owners_user_ids", owners_user_ids)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if public_description is not None:
            pulumi.set(__self__, "public_description", public_description)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if slack_aliases is not None:
            pulumi.set(__self__, "slack_aliases", slack_aliases)
        if slack_channels is not None:
            pulumi.set(__self__, "slack_channels", slack_channels)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        The hex color of the functionality
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the functionality
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Environments associated with this functionality
        """
        return pulumi.get(self, "environment_ids")

    @environment_ids.setter
    def environment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_ids", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the functionality
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="notifyEmails")
    def notify_emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Emails attached to the functionality
        """
        return pulumi.get(self, "notify_emails")

    @notify_emails.setter
    def notify_emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "notify_emails", value)

    @property
    @pulumi.getter(name="ownersGroupIds")
    def owners_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Owner Teams associated with this functionality
        """
        return pulumi.get(self, "owners_group_ids")

    @owners_group_ids.setter
    def owners_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "owners_group_ids", value)

    @property
    @pulumi.getter(name="ownersUserIds")
    def owners_user_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        """
        Owner Users associated with this service
        """
        return pulumi.get(self, "owners_user_ids")

    @owners_user_ids.setter
    def owners_user_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "owners_user_ids", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        Position of the functionality
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter(name="publicDescription")
    def public_description(self) -> Optional[pulumi.Input[str]]:
        """
        The public description of the functionality
        """
        return pulumi.get(self, "public_description")

    @public_description.setter
    def public_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_description", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Services associated with this functionality
        """
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter(name="slackAliases")
    def slack_aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionalitySlackAliasArgs']]]]:
        """
        Slack Aliases associated with this service
        """
        return pulumi.get(self, "slack_aliases")

    @slack_aliases.setter
    def slack_aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionalitySlackAliasArgs']]]]):
        pulumi.set(self, "slack_aliases", value)

    @property
    @pulumi.getter(name="slackChannels")
    def slack_channels(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['FunctionalitySlackChannelArgs']]]]:
        """
        Slack Channels associated with this service
        """
        return pulumi.get(self, "slack_channels")

    @slack_channels.setter
    def slack_channels(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['FunctionalitySlackChannelArgs']]]]):
        pulumi.set(self, "slack_channels", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the functionality
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


class Functionality(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 color: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owners_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owners_user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 public_description: Optional[pulumi.Input[str]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slack_aliases: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FunctionalitySlackAliasArgs', 'FunctionalitySlackAliasArgsDict']]]]] = None,
                 slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FunctionalitySlackChannelArgs', 'FunctionalitySlackChannelArgsDict']]]]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] color: The hex color of the functionality
        :param pulumi.Input[str] description: The description of the functionality
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_ids: Environments associated with this functionality
        :param pulumi.Input[str] name: The name of the functionality
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notify_emails: Emails attached to the functionality
        :param pulumi.Input[Sequence[pulumi.Input[str]]] owners_group_ids: Owner Teams associated with this functionality
        :param pulumi.Input[Sequence[pulumi.Input[int]]] owners_user_ids: Owner Users associated with this service
        :param pulumi.Input[int] position: Position of the functionality
        :param pulumi.Input[str] public_description: The public description of the functionality
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_ids: Services associated with this functionality
        :param pulumi.Input[Sequence[pulumi.Input[Union['FunctionalitySlackAliasArgs', 'FunctionalitySlackAliasArgsDict']]]] slack_aliases: Slack Aliases associated with this service
        :param pulumi.Input[Sequence[pulumi.Input[Union['FunctionalitySlackChannelArgs', 'FunctionalitySlackChannelArgsDict']]]] slack_channels: Slack Channels associated with this service
        :param pulumi.Input[str] slug: The slug of the functionality
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FunctionalityArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param FunctionalityArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FunctionalityArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 color: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 notify_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owners_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 owners_user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 public_description: Optional[pulumi.Input[str]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slack_aliases: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FunctionalitySlackAliasArgs', 'FunctionalitySlackAliasArgsDict']]]]] = None,
                 slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FunctionalitySlackChannelArgs', 'FunctionalitySlackChannelArgsDict']]]]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FunctionalityArgs.__new__(FunctionalityArgs)

            __props__.__dict__["color"] = color
            __props__.__dict__["description"] = description
            __props__.__dict__["environment_ids"] = environment_ids
            __props__.__dict__["name"] = name
            __props__.__dict__["notify_emails"] = notify_emails
            __props__.__dict__["owners_group_ids"] = owners_group_ids
            __props__.__dict__["owners_user_ids"] = owners_user_ids
            __props__.__dict__["position"] = position
            __props__.__dict__["public_description"] = public_description
            __props__.__dict__["service_ids"] = service_ids
            __props__.__dict__["slack_aliases"] = slack_aliases
            __props__.__dict__["slack_channels"] = slack_channels
            __props__.__dict__["slug"] = slug
        super(Functionality, __self__).__init__(
            'rootly:index/functionality:Functionality',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            color: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            notify_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            owners_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            owners_user_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            position: Optional[pulumi.Input[int]] = None,
            public_description: Optional[pulumi.Input[str]] = None,
            service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            slack_aliases: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FunctionalitySlackAliasArgs', 'FunctionalitySlackAliasArgsDict']]]]] = None,
            slack_channels: Optional[pulumi.Input[Sequence[pulumi.Input[Union['FunctionalitySlackChannelArgs', 'FunctionalitySlackChannelArgsDict']]]]] = None,
            slug: Optional[pulumi.Input[str]] = None) -> 'Functionality':
        """
        Get an existing Functionality resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] color: The hex color of the functionality
        :param pulumi.Input[str] description: The description of the functionality
        :param pulumi.Input[Sequence[pulumi.Input[str]]] environment_ids: Environments associated with this functionality
        :param pulumi.Input[str] name: The name of the functionality
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notify_emails: Emails attached to the functionality
        :param pulumi.Input[Sequence[pulumi.Input[str]]] owners_group_ids: Owner Teams associated with this functionality
        :param pulumi.Input[Sequence[pulumi.Input[int]]] owners_user_ids: Owner Users associated with this service
        :param pulumi.Input[int] position: Position of the functionality
        :param pulumi.Input[str] public_description: The public description of the functionality
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_ids: Services associated with this functionality
        :param pulumi.Input[Sequence[pulumi.Input[Union['FunctionalitySlackAliasArgs', 'FunctionalitySlackAliasArgsDict']]]] slack_aliases: Slack Aliases associated with this service
        :param pulumi.Input[Sequence[pulumi.Input[Union['FunctionalitySlackChannelArgs', 'FunctionalitySlackChannelArgsDict']]]] slack_channels: Slack Channels associated with this service
        :param pulumi.Input[str] slug: The slug of the functionality
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FunctionalityState.__new__(_FunctionalityState)

        __props__.__dict__["color"] = color
        __props__.__dict__["description"] = description
        __props__.__dict__["environment_ids"] = environment_ids
        __props__.__dict__["name"] = name
        __props__.__dict__["notify_emails"] = notify_emails
        __props__.__dict__["owners_group_ids"] = owners_group_ids
        __props__.__dict__["owners_user_ids"] = owners_user_ids
        __props__.__dict__["position"] = position
        __props__.__dict__["public_description"] = public_description
        __props__.__dict__["service_ids"] = service_ids
        __props__.__dict__["slack_aliases"] = slack_aliases
        __props__.__dict__["slack_channels"] = slack_channels
        __props__.__dict__["slug"] = slug
        return Functionality(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Output[str]:
        """
        The hex color of the functionality
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the functionality
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Environments associated with this functionality
        """
        return pulumi.get(self, "environment_ids")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the functionality
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="notifyEmails")
    def notify_emails(self) -> pulumi.Output[Sequence[str]]:
        """
        Emails attached to the functionality
        """
        return pulumi.get(self, "notify_emails")

    @property
    @pulumi.getter(name="ownersGroupIds")
    def owners_group_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Owner Teams associated with this functionality
        """
        return pulumi.get(self, "owners_group_ids")

    @property
    @pulumi.getter(name="ownersUserIds")
    def owners_user_ids(self) -> pulumi.Output[Sequence[int]]:
        """
        Owner Users associated with this service
        """
        return pulumi.get(self, "owners_user_ids")

    @property
    @pulumi.getter
    def position(self) -> pulumi.Output[int]:
        """
        Position of the functionality
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter(name="publicDescription")
    def public_description(self) -> pulumi.Output[str]:
        """
        The public description of the functionality
        """
        return pulumi.get(self, "public_description")

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Services associated with this functionality
        """
        return pulumi.get(self, "service_ids")

    @property
    @pulumi.getter(name="slackAliases")
    def slack_aliases(self) -> pulumi.Output[Sequence['outputs.FunctionalitySlackAlias']]:
        """
        Slack Aliases associated with this service
        """
        return pulumi.get(self, "slack_aliases")

    @property
    @pulumi.getter(name="slackChannels")
    def slack_channels(self) -> pulumi.Output[Sequence['outputs.FunctionalitySlackChannel']]:
        """
        Slack Channels associated with this service
        """
        return pulumi.get(self, "slack_channels")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        """
        The slug of the functionality
        """
        return pulumi.get(self, "slug")

