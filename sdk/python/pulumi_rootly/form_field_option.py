# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['FormFieldOptionArgs', 'FormFieldOption']

@pulumi.input_type
class FormFieldOptionArgs:
    def __init__(__self__, *,
                 form_field_id: pulumi.Input[str],
                 value: pulumi.Input[str],
                 color: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 position: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a FormFieldOption resource.
        :param pulumi.Input[str] form_field_id: The ID of the parent custom field
        :param pulumi.Input[str] value: The value of the form*field*option
        :param pulumi.Input[str] color: The hex color of the form*field*option
        :param pulumi.Input[bool] default: Value must be one of true or false
        :param pulumi.Input[int] position: The position of the form*field*option
        """
        pulumi.set(__self__, "form_field_id", form_field_id)
        pulumi.set(__self__, "value", value)
        if color is not None:
            pulumi.set(__self__, "color", color)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if position is not None:
            pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter(name="formFieldId")
    def form_field_id(self) -> pulumi.Input[str]:
        """
        The ID of the parent custom field
        """
        return pulumi.get(self, "form_field_id")

    @form_field_id.setter
    def form_field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "form_field_id", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        """
        The value of the form*field*option
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        The hex color of the form*field*option
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        The position of the form*field*option
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)


@pulumi.input_type
class _FormFieldOptionState:
    def __init__(__self__, *,
                 color: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 form_field_id: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FormFieldOption resources.
        :param pulumi.Input[str] color: The hex color of the form*field*option
        :param pulumi.Input[bool] default: Value must be one of true or false
        :param pulumi.Input[str] form_field_id: The ID of the parent custom field
        :param pulumi.Input[int] position: The position of the form*field*option
        :param pulumi.Input[str] value: The value of the form*field*option
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if default is not None:
            pulumi.set(__self__, "default", default)
        if form_field_id is not None:
            pulumi.set(__self__, "form_field_id", form_field_id)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def color(self) -> Optional[pulumi.Input[str]]:
        """
        The hex color of the form*field*option
        """
        return pulumi.get(self, "color")

    @color.setter
    def color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "color", value)

    @property
    @pulumi.getter
    def default(self) -> Optional[pulumi.Input[bool]]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "default")

    @default.setter
    def default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "default", value)

    @property
    @pulumi.getter(name="formFieldId")
    def form_field_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the parent custom field
        """
        return pulumi.get(self, "form_field_id")

    @form_field_id.setter
    def form_field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "form_field_id", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        The position of the form*field*option
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        The value of the form*field*option
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


class FormFieldOption(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 color: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 form_field_id: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] color: The hex color of the form*field*option
        :param pulumi.Input[bool] default: Value must be one of true or false
        :param pulumi.Input[str] form_field_id: The ID of the parent custom field
        :param pulumi.Input[int] position: The position of the form*field*option
        :param pulumi.Input[str] value: The value of the form*field*option
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FormFieldOptionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param FormFieldOptionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FormFieldOptionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 color: Optional[pulumi.Input[str]] = None,
                 default: Optional[pulumi.Input[bool]] = None,
                 form_field_id: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FormFieldOptionArgs.__new__(FormFieldOptionArgs)

            __props__.__dict__["color"] = color
            __props__.__dict__["default"] = default
            if form_field_id is None and not opts.urn:
                raise TypeError("Missing required property 'form_field_id'")
            __props__.__dict__["form_field_id"] = form_field_id
            __props__.__dict__["position"] = position
            if value is None and not opts.urn:
                raise TypeError("Missing required property 'value'")
            __props__.__dict__["value"] = value
        super(FormFieldOption, __self__).__init__(
            'rootly:index/formFieldOption:FormFieldOption',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            color: Optional[pulumi.Input[str]] = None,
            default: Optional[pulumi.Input[bool]] = None,
            form_field_id: Optional[pulumi.Input[str]] = None,
            position: Optional[pulumi.Input[int]] = None,
            value: Optional[pulumi.Input[str]] = None) -> 'FormFieldOption':
        """
        Get an existing FormFieldOption resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] color: The hex color of the form*field*option
        :param pulumi.Input[bool] default: Value must be one of true or false
        :param pulumi.Input[str] form_field_id: The ID of the parent custom field
        :param pulumi.Input[int] position: The position of the form*field*option
        :param pulumi.Input[str] value: The value of the form*field*option
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FormFieldOptionState.__new__(_FormFieldOptionState)

        __props__.__dict__["color"] = color
        __props__.__dict__["default"] = default
        __props__.__dict__["form_field_id"] = form_field_id
        __props__.__dict__["position"] = position
        __props__.__dict__["value"] = value
        return FormFieldOption(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def color(self) -> pulumi.Output[str]:
        """
        The hex color of the form*field*option
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter
    def default(self) -> pulumi.Output[bool]:
        """
        Value must be one of true or false
        """
        return pulumi.get(self, "default")

    @property
    @pulumi.getter(name="formFieldId")
    def form_field_id(self) -> pulumi.Output[str]:
        """
        The ID of the parent custom field
        """
        return pulumi.get(self, "form_field_id")

    @property
    @pulumi.getter
    def position(self) -> pulumi.Output[int]:
        """
        The position of the form*field*option
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def value(self) -> pulumi.Output[str]:
        """
        The value of the form*field*option
        """
        return pulumi.get(self, "value")

