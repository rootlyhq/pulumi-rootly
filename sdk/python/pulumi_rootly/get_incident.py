# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetIncidentResult',
    'AwaitableGetIncidentResult',
    'get_incident',
    'get_incident_output',
]

@pulumi.output_type
class GetIncidentResult:
    """
    A collection of values returned by getIncident.
    """
    def __init__(__self__, acknowledged_at=None, created_at=None, detected_at=None, environments=None, functionalities=None, id=None, in_triage_at=None, kind=None, labels=None, mitigated_at=None, private=None, resolved_at=None, services=None, severity=None, started_at=None, updated_at=None):
        if acknowledged_at and not isinstance(acknowledged_at, dict):
            raise TypeError("Expected argument 'acknowledged_at' to be a dict")
        pulumi.set(__self__, "acknowledged_at", acknowledged_at)
        if created_at and not isinstance(created_at, dict):
            raise TypeError("Expected argument 'created_at' to be a dict")
        pulumi.set(__self__, "created_at", created_at)
        if detected_at and not isinstance(detected_at, dict):
            raise TypeError("Expected argument 'detected_at' to be a dict")
        pulumi.set(__self__, "detected_at", detected_at)
        if environments and not isinstance(environments, str):
            raise TypeError("Expected argument 'environments' to be a str")
        pulumi.set(__self__, "environments", environments)
        if functionalities and not isinstance(functionalities, str):
            raise TypeError("Expected argument 'functionalities' to be a str")
        pulumi.set(__self__, "functionalities", functionalities)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if in_triage_at and not isinstance(in_triage_at, dict):
            raise TypeError("Expected argument 'in_triage_at' to be a dict")
        pulumi.set(__self__, "in_triage_at", in_triage_at)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if labels and not isinstance(labels, str):
            raise TypeError("Expected argument 'labels' to be a str")
        pulumi.set(__self__, "labels", labels)
        if mitigated_at and not isinstance(mitigated_at, dict):
            raise TypeError("Expected argument 'mitigated_at' to be a dict")
        pulumi.set(__self__, "mitigated_at", mitigated_at)
        if private and not isinstance(private, bool):
            raise TypeError("Expected argument 'private' to be a bool")
        pulumi.set(__self__, "private", private)
        if resolved_at and not isinstance(resolved_at, dict):
            raise TypeError("Expected argument 'resolved_at' to be a dict")
        pulumi.set(__self__, "resolved_at", resolved_at)
        if services and not isinstance(services, str):
            raise TypeError("Expected argument 'services' to be a str")
        pulumi.set(__self__, "services", services)
        if severity and not isinstance(severity, str):
            raise TypeError("Expected argument 'severity' to be a str")
        pulumi.set(__self__, "severity", severity)
        if started_at and not isinstance(started_at, dict):
            raise TypeError("Expected argument 'started_at' to be a dict")
        pulumi.set(__self__, "started_at", started_at)
        if updated_at and not isinstance(updated_at, dict):
            raise TypeError("Expected argument 'updated_at' to be a dict")
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="acknowledgedAt")
    def acknowledged_at(self) -> Optional[Mapping[str, str]]:
        """
        Filter by date range using 'lt' and 'gt'.
        """
        return pulumi.get(self, "acknowledged_at")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[Mapping[str, str]]:
        """
        Filter by date range using 'lt' and 'gt'.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="detectedAt")
    def detected_at(self) -> Optional[Mapping[str, str]]:
        """
        Filter by date range using 'lt' and 'gt'.
        """
        return pulumi.get(self, "detected_at")

    @property
    @pulumi.getter
    def environments(self) -> str:
        return pulumi.get(self, "environments")

    @property
    @pulumi.getter
    def functionalities(self) -> str:
        return pulumi.get(self, "functionalities")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="inTriageAt")
    def in_triage_at(self) -> Optional[Mapping[str, str]]:
        """
        Filter by date range using 'lt' and 'gt'.
        """
        return pulumi.get(self, "in_triage_at")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def labels(self) -> str:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="mitigatedAt")
    def mitigated_at(self) -> Optional[Mapping[str, str]]:
        """
        Filter by date range using 'lt' and 'gt'.
        """
        return pulumi.get(self, "mitigated_at")

    @property
    @pulumi.getter
    def private(self) -> bool:
        return pulumi.get(self, "private")

    @property
    @pulumi.getter(name="resolvedAt")
    def resolved_at(self) -> Optional[Mapping[str, str]]:
        """
        Filter by date range using 'lt' and 'gt'.
        """
        return pulumi.get(self, "resolved_at")

    @property
    @pulumi.getter
    def services(self) -> str:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter
    def severity(self) -> str:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[Mapping[str, str]]:
        """
        Filter by date range using 'lt' and 'gt'.
        """
        return pulumi.get(self, "started_at")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[Mapping[str, str]]:
        """
        Filter by date range using 'lt' and 'gt'.
        """
        return pulumi.get(self, "updated_at")


class AwaitableGetIncidentResult(GetIncidentResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIncidentResult(
            acknowledged_at=self.acknowledged_at,
            created_at=self.created_at,
            detected_at=self.detected_at,
            environments=self.environments,
            functionalities=self.functionalities,
            id=self.id,
            in_triage_at=self.in_triage_at,
            kind=self.kind,
            labels=self.labels,
            mitigated_at=self.mitigated_at,
            private=self.private,
            resolved_at=self.resolved_at,
            services=self.services,
            severity=self.severity,
            started_at=self.started_at,
            updated_at=self.updated_at)


def get_incident(acknowledged_at: Optional[Mapping[str, str]] = None,
                 created_at: Optional[Mapping[str, str]] = None,
                 detected_at: Optional[Mapping[str, str]] = None,
                 environments: Optional[str] = None,
                 functionalities: Optional[str] = None,
                 in_triage_at: Optional[Mapping[str, str]] = None,
                 kind: Optional[str] = None,
                 labels: Optional[str] = None,
                 mitigated_at: Optional[Mapping[str, str]] = None,
                 private: Optional[bool] = None,
                 resolved_at: Optional[Mapping[str, str]] = None,
                 services: Optional[str] = None,
                 severity: Optional[str] = None,
                 started_at: Optional[Mapping[str, str]] = None,
                 updated_at: Optional[Mapping[str, str]] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIncidentResult:
    """
    ## Example Usage


    :param Mapping[str, str] acknowledged_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] created_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] detected_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] in_triage_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] mitigated_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] resolved_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] started_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] updated_at: Filter by date range using 'lt' and 'gt'.
    """
    __args__ = dict()
    __args__['acknowledgedAt'] = acknowledged_at
    __args__['createdAt'] = created_at
    __args__['detectedAt'] = detected_at
    __args__['environments'] = environments
    __args__['functionalities'] = functionalities
    __args__['inTriageAt'] = in_triage_at
    __args__['kind'] = kind
    __args__['labels'] = labels
    __args__['mitigatedAt'] = mitigated_at
    __args__['private'] = private
    __args__['resolvedAt'] = resolved_at
    __args__['services'] = services
    __args__['severity'] = severity
    __args__['startedAt'] = started_at
    __args__['updatedAt'] = updated_at
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('rootly:index/getIncident:getIncident', __args__, opts=opts, typ=GetIncidentResult).value

    return AwaitableGetIncidentResult(
        acknowledged_at=pulumi.get(__ret__, 'acknowledged_at'),
        created_at=pulumi.get(__ret__, 'created_at'),
        detected_at=pulumi.get(__ret__, 'detected_at'),
        environments=pulumi.get(__ret__, 'environments'),
        functionalities=pulumi.get(__ret__, 'functionalities'),
        id=pulumi.get(__ret__, 'id'),
        in_triage_at=pulumi.get(__ret__, 'in_triage_at'),
        kind=pulumi.get(__ret__, 'kind'),
        labels=pulumi.get(__ret__, 'labels'),
        mitigated_at=pulumi.get(__ret__, 'mitigated_at'),
        private=pulumi.get(__ret__, 'private'),
        resolved_at=pulumi.get(__ret__, 'resolved_at'),
        services=pulumi.get(__ret__, 'services'),
        severity=pulumi.get(__ret__, 'severity'),
        started_at=pulumi.get(__ret__, 'started_at'),
        updated_at=pulumi.get(__ret__, 'updated_at'))


@_utilities.lift_output_func(get_incident)
def get_incident_output(acknowledged_at: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                        created_at: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                        detected_at: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                        environments: Optional[pulumi.Input[Optional[str]]] = None,
                        functionalities: Optional[pulumi.Input[Optional[str]]] = None,
                        in_triage_at: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                        kind: Optional[pulumi.Input[Optional[str]]] = None,
                        labels: Optional[pulumi.Input[Optional[str]]] = None,
                        mitigated_at: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                        private: Optional[pulumi.Input[Optional[bool]]] = None,
                        resolved_at: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                        services: Optional[pulumi.Input[Optional[str]]] = None,
                        severity: Optional[pulumi.Input[Optional[str]]] = None,
                        started_at: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                        updated_at: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIncidentResult]:
    """
    ## Example Usage


    :param Mapping[str, str] acknowledged_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] created_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] detected_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] in_triage_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] mitigated_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] resolved_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] started_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] updated_at: Filter by date range using 'lt' and 'gt'.
    """
    ...
