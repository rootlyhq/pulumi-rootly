# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetFunctionalitiesResult',
    'AwaitableGetFunctionalitiesResult',
    'get_functionalities',
    'get_functionalities_output',
]

@pulumi.output_type
class GetFunctionalitiesResult:
    """
    A collection of values returned by getFunctionalities.
    """
    def __init__(__self__, functionalities=None, id=None, name=None, opsgenie_id=None, pagerduty_id=None, slug=None):
        if functionalities and not isinstance(functionalities, list):
            raise TypeError("Expected argument 'functionalities' to be a list")
        pulumi.set(__self__, "functionalities", functionalities)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if opsgenie_id and not isinstance(opsgenie_id, str):
            raise TypeError("Expected argument 'opsgenie_id' to be a str")
        pulumi.set(__self__, "opsgenie_id", opsgenie_id)
        if pagerduty_id and not isinstance(pagerduty_id, str):
            raise TypeError("Expected argument 'pagerduty_id' to be a str")
        pulumi.set(__self__, "pagerduty_id", pagerduty_id)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def functionalities(self) -> Sequence['outputs.GetFunctionalitiesFunctionalityResult']:
        return pulumi.get(self, "functionalities")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="opsgenieId")
    def opsgenie_id(self) -> Optional[str]:
        return pulumi.get(self, "opsgenie_id")

    @property
    @pulumi.getter(name="pagerdutyId")
    def pagerduty_id(self) -> Optional[str]:
        return pulumi.get(self, "pagerduty_id")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


class AwaitableGetFunctionalitiesResult(GetFunctionalitiesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFunctionalitiesResult(
            functionalities=self.functionalities,
            id=self.id,
            name=self.name,
            opsgenie_id=self.opsgenie_id,
            pagerduty_id=self.pagerduty_id,
            slug=self.slug)


def get_functionalities(name: Optional[str] = None,
                        opsgenie_id: Optional[str] = None,
                        pagerduty_id: Optional[str] = None,
                        slug: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFunctionalitiesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['opsgenieId'] = opsgenie_id
    __args__['pagerdutyId'] = pagerduty_id
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('rootly:index/getFunctionalities:getFunctionalities', __args__, opts=opts, typ=GetFunctionalitiesResult).value

    return AwaitableGetFunctionalitiesResult(
        functionalities=pulumi.get(__ret__, 'functionalities'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        opsgenie_id=pulumi.get(__ret__, 'opsgenie_id'),
        pagerduty_id=pulumi.get(__ret__, 'pagerduty_id'),
        slug=pulumi.get(__ret__, 'slug'))


@_utilities.lift_output_func(get_functionalities)
def get_functionalities_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                               opsgenie_id: Optional[pulumi.Input[Optional[str]]] = None,
                               pagerduty_id: Optional[pulumi.Input[Optional[str]]] = None,
                               slug: Optional[pulumi.Input[Optional[str]]] = None,
                               opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetFunctionalitiesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
