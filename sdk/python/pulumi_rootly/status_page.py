# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['StatusPageArgs', 'StatusPage']

@pulumi.input_type
class StatusPageArgs:
    def __init__(__self__, *,
                 title: pulumi.Input[str],
                 allow_search_engine_index: Optional[pulumi.Input[bool]] = None,
                 authentication_enabled: Optional[pulumi.Input[bool]] = None,
                 authentication_password: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 failure_message: Optional[pulumi.Input[str]] = None,
                 footer_color: Optional[pulumi.Input[str]] = None,
                 functionality_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ga_tracking_id: Optional[pulumi.Input[str]] = None,
                 header_color: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 public_description: Optional[pulumi.Input[str]] = None,
                 public_title: Optional[pulumi.Input[str]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 show_uptime: Optional[pulumi.Input[bool]] = None,
                 show_uptime_last_days: Optional[pulumi.Input[int]] = None,
                 success_message: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 website_privacy_url: Optional[pulumi.Input[str]] = None,
                 website_support_url: Optional[pulumi.Input[str]] = None,
                 website_url: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a StatusPage resource.
        :param pulumi.Input[str] title: The title of the status page
        :param pulumi.Input[bool] allow_search_engine_index: Allow search engines to include your public status page in search results. Value must be one of true or false
        :param pulumi.Input[bool] authentication_enabled: Enable authentication. Value must be one of true or false
        :param pulumi.Input[str] authentication_password: Authentication password
        :param pulumi.Input[str] description: The description of the status page
        :param pulumi.Input[str] failure_message: Message showing when at least one component is not operational
        :param pulumi.Input[str] footer_color: The color of the footer. Eg. "#1F2F41"
        :param pulumi.Input[Sequence[pulumi.Input[str]]] functionality_ids: Functionalities attached to the status page
        :param pulumi.Input[str] ga_tracking_id: Google Analytics tracking ID
        :param pulumi.Input[str] header_color: The color of the header. Eg. "#0061F2"
        :param pulumi.Input[bool] public: Make the status page accessible to the public. Value must be one of true or false
        :param pulumi.Input[str] public_description: The public description of the status page
        :param pulumi.Input[str] public_title: The public title of the status page
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_ids: Services attached to the status page
        :param pulumi.Input[bool] show_uptime: Show uptime. Value must be one of true or false
        :param pulumi.Input[int] show_uptime_last_days: Show uptime over x days. Value must be one of `30`, `60`, `90`, `180`, `360`.
        :param pulumi.Input[str] success_message: Message showing when all components are operational
        :param pulumi.Input[str] time_zone: A valid IANA time zone name.
        :param pulumi.Input[str] website_privacy_url: Website Privacy URL
        :param pulumi.Input[str] website_support_url: Website Support URL
        :param pulumi.Input[str] website_url: Website URL
        """
        pulumi.set(__self__, "title", title)
        if allow_search_engine_index is not None:
            pulumi.set(__self__, "allow_search_engine_index", allow_search_engine_index)
        if authentication_enabled is not None:
            pulumi.set(__self__, "authentication_enabled", authentication_enabled)
        if authentication_password is not None:
            pulumi.set(__self__, "authentication_password", authentication_password)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failure_message is not None:
            pulumi.set(__self__, "failure_message", failure_message)
        if footer_color is not None:
            pulumi.set(__self__, "footer_color", footer_color)
        if functionality_ids is not None:
            pulumi.set(__self__, "functionality_ids", functionality_ids)
        if ga_tracking_id is not None:
            pulumi.set(__self__, "ga_tracking_id", ga_tracking_id)
        if header_color is not None:
            pulumi.set(__self__, "header_color", header_color)
        if public is not None:
            pulumi.set(__self__, "public", public)
        if public_description is not None:
            pulumi.set(__self__, "public_description", public_description)
        if public_title is not None:
            pulumi.set(__self__, "public_title", public_title)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if show_uptime is not None:
            pulumi.set(__self__, "show_uptime", show_uptime)
        if show_uptime_last_days is not None:
            pulumi.set(__self__, "show_uptime_last_days", show_uptime_last_days)
        if success_message is not None:
            pulumi.set(__self__, "success_message", success_message)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if website_privacy_url is not None:
            pulumi.set(__self__, "website_privacy_url", website_privacy_url)
        if website_support_url is not None:
            pulumi.set(__self__, "website_support_url", website_support_url)
        if website_url is not None:
            pulumi.set(__self__, "website_url", website_url)

    @property
    @pulumi.getter
    def title(self) -> pulumi.Input[str]:
        """
        The title of the status page
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: pulumi.Input[str]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="allowSearchEngineIndex")
    def allow_search_engine_index(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow search engines to include your public status page in search results. Value must be one of true or false
        """
        return pulumi.get(self, "allow_search_engine_index")

    @allow_search_engine_index.setter
    def allow_search_engine_index(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_search_engine_index", value)

    @property
    @pulumi.getter(name="authenticationEnabled")
    def authentication_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable authentication. Value must be one of true or false
        """
        return pulumi.get(self, "authentication_enabled")

    @authentication_enabled.setter
    def authentication_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_enabled", value)

    @property
    @pulumi.getter(name="authenticationPassword")
    def authentication_password(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication password
        """
        return pulumi.get(self, "authentication_password")

    @authentication_password.setter
    def authentication_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_password", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the status page
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="failureMessage")
    def failure_message(self) -> Optional[pulumi.Input[str]]:
        """
        Message showing when at least one component is not operational
        """
        return pulumi.get(self, "failure_message")

    @failure_message.setter
    def failure_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_message", value)

    @property
    @pulumi.getter(name="footerColor")
    def footer_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color of the footer. Eg. "#1F2F41"
        """
        return pulumi.get(self, "footer_color")

    @footer_color.setter
    def footer_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "footer_color", value)

    @property
    @pulumi.getter(name="functionalityIds")
    def functionality_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Functionalities attached to the status page
        """
        return pulumi.get(self, "functionality_ids")

    @functionality_ids.setter
    def functionality_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "functionality_ids", value)

    @property
    @pulumi.getter(name="gaTrackingId")
    def ga_tracking_id(self) -> Optional[pulumi.Input[str]]:
        """
        Google Analytics tracking ID
        """
        return pulumi.get(self, "ga_tracking_id")

    @ga_tracking_id.setter
    def ga_tracking_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ga_tracking_id", value)

    @property
    @pulumi.getter(name="headerColor")
    def header_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color of the header. Eg. "#0061F2"
        """
        return pulumi.get(self, "header_color")

    @header_color.setter
    def header_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_color", value)

    @property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[bool]]:
        """
        Make the status page accessible to the public. Value must be one of true or false
        """
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public", value)

    @property
    @pulumi.getter(name="publicDescription")
    def public_description(self) -> Optional[pulumi.Input[str]]:
        """
        The public description of the status page
        """
        return pulumi.get(self, "public_description")

    @public_description.setter
    def public_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_description", value)

    @property
    @pulumi.getter(name="publicTitle")
    def public_title(self) -> Optional[pulumi.Input[str]]:
        """
        The public title of the status page
        """
        return pulumi.get(self, "public_title")

    @public_title.setter
    def public_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_title", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Services attached to the status page
        """
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter(name="showUptime")
    def show_uptime(self) -> Optional[pulumi.Input[bool]]:
        """
        Show uptime. Value must be one of true or false
        """
        return pulumi.get(self, "show_uptime")

    @show_uptime.setter
    def show_uptime(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_uptime", value)

    @property
    @pulumi.getter(name="showUptimeLastDays")
    def show_uptime_last_days(self) -> Optional[pulumi.Input[int]]:
        """
        Show uptime over x days. Value must be one of `30`, `60`, `90`, `180`, `360`.
        """
        return pulumi.get(self, "show_uptime_last_days")

    @show_uptime_last_days.setter
    def show_uptime_last_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "show_uptime_last_days", value)

    @property
    @pulumi.getter(name="successMessage")
    def success_message(self) -> Optional[pulumi.Input[str]]:
        """
        Message showing when all components are operational
        """
        return pulumi.get(self, "success_message")

    @success_message.setter
    def success_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_message", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        A valid IANA time zone name.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter(name="websitePrivacyUrl")
    def website_privacy_url(self) -> Optional[pulumi.Input[str]]:
        """
        Website Privacy URL
        """
        return pulumi.get(self, "website_privacy_url")

    @website_privacy_url.setter
    def website_privacy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website_privacy_url", value)

    @property
    @pulumi.getter(name="websiteSupportUrl")
    def website_support_url(self) -> Optional[pulumi.Input[str]]:
        """
        Website Support URL
        """
        return pulumi.get(self, "website_support_url")

    @website_support_url.setter
    def website_support_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website_support_url", value)

    @property
    @pulumi.getter(name="websiteUrl")
    def website_url(self) -> Optional[pulumi.Input[str]]:
        """
        Website URL
        """
        return pulumi.get(self, "website_url")

    @website_url.setter
    def website_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website_url", value)


@pulumi.input_type
class _StatusPageState:
    def __init__(__self__, *,
                 allow_search_engine_index: Optional[pulumi.Input[bool]] = None,
                 authentication_enabled: Optional[pulumi.Input[bool]] = None,
                 authentication_password: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 failure_message: Optional[pulumi.Input[str]] = None,
                 footer_color: Optional[pulumi.Input[str]] = None,
                 functionality_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ga_tracking_id: Optional[pulumi.Input[str]] = None,
                 header_color: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 public_description: Optional[pulumi.Input[str]] = None,
                 public_title: Optional[pulumi.Input[str]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 show_uptime: Optional[pulumi.Input[bool]] = None,
                 show_uptime_last_days: Optional[pulumi.Input[int]] = None,
                 success_message: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 website_privacy_url: Optional[pulumi.Input[str]] = None,
                 website_support_url: Optional[pulumi.Input[str]] = None,
                 website_url: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering StatusPage resources.
        :param pulumi.Input[bool] allow_search_engine_index: Allow search engines to include your public status page in search results. Value must be one of true or false
        :param pulumi.Input[bool] authentication_enabled: Enable authentication. Value must be one of true or false
        :param pulumi.Input[str] authentication_password: Authentication password
        :param pulumi.Input[str] description: The description of the status page
        :param pulumi.Input[str] failure_message: Message showing when at least one component is not operational
        :param pulumi.Input[str] footer_color: The color of the footer. Eg. "#1F2F41"
        :param pulumi.Input[Sequence[pulumi.Input[str]]] functionality_ids: Functionalities attached to the status page
        :param pulumi.Input[str] ga_tracking_id: Google Analytics tracking ID
        :param pulumi.Input[str] header_color: The color of the header. Eg. "#0061F2"
        :param pulumi.Input[bool] public: Make the status page accessible to the public. Value must be one of true or false
        :param pulumi.Input[str] public_description: The public description of the status page
        :param pulumi.Input[str] public_title: The public title of the status page
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_ids: Services attached to the status page
        :param pulumi.Input[bool] show_uptime: Show uptime. Value must be one of true or false
        :param pulumi.Input[int] show_uptime_last_days: Show uptime over x days. Value must be one of `30`, `60`, `90`, `180`, `360`.
        :param pulumi.Input[str] success_message: Message showing when all components are operational
        :param pulumi.Input[str] time_zone: A valid IANA time zone name.
        :param pulumi.Input[str] title: The title of the status page
        :param pulumi.Input[str] website_privacy_url: Website Privacy URL
        :param pulumi.Input[str] website_support_url: Website Support URL
        :param pulumi.Input[str] website_url: Website URL
        """
        if allow_search_engine_index is not None:
            pulumi.set(__self__, "allow_search_engine_index", allow_search_engine_index)
        if authentication_enabled is not None:
            pulumi.set(__self__, "authentication_enabled", authentication_enabled)
        if authentication_password is not None:
            pulumi.set(__self__, "authentication_password", authentication_password)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if failure_message is not None:
            pulumi.set(__self__, "failure_message", failure_message)
        if footer_color is not None:
            pulumi.set(__self__, "footer_color", footer_color)
        if functionality_ids is not None:
            pulumi.set(__self__, "functionality_ids", functionality_ids)
        if ga_tracking_id is not None:
            pulumi.set(__self__, "ga_tracking_id", ga_tracking_id)
        if header_color is not None:
            pulumi.set(__self__, "header_color", header_color)
        if public is not None:
            pulumi.set(__self__, "public", public)
        if public_description is not None:
            pulumi.set(__self__, "public_description", public_description)
        if public_title is not None:
            pulumi.set(__self__, "public_title", public_title)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if show_uptime is not None:
            pulumi.set(__self__, "show_uptime", show_uptime)
        if show_uptime_last_days is not None:
            pulumi.set(__self__, "show_uptime_last_days", show_uptime_last_days)
        if success_message is not None:
            pulumi.set(__self__, "success_message", success_message)
        if time_zone is not None:
            pulumi.set(__self__, "time_zone", time_zone)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if website_privacy_url is not None:
            pulumi.set(__self__, "website_privacy_url", website_privacy_url)
        if website_support_url is not None:
            pulumi.set(__self__, "website_support_url", website_support_url)
        if website_url is not None:
            pulumi.set(__self__, "website_url", website_url)

    @property
    @pulumi.getter(name="allowSearchEngineIndex")
    def allow_search_engine_index(self) -> Optional[pulumi.Input[bool]]:
        """
        Allow search engines to include your public status page in search results. Value must be one of true or false
        """
        return pulumi.get(self, "allow_search_engine_index")

    @allow_search_engine_index.setter
    def allow_search_engine_index(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_search_engine_index", value)

    @property
    @pulumi.getter(name="authenticationEnabled")
    def authentication_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Enable authentication. Value must be one of true or false
        """
        return pulumi.get(self, "authentication_enabled")

    @authentication_enabled.setter
    def authentication_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "authentication_enabled", value)

    @property
    @pulumi.getter(name="authenticationPassword")
    def authentication_password(self) -> Optional[pulumi.Input[str]]:
        """
        Authentication password
        """
        return pulumi.get(self, "authentication_password")

    @authentication_password.setter
    def authentication_password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "authentication_password", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the status page
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="failureMessage")
    def failure_message(self) -> Optional[pulumi.Input[str]]:
        """
        Message showing when at least one component is not operational
        """
        return pulumi.get(self, "failure_message")

    @failure_message.setter
    def failure_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "failure_message", value)

    @property
    @pulumi.getter(name="footerColor")
    def footer_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color of the footer. Eg. "#1F2F41"
        """
        return pulumi.get(self, "footer_color")

    @footer_color.setter
    def footer_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "footer_color", value)

    @property
    @pulumi.getter(name="functionalityIds")
    def functionality_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Functionalities attached to the status page
        """
        return pulumi.get(self, "functionality_ids")

    @functionality_ids.setter
    def functionality_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "functionality_ids", value)

    @property
    @pulumi.getter(name="gaTrackingId")
    def ga_tracking_id(self) -> Optional[pulumi.Input[str]]:
        """
        Google Analytics tracking ID
        """
        return pulumi.get(self, "ga_tracking_id")

    @ga_tracking_id.setter
    def ga_tracking_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ga_tracking_id", value)

    @property
    @pulumi.getter(name="headerColor")
    def header_color(self) -> Optional[pulumi.Input[str]]:
        """
        The color of the header. Eg. "#0061F2"
        """
        return pulumi.get(self, "header_color")

    @header_color.setter
    def header_color(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "header_color", value)

    @property
    @pulumi.getter
    def public(self) -> Optional[pulumi.Input[bool]]:
        """
        Make the status page accessible to the public. Value must be one of true or false
        """
        return pulumi.get(self, "public")

    @public.setter
    def public(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "public", value)

    @property
    @pulumi.getter(name="publicDescription")
    def public_description(self) -> Optional[pulumi.Input[str]]:
        """
        The public description of the status page
        """
        return pulumi.get(self, "public_description")

    @public_description.setter
    def public_description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_description", value)

    @property
    @pulumi.getter(name="publicTitle")
    def public_title(self) -> Optional[pulumi.Input[str]]:
        """
        The public title of the status page
        """
        return pulumi.get(self, "public_title")

    @public_title.setter
    def public_title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "public_title", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Services attached to the status page
        """
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter(name="showUptime")
    def show_uptime(self) -> Optional[pulumi.Input[bool]]:
        """
        Show uptime. Value must be one of true or false
        """
        return pulumi.get(self, "show_uptime")

    @show_uptime.setter
    def show_uptime(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_uptime", value)

    @property
    @pulumi.getter(name="showUptimeLastDays")
    def show_uptime_last_days(self) -> Optional[pulumi.Input[int]]:
        """
        Show uptime over x days. Value must be one of `30`, `60`, `90`, `180`, `360`.
        """
        return pulumi.get(self, "show_uptime_last_days")

    @show_uptime_last_days.setter
    def show_uptime_last_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "show_uptime_last_days", value)

    @property
    @pulumi.getter(name="successMessage")
    def success_message(self) -> Optional[pulumi.Input[str]]:
        """
        Message showing when all components are operational
        """
        return pulumi.get(self, "success_message")

    @success_message.setter
    def success_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "success_message", value)

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> Optional[pulumi.Input[str]]:
        """
        A valid IANA time zone name.
        """
        return pulumi.get(self, "time_zone")

    @time_zone.setter
    def time_zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "time_zone", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the status page
        """
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)

    @property
    @pulumi.getter(name="websitePrivacyUrl")
    def website_privacy_url(self) -> Optional[pulumi.Input[str]]:
        """
        Website Privacy URL
        """
        return pulumi.get(self, "website_privacy_url")

    @website_privacy_url.setter
    def website_privacy_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website_privacy_url", value)

    @property
    @pulumi.getter(name="websiteSupportUrl")
    def website_support_url(self) -> Optional[pulumi.Input[str]]:
        """
        Website Support URL
        """
        return pulumi.get(self, "website_support_url")

    @website_support_url.setter
    def website_support_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website_support_url", value)

    @property
    @pulumi.getter(name="websiteUrl")
    def website_url(self) -> Optional[pulumi.Input[str]]:
        """
        Website URL
        """
        return pulumi.get(self, "website_url")

    @website_url.setter
    def website_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website_url", value)


class StatusPage(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_search_engine_index: Optional[pulumi.Input[bool]] = None,
                 authentication_enabled: Optional[pulumi.Input[bool]] = None,
                 authentication_password: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 failure_message: Optional[pulumi.Input[str]] = None,
                 footer_color: Optional[pulumi.Input[str]] = None,
                 functionality_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ga_tracking_id: Optional[pulumi.Input[str]] = None,
                 header_color: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 public_description: Optional[pulumi.Input[str]] = None,
                 public_title: Optional[pulumi.Input[str]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 show_uptime: Optional[pulumi.Input[bool]] = None,
                 show_uptime_last_days: Optional[pulumi.Input[int]] = None,
                 success_message: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 website_privacy_url: Optional[pulumi.Input[str]] = None,
                 website_support_url: Optional[pulumi.Input[str]] = None,
                 website_url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a StatusPage resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_search_engine_index: Allow search engines to include your public status page in search results. Value must be one of true or false
        :param pulumi.Input[bool] authentication_enabled: Enable authentication. Value must be one of true or false
        :param pulumi.Input[str] authentication_password: Authentication password
        :param pulumi.Input[str] description: The description of the status page
        :param pulumi.Input[str] failure_message: Message showing when at least one component is not operational
        :param pulumi.Input[str] footer_color: The color of the footer. Eg. "#1F2F41"
        :param pulumi.Input[Sequence[pulumi.Input[str]]] functionality_ids: Functionalities attached to the status page
        :param pulumi.Input[str] ga_tracking_id: Google Analytics tracking ID
        :param pulumi.Input[str] header_color: The color of the header. Eg. "#0061F2"
        :param pulumi.Input[bool] public: Make the status page accessible to the public. Value must be one of true or false
        :param pulumi.Input[str] public_description: The public description of the status page
        :param pulumi.Input[str] public_title: The public title of the status page
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_ids: Services attached to the status page
        :param pulumi.Input[bool] show_uptime: Show uptime. Value must be one of true or false
        :param pulumi.Input[int] show_uptime_last_days: Show uptime over x days. Value must be one of `30`, `60`, `90`, `180`, `360`.
        :param pulumi.Input[str] success_message: Message showing when all components are operational
        :param pulumi.Input[str] time_zone: A valid IANA time zone name.
        :param pulumi.Input[str] title: The title of the status page
        :param pulumi.Input[str] website_privacy_url: Website Privacy URL
        :param pulumi.Input[str] website_support_url: Website Support URL
        :param pulumi.Input[str] website_url: Website URL
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: StatusPageArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a StatusPage resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param StatusPageArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StatusPageArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_search_engine_index: Optional[pulumi.Input[bool]] = None,
                 authentication_enabled: Optional[pulumi.Input[bool]] = None,
                 authentication_password: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 failure_message: Optional[pulumi.Input[str]] = None,
                 footer_color: Optional[pulumi.Input[str]] = None,
                 functionality_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ga_tracking_id: Optional[pulumi.Input[str]] = None,
                 header_color: Optional[pulumi.Input[str]] = None,
                 public: Optional[pulumi.Input[bool]] = None,
                 public_description: Optional[pulumi.Input[str]] = None,
                 public_title: Optional[pulumi.Input[str]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 show_uptime: Optional[pulumi.Input[bool]] = None,
                 show_uptime_last_days: Optional[pulumi.Input[int]] = None,
                 success_message: Optional[pulumi.Input[str]] = None,
                 time_zone: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None,
                 website_privacy_url: Optional[pulumi.Input[str]] = None,
                 website_support_url: Optional[pulumi.Input[str]] = None,
                 website_url: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StatusPageArgs.__new__(StatusPageArgs)

            __props__.__dict__["allow_search_engine_index"] = allow_search_engine_index
            __props__.__dict__["authentication_enabled"] = authentication_enabled
            __props__.__dict__["authentication_password"] = authentication_password
            __props__.__dict__["description"] = description
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["failure_message"] = failure_message
            __props__.__dict__["footer_color"] = footer_color
            __props__.__dict__["functionality_ids"] = functionality_ids
            __props__.__dict__["ga_tracking_id"] = ga_tracking_id
            __props__.__dict__["header_color"] = header_color
            __props__.__dict__["public"] = public
            __props__.__dict__["public_description"] = public_description
            __props__.__dict__["public_title"] = public_title
            __props__.__dict__["service_ids"] = service_ids
            __props__.__dict__["show_uptime"] = show_uptime
            __props__.__dict__["show_uptime_last_days"] = show_uptime_last_days
            __props__.__dict__["success_message"] = success_message
            __props__.__dict__["time_zone"] = time_zone
            if title is None and not opts.urn:
                raise TypeError("Missing required property 'title'")
            __props__.__dict__["title"] = title
            __props__.__dict__["website_privacy_url"] = website_privacy_url
            __props__.__dict__["website_support_url"] = website_support_url
            __props__.__dict__["website_url"] = website_url
        super(StatusPage, __self__).__init__(
            'rootly:index/statusPage:StatusPage',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_search_engine_index: Optional[pulumi.Input[bool]] = None,
            authentication_enabled: Optional[pulumi.Input[bool]] = None,
            authentication_password: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            failure_message: Optional[pulumi.Input[str]] = None,
            footer_color: Optional[pulumi.Input[str]] = None,
            functionality_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            ga_tracking_id: Optional[pulumi.Input[str]] = None,
            header_color: Optional[pulumi.Input[str]] = None,
            public: Optional[pulumi.Input[bool]] = None,
            public_description: Optional[pulumi.Input[str]] = None,
            public_title: Optional[pulumi.Input[str]] = None,
            service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            show_uptime: Optional[pulumi.Input[bool]] = None,
            show_uptime_last_days: Optional[pulumi.Input[int]] = None,
            success_message: Optional[pulumi.Input[str]] = None,
            time_zone: Optional[pulumi.Input[str]] = None,
            title: Optional[pulumi.Input[str]] = None,
            website_privacy_url: Optional[pulumi.Input[str]] = None,
            website_support_url: Optional[pulumi.Input[str]] = None,
            website_url: Optional[pulumi.Input[str]] = None) -> 'StatusPage':
        """
        Get an existing StatusPage resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_search_engine_index: Allow search engines to include your public status page in search results. Value must be one of true or false
        :param pulumi.Input[bool] authentication_enabled: Enable authentication. Value must be one of true or false
        :param pulumi.Input[str] authentication_password: Authentication password
        :param pulumi.Input[str] description: The description of the status page
        :param pulumi.Input[str] failure_message: Message showing when at least one component is not operational
        :param pulumi.Input[str] footer_color: The color of the footer. Eg. "#1F2F41"
        :param pulumi.Input[Sequence[pulumi.Input[str]]] functionality_ids: Functionalities attached to the status page
        :param pulumi.Input[str] ga_tracking_id: Google Analytics tracking ID
        :param pulumi.Input[str] header_color: The color of the header. Eg. "#0061F2"
        :param pulumi.Input[bool] public: Make the status page accessible to the public. Value must be one of true or false
        :param pulumi.Input[str] public_description: The public description of the status page
        :param pulumi.Input[str] public_title: The public title of the status page
        :param pulumi.Input[Sequence[pulumi.Input[str]]] service_ids: Services attached to the status page
        :param pulumi.Input[bool] show_uptime: Show uptime. Value must be one of true or false
        :param pulumi.Input[int] show_uptime_last_days: Show uptime over x days. Value must be one of `30`, `60`, `90`, `180`, `360`.
        :param pulumi.Input[str] success_message: Message showing when all components are operational
        :param pulumi.Input[str] time_zone: A valid IANA time zone name.
        :param pulumi.Input[str] title: The title of the status page
        :param pulumi.Input[str] website_privacy_url: Website Privacy URL
        :param pulumi.Input[str] website_support_url: Website Support URL
        :param pulumi.Input[str] website_url: Website URL
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StatusPageState.__new__(_StatusPageState)

        __props__.__dict__["allow_search_engine_index"] = allow_search_engine_index
        __props__.__dict__["authentication_enabled"] = authentication_enabled
        __props__.__dict__["authentication_password"] = authentication_password
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["failure_message"] = failure_message
        __props__.__dict__["footer_color"] = footer_color
        __props__.__dict__["functionality_ids"] = functionality_ids
        __props__.__dict__["ga_tracking_id"] = ga_tracking_id
        __props__.__dict__["header_color"] = header_color
        __props__.__dict__["public"] = public
        __props__.__dict__["public_description"] = public_description
        __props__.__dict__["public_title"] = public_title
        __props__.__dict__["service_ids"] = service_ids
        __props__.__dict__["show_uptime"] = show_uptime
        __props__.__dict__["show_uptime_last_days"] = show_uptime_last_days
        __props__.__dict__["success_message"] = success_message
        __props__.__dict__["time_zone"] = time_zone
        __props__.__dict__["title"] = title
        __props__.__dict__["website_privacy_url"] = website_privacy_url
        __props__.__dict__["website_support_url"] = website_support_url
        __props__.__dict__["website_url"] = website_url
        return StatusPage(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowSearchEngineIndex")
    def allow_search_engine_index(self) -> pulumi.Output[bool]:
        """
        Allow search engines to include your public status page in search results. Value must be one of true or false
        """
        return pulumi.get(self, "allow_search_engine_index")

    @property
    @pulumi.getter(name="authenticationEnabled")
    def authentication_enabled(self) -> pulumi.Output[bool]:
        """
        Enable authentication. Value must be one of true or false
        """
        return pulumi.get(self, "authentication_enabled")

    @property
    @pulumi.getter(name="authenticationPassword")
    def authentication_password(self) -> pulumi.Output[str]:
        """
        Authentication password
        """
        return pulumi.get(self, "authentication_password")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the status page
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="failureMessage")
    def failure_message(self) -> pulumi.Output[str]:
        """
        Message showing when at least one component is not operational
        """
        return pulumi.get(self, "failure_message")

    @property
    @pulumi.getter(name="footerColor")
    def footer_color(self) -> pulumi.Output[str]:
        """
        The color of the footer. Eg. "#1F2F41"
        """
        return pulumi.get(self, "footer_color")

    @property
    @pulumi.getter(name="functionalityIds")
    def functionality_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Functionalities attached to the status page
        """
        return pulumi.get(self, "functionality_ids")

    @property
    @pulumi.getter(name="gaTrackingId")
    def ga_tracking_id(self) -> pulumi.Output[str]:
        """
        Google Analytics tracking ID
        """
        return pulumi.get(self, "ga_tracking_id")

    @property
    @pulumi.getter(name="headerColor")
    def header_color(self) -> pulumi.Output[str]:
        """
        The color of the header. Eg. "#0061F2"
        """
        return pulumi.get(self, "header_color")

    @property
    @pulumi.getter
    def public(self) -> pulumi.Output[bool]:
        """
        Make the status page accessible to the public. Value must be one of true or false
        """
        return pulumi.get(self, "public")

    @property
    @pulumi.getter(name="publicDescription")
    def public_description(self) -> pulumi.Output[str]:
        """
        The public description of the status page
        """
        return pulumi.get(self, "public_description")

    @property
    @pulumi.getter(name="publicTitle")
    def public_title(self) -> pulumi.Output[str]:
        """
        The public title of the status page
        """
        return pulumi.get(self, "public_title")

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> pulumi.Output[Sequence[str]]:
        """
        Services attached to the status page
        """
        return pulumi.get(self, "service_ids")

    @property
    @pulumi.getter(name="showUptime")
    def show_uptime(self) -> pulumi.Output[bool]:
        """
        Show uptime. Value must be one of true or false
        """
        return pulumi.get(self, "show_uptime")

    @property
    @pulumi.getter(name="showUptimeLastDays")
    def show_uptime_last_days(self) -> pulumi.Output[int]:
        """
        Show uptime over x days. Value must be one of `30`, `60`, `90`, `180`, `360`.
        """
        return pulumi.get(self, "show_uptime_last_days")

    @property
    @pulumi.getter(name="successMessage")
    def success_message(self) -> pulumi.Output[str]:
        """
        Message showing when all components are operational
        """
        return pulumi.get(self, "success_message")

    @property
    @pulumi.getter(name="timeZone")
    def time_zone(self) -> pulumi.Output[Optional[str]]:
        """
        A valid IANA time zone name.
        """
        return pulumi.get(self, "time_zone")

    @property
    @pulumi.getter
    def title(self) -> pulumi.Output[str]:
        """
        The title of the status page
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="websitePrivacyUrl")
    def website_privacy_url(self) -> pulumi.Output[str]:
        """
        Website Privacy URL
        """
        return pulumi.get(self, "website_privacy_url")

    @property
    @pulumi.getter(name="websiteSupportUrl")
    def website_support_url(self) -> pulumi.Output[str]:
        """
        Website Support URL
        """
        return pulumi.get(self, "website_support_url")

    @property
    @pulumi.getter(name="websiteUrl")
    def website_url(self) -> pulumi.Output[str]:
        """
        Website URL
        """
        return pulumi.get(self, "website_url")

