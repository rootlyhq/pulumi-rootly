# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetIncidentPostMortemResult',
    'AwaitableGetIncidentPostMortemResult',
    'get_incident_post_mortem',
    'get_incident_post_mortem_output',
]

@pulumi.output_type
class GetIncidentPostMortemResult:
    """
    A collection of values returned by getIncidentPostMortem.
    """
    def __init__(__self__, created_at=None, id=None, mitigated_at=None, resolved_at=None, started_at=None, status=None):
        if created_at and not isinstance(created_at, dict):
            raise TypeError("Expected argument 'created_at' to be a dict")
        pulumi.set(__self__, "created_at", created_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mitigated_at and not isinstance(mitigated_at, dict):
            raise TypeError("Expected argument 'mitigated_at' to be a dict")
        pulumi.set(__self__, "mitigated_at", mitigated_at)
        if resolved_at and not isinstance(resolved_at, dict):
            raise TypeError("Expected argument 'resolved_at' to be a dict")
        pulumi.set(__self__, "resolved_at", resolved_at)
        if started_at and not isinstance(started_at, dict):
            raise TypeError("Expected argument 'started_at' to be a dict")
        pulumi.set(__self__, "started_at", started_at)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[Mapping[str, str]]:
        """
        Filter by date range using 'lt' and 'gt'.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mitigatedAt")
    def mitigated_at(self) -> Optional[Mapping[str, str]]:
        """
        Filter by date range using 'lt' and 'gt'.
        """
        return pulumi.get(self, "mitigated_at")

    @property
    @pulumi.getter(name="resolvedAt")
    def resolved_at(self) -> Optional[Mapping[str, str]]:
        """
        Filter by date range using 'lt' and 'gt'.
        """
        return pulumi.get(self, "resolved_at")

    @property
    @pulumi.getter(name="startedAt")
    def started_at(self) -> Optional[Mapping[str, str]]:
        """
        Filter by date range using 'lt' and 'gt'.
        """
        return pulumi.get(self, "started_at")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


class AwaitableGetIncidentPostMortemResult(GetIncidentPostMortemResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIncidentPostMortemResult(
            created_at=self.created_at,
            id=self.id,
            mitigated_at=self.mitigated_at,
            resolved_at=self.resolved_at,
            started_at=self.started_at,
            status=self.status)


def get_incident_post_mortem(created_at: Optional[Mapping[str, str]] = None,
                             mitigated_at: Optional[Mapping[str, str]] = None,
                             resolved_at: Optional[Mapping[str, str]] = None,
                             started_at: Optional[Mapping[str, str]] = None,
                             status: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIncidentPostMortemResult:
    """
    ## Example Usage


    :param Mapping[str, str] created_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] mitigated_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] resolved_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] started_at: Filter by date range using 'lt' and 'gt'.
    """
    __args__ = dict()
    __args__['createdAt'] = created_at
    __args__['mitigatedAt'] = mitigated_at
    __args__['resolvedAt'] = resolved_at
    __args__['startedAt'] = started_at
    __args__['status'] = status
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('rootly:index/getIncidentPostMortem:getIncidentPostMortem', __args__, opts=opts, typ=GetIncidentPostMortemResult).value

    return AwaitableGetIncidentPostMortemResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        id=pulumi.get(__ret__, 'id'),
        mitigated_at=pulumi.get(__ret__, 'mitigated_at'),
        resolved_at=pulumi.get(__ret__, 'resolved_at'),
        started_at=pulumi.get(__ret__, 'started_at'),
        status=pulumi.get(__ret__, 'status'))


@_utilities.lift_output_func(get_incident_post_mortem)
def get_incident_post_mortem_output(created_at: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                                    mitigated_at: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                                    resolved_at: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                                    started_at: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                                    status: Optional[pulumi.Input[Optional[str]]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetIncidentPostMortemResult]:
    """
    ## Example Usage


    :param Mapping[str, str] created_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] mitigated_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] resolved_at: Filter by date range using 'lt' and 'gt'.
    :param Mapping[str, str] started_at: Filter by date range using 'lt' and 'gt'.
    """
    ...
