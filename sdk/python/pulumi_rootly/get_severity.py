# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSeverityResult',
    'AwaitableGetSeverityResult',
    'get_severity',
    'get_severity_output',
]

@pulumi.output_type
class GetSeverityResult:
    """
    A collection of values returned by getSeverity.
    """
    def __init__(__self__, color=None, created_at=None, id=None, name=None, severity=None, slug=None):
        if color and not isinstance(color, str):
            raise TypeError("Expected argument 'color' to be a str")
        pulumi.set(__self__, "color", color)
        if created_at and not isinstance(created_at, dict):
            raise TypeError("Expected argument 'created_at' to be a dict")
        pulumi.set(__self__, "created_at", created_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if severity and not isinstance(severity, str):
            raise TypeError("Expected argument 'severity' to be a str")
        pulumi.set(__self__, "severity", severity)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def color(self) -> str:
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[Mapping[str, str]]:
        """
        Filter by date range using 'lt' and 'gt'.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def severity(self) -> str:
        return pulumi.get(self, "severity")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")


class AwaitableGetSeverityResult(GetSeverityResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSeverityResult(
            color=self.color,
            created_at=self.created_at,
            id=self.id,
            name=self.name,
            severity=self.severity,
            slug=self.slug)


def get_severity(color: Optional[str] = None,
                 created_at: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 severity: Optional[str] = None,
                 slug: Optional[str] = None,
                 opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSeverityResult:
    """
    ## Example Usage


    :param Mapping[str, str] created_at: Filter by date range using 'lt' and 'gt'.
    """
    __args__ = dict()
    __args__['color'] = color
    __args__['createdAt'] = created_at
    __args__['name'] = name
    __args__['severity'] = severity
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('rootly:index/getSeverity:getSeverity', __args__, opts=opts, typ=GetSeverityResult).value

    return AwaitableGetSeverityResult(
        color=pulumi.get(__ret__, 'color'),
        created_at=pulumi.get(__ret__, 'created_at'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        severity=pulumi.get(__ret__, 'severity'),
        slug=pulumi.get(__ret__, 'slug'))


@_utilities.lift_output_func(get_severity)
def get_severity_output(color: Optional[pulumi.Input[Optional[str]]] = None,
                        created_at: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                        name: Optional[pulumi.Input[Optional[str]]] = None,
                        severity: Optional[pulumi.Input[Optional[str]]] = None,
                        slug: Optional[pulumi.Input[Optional[str]]] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSeverityResult]:
    """
    ## Example Usage


    :param Mapping[str, str] created_at: Filter by date range using 'lt' and 'gt'.
    """
    ...
