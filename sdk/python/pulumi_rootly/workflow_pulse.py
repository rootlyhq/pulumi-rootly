# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['WorkflowPulseArgs', 'WorkflowPulse']

@pulumi.input_type
class WorkflowPulseArgs:
    def __init__(__self__, *,
                 cause_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 command: Optional[pulumi.Input[str]] = None,
                 command_feedback_enabled: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 functionality_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_role_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_type_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 locked: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 repeat_every_duration: Optional[pulumi.Input[str]] = None,
                 repeat_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 severity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 trigger_params: Optional[pulumi.Input['WorkflowPulseTriggerParamsArgs']] = None,
                 wait: Optional[pulumi.Input[str]] = None,
                 workflow_group_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WorkflowPulse resource.
        :param pulumi.Input[str] command: Workflow command
        :param pulumi.Input[bool] command_feedback_enabled: This will notify you back when the workflow is starting. Value must be one of true or false
        :param pulumi.Input[str] description: The description of the workflow
        :param pulumi.Input[bool] locked: Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
        :param pulumi.Input[str] name: The title of the workflow
        :param pulumi.Input[int] position: The order which the workflow should run with other workflows.
        :param pulumi.Input[str] repeat_every_duration: Repeat workflow every duration
        :param pulumi.Input[Sequence[pulumi.Input[str]]] repeat_ons: Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
        :param pulumi.Input[str] slug: The slug of the workflow
        :param pulumi.Input[str] wait: Wait this duration before executing
        :param pulumi.Input[str] workflow_group_id: The group this workflow belongs to.
        """
        if cause_ids is not None:
            pulumi.set(__self__, "cause_ids", cause_ids)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if command_feedback_enabled is not None:
            pulumi.set(__self__, "command_feedback_enabled", command_feedback_enabled)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if functionality_ids is not None:
            pulumi.set(__self__, "functionality_ids", functionality_ids)
        if group_ids is not None:
            pulumi.set(__self__, "group_ids", group_ids)
        if incident_role_ids is not None:
            pulumi.set(__self__, "incident_role_ids", incident_role_ids)
        if incident_type_ids is not None:
            pulumi.set(__self__, "incident_type_ids", incident_type_ids)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if repeat_every_duration is not None:
            pulumi.set(__self__, "repeat_every_duration", repeat_every_duration)
        if repeat_ons is not None:
            pulumi.set(__self__, "repeat_ons", repeat_ons)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if severity_ids is not None:
            pulumi.set(__self__, "severity_ids", severity_ids)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if trigger_params is not None:
            pulumi.set(__self__, "trigger_params", trigger_params)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)
        if workflow_group_id is not None:
            pulumi.set(__self__, "workflow_group_id", workflow_group_id)

    @property
    @pulumi.getter(name="causeIds")
    def cause_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cause_ids")

    @cause_ids.setter
    def cause_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cause_ids", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        """
        Workflow command
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter(name="commandFeedbackEnabled")
    def command_feedback_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        This will notify you back when the workflow is starting. Value must be one of true or false
        """
        return pulumi.get(self, "command_feedback_enabled")

    @command_feedback_enabled.setter
    def command_feedback_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "command_feedback_enabled", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the workflow
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environment_ids")

    @environment_ids.setter
    def environment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_ids", value)

    @property
    @pulumi.getter(name="functionalityIds")
    def functionality_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "functionality_ids")

    @functionality_ids.setter
    def functionality_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "functionality_ids", value)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "group_ids")

    @group_ids.setter
    def group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_ids", value)

    @property
    @pulumi.getter(name="incidentRoleIds")
    def incident_role_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "incident_role_ids")

    @incident_role_ids.setter
    def incident_role_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_role_ids", value)

    @property
    @pulumi.getter(name="incidentTypeIds")
    def incident_type_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "incident_type_ids")

    @incident_type_ids.setter
    def incident_type_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_type_ids", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[bool]]:
        """
        Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the workflow
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        The order which the workflow should run with other workflows.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter(name="repeatEveryDuration")
    def repeat_every_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Repeat workflow every duration
        """
        return pulumi.get(self, "repeat_every_duration")

    @repeat_every_duration.setter
    def repeat_every_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_every_duration", value)

    @property
    @pulumi.getter(name="repeatOns")
    def repeat_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
        """
        return pulumi.get(self, "repeat_ons")

    @repeat_ons.setter
    def repeat_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "repeat_ons", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter(name="severityIds")
    def severity_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "severity_ids")

    @severity_ids.setter
    def severity_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "severity_ids", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the workflow
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="triggerParams")
    def trigger_params(self) -> Optional[pulumi.Input['WorkflowPulseTriggerParamsArgs']]:
        return pulumi.get(self, "trigger_params")

    @trigger_params.setter
    def trigger_params(self, value: Optional[pulumi.Input['WorkflowPulseTriggerParamsArgs']]):
        pulumi.set(self, "trigger_params", value)

    @property
    @pulumi.getter
    def wait(self) -> Optional[pulumi.Input[str]]:
        """
        Wait this duration before executing
        """
        return pulumi.get(self, "wait")

    @wait.setter
    def wait(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wait", value)

    @property
    @pulumi.getter(name="workflowGroupId")
    def workflow_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The group this workflow belongs to.
        """
        return pulumi.get(self, "workflow_group_id")

    @workflow_group_id.setter
    def workflow_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workflow_group_id", value)


@pulumi.input_type
class _WorkflowPulseState:
    def __init__(__self__, *,
                 cause_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 command: Optional[pulumi.Input[str]] = None,
                 command_feedback_enabled: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 functionality_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_role_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_type_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 locked: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 repeat_every_duration: Optional[pulumi.Input[str]] = None,
                 repeat_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 severity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 trigger_params: Optional[pulumi.Input['WorkflowPulseTriggerParamsArgs']] = None,
                 wait: Optional[pulumi.Input[str]] = None,
                 workflow_group_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WorkflowPulse resources.
        :param pulumi.Input[str] command: Workflow command
        :param pulumi.Input[bool] command_feedback_enabled: This will notify you back when the workflow is starting. Value must be one of true or false
        :param pulumi.Input[str] description: The description of the workflow
        :param pulumi.Input[bool] locked: Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
        :param pulumi.Input[str] name: The title of the workflow
        :param pulumi.Input[int] position: The order which the workflow should run with other workflows.
        :param pulumi.Input[str] repeat_every_duration: Repeat workflow every duration
        :param pulumi.Input[Sequence[pulumi.Input[str]]] repeat_ons: Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
        :param pulumi.Input[str] slug: The slug of the workflow
        :param pulumi.Input[str] wait: Wait this duration before executing
        :param pulumi.Input[str] workflow_group_id: The group this workflow belongs to.
        """
        if cause_ids is not None:
            pulumi.set(__self__, "cause_ids", cause_ids)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if command_feedback_enabled is not None:
            pulumi.set(__self__, "command_feedback_enabled", command_feedback_enabled)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if environment_ids is not None:
            pulumi.set(__self__, "environment_ids", environment_ids)
        if functionality_ids is not None:
            pulumi.set(__self__, "functionality_ids", functionality_ids)
        if group_ids is not None:
            pulumi.set(__self__, "group_ids", group_ids)
        if incident_role_ids is not None:
            pulumi.set(__self__, "incident_role_ids", incident_role_ids)
        if incident_type_ids is not None:
            pulumi.set(__self__, "incident_type_ids", incident_type_ids)
        if locked is not None:
            pulumi.set(__self__, "locked", locked)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if repeat_every_duration is not None:
            pulumi.set(__self__, "repeat_every_duration", repeat_every_duration)
        if repeat_ons is not None:
            pulumi.set(__self__, "repeat_ons", repeat_ons)
        if service_ids is not None:
            pulumi.set(__self__, "service_ids", service_ids)
        if severity_ids is not None:
            pulumi.set(__self__, "severity_ids", severity_ids)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if trigger_params is not None:
            pulumi.set(__self__, "trigger_params", trigger_params)
        if wait is not None:
            pulumi.set(__self__, "wait", wait)
        if workflow_group_id is not None:
            pulumi.set(__self__, "workflow_group_id", workflow_group_id)

    @property
    @pulumi.getter(name="causeIds")
    def cause_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "cause_ids")

    @cause_ids.setter
    def cause_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "cause_ids", value)

    @property
    @pulumi.getter
    def command(self) -> Optional[pulumi.Input[str]]:
        """
        Workflow command
        """
        return pulumi.get(self, "command")

    @command.setter
    def command(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "command", value)

    @property
    @pulumi.getter(name="commandFeedbackEnabled")
    def command_feedback_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        This will notify you back when the workflow is starting. Value must be one of true or false
        """
        return pulumi.get(self, "command_feedback_enabled")

    @command_feedback_enabled.setter
    def command_feedback_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "command_feedback_enabled", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the workflow
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "environment_ids")

    @environment_ids.setter
    def environment_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "environment_ids", value)

    @property
    @pulumi.getter(name="functionalityIds")
    def functionality_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "functionality_ids")

    @functionality_ids.setter
    def functionality_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "functionality_ids", value)

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "group_ids")

    @group_ids.setter
    def group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "group_ids", value)

    @property
    @pulumi.getter(name="incidentRoleIds")
    def incident_role_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "incident_role_ids")

    @incident_role_ids.setter
    def incident_role_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_role_ids", value)

    @property
    @pulumi.getter(name="incidentTypeIds")
    def incident_type_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "incident_type_ids")

    @incident_type_ids.setter
    def incident_type_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "incident_type_ids", value)

    @property
    @pulumi.getter
    def locked(self) -> Optional[pulumi.Input[bool]]:
        """
        Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
        """
        return pulumi.get(self, "locked")

    @locked.setter
    def locked(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "locked", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The title of the workflow
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        The order which the workflow should run with other workflows.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter(name="repeatEveryDuration")
    def repeat_every_duration(self) -> Optional[pulumi.Input[str]]:
        """
        Repeat workflow every duration
        """
        return pulumi.get(self, "repeat_every_duration")

    @repeat_every_duration.setter
    def repeat_every_duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "repeat_every_duration", value)

    @property
    @pulumi.getter(name="repeatOns")
    def repeat_ons(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
        """
        return pulumi.get(self, "repeat_ons")

    @repeat_ons.setter
    def repeat_ons(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "repeat_ons", value)

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "service_ids")

    @service_ids.setter
    def service_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "service_ids", value)

    @property
    @pulumi.getter(name="severityIds")
    def severity_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "severity_ids")

    @severity_ids.setter
    def severity_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "severity_ids", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the workflow
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="triggerParams")
    def trigger_params(self) -> Optional[pulumi.Input['WorkflowPulseTriggerParamsArgs']]:
        return pulumi.get(self, "trigger_params")

    @trigger_params.setter
    def trigger_params(self, value: Optional[pulumi.Input['WorkflowPulseTriggerParamsArgs']]):
        pulumi.set(self, "trigger_params", value)

    @property
    @pulumi.getter
    def wait(self) -> Optional[pulumi.Input[str]]:
        """
        Wait this duration before executing
        """
        return pulumi.get(self, "wait")

    @wait.setter
    def wait(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "wait", value)

    @property
    @pulumi.getter(name="workflowGroupId")
    def workflow_group_id(self) -> Optional[pulumi.Input[str]]:
        """
        The group this workflow belongs to.
        """
        return pulumi.get(self, "workflow_group_id")

    @workflow_group_id.setter
    def workflow_group_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workflow_group_id", value)


class WorkflowPulse(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cause_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 command: Optional[pulumi.Input[str]] = None,
                 command_feedback_enabled: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 functionality_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_role_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_type_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 locked: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 repeat_every_duration: Optional[pulumi.Input[str]] = None,
                 repeat_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 severity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 trigger_params: Optional[pulumi.Input[Union['WorkflowPulseTriggerParamsArgs', 'WorkflowPulseTriggerParamsArgsDict']]] = None,
                 wait: Optional[pulumi.Input[str]] = None,
                 workflow_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] command: Workflow command
        :param pulumi.Input[bool] command_feedback_enabled: This will notify you back when the workflow is starting. Value must be one of true or false
        :param pulumi.Input[str] description: The description of the workflow
        :param pulumi.Input[bool] locked: Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
        :param pulumi.Input[str] name: The title of the workflow
        :param pulumi.Input[int] position: The order which the workflow should run with other workflows.
        :param pulumi.Input[str] repeat_every_duration: Repeat workflow every duration
        :param pulumi.Input[Sequence[pulumi.Input[str]]] repeat_ons: Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
        :param pulumi.Input[str] slug: The slug of the workflow
        :param pulumi.Input[str] wait: Wait this duration before executing
        :param pulumi.Input[str] workflow_group_id: The group this workflow belongs to.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WorkflowPulseArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param WorkflowPulseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkflowPulseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cause_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 command: Optional[pulumi.Input[str]] = None,
                 command_feedback_enabled: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 functionality_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_role_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 incident_type_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 locked: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 repeat_every_duration: Optional[pulumi.Input[str]] = None,
                 repeat_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 severity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 trigger_params: Optional[pulumi.Input[Union['WorkflowPulseTriggerParamsArgs', 'WorkflowPulseTriggerParamsArgsDict']]] = None,
                 wait: Optional[pulumi.Input[str]] = None,
                 workflow_group_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkflowPulseArgs.__new__(WorkflowPulseArgs)

            __props__.__dict__["cause_ids"] = cause_ids
            __props__.__dict__["command"] = command
            __props__.__dict__["command_feedback_enabled"] = command_feedback_enabled
            __props__.__dict__["description"] = description
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["environment_ids"] = environment_ids
            __props__.__dict__["functionality_ids"] = functionality_ids
            __props__.__dict__["group_ids"] = group_ids
            __props__.__dict__["incident_role_ids"] = incident_role_ids
            __props__.__dict__["incident_type_ids"] = incident_type_ids
            __props__.__dict__["locked"] = locked
            __props__.__dict__["name"] = name
            __props__.__dict__["position"] = position
            __props__.__dict__["repeat_every_duration"] = repeat_every_duration
            __props__.__dict__["repeat_ons"] = repeat_ons
            __props__.__dict__["service_ids"] = service_ids
            __props__.__dict__["severity_ids"] = severity_ids
            __props__.__dict__["slug"] = slug
            __props__.__dict__["trigger_params"] = trigger_params
            __props__.__dict__["wait"] = wait
            __props__.__dict__["workflow_group_id"] = workflow_group_id
        super(WorkflowPulse, __self__).__init__(
            'rootly:index/workflowPulse:WorkflowPulse',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cause_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            command: Optional[pulumi.Input[str]] = None,
            command_feedback_enabled: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            environment_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            functionality_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            incident_role_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            incident_type_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            locked: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            position: Optional[pulumi.Input[int]] = None,
            repeat_every_duration: Optional[pulumi.Input[str]] = None,
            repeat_ons: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            service_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            severity_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            trigger_params: Optional[pulumi.Input[Union['WorkflowPulseTriggerParamsArgs', 'WorkflowPulseTriggerParamsArgsDict']]] = None,
            wait: Optional[pulumi.Input[str]] = None,
            workflow_group_id: Optional[pulumi.Input[str]] = None) -> 'WorkflowPulse':
        """
        Get an existing WorkflowPulse resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] command: Workflow command
        :param pulumi.Input[bool] command_feedback_enabled: This will notify you back when the workflow is starting. Value must be one of true or false
        :param pulumi.Input[str] description: The description of the workflow
        :param pulumi.Input[bool] locked: Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
        :param pulumi.Input[str] name: The title of the workflow
        :param pulumi.Input[int] position: The order which the workflow should run with other workflows.
        :param pulumi.Input[str] repeat_every_duration: Repeat workflow every duration
        :param pulumi.Input[Sequence[pulumi.Input[str]]] repeat_ons: Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
        :param pulumi.Input[str] slug: The slug of the workflow
        :param pulumi.Input[str] wait: Wait this duration before executing
        :param pulumi.Input[str] workflow_group_id: The group this workflow belongs to.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkflowPulseState.__new__(_WorkflowPulseState)

        __props__.__dict__["cause_ids"] = cause_ids
        __props__.__dict__["command"] = command
        __props__.__dict__["command_feedback_enabled"] = command_feedback_enabled
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["environment_ids"] = environment_ids
        __props__.__dict__["functionality_ids"] = functionality_ids
        __props__.__dict__["group_ids"] = group_ids
        __props__.__dict__["incident_role_ids"] = incident_role_ids
        __props__.__dict__["incident_type_ids"] = incident_type_ids
        __props__.__dict__["locked"] = locked
        __props__.__dict__["name"] = name
        __props__.__dict__["position"] = position
        __props__.__dict__["repeat_every_duration"] = repeat_every_duration
        __props__.__dict__["repeat_ons"] = repeat_ons
        __props__.__dict__["service_ids"] = service_ids
        __props__.__dict__["severity_ids"] = severity_ids
        __props__.__dict__["slug"] = slug
        __props__.__dict__["trigger_params"] = trigger_params
        __props__.__dict__["wait"] = wait
        __props__.__dict__["workflow_group_id"] = workflow_group_id
        return WorkflowPulse(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="causeIds")
    def cause_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "cause_ids")

    @property
    @pulumi.getter
    def command(self) -> pulumi.Output[str]:
        """
        Workflow command
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="commandFeedbackEnabled")
    def command_feedback_enabled(self) -> pulumi.Output[bool]:
        """
        This will notify you back when the workflow is starting. Value must be one of true or false
        """
        return pulumi.get(self, "command_feedback_enabled")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the workflow
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="environmentIds")
    def environment_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "environment_ids")

    @property
    @pulumi.getter(name="functionalityIds")
    def functionality_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "functionality_ids")

    @property
    @pulumi.getter(name="groupIds")
    def group_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "group_ids")

    @property
    @pulumi.getter(name="incidentRoleIds")
    def incident_role_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "incident_role_ids")

    @property
    @pulumi.getter(name="incidentTypeIds")
    def incident_type_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "incident_type_ids")

    @property
    @pulumi.getter
    def locked(self) -> pulumi.Output[bool]:
        """
        Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
        """
        return pulumi.get(self, "locked")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The title of the workflow
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def position(self) -> pulumi.Output[int]:
        """
        The order which the workflow should run with other workflows.
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter(name="repeatEveryDuration")
    def repeat_every_duration(self) -> pulumi.Output[str]:
        """
        Repeat workflow every duration
        """
        return pulumi.get(self, "repeat_every_duration")

    @property
    @pulumi.getter(name="repeatOns")
    def repeat_ons(self) -> pulumi.Output[Sequence[str]]:
        """
        Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
        """
        return pulumi.get(self, "repeat_ons")

    @property
    @pulumi.getter(name="serviceIds")
    def service_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "service_ids")

    @property
    @pulumi.getter(name="severityIds")
    def severity_ids(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "severity_ids")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        """
        The slug of the workflow
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="triggerParams")
    def trigger_params(self) -> pulumi.Output['outputs.WorkflowPulseTriggerParams']:
        return pulumi.get(self, "trigger_params")

    @property
    @pulumi.getter
    def wait(self) -> pulumi.Output[str]:
        """
        Wait this duration before executing
        """
        return pulumi.get(self, "wait")

    @property
    @pulumi.getter(name="workflowGroupId")
    def workflow_group_id(self) -> pulumi.Output[str]:
        """
        The group this workflow belongs to.
        """
        return pulumi.get(self, "workflow_group_id")

