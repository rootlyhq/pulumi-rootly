# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetWorkflowGroupResult',
    'AwaitableGetWorkflowGroupResult',
    'get_workflow_group',
    'get_workflow_group_output',
]

@pulumi.output_type
class GetWorkflowGroupResult:
    """
    A collection of values returned by getWorkflowGroup.
    """
    def __init__(__self__, expanded=None, id=None, kind=None, name=None, position=None, slug=None):
        if expanded and not isinstance(expanded, bool):
            raise TypeError("Expected argument 'expanded' to be a bool")
        pulumi.set(__self__, "expanded", expanded)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if position and not isinstance(position, int):
            raise TypeError("Expected argument 'position' to be a int")
        pulumi.set(__self__, "position", position)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def expanded(self) -> bool:
        return pulumi.get(self, "expanded")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def kind(self) -> str:
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def position(self) -> int:
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def slug(self) -> str:
        return pulumi.get(self, "slug")


class AwaitableGetWorkflowGroupResult(GetWorkflowGroupResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWorkflowGroupResult(
            expanded=self.expanded,
            id=self.id,
            kind=self.kind,
            name=self.name,
            position=self.position,
            slug=self.slug)


def get_workflow_group(expanded: Optional[bool] = None,
                       kind: Optional[str] = None,
                       name: Optional[str] = None,
                       position: Optional[int] = None,
                       slug: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWorkflowGroupResult:
    """
    ## Example Usage
    """
    __args__ = dict()
    __args__['expanded'] = expanded
    __args__['kind'] = kind
    __args__['name'] = name
    __args__['position'] = position
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('rootly:index/getWorkflowGroup:getWorkflowGroup', __args__, opts=opts, typ=GetWorkflowGroupResult).value

    return AwaitableGetWorkflowGroupResult(
        expanded=pulumi.get(__ret__, 'expanded'),
        id=pulumi.get(__ret__, 'id'),
        kind=pulumi.get(__ret__, 'kind'),
        name=pulumi.get(__ret__, 'name'),
        position=pulumi.get(__ret__, 'position'),
        slug=pulumi.get(__ret__, 'slug'))


@_utilities.lift_output_func(get_workflow_group)
def get_workflow_group_output(expanded: Optional[pulumi.Input[Optional[bool]]] = None,
                              kind: Optional[pulumi.Input[Optional[str]]] = None,
                              name: Optional[pulumi.Input[Optional[str]]] = None,
                              position: Optional[pulumi.Input[Optional[int]]] = None,
                              slug: Optional[pulumi.Input[Optional[str]]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetWorkflowGroupResult]:
    """
    ## Example Usage
    """
    ...
