# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetHeartbeatResult',
    'AwaitableGetHeartbeatResult',
    'get_heartbeat',
    'get_heartbeat_output',
]

@pulumi.output_type
class GetHeartbeatResult:
    """
    A collection of values returned by getHeartbeat.
    """
    def __init__(__self__, created_at=None, id=None, name=None):
        if created_at and not isinstance(created_at, dict):
            raise TypeError("Expected argument 'created_at' to be a dict")
        pulumi.set(__self__, "created_at", created_at)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[Mapping[str, str]]:
        """
        Filter by date range using 'lt' and 'gt'.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


class AwaitableGetHeartbeatResult(GetHeartbeatResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetHeartbeatResult(
            created_at=self.created_at,
            id=self.id,
            name=self.name)


def get_heartbeat(created_at: Optional[Mapping[str, str]] = None,
                  name: Optional[str] = None,
                  opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetHeartbeatResult:
    """
    Use this data source to access information about an existing resource.

    :param Mapping[str, str] created_at: Filter by date range using 'lt' and 'gt'.
    """
    __args__ = dict()
    __args__['createdAt'] = created_at
    __args__['name'] = name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('rootly:index/getHeartbeat:getHeartbeat', __args__, opts=opts, typ=GetHeartbeatResult).value

    return AwaitableGetHeartbeatResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'))


@_utilities.lift_output_func(get_heartbeat)
def get_heartbeat_output(created_at: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                         name: Optional[pulumi.Input[Optional[str]]] = None,
                         opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetHeartbeatResult]:
    """
    Use this data source to access information about an existing resource.

    :param Mapping[str, str] created_at: Filter by date range using 'lt' and 'gt'.
    """
    ...
