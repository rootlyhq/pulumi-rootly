# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['FormFieldPlacementConditionArgs', 'FormFieldPlacementCondition']

@pulumi.input_type
class FormFieldPlacementConditionArgs:
    def __init__(__self__, *,
                 form_field_id: pulumi.Input[str],
                 values: pulumi.Input[Sequence[pulumi.Input[str]]],
                 comparison: Optional[pulumi.Input[str]] = None,
                 conditioned: Optional[pulumi.Input[str]] = None,
                 form_field_placement_id: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None):
        """
        The set of arguments for constructing a FormFieldPlacementCondition resource.
        :param pulumi.Input[str] form_field_id: The condition field.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: The values for comparison.
        :param pulumi.Input[str] comparison: The condition comparison.. Value must be one of `equal`.
        :param pulumi.Input[str] conditioned: The resource or attribute the condition applies.. Value must be one of `placement`, `required`.
        :param pulumi.Input[str] form_field_placement_id: The form field placement this condition applies.
        :param pulumi.Input[int] position: The condition position.
        """
        pulumi.set(__self__, "form_field_id", form_field_id)
        pulumi.set(__self__, "values", values)
        if comparison is not None:
            pulumi.set(__self__, "comparison", comparison)
        if conditioned is not None:
            pulumi.set(__self__, "conditioned", conditioned)
        if form_field_placement_id is not None:
            pulumi.set(__self__, "form_field_placement_id", form_field_placement_id)
        if position is not None:
            pulumi.set(__self__, "position", position)

    @property
    @pulumi.getter(name="formFieldId")
    def form_field_id(self) -> pulumi.Input[str]:
        """
        The condition field.
        """
        return pulumi.get(self, "form_field_id")

    @form_field_id.setter
    def form_field_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "form_field_id", value)

    @property
    @pulumi.getter
    def values(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        The values for comparison.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter
    def comparison(self) -> Optional[pulumi.Input[str]]:
        """
        The condition comparison.. Value must be one of `equal`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def conditioned(self) -> Optional[pulumi.Input[str]]:
        """
        The resource or attribute the condition applies.. Value must be one of `placement`, `required`.
        """
        return pulumi.get(self, "conditioned")

    @conditioned.setter
    def conditioned(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "conditioned", value)

    @property
    @pulumi.getter(name="formFieldPlacementId")
    def form_field_placement_id(self) -> Optional[pulumi.Input[str]]:
        """
        The form field placement this condition applies.
        """
        return pulumi.get(self, "form_field_placement_id")

    @form_field_placement_id.setter
    def form_field_placement_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "form_field_placement_id", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        The condition position.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)


@pulumi.input_type
class _FormFieldPlacementConditionState:
    def __init__(__self__, *,
                 comparison: Optional[pulumi.Input[str]] = None,
                 conditioned: Optional[pulumi.Input[str]] = None,
                 form_field_id: Optional[pulumi.Input[str]] = None,
                 form_field_placement_id: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering FormFieldPlacementCondition resources.
        :param pulumi.Input[str] comparison: The condition comparison.. Value must be one of `equal`.
        :param pulumi.Input[str] conditioned: The resource or attribute the condition applies.. Value must be one of `placement`, `required`.
        :param pulumi.Input[str] form_field_id: The condition field.
        :param pulumi.Input[str] form_field_placement_id: The form field placement this condition applies.
        :param pulumi.Input[int] position: The condition position.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: The values for comparison.
        """
        if comparison is not None:
            pulumi.set(__self__, "comparison", comparison)
        if conditioned is not None:
            pulumi.set(__self__, "conditioned", conditioned)
        if form_field_id is not None:
            pulumi.set(__self__, "form_field_id", form_field_id)
        if form_field_placement_id is not None:
            pulumi.set(__self__, "form_field_placement_id", form_field_placement_id)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def comparison(self) -> Optional[pulumi.Input[str]]:
        """
        The condition comparison.. Value must be one of `equal`.
        """
        return pulumi.get(self, "comparison")

    @comparison.setter
    def comparison(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "comparison", value)

    @property
    @pulumi.getter
    def conditioned(self) -> Optional[pulumi.Input[str]]:
        """
        The resource or attribute the condition applies.. Value must be one of `placement`, `required`.
        """
        return pulumi.get(self, "conditioned")

    @conditioned.setter
    def conditioned(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "conditioned", value)

    @property
    @pulumi.getter(name="formFieldId")
    def form_field_id(self) -> Optional[pulumi.Input[str]]:
        """
        The condition field.
        """
        return pulumi.get(self, "form_field_id")

    @form_field_id.setter
    def form_field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "form_field_id", value)

    @property
    @pulumi.getter(name="formFieldPlacementId")
    def form_field_placement_id(self) -> Optional[pulumi.Input[str]]:
        """
        The form field placement this condition applies.
        """
        return pulumi.get(self, "form_field_placement_id")

    @form_field_placement_id.setter
    def form_field_placement_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "form_field_placement_id", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        The condition position.
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The values for comparison.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


class FormFieldPlacementCondition(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comparison: Optional[pulumi.Input[str]] = None,
                 conditioned: Optional[pulumi.Input[str]] = None,
                 form_field_id: Optional[pulumi.Input[str]] = None,
                 form_field_placement_id: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a FormFieldPlacementCondition resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comparison: The condition comparison.. Value must be one of `equal`.
        :param pulumi.Input[str] conditioned: The resource or attribute the condition applies.. Value must be one of `placement`, `required`.
        :param pulumi.Input[str] form_field_id: The condition field.
        :param pulumi.Input[str] form_field_placement_id: The form field placement this condition applies.
        :param pulumi.Input[int] position: The condition position.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: The values for comparison.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: FormFieldPlacementConditionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a FormFieldPlacementCondition resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param FormFieldPlacementConditionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FormFieldPlacementConditionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 comparison: Optional[pulumi.Input[str]] = None,
                 conditioned: Optional[pulumi.Input[str]] = None,
                 form_field_id: Optional[pulumi.Input[str]] = None,
                 form_field_placement_id: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FormFieldPlacementConditionArgs.__new__(FormFieldPlacementConditionArgs)

            __props__.__dict__["comparison"] = comparison
            __props__.__dict__["conditioned"] = conditioned
            if form_field_id is None and not opts.urn:
                raise TypeError("Missing required property 'form_field_id'")
            __props__.__dict__["form_field_id"] = form_field_id
            __props__.__dict__["form_field_placement_id"] = form_field_placement_id
            __props__.__dict__["position"] = position
            if values is None and not opts.urn:
                raise TypeError("Missing required property 'values'")
            __props__.__dict__["values"] = values
        super(FormFieldPlacementCondition, __self__).__init__(
            'rootly:index/formFieldPlacementCondition:FormFieldPlacementCondition',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            comparison: Optional[pulumi.Input[str]] = None,
            conditioned: Optional[pulumi.Input[str]] = None,
            form_field_id: Optional[pulumi.Input[str]] = None,
            form_field_placement_id: Optional[pulumi.Input[str]] = None,
            position: Optional[pulumi.Input[int]] = None,
            values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'FormFieldPlacementCondition':
        """
        Get an existing FormFieldPlacementCondition resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] comparison: The condition comparison.. Value must be one of `equal`.
        :param pulumi.Input[str] conditioned: The resource or attribute the condition applies.. Value must be one of `placement`, `required`.
        :param pulumi.Input[str] form_field_id: The condition field.
        :param pulumi.Input[str] form_field_placement_id: The form field placement this condition applies.
        :param pulumi.Input[int] position: The condition position.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: The values for comparison.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FormFieldPlacementConditionState.__new__(_FormFieldPlacementConditionState)

        __props__.__dict__["comparison"] = comparison
        __props__.__dict__["conditioned"] = conditioned
        __props__.__dict__["form_field_id"] = form_field_id
        __props__.__dict__["form_field_placement_id"] = form_field_placement_id
        __props__.__dict__["position"] = position
        __props__.__dict__["values"] = values
        return FormFieldPlacementCondition(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def comparison(self) -> pulumi.Output[Optional[str]]:
        """
        The condition comparison.. Value must be one of `equal`.
        """
        return pulumi.get(self, "comparison")

    @property
    @pulumi.getter
    def conditioned(self) -> pulumi.Output[Optional[str]]:
        """
        The resource or attribute the condition applies.. Value must be one of `placement`, `required`.
        """
        return pulumi.get(self, "conditioned")

    @property
    @pulumi.getter(name="formFieldId")
    def form_field_id(self) -> pulumi.Output[str]:
        """
        The condition field.
        """
        return pulumi.get(self, "form_field_id")

    @property
    @pulumi.getter(name="formFieldPlacementId")
    def form_field_placement_id(self) -> pulumi.Output[str]:
        """
        The form field placement this condition applies.
        """
        return pulumi.get(self, "form_field_placement_id")

    @property
    @pulumi.getter
    def position(self) -> pulumi.Output[int]:
        """
        The condition position.
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def values(self) -> pulumi.Output[Sequence[str]]:
        """
        The values for comparison.
        """
        return pulumi.get(self, "values")

