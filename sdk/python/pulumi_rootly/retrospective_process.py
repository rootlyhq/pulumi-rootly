# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['RetrospectiveProcessArgs', 'RetrospectiveProcess']

@pulumi.input_type
class RetrospectiveProcessArgs:
    def __init__(__self__, *,
                 retrospective_process_matching_criteria: pulumi.Input['RetrospectiveProcessRetrospectiveProcessMatchingCriteriaArgs'],
                 copy_from: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RetrospectiveProcess resource.
        :param pulumi.Input[str] copy_from: Retrospective process ID from which retrospective steps have to be copied. To use starter template for retrospective steps provide value: 'starter_template'
        :param pulumi.Input[str] description: The description of the retrospective process
        :param pulumi.Input[bool] is_default: Is the retrospective process default?. Value must be one of true or false
        :param pulumi.Input[str] name: The name of the retrospective process
        """
        pulumi.set(__self__, "retrospective_process_matching_criteria", retrospective_process_matching_criteria)
        if copy_from is not None:
            pulumi.set(__self__, "copy_from", copy_from)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="retrospectiveProcessMatchingCriteria")
    def retrospective_process_matching_criteria(self) -> pulumi.Input['RetrospectiveProcessRetrospectiveProcessMatchingCriteriaArgs']:
        return pulumi.get(self, "retrospective_process_matching_criteria")

    @retrospective_process_matching_criteria.setter
    def retrospective_process_matching_criteria(self, value: pulumi.Input['RetrospectiveProcessRetrospectiveProcessMatchingCriteriaArgs']):
        pulumi.set(self, "retrospective_process_matching_criteria", value)

    @property
    @pulumi.getter(name="copyFrom")
    def copy_from(self) -> Optional[pulumi.Input[str]]:
        """
        Retrospective process ID from which retrospective steps have to be copied. To use starter template for retrospective steps provide value: 'starter_template'
        """
        return pulumi.get(self, "copy_from")

    @copy_from.setter
    def copy_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_from", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the retrospective process
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the retrospective process default?. Value must be one of true or false
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the retrospective process
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _RetrospectiveProcessState:
    def __init__(__self__, *,
                 copy_from: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 retrospective_process_matching_criteria: Optional[pulumi.Input['RetrospectiveProcessRetrospectiveProcessMatchingCriteriaArgs']] = None):
        """
        Input properties used for looking up and filtering RetrospectiveProcess resources.
        :param pulumi.Input[str] copy_from: Retrospective process ID from which retrospective steps have to be copied. To use starter template for retrospective steps provide value: 'starter_template'
        :param pulumi.Input[str] description: The description of the retrospective process
        :param pulumi.Input[bool] is_default: Is the retrospective process default?. Value must be one of true or false
        :param pulumi.Input[str] name: The name of the retrospective process
        """
        if copy_from is not None:
            pulumi.set(__self__, "copy_from", copy_from)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if is_default is not None:
            pulumi.set(__self__, "is_default", is_default)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if retrospective_process_matching_criteria is not None:
            pulumi.set(__self__, "retrospective_process_matching_criteria", retrospective_process_matching_criteria)

    @property
    @pulumi.getter(name="copyFrom")
    def copy_from(self) -> Optional[pulumi.Input[str]]:
        """
        Retrospective process ID from which retrospective steps have to be copied. To use starter template for retrospective steps provide value: 'starter_template'
        """
        return pulumi.get(self, "copy_from")

    @copy_from.setter
    def copy_from(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "copy_from", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the retrospective process
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> Optional[pulumi.Input[bool]]:
        """
        Is the retrospective process default?. Value must be one of true or false
        """
        return pulumi.get(self, "is_default")

    @is_default.setter
    def is_default(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_default", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the retrospective process
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="retrospectiveProcessMatchingCriteria")
    def retrospective_process_matching_criteria(self) -> Optional[pulumi.Input['RetrospectiveProcessRetrospectiveProcessMatchingCriteriaArgs']]:
        return pulumi.get(self, "retrospective_process_matching_criteria")

    @retrospective_process_matching_criteria.setter
    def retrospective_process_matching_criteria(self, value: Optional[pulumi.Input['RetrospectiveProcessRetrospectiveProcessMatchingCriteriaArgs']]):
        pulumi.set(self, "retrospective_process_matching_criteria", value)


class RetrospectiveProcess(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 copy_from: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 retrospective_process_matching_criteria: Optional[pulumi.Input[Union['RetrospectiveProcessRetrospectiveProcessMatchingCriteriaArgs', 'RetrospectiveProcessRetrospectiveProcessMatchingCriteriaArgsDict']]] = None,
                 __props__=None):
        """
        Create a RetrospectiveProcess resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] copy_from: Retrospective process ID from which retrospective steps have to be copied. To use starter template for retrospective steps provide value: 'starter_template'
        :param pulumi.Input[str] description: The description of the retrospective process
        :param pulumi.Input[bool] is_default: Is the retrospective process default?. Value must be one of true or false
        :param pulumi.Input[str] name: The name of the retrospective process
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RetrospectiveProcessArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a RetrospectiveProcess resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param RetrospectiveProcessArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RetrospectiveProcessArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 copy_from: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 is_default: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 retrospective_process_matching_criteria: Optional[pulumi.Input[Union['RetrospectiveProcessRetrospectiveProcessMatchingCriteriaArgs', 'RetrospectiveProcessRetrospectiveProcessMatchingCriteriaArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RetrospectiveProcessArgs.__new__(RetrospectiveProcessArgs)

            __props__.__dict__["copy_from"] = copy_from
            __props__.__dict__["description"] = description
            __props__.__dict__["is_default"] = is_default
            __props__.__dict__["name"] = name
            if retrospective_process_matching_criteria is None and not opts.urn:
                raise TypeError("Missing required property 'retrospective_process_matching_criteria'")
            __props__.__dict__["retrospective_process_matching_criteria"] = retrospective_process_matching_criteria
        super(RetrospectiveProcess, __self__).__init__(
            'rootly:index/retrospectiveProcess:RetrospectiveProcess',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            copy_from: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            is_default: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            retrospective_process_matching_criteria: Optional[pulumi.Input[Union['RetrospectiveProcessRetrospectiveProcessMatchingCriteriaArgs', 'RetrospectiveProcessRetrospectiveProcessMatchingCriteriaArgsDict']]] = None) -> 'RetrospectiveProcess':
        """
        Get an existing RetrospectiveProcess resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] copy_from: Retrospective process ID from which retrospective steps have to be copied. To use starter template for retrospective steps provide value: 'starter_template'
        :param pulumi.Input[str] description: The description of the retrospective process
        :param pulumi.Input[bool] is_default: Is the retrospective process default?. Value must be one of true or false
        :param pulumi.Input[str] name: The name of the retrospective process
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RetrospectiveProcessState.__new__(_RetrospectiveProcessState)

        __props__.__dict__["copy_from"] = copy_from
        __props__.__dict__["description"] = description
        __props__.__dict__["is_default"] = is_default
        __props__.__dict__["name"] = name
        __props__.__dict__["retrospective_process_matching_criteria"] = retrospective_process_matching_criteria
        return RetrospectiveProcess(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="copyFrom")
    def copy_from(self) -> pulumi.Output[Optional[str]]:
        """
        Retrospective process ID from which retrospective steps have to be copied. To use starter template for retrospective steps provide value: 'starter_template'
        """
        return pulumi.get(self, "copy_from")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the retrospective process
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="isDefault")
    def is_default(self) -> pulumi.Output[bool]:
        """
        Is the retrospective process default?. Value must be one of true or false
        """
        return pulumi.get(self, "is_default")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the retrospective process
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="retrospectiveProcessMatchingCriteria")
    def retrospective_process_matching_criteria(self) -> pulumi.Output['outputs.RetrospectiveProcessRetrospectiveProcessMatchingCriteria']:
        return pulumi.get(self, "retrospective_process_matching_criteria")

