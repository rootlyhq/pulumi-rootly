# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['FormFieldArgs', 'FormField']

@pulumi.input_type
class FormFieldArgs:
    def __init__(__self__, *,
                 default_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 input_kind: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 requireds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 show_on_incident_details: Optional[pulumi.Input[bool]] = None,
                 showns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 value_kind: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a FormField resource.
        :param pulumi.Input[str] description: The description of the form field
        :param pulumi.Input[str] input_kind: The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multi_select`, `date`, `datetime`, `number`, `checkbox`, `tags`, `rich_text`.
        :param pulumi.Input[str] kind: The kind of the form field. Value must be one of `custom`, `title`, `summary`, `mitigation_message`, `resolution_message`, `severity`, `environments`, `types`, `services`, `causes`, `functionalities`, `teams`, `visibility`, `mark_as_test`, `mark_as_backfilled`, `labels`, `notify_emails`, `trigger_manual_workflows`, `show_ongoing_incidents`, `attach_alerts`, `mark_as_in_triage`, `in_triage_at`, `started_at`, `detected_at`, `acknowledged_at`, `mitigated_at`, `resolved_at`, `manual_starting_datetime_field`.
        :param pulumi.Input[str] name: The name of the form field
        :param pulumi.Input[bool] show_on_incident_details: Whether the form field is shown on the incident details panel. Value must be one of true or false
        :param pulumi.Input[str] slug: The slug of the form field
        :param pulumi.Input[str] value_kind: The value kind of the form field. Value must be one of `inherit`, `group`, `service`, `functionality`, `user`.
        """
        if default_values is not None:
            pulumi.set(__self__, "default_values", default_values)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if input_kind is not None:
            pulumi.set(__self__, "input_kind", input_kind)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if requireds is not None:
            pulumi.set(__self__, "requireds", requireds)
        if show_on_incident_details is not None:
            pulumi.set(__self__, "show_on_incident_details", show_on_incident_details)
        if showns is not None:
            pulumi.set(__self__, "showns", showns)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if value_kind is not None:
            pulumi.set(__self__, "value_kind", value_kind)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the form field
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="inputKind")
    def input_kind(self) -> Optional[pulumi.Input[str]]:
        """
        The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multi_select`, `date`, `datetime`, `number`, `checkbox`, `tags`, `rich_text`.
        """
        return pulumi.get(self, "input_kind")

    @input_kind.setter
    def input_kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_kind", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        The kind of the form field. Value must be one of `custom`, `title`, `summary`, `mitigation_message`, `resolution_message`, `severity`, `environments`, `types`, `services`, `causes`, `functionalities`, `teams`, `visibility`, `mark_as_test`, `mark_as_backfilled`, `labels`, `notify_emails`, `trigger_manual_workflows`, `show_ongoing_incidents`, `attach_alerts`, `mark_as_in_triage`, `in_triage_at`, `started_at`, `detected_at`, `acknowledged_at`, `mitigated_at`, `resolved_at`, `manual_starting_datetime_field`.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the form field
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def requireds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "requireds")

    @requireds.setter
    def requireds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requireds", value)

    @property
    @pulumi.getter(name="showOnIncidentDetails")
    def show_on_incident_details(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the form field is shown on the incident details panel. Value must be one of true or false
        """
        return pulumi.get(self, "show_on_incident_details")

    @show_on_incident_details.setter
    def show_on_incident_details(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_on_incident_details", value)

    @property
    @pulumi.getter
    def showns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "showns")

    @showns.setter
    def showns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "showns", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the form field
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="valueKind")
    def value_kind(self) -> Optional[pulumi.Input[str]]:
        """
        The value kind of the form field. Value must be one of `inherit`, `group`, `service`, `functionality`, `user`.
        """
        return pulumi.get(self, "value_kind")

    @value_kind.setter
    def value_kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_kind", value)


@pulumi.input_type
class _FormFieldState:
    def __init__(__self__, *,
                 default_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 input_kind: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 requireds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 show_on_incident_details: Optional[pulumi.Input[bool]] = None,
                 showns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 value_kind: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering FormField resources.
        :param pulumi.Input[str] description: The description of the form field
        :param pulumi.Input[str] input_kind: The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multi_select`, `date`, `datetime`, `number`, `checkbox`, `tags`, `rich_text`.
        :param pulumi.Input[str] kind: The kind of the form field. Value must be one of `custom`, `title`, `summary`, `mitigation_message`, `resolution_message`, `severity`, `environments`, `types`, `services`, `causes`, `functionalities`, `teams`, `visibility`, `mark_as_test`, `mark_as_backfilled`, `labels`, `notify_emails`, `trigger_manual_workflows`, `show_ongoing_incidents`, `attach_alerts`, `mark_as_in_triage`, `in_triage_at`, `started_at`, `detected_at`, `acknowledged_at`, `mitigated_at`, `resolved_at`, `manual_starting_datetime_field`.
        :param pulumi.Input[str] name: The name of the form field
        :param pulumi.Input[bool] show_on_incident_details: Whether the form field is shown on the incident details panel. Value must be one of true or false
        :param pulumi.Input[str] slug: The slug of the form field
        :param pulumi.Input[str] value_kind: The value kind of the form field. Value must be one of `inherit`, `group`, `service`, `functionality`, `user`.
        """
        if default_values is not None:
            pulumi.set(__self__, "default_values", default_values)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if input_kind is not None:
            pulumi.set(__self__, "input_kind", input_kind)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if requireds is not None:
            pulumi.set(__self__, "requireds", requireds)
        if show_on_incident_details is not None:
            pulumi.set(__self__, "show_on_incident_details", show_on_incident_details)
        if showns is not None:
            pulumi.set(__self__, "showns", showns)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)
        if value_kind is not None:
            pulumi.set(__self__, "value_kind", value_kind)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "default_values")

    @default_values.setter
    def default_values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "default_values", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of the form field
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "enabled")

    @enabled.setter
    def enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enabled", value)

    @property
    @pulumi.getter(name="inputKind")
    def input_kind(self) -> Optional[pulumi.Input[str]]:
        """
        The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multi_select`, `date`, `datetime`, `number`, `checkbox`, `tags`, `rich_text`.
        """
        return pulumi.get(self, "input_kind")

    @input_kind.setter
    def input_kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "input_kind", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        The kind of the form field. Value must be one of `custom`, `title`, `summary`, `mitigation_message`, `resolution_message`, `severity`, `environments`, `types`, `services`, `causes`, `functionalities`, `teams`, `visibility`, `mark_as_test`, `mark_as_backfilled`, `labels`, `notify_emails`, `trigger_manual_workflows`, `show_ongoing_incidents`, `attach_alerts`, `mark_as_in_triage`, `in_triage_at`, `started_at`, `detected_at`, `acknowledged_at`, `mitigated_at`, `resolved_at`, `manual_starting_datetime_field`.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the form field
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def requireds(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "requireds")

    @requireds.setter
    def requireds(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "requireds", value)

    @property
    @pulumi.getter(name="showOnIncidentDetails")
    def show_on_incident_details(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the form field is shown on the incident details panel. Value must be one of true or false
        """
        return pulumi.get(self, "show_on_incident_details")

    @show_on_incident_details.setter
    def show_on_incident_details(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "show_on_incident_details", value)

    @property
    @pulumi.getter
    def showns(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "showns")

    @showns.setter
    def showns(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "showns", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the form field
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)

    @property
    @pulumi.getter(name="valueKind")
    def value_kind(self) -> Optional[pulumi.Input[str]]:
        """
        The value kind of the form field. Value must be one of `inherit`, `group`, `service`, `functionality`, `user`.
        """
        return pulumi.get(self, "value_kind")

    @value_kind.setter
    def value_kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value_kind", value)


class FormField(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 input_kind: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 requireds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 show_on_incident_details: Optional[pulumi.Input[bool]] = None,
                 showns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 value_kind: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the form field
        :param pulumi.Input[str] input_kind: The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multi_select`, `date`, `datetime`, `number`, `checkbox`, `tags`, `rich_text`.
        :param pulumi.Input[str] kind: The kind of the form field. Value must be one of `custom`, `title`, `summary`, `mitigation_message`, `resolution_message`, `severity`, `environments`, `types`, `services`, `causes`, `functionalities`, `teams`, `visibility`, `mark_as_test`, `mark_as_backfilled`, `labels`, `notify_emails`, `trigger_manual_workflows`, `show_ongoing_incidents`, `attach_alerts`, `mark_as_in_triage`, `in_triage_at`, `started_at`, `detected_at`, `acknowledged_at`, `mitigated_at`, `resolved_at`, `manual_starting_datetime_field`.
        :param pulumi.Input[str] name: The name of the form field
        :param pulumi.Input[bool] show_on_incident_details: Whether the form field is shown on the incident details panel. Value must be one of true or false
        :param pulumi.Input[str] slug: The slug of the form field
        :param pulumi.Input[str] value_kind: The value kind of the form field. Value must be one of `inherit`, `group`, `service`, `functionality`, `user`.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[FormFieldArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Example Usage

        :param str resource_name: The name of the resource.
        :param FormFieldArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(FormFieldArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 default_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 input_kind: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 requireds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 show_on_incident_details: Optional[pulumi.Input[bool]] = None,
                 showns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 value_kind: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = FormFieldArgs.__new__(FormFieldArgs)

            __props__.__dict__["default_values"] = default_values
            __props__.__dict__["description"] = description
            __props__.__dict__["enabled"] = enabled
            __props__.__dict__["input_kind"] = input_kind
            __props__.__dict__["kind"] = kind
            __props__.__dict__["name"] = name
            __props__.__dict__["requireds"] = requireds
            __props__.__dict__["show_on_incident_details"] = show_on_incident_details
            __props__.__dict__["showns"] = showns
            __props__.__dict__["slug"] = slug
            __props__.__dict__["value_kind"] = value_kind
        super(FormField, __self__).__init__(
            'rootly:index/formField:FormField',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            default_values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            input_kind: Optional[pulumi.Input[str]] = None,
            kind: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            requireds: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            show_on_incident_details: Optional[pulumi.Input[bool]] = None,
            showns: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            slug: Optional[pulumi.Input[str]] = None,
            value_kind: Optional[pulumi.Input[str]] = None) -> 'FormField':
        """
        Get an existing FormField resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: The description of the form field
        :param pulumi.Input[str] input_kind: The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multi_select`, `date`, `datetime`, `number`, `checkbox`, `tags`, `rich_text`.
        :param pulumi.Input[str] kind: The kind of the form field. Value must be one of `custom`, `title`, `summary`, `mitigation_message`, `resolution_message`, `severity`, `environments`, `types`, `services`, `causes`, `functionalities`, `teams`, `visibility`, `mark_as_test`, `mark_as_backfilled`, `labels`, `notify_emails`, `trigger_manual_workflows`, `show_ongoing_incidents`, `attach_alerts`, `mark_as_in_triage`, `in_triage_at`, `started_at`, `detected_at`, `acknowledged_at`, `mitigated_at`, `resolved_at`, `manual_starting_datetime_field`.
        :param pulumi.Input[str] name: The name of the form field
        :param pulumi.Input[bool] show_on_incident_details: Whether the form field is shown on the incident details panel. Value must be one of true or false
        :param pulumi.Input[str] slug: The slug of the form field
        :param pulumi.Input[str] value_kind: The value kind of the form field. Value must be one of `inherit`, `group`, `service`, `functionality`, `user`.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _FormFieldState.__new__(_FormFieldState)

        __props__.__dict__["default_values"] = default_values
        __props__.__dict__["description"] = description
        __props__.__dict__["enabled"] = enabled
        __props__.__dict__["input_kind"] = input_kind
        __props__.__dict__["kind"] = kind
        __props__.__dict__["name"] = name
        __props__.__dict__["requireds"] = requireds
        __props__.__dict__["show_on_incident_details"] = show_on_incident_details
        __props__.__dict__["showns"] = showns
        __props__.__dict__["slug"] = slug
        __props__.__dict__["value_kind"] = value_kind
        return FormField(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "default_values")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        The description of the form field
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="inputKind")
    def input_kind(self) -> pulumi.Output[Optional[str]]:
        """
        The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multi_select`, `date`, `datetime`, `number`, `checkbox`, `tags`, `rich_text`.
        """
        return pulumi.get(self, "input_kind")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[Optional[str]]:
        """
        The kind of the form field. Value must be one of `custom`, `title`, `summary`, `mitigation_message`, `resolution_message`, `severity`, `environments`, `types`, `services`, `causes`, `functionalities`, `teams`, `visibility`, `mark_as_test`, `mark_as_backfilled`, `labels`, `notify_emails`, `trigger_manual_workflows`, `show_ongoing_incidents`, `attach_alerts`, `mark_as_in_triage`, `in_triage_at`, `started_at`, `detected_at`, `acknowledged_at`, `mitigated_at`, `resolved_at`, `manual_starting_datetime_field`.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the form field
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def requireds(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "requireds")

    @property
    @pulumi.getter(name="showOnIncidentDetails")
    def show_on_incident_details(self) -> pulumi.Output[bool]:
        """
        Whether the form field is shown on the incident details panel. Value must be one of true or false
        """
        return pulumi.get(self, "show_on_incident_details")

    @property
    @pulumi.getter
    def showns(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "showns")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        """
        The slug of the form field
        """
        return pulumi.get(self, "slug")

    @property
    @pulumi.getter(name="valueKind")
    def value_kind(self) -> pulumi.Output[Optional[str]]:
        """
        The value kind of the form field. Value must be one of `inherit`, `group`, `service`, `functionality`, `user`.
        """
        return pulumi.get(self, "value_kind")

