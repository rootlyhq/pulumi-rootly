# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetSeveritiesResult',
    'AwaitableGetSeveritiesResult',
    'get_severities',
    'get_severities_output',
]

@pulumi.output_type
class GetSeveritiesResult:
    """
    A collection of values returned by getSeverities.
    """
    def __init__(__self__, id=None, name=None, severities=None, slug=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if severities and not isinstance(severities, list):
            raise TypeError("Expected argument 'severities' to be a list")
        pulumi.set(__self__, "severities", severities)
        if slug and not isinstance(slug, str):
            raise TypeError("Expected argument 'slug' to be a str")
        pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def severities(self) -> Sequence['outputs.GetSeveritiesSeverityResult']:
        return pulumi.get(self, "severities")

    @property
    @pulumi.getter
    def slug(self) -> Optional[str]:
        return pulumi.get(self, "slug")


class AwaitableGetSeveritiesResult(GetSeveritiesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSeveritiesResult(
            id=self.id,
            name=self.name,
            severities=self.severities,
            slug=self.slug)


def get_severities(name: Optional[str] = None,
                   slug: Optional[str] = None,
                   opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSeveritiesResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['slug'] = slug
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('rootly:index/getSeverities:getSeverities', __args__, opts=opts, typ=GetSeveritiesResult).value

    return AwaitableGetSeveritiesResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        severities=pulumi.get(__ret__, 'severities'),
        slug=pulumi.get(__ret__, 'slug'))


@_utilities.lift_output_func(get_severities)
def get_severities_output(name: Optional[pulumi.Input[Optional[str]]] = None,
                          slug: Optional[pulumi.Input[Optional[str]]] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSeveritiesResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
