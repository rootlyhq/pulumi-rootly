# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['OverrideShiftArgs', 'OverrideShift']

@pulumi.input_type
class OverrideShiftArgs:
    def __init__(__self__, *,
                 ends_at: pulumi.Input[str],
                 starts_at: pulumi.Input[str],
                 is_override: Optional[pulumi.Input[bool]] = None,
                 rotation_id: Optional[pulumi.Input[str]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 shift_override: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 user: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        The set of arguments for constructing a OverrideShift resource.
        :param pulumi.Input[str] ends_at: End datetime of shift
        :param pulumi.Input[str] starts_at: Start datetime of shift
        :param pulumi.Input[bool] is_override: Denotes shift is an override shift. Value must be one of true or false
        :param pulumi.Input[str] rotation_id: ID of rotation
        :param pulumi.Input[str] schedule_id: ID of schedule
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] shift_override: Override metadata
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] user: User metadata
        """
        pulumi.set(__self__, "ends_at", ends_at)
        pulumi.set(__self__, "starts_at", starts_at)
        if is_override is not None:
            pulumi.set(__self__, "is_override", is_override)
        if rotation_id is not None:
            pulumi.set(__self__, "rotation_id", rotation_id)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if shift_override is not None:
            pulumi.set(__self__, "shift_override", shift_override)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="endsAt")
    def ends_at(self) -> pulumi.Input[str]:
        """
        End datetime of shift
        """
        return pulumi.get(self, "ends_at")

    @ends_at.setter
    def ends_at(self, value: pulumi.Input[str]):
        pulumi.set(self, "ends_at", value)

    @property
    @pulumi.getter(name="startsAt")
    def starts_at(self) -> pulumi.Input[str]:
        """
        Start datetime of shift
        """
        return pulumi.get(self, "starts_at")

    @starts_at.setter
    def starts_at(self, value: pulumi.Input[str]):
        pulumi.set(self, "starts_at", value)

    @property
    @pulumi.getter(name="isOverride")
    def is_override(self) -> Optional[pulumi.Input[bool]]:
        """
        Denotes shift is an override shift. Value must be one of true or false
        """
        return pulumi.get(self, "is_override")

    @is_override.setter
    def is_override(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_override", value)

    @property
    @pulumi.getter(name="rotationId")
    def rotation_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of rotation
        """
        return pulumi.get(self, "rotation_id")

    @rotation_id.setter
    def rotation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rotation_id", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of schedule
        """
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter(name="shiftOverride")
    def shift_override(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Override metadata
        """
        return pulumi.get(self, "shift_override")

    @shift_override.setter
    def shift_override(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "shift_override", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        User metadata
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "user", value)


@pulumi.input_type
class _OverrideShiftState:
    def __init__(__self__, *,
                 ends_at: Optional[pulumi.Input[str]] = None,
                 is_override: Optional[pulumi.Input[bool]] = None,
                 rotation_id: Optional[pulumi.Input[str]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 shift_override: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 starts_at: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering OverrideShift resources.
        :param pulumi.Input[str] ends_at: End datetime of shift
        :param pulumi.Input[bool] is_override: Denotes shift is an override shift. Value must be one of true or false
        :param pulumi.Input[str] rotation_id: ID of rotation
        :param pulumi.Input[str] schedule_id: ID of schedule
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] shift_override: Override metadata
        :param pulumi.Input[str] starts_at: Start datetime of shift
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] user: User metadata
        """
        if ends_at is not None:
            pulumi.set(__self__, "ends_at", ends_at)
        if is_override is not None:
            pulumi.set(__self__, "is_override", is_override)
        if rotation_id is not None:
            pulumi.set(__self__, "rotation_id", rotation_id)
        if schedule_id is not None:
            pulumi.set(__self__, "schedule_id", schedule_id)
        if shift_override is not None:
            pulumi.set(__self__, "shift_override", shift_override)
        if starts_at is not None:
            pulumi.set(__self__, "starts_at", starts_at)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="endsAt")
    def ends_at(self) -> Optional[pulumi.Input[str]]:
        """
        End datetime of shift
        """
        return pulumi.get(self, "ends_at")

    @ends_at.setter
    def ends_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ends_at", value)

    @property
    @pulumi.getter(name="isOverride")
    def is_override(self) -> Optional[pulumi.Input[bool]]:
        """
        Denotes shift is an override shift. Value must be one of true or false
        """
        return pulumi.get(self, "is_override")

    @is_override.setter
    def is_override(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_override", value)

    @property
    @pulumi.getter(name="rotationId")
    def rotation_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of rotation
        """
        return pulumi.get(self, "rotation_id")

    @rotation_id.setter
    def rotation_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rotation_id", value)

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of schedule
        """
        return pulumi.get(self, "schedule_id")

    @schedule_id.setter
    def schedule_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "schedule_id", value)

    @property
    @pulumi.getter(name="shiftOverride")
    def shift_override(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Override metadata
        """
        return pulumi.get(self, "shift_override")

    @shift_override.setter
    def shift_override(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "shift_override", value)

    @property
    @pulumi.getter(name="startsAt")
    def starts_at(self) -> Optional[pulumi.Input[str]]:
        """
        Start datetime of shift
        """
        return pulumi.get(self, "starts_at")

    @starts_at.setter
    def starts_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "starts_at", value)

    @property
    @pulumi.getter
    def user(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        User metadata
        """
        return pulumi.get(self, "user")

    @user.setter
    def user(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "user", value)


class OverrideShift(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ends_at: Optional[pulumi.Input[str]] = None,
                 is_override: Optional[pulumi.Input[bool]] = None,
                 rotation_id: Optional[pulumi.Input[str]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 shift_override: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 starts_at: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        Create a OverrideShift resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ends_at: End datetime of shift
        :param pulumi.Input[bool] is_override: Denotes shift is an override shift. Value must be one of true or false
        :param pulumi.Input[str] rotation_id: ID of rotation
        :param pulumi.Input[str] schedule_id: ID of schedule
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] shift_override: Override metadata
        :param pulumi.Input[str] starts_at: Start datetime of shift
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] user: User metadata
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: OverrideShiftArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a OverrideShift resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param OverrideShiftArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(OverrideShiftArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 ends_at: Optional[pulumi.Input[str]] = None,
                 is_override: Optional[pulumi.Input[bool]] = None,
                 rotation_id: Optional[pulumi.Input[str]] = None,
                 schedule_id: Optional[pulumi.Input[str]] = None,
                 shift_override: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 starts_at: Optional[pulumi.Input[str]] = None,
                 user: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = OverrideShiftArgs.__new__(OverrideShiftArgs)

            if ends_at is None and not opts.urn:
                raise TypeError("Missing required property 'ends_at'")
            __props__.__dict__["ends_at"] = ends_at
            __props__.__dict__["is_override"] = is_override
            __props__.__dict__["rotation_id"] = rotation_id
            __props__.__dict__["schedule_id"] = schedule_id
            __props__.__dict__["shift_override"] = shift_override
            if starts_at is None and not opts.urn:
                raise TypeError("Missing required property 'starts_at'")
            __props__.__dict__["starts_at"] = starts_at
            __props__.__dict__["user"] = user
        super(OverrideShift, __self__).__init__(
            'rootly:index/overrideShift:OverrideShift',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            ends_at: Optional[pulumi.Input[str]] = None,
            is_override: Optional[pulumi.Input[bool]] = None,
            rotation_id: Optional[pulumi.Input[str]] = None,
            schedule_id: Optional[pulumi.Input[str]] = None,
            shift_override: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            starts_at: Optional[pulumi.Input[str]] = None,
            user: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None) -> 'OverrideShift':
        """
        Get an existing OverrideShift resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] ends_at: End datetime of shift
        :param pulumi.Input[bool] is_override: Denotes shift is an override shift. Value must be one of true or false
        :param pulumi.Input[str] rotation_id: ID of rotation
        :param pulumi.Input[str] schedule_id: ID of schedule
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] shift_override: Override metadata
        :param pulumi.Input[str] starts_at: Start datetime of shift
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] user: User metadata
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _OverrideShiftState.__new__(_OverrideShiftState)

        __props__.__dict__["ends_at"] = ends_at
        __props__.__dict__["is_override"] = is_override
        __props__.__dict__["rotation_id"] = rotation_id
        __props__.__dict__["schedule_id"] = schedule_id
        __props__.__dict__["shift_override"] = shift_override
        __props__.__dict__["starts_at"] = starts_at
        __props__.__dict__["user"] = user
        return OverrideShift(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="endsAt")
    def ends_at(self) -> pulumi.Output[str]:
        """
        End datetime of shift
        """
        return pulumi.get(self, "ends_at")

    @property
    @pulumi.getter(name="isOverride")
    def is_override(self) -> pulumi.Output[bool]:
        """
        Denotes shift is an override shift. Value must be one of true or false
        """
        return pulumi.get(self, "is_override")

    @property
    @pulumi.getter(name="rotationId")
    def rotation_id(self) -> pulumi.Output[str]:
        """
        ID of rotation
        """
        return pulumi.get(self, "rotation_id")

    @property
    @pulumi.getter(name="scheduleId")
    def schedule_id(self) -> pulumi.Output[str]:
        """
        ID of schedule
        """
        return pulumi.get(self, "schedule_id")

    @property
    @pulumi.getter(name="shiftOverride")
    def shift_override(self) -> pulumi.Output[Mapping[str, str]]:
        """
        Override metadata
        """
        return pulumi.get(self, "shift_override")

    @property
    @pulumi.getter(name="startsAt")
    def starts_at(self) -> pulumi.Output[str]:
        """
        Start datetime of shift
        """
        return pulumi.get(self, "starts_at")

    @property
    @pulumi.getter
    def user(self) -> pulumi.Output[Mapping[str, str]]:
        """
        User metadata
        """
        return pulumi.get(self, "user")

