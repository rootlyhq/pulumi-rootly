# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['WorkflowCustomFieldSelectionArgs', 'WorkflowCustomFieldSelection']

@pulumi.input_type
class WorkflowCustomFieldSelectionArgs:
    def __init__(__self__, *,
                 custom_field_id: pulumi.Input[int],
                 incident_condition: Optional[pulumi.Input[str]] = None,
                 selected_option_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WorkflowCustomFieldSelection resource.
        :param pulumi.Input[int] custom_field_id: The custom field for this selection
        :param pulumi.Input[str] incident_condition: The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] workflow_id: The workflow for this selection
        """
        pulumi.set(__self__, "custom_field_id", custom_field_id)
        if incident_condition is not None:
            pulumi.set(__self__, "incident_condition", incident_condition)
        if selected_option_ids is not None:
            pulumi.set(__self__, "selected_option_ids", selected_option_ids)
        if values is not None:
            pulumi.set(__self__, "values", values)
        if workflow_id is not None:
            pulumi.set(__self__, "workflow_id", workflow_id)

    @property
    @pulumi.getter(name="customFieldId")
    def custom_field_id(self) -> pulumi.Input[int]:
        """
        The custom field for this selection
        """
        return pulumi.get(self, "custom_field_id")

    @custom_field_id.setter
    def custom_field_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "custom_field_id", value)

    @property
    @pulumi.getter(name="incidentCondition")
    def incident_condition(self) -> Optional[pulumi.Input[str]]:
        """
        The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition")

    @incident_condition.setter
    def incident_condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition", value)

    @property
    @pulumi.getter(name="selectedOptionIds")
    def selected_option_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "selected_option_ids")

    @selected_option_ids.setter
    def selected_option_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "selected_option_ids", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> Optional[pulumi.Input[str]]:
        """
        The workflow for this selection
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workflow_id", value)


@pulumi.input_type
class _WorkflowCustomFieldSelectionState:
    def __init__(__self__, *,
                 custom_field_id: Optional[pulumi.Input[int]] = None,
                 incident_condition: Optional[pulumi.Input[str]] = None,
                 selected_option_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WorkflowCustomFieldSelection resources.
        :param pulumi.Input[int] custom_field_id: The custom field for this selection
        :param pulumi.Input[str] incident_condition: The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] workflow_id: The workflow for this selection
        """
        if custom_field_id is not None:
            pulumi.set(__self__, "custom_field_id", custom_field_id)
        if incident_condition is not None:
            pulumi.set(__self__, "incident_condition", incident_condition)
        if selected_option_ids is not None:
            pulumi.set(__self__, "selected_option_ids", selected_option_ids)
        if values is not None:
            pulumi.set(__self__, "values", values)
        if workflow_id is not None:
            pulumi.set(__self__, "workflow_id", workflow_id)

    @property
    @pulumi.getter(name="customFieldId")
    def custom_field_id(self) -> Optional[pulumi.Input[int]]:
        """
        The custom field for this selection
        """
        return pulumi.get(self, "custom_field_id")

    @custom_field_id.setter
    def custom_field_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "custom_field_id", value)

    @property
    @pulumi.getter(name="incidentCondition")
    def incident_condition(self) -> Optional[pulumi.Input[str]]:
        """
        The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition")

    @incident_condition.setter
    def incident_condition(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "incident_condition", value)

    @property
    @pulumi.getter(name="selectedOptionIds")
    def selected_option_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]:
        return pulumi.get(self, "selected_option_ids")

    @selected_option_ids.setter
    def selected_option_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]]):
        pulumi.set(self, "selected_option_ids", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> Optional[pulumi.Input[str]]:
        """
        The workflow for this selection
        """
        return pulumi.get(self, "workflow_id")

    @workflow_id.setter
    def workflow_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "workflow_id", value)


class WorkflowCustomFieldSelection(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_field_id: Optional[pulumi.Input[int]] = None,
                 incident_condition: Optional[pulumi.Input[str]] = None,
                 selected_option_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a WorkflowCustomFieldSelection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] custom_field_id: The custom field for this selection
        :param pulumi.Input[str] incident_condition: The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] workflow_id: The workflow for this selection
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: WorkflowCustomFieldSelectionArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WorkflowCustomFieldSelection resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WorkflowCustomFieldSelectionArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkflowCustomFieldSelectionArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 custom_field_id: Optional[pulumi.Input[int]] = None,
                 incident_condition: Optional[pulumi.Input[str]] = None,
                 selected_option_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 workflow_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkflowCustomFieldSelectionArgs.__new__(WorkflowCustomFieldSelectionArgs)

            if custom_field_id is None and not opts.urn:
                raise TypeError("Missing required property 'custom_field_id'")
            __props__.__dict__["custom_field_id"] = custom_field_id
            __props__.__dict__["incident_condition"] = incident_condition
            __props__.__dict__["selected_option_ids"] = selected_option_ids
            __props__.__dict__["values"] = values
            __props__.__dict__["workflow_id"] = workflow_id
        super(WorkflowCustomFieldSelection, __self__).__init__(
            'rootly:index/workflowCustomFieldSelection:WorkflowCustomFieldSelection',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            custom_field_id: Optional[pulumi.Input[int]] = None,
            incident_condition: Optional[pulumi.Input[str]] = None,
            selected_option_ids: Optional[pulumi.Input[Sequence[pulumi.Input[int]]]] = None,
            values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            workflow_id: Optional[pulumi.Input[str]] = None) -> 'WorkflowCustomFieldSelection':
        """
        Get an existing WorkflowCustomFieldSelection resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[int] custom_field_id: The custom field for this selection
        :param pulumi.Input[str] incident_condition: The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        :param pulumi.Input[str] workflow_id: The workflow for this selection
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkflowCustomFieldSelectionState.__new__(_WorkflowCustomFieldSelectionState)

        __props__.__dict__["custom_field_id"] = custom_field_id
        __props__.__dict__["incident_condition"] = incident_condition
        __props__.__dict__["selected_option_ids"] = selected_option_ids
        __props__.__dict__["values"] = values
        __props__.__dict__["workflow_id"] = workflow_id
        return WorkflowCustomFieldSelection(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="customFieldId")
    def custom_field_id(self) -> pulumi.Output[int]:
        """
        The custom field for this selection
        """
        return pulumi.get(self, "custom_field_id")

    @property
    @pulumi.getter(name="incidentCondition")
    def incident_condition(self) -> pulumi.Output[Optional[str]]:
        """
        The trigger condition. Value must be one of `IS`, `ANY`, `CONTAINS`, `CONTAINS_ALL`, `CONTAINS_NONE`, `NONE`, `SET`, `UNSET`.
        """
        return pulumi.get(self, "incident_condition")

    @property
    @pulumi.getter(name="selectedOptionIds")
    def selected_option_ids(self) -> pulumi.Output[Sequence[int]]:
        return pulumi.get(self, "selected_option_ids")

    @property
    @pulumi.getter
    def values(self) -> pulumi.Output[Sequence[str]]:
        return pulumi.get(self, "values")

    @property
    @pulumi.getter(name="workflowId")
    def workflow_id(self) -> pulumi.Output[str]:
        """
        The workflow for this selection
        """
        return pulumi.get(self, "workflow_id")

