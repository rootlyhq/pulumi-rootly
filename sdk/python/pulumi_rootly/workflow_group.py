# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['WorkflowGroupArgs', 'WorkflowGroup']

@pulumi.input_type
class WorkflowGroupArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 expanded: Optional[pulumi.Input[bool]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a WorkflowGroup resource.
        :param pulumi.Input[str] description: A description of the workflow group.
        :param pulumi.Input[bool] expanded: Whether the group is expanded or collapsed.. Value must be one of true or false
        :param pulumi.Input[str] icon: An emoji icon displayed next to the workflow group.
        :param pulumi.Input[str] kind: The kind of the workflow group. Value must be one of `simple`, `incident`, `post_mortem`, `action_item`, `pulse`, `alert`.
        :param pulumi.Input[str] name: The name of the workflow group.
        :param pulumi.Input[int] position: The position of the workflow group
        :param pulumi.Input[str] slug: The slug of the workflow group.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expanded is not None:
            pulumi.set(__self__, "expanded", expanded)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the workflow group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def expanded(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the group is expanded or collapsed.. Value must be one of true or false
        """
        return pulumi.get(self, "expanded")

    @expanded.setter
    def expanded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expanded", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        An emoji icon displayed next to the workflow group.
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        The kind of the workflow group. Value must be one of `simple`, `incident`, `post_mortem`, `action_item`, `pulse`, `alert`.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the workflow group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        The position of the workflow group
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the workflow group.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


@pulumi.input_type
class _WorkflowGroupState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 expanded: Optional[pulumi.Input[bool]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 slug: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering WorkflowGroup resources.
        :param pulumi.Input[str] description: A description of the workflow group.
        :param pulumi.Input[bool] expanded: Whether the group is expanded or collapsed.. Value must be one of true or false
        :param pulumi.Input[str] icon: An emoji icon displayed next to the workflow group.
        :param pulumi.Input[str] kind: The kind of the workflow group. Value must be one of `simple`, `incident`, `post_mortem`, `action_item`, `pulse`, `alert`.
        :param pulumi.Input[str] name: The name of the workflow group.
        :param pulumi.Input[int] position: The position of the workflow group
        :param pulumi.Input[str] slug: The slug of the workflow group.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expanded is not None:
            pulumi.set(__self__, "expanded", expanded)
        if icon is not None:
            pulumi.set(__self__, "icon", icon)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if position is not None:
            pulumi.set(__self__, "position", position)
        if slug is not None:
            pulumi.set(__self__, "slug", slug)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        A description of the workflow group.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def expanded(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether the group is expanded or collapsed.. Value must be one of true or false
        """
        return pulumi.get(self, "expanded")

    @expanded.setter
    def expanded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "expanded", value)

    @property
    @pulumi.getter
    def icon(self) -> Optional[pulumi.Input[str]]:
        """
        An emoji icon displayed next to the workflow group.
        """
        return pulumi.get(self, "icon")

    @icon.setter
    def icon(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "icon", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        The kind of the workflow group. Value must be one of `simple`, `incident`, `post_mortem`, `action_item`, `pulse`, `alert`.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the workflow group.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def position(self) -> Optional[pulumi.Input[int]]:
        """
        The position of the workflow group
        """
        return pulumi.get(self, "position")

    @position.setter
    def position(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "position", value)

    @property
    @pulumi.getter
    def slug(self) -> Optional[pulumi.Input[str]]:
        """
        The slug of the workflow group.
        """
        return pulumi.get(self, "slug")

    @slug.setter
    def slug(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "slug", value)


class WorkflowGroup(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 expanded: Optional[pulumi.Input[bool]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a WorkflowGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A description of the workflow group.
        :param pulumi.Input[bool] expanded: Whether the group is expanded or collapsed.. Value must be one of true or false
        :param pulumi.Input[str] icon: An emoji icon displayed next to the workflow group.
        :param pulumi.Input[str] kind: The kind of the workflow group. Value must be one of `simple`, `incident`, `post_mortem`, `action_item`, `pulse`, `alert`.
        :param pulumi.Input[str] name: The name of the workflow group.
        :param pulumi.Input[int] position: The position of the workflow group
        :param pulumi.Input[str] slug: The slug of the workflow group.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[WorkflowGroupArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a WorkflowGroup resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param WorkflowGroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(WorkflowGroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 expanded: Optional[pulumi.Input[bool]] = None,
                 icon: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 position: Optional[pulumi.Input[int]] = None,
                 slug: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = WorkflowGroupArgs.__new__(WorkflowGroupArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["expanded"] = expanded
            __props__.__dict__["icon"] = icon
            __props__.__dict__["kind"] = kind
            __props__.__dict__["name"] = name
            __props__.__dict__["position"] = position
            __props__.__dict__["slug"] = slug
        super(WorkflowGroup, __self__).__init__(
            'rootly:index/workflowGroup:WorkflowGroup',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            expanded: Optional[pulumi.Input[bool]] = None,
            icon: Optional[pulumi.Input[str]] = None,
            kind: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            position: Optional[pulumi.Input[int]] = None,
            slug: Optional[pulumi.Input[str]] = None) -> 'WorkflowGroup':
        """
        Get an existing WorkflowGroup resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: A description of the workflow group.
        :param pulumi.Input[bool] expanded: Whether the group is expanded or collapsed.. Value must be one of true or false
        :param pulumi.Input[str] icon: An emoji icon displayed next to the workflow group.
        :param pulumi.Input[str] kind: The kind of the workflow group. Value must be one of `simple`, `incident`, `post_mortem`, `action_item`, `pulse`, `alert`.
        :param pulumi.Input[str] name: The name of the workflow group.
        :param pulumi.Input[int] position: The position of the workflow group
        :param pulumi.Input[str] slug: The slug of the workflow group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _WorkflowGroupState.__new__(_WorkflowGroupState)

        __props__.__dict__["description"] = description
        __props__.__dict__["expanded"] = expanded
        __props__.__dict__["icon"] = icon
        __props__.__dict__["kind"] = kind
        __props__.__dict__["name"] = name
        __props__.__dict__["position"] = position
        __props__.__dict__["slug"] = slug
        return WorkflowGroup(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        A description of the workflow group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def expanded(self) -> pulumi.Output[bool]:
        """
        Whether the group is expanded or collapsed.. Value must be one of true or false
        """
        return pulumi.get(self, "expanded")

    @property
    @pulumi.getter
    def icon(self) -> pulumi.Output[str]:
        """
        An emoji icon displayed next to the workflow group.
        """
        return pulumi.get(self, "icon")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[Optional[str]]:
        """
        The kind of the workflow group. Value must be one of `simple`, `incident`, `post_mortem`, `action_item`, `pulse`, `alert`.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the workflow group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def position(self) -> pulumi.Output[int]:
        """
        The position of the workflow group
        """
        return pulumi.get(self, "position")

    @property
    @pulumi.getter
    def slug(self) -> pulumi.Output[str]:
        """
        The slug of the workflow group.
        """
        return pulumi.get(self, "slug")

