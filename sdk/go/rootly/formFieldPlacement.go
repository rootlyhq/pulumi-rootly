// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type FormFieldPlacement struct {
	pulumi.CustomResourceState

	// The form this field is placed on.
	Form pulumi.StringOutput `pulumi:"form"`
	// The form field that is placed.
	FormFieldId pulumi.StringOutput `pulumi:"formFieldId"`
	// The form set this field is placed in.
	FormSetId pulumi.StringOutput `pulumi:"formSetId"`
	// The position of the field placement.
	Position pulumi.IntOutput `pulumi:"position"`
	// Whether the field is required on this form.. Value must be one of true or false
	Required pulumi.BoolOutput `pulumi:"required"`
}

// NewFormFieldPlacement registers a new resource with the given unique name, arguments, and options.
func NewFormFieldPlacement(ctx *pulumi.Context,
	name string, args *FormFieldPlacementArgs, opts ...pulumi.ResourceOption) (*FormFieldPlacement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Form == nil {
		return nil, errors.New("invalid value for required argument 'Form'")
	}
	if args.FormSetId == nil {
		return nil, errors.New("invalid value for required argument 'FormSetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FormFieldPlacement
	err := ctx.RegisterResource("rootly:index/formFieldPlacement:FormFieldPlacement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFormFieldPlacement gets an existing FormFieldPlacement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFormFieldPlacement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FormFieldPlacementState, opts ...pulumi.ResourceOption) (*FormFieldPlacement, error) {
	var resource FormFieldPlacement
	err := ctx.ReadResource("rootly:index/formFieldPlacement:FormFieldPlacement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FormFieldPlacement resources.
type formFieldPlacementState struct {
	// The form this field is placed on.
	Form *string `pulumi:"form"`
	// The form field that is placed.
	FormFieldId *string `pulumi:"formFieldId"`
	// The form set this field is placed in.
	FormSetId *string `pulumi:"formSetId"`
	// The position of the field placement.
	Position *int `pulumi:"position"`
	// Whether the field is required on this form.. Value must be one of true or false
	Required *bool `pulumi:"required"`
}

type FormFieldPlacementState struct {
	// The form this field is placed on.
	Form pulumi.StringPtrInput
	// The form field that is placed.
	FormFieldId pulumi.StringPtrInput
	// The form set this field is placed in.
	FormSetId pulumi.StringPtrInput
	// The position of the field placement.
	Position pulumi.IntPtrInput
	// Whether the field is required on this form.. Value must be one of true or false
	Required pulumi.BoolPtrInput
}

func (FormFieldPlacementState) ElementType() reflect.Type {
	return reflect.TypeOf((*formFieldPlacementState)(nil)).Elem()
}

type formFieldPlacementArgs struct {
	// The form this field is placed on.
	Form string `pulumi:"form"`
	// The form field that is placed.
	FormFieldId *string `pulumi:"formFieldId"`
	// The form set this field is placed in.
	FormSetId string `pulumi:"formSetId"`
	// The position of the field placement.
	Position *int `pulumi:"position"`
	// Whether the field is required on this form.. Value must be one of true or false
	Required *bool `pulumi:"required"`
}

// The set of arguments for constructing a FormFieldPlacement resource.
type FormFieldPlacementArgs struct {
	// The form this field is placed on.
	Form pulumi.StringInput
	// The form field that is placed.
	FormFieldId pulumi.StringPtrInput
	// The form set this field is placed in.
	FormSetId pulumi.StringInput
	// The position of the field placement.
	Position pulumi.IntPtrInput
	// Whether the field is required on this form.. Value must be one of true or false
	Required pulumi.BoolPtrInput
}

func (FormFieldPlacementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*formFieldPlacementArgs)(nil)).Elem()
}

type FormFieldPlacementInput interface {
	pulumi.Input

	ToFormFieldPlacementOutput() FormFieldPlacementOutput
	ToFormFieldPlacementOutputWithContext(ctx context.Context) FormFieldPlacementOutput
}

func (*FormFieldPlacement) ElementType() reflect.Type {
	return reflect.TypeOf((**FormFieldPlacement)(nil)).Elem()
}

func (i *FormFieldPlacement) ToFormFieldPlacementOutput() FormFieldPlacementOutput {
	return i.ToFormFieldPlacementOutputWithContext(context.Background())
}

func (i *FormFieldPlacement) ToFormFieldPlacementOutputWithContext(ctx context.Context) FormFieldPlacementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldPlacementOutput)
}

// FormFieldPlacementArrayInput is an input type that accepts FormFieldPlacementArray and FormFieldPlacementArrayOutput values.
// You can construct a concrete instance of `FormFieldPlacementArrayInput` via:
//
//	FormFieldPlacementArray{ FormFieldPlacementArgs{...} }
type FormFieldPlacementArrayInput interface {
	pulumi.Input

	ToFormFieldPlacementArrayOutput() FormFieldPlacementArrayOutput
	ToFormFieldPlacementArrayOutputWithContext(context.Context) FormFieldPlacementArrayOutput
}

type FormFieldPlacementArray []FormFieldPlacementInput

func (FormFieldPlacementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FormFieldPlacement)(nil)).Elem()
}

func (i FormFieldPlacementArray) ToFormFieldPlacementArrayOutput() FormFieldPlacementArrayOutput {
	return i.ToFormFieldPlacementArrayOutputWithContext(context.Background())
}

func (i FormFieldPlacementArray) ToFormFieldPlacementArrayOutputWithContext(ctx context.Context) FormFieldPlacementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldPlacementArrayOutput)
}

// FormFieldPlacementMapInput is an input type that accepts FormFieldPlacementMap and FormFieldPlacementMapOutput values.
// You can construct a concrete instance of `FormFieldPlacementMapInput` via:
//
//	FormFieldPlacementMap{ "key": FormFieldPlacementArgs{...} }
type FormFieldPlacementMapInput interface {
	pulumi.Input

	ToFormFieldPlacementMapOutput() FormFieldPlacementMapOutput
	ToFormFieldPlacementMapOutputWithContext(context.Context) FormFieldPlacementMapOutput
}

type FormFieldPlacementMap map[string]FormFieldPlacementInput

func (FormFieldPlacementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FormFieldPlacement)(nil)).Elem()
}

func (i FormFieldPlacementMap) ToFormFieldPlacementMapOutput() FormFieldPlacementMapOutput {
	return i.ToFormFieldPlacementMapOutputWithContext(context.Background())
}

func (i FormFieldPlacementMap) ToFormFieldPlacementMapOutputWithContext(ctx context.Context) FormFieldPlacementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldPlacementMapOutput)
}

type FormFieldPlacementOutput struct{ *pulumi.OutputState }

func (FormFieldPlacementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormFieldPlacement)(nil)).Elem()
}

func (o FormFieldPlacementOutput) ToFormFieldPlacementOutput() FormFieldPlacementOutput {
	return o
}

func (o FormFieldPlacementOutput) ToFormFieldPlacementOutputWithContext(ctx context.Context) FormFieldPlacementOutput {
	return o
}

// The form this field is placed on.
func (o FormFieldPlacementOutput) Form() pulumi.StringOutput {
	return o.ApplyT(func(v *FormFieldPlacement) pulumi.StringOutput { return v.Form }).(pulumi.StringOutput)
}

// The form field that is placed.
func (o FormFieldPlacementOutput) FormFieldId() pulumi.StringOutput {
	return o.ApplyT(func(v *FormFieldPlacement) pulumi.StringOutput { return v.FormFieldId }).(pulumi.StringOutput)
}

// The form set this field is placed in.
func (o FormFieldPlacementOutput) FormSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *FormFieldPlacement) pulumi.StringOutput { return v.FormSetId }).(pulumi.StringOutput)
}

// The position of the field placement.
func (o FormFieldPlacementOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *FormFieldPlacement) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Whether the field is required on this form.. Value must be one of true or false
func (o FormFieldPlacementOutput) Required() pulumi.BoolOutput {
	return o.ApplyT(func(v *FormFieldPlacement) pulumi.BoolOutput { return v.Required }).(pulumi.BoolOutput)
}

type FormFieldPlacementArrayOutput struct{ *pulumi.OutputState }

func (FormFieldPlacementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FormFieldPlacement)(nil)).Elem()
}

func (o FormFieldPlacementArrayOutput) ToFormFieldPlacementArrayOutput() FormFieldPlacementArrayOutput {
	return o
}

func (o FormFieldPlacementArrayOutput) ToFormFieldPlacementArrayOutputWithContext(ctx context.Context) FormFieldPlacementArrayOutput {
	return o
}

func (o FormFieldPlacementArrayOutput) Index(i pulumi.IntInput) FormFieldPlacementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FormFieldPlacement {
		return vs[0].([]*FormFieldPlacement)[vs[1].(int)]
	}).(FormFieldPlacementOutput)
}

type FormFieldPlacementMapOutput struct{ *pulumi.OutputState }

func (FormFieldPlacementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FormFieldPlacement)(nil)).Elem()
}

func (o FormFieldPlacementMapOutput) ToFormFieldPlacementMapOutput() FormFieldPlacementMapOutput {
	return o
}

func (o FormFieldPlacementMapOutput) ToFormFieldPlacementMapOutputWithContext(ctx context.Context) FormFieldPlacementMapOutput {
	return o
}

func (o FormFieldPlacementMapOutput) MapIndex(k pulumi.StringInput) FormFieldPlacementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FormFieldPlacement {
		return vs[0].(map[string]*FormFieldPlacement)[vs[1].(string)]
	}).(FormFieldPlacementOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldPlacementInput)(nil)).Elem(), &FormFieldPlacement{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldPlacementArrayInput)(nil)).Elem(), FormFieldPlacementArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldPlacementMapInput)(nil)).Elem(), FormFieldPlacementMap{})
	pulumi.RegisterOutputType(FormFieldPlacementOutput{})
	pulumi.RegisterOutputType(FormFieldPlacementArrayOutput{})
	pulumi.RegisterOutputType(FormFieldPlacementMapOutput{})
}
