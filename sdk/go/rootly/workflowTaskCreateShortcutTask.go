// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createShortcutTask task.
type WorkflowTaskCreateShortcutTask struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateShortcutTaskTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreateShortcutTask registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreateShortcutTask(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreateShortcutTaskArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateShortcutTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreateShortcutTask
	err := ctx.RegisterResource("rootly:index/workflowTaskCreateShortcutTask:WorkflowTaskCreateShortcutTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreateShortcutTask gets an existing WorkflowTaskCreateShortcutTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreateShortcutTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreateShortcutTaskState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateShortcutTask, error) {
	var resource WorkflowTaskCreateShortcutTask
	err := ctx.ReadResource("rootly:index/workflowTaskCreateShortcutTask:WorkflowTaskCreateShortcutTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreateShortcutTask resources.
type workflowTaskCreateShortcutTaskState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreateShortcutTaskTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreateShortcutTaskState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateShortcutTaskTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreateShortcutTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateShortcutTaskState)(nil)).Elem()
}

type workflowTaskCreateShortcutTaskArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateShortcutTaskTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreateShortcutTask resource.
type WorkflowTaskCreateShortcutTaskArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateShortcutTaskTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreateShortcutTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateShortcutTaskArgs)(nil)).Elem()
}

type WorkflowTaskCreateShortcutTaskInput interface {
	pulumi.Input

	ToWorkflowTaskCreateShortcutTaskOutput() WorkflowTaskCreateShortcutTaskOutput
	ToWorkflowTaskCreateShortcutTaskOutputWithContext(ctx context.Context) WorkflowTaskCreateShortcutTaskOutput
}

func (*WorkflowTaskCreateShortcutTask) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateShortcutTask)(nil)).Elem()
}

func (i *WorkflowTaskCreateShortcutTask) ToWorkflowTaskCreateShortcutTaskOutput() WorkflowTaskCreateShortcutTaskOutput {
	return i.ToWorkflowTaskCreateShortcutTaskOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreateShortcutTask) ToWorkflowTaskCreateShortcutTaskOutputWithContext(ctx context.Context) WorkflowTaskCreateShortcutTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateShortcutTaskOutput)
}

// WorkflowTaskCreateShortcutTaskArrayInput is an input type that accepts WorkflowTaskCreateShortcutTaskArray and WorkflowTaskCreateShortcutTaskArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateShortcutTaskArrayInput` via:
//
//	WorkflowTaskCreateShortcutTaskArray{ WorkflowTaskCreateShortcutTaskArgs{...} }
type WorkflowTaskCreateShortcutTaskArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreateShortcutTaskArrayOutput() WorkflowTaskCreateShortcutTaskArrayOutput
	ToWorkflowTaskCreateShortcutTaskArrayOutputWithContext(context.Context) WorkflowTaskCreateShortcutTaskArrayOutput
}

type WorkflowTaskCreateShortcutTaskArray []WorkflowTaskCreateShortcutTaskInput

func (WorkflowTaskCreateShortcutTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateShortcutTask)(nil)).Elem()
}

func (i WorkflowTaskCreateShortcutTaskArray) ToWorkflowTaskCreateShortcutTaskArrayOutput() WorkflowTaskCreateShortcutTaskArrayOutput {
	return i.ToWorkflowTaskCreateShortcutTaskArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateShortcutTaskArray) ToWorkflowTaskCreateShortcutTaskArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateShortcutTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateShortcutTaskArrayOutput)
}

// WorkflowTaskCreateShortcutTaskMapInput is an input type that accepts WorkflowTaskCreateShortcutTaskMap and WorkflowTaskCreateShortcutTaskMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateShortcutTaskMapInput` via:
//
//	WorkflowTaskCreateShortcutTaskMap{ "key": WorkflowTaskCreateShortcutTaskArgs{...} }
type WorkflowTaskCreateShortcutTaskMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreateShortcutTaskMapOutput() WorkflowTaskCreateShortcutTaskMapOutput
	ToWorkflowTaskCreateShortcutTaskMapOutputWithContext(context.Context) WorkflowTaskCreateShortcutTaskMapOutput
}

type WorkflowTaskCreateShortcutTaskMap map[string]WorkflowTaskCreateShortcutTaskInput

func (WorkflowTaskCreateShortcutTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateShortcutTask)(nil)).Elem()
}

func (i WorkflowTaskCreateShortcutTaskMap) ToWorkflowTaskCreateShortcutTaskMapOutput() WorkflowTaskCreateShortcutTaskMapOutput {
	return i.ToWorkflowTaskCreateShortcutTaskMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateShortcutTaskMap) ToWorkflowTaskCreateShortcutTaskMapOutputWithContext(ctx context.Context) WorkflowTaskCreateShortcutTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateShortcutTaskMapOutput)
}

type WorkflowTaskCreateShortcutTaskOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateShortcutTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateShortcutTask)(nil)).Elem()
}

func (o WorkflowTaskCreateShortcutTaskOutput) ToWorkflowTaskCreateShortcutTaskOutput() WorkflowTaskCreateShortcutTaskOutput {
	return o
}

func (o WorkflowTaskCreateShortcutTaskOutput) ToWorkflowTaskCreateShortcutTaskOutputWithContext(ctx context.Context) WorkflowTaskCreateShortcutTaskOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreateShortcutTaskOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateShortcutTask) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreateShortcutTaskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateShortcutTask) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreateShortcutTaskOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateShortcutTask) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreateShortcutTaskOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateShortcutTask) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreateShortcutTaskOutput) TaskParams() WorkflowTaskCreateShortcutTaskTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateShortcutTask) WorkflowTaskCreateShortcutTaskTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskCreateShortcutTaskTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreateShortcutTaskOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateShortcutTask) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreateShortcutTaskArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateShortcutTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateShortcutTask)(nil)).Elem()
}

func (o WorkflowTaskCreateShortcutTaskArrayOutput) ToWorkflowTaskCreateShortcutTaskArrayOutput() WorkflowTaskCreateShortcutTaskArrayOutput {
	return o
}

func (o WorkflowTaskCreateShortcutTaskArrayOutput) ToWorkflowTaskCreateShortcutTaskArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateShortcutTaskArrayOutput {
	return o
}

func (o WorkflowTaskCreateShortcutTaskArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreateShortcutTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreateShortcutTask {
		return vs[0].([]*WorkflowTaskCreateShortcutTask)[vs[1].(int)]
	}).(WorkflowTaskCreateShortcutTaskOutput)
}

type WorkflowTaskCreateShortcutTaskMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateShortcutTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateShortcutTask)(nil)).Elem()
}

func (o WorkflowTaskCreateShortcutTaskMapOutput) ToWorkflowTaskCreateShortcutTaskMapOutput() WorkflowTaskCreateShortcutTaskMapOutput {
	return o
}

func (o WorkflowTaskCreateShortcutTaskMapOutput) ToWorkflowTaskCreateShortcutTaskMapOutputWithContext(ctx context.Context) WorkflowTaskCreateShortcutTaskMapOutput {
	return o
}

func (o WorkflowTaskCreateShortcutTaskMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreateShortcutTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreateShortcutTask {
		return vs[0].(map[string]*WorkflowTaskCreateShortcutTask)[vs[1].(string)]
	}).(WorkflowTaskCreateShortcutTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateShortcutTaskInput)(nil)).Elem(), &WorkflowTaskCreateShortcutTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateShortcutTaskArrayInput)(nil)).Elem(), WorkflowTaskCreateShortcutTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateShortcutTaskMapInput)(nil)).Elem(), WorkflowTaskCreateShortcutTaskMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreateShortcutTaskOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateShortcutTaskArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateShortcutTaskMapOutput{})
}
