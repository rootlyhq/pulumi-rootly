// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow getAlerts task.
type WorkflowTaskGetAlerts struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskGetAlertsTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskGetAlerts registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskGetAlerts(ctx *pulumi.Context,
	name string, args *WorkflowTaskGetAlertsArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskGetAlerts, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskGetAlerts
	err := ctx.RegisterResource("rootly:index/workflowTaskGetAlerts:WorkflowTaskGetAlerts", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskGetAlerts gets an existing WorkflowTaskGetAlerts resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskGetAlerts(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskGetAlertsState, opts ...pulumi.ResourceOption) (*WorkflowTaskGetAlerts, error) {
	var resource WorkflowTaskGetAlerts
	err := ctx.ReadResource("rootly:index/workflowTaskGetAlerts:WorkflowTaskGetAlerts", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskGetAlerts resources.
type workflowTaskGetAlertsState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskGetAlertsTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskGetAlertsState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskGetAlertsTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskGetAlertsState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskGetAlertsState)(nil)).Elem()
}

type workflowTaskGetAlertsArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskGetAlertsTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskGetAlerts resource.
type WorkflowTaskGetAlertsArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskGetAlertsTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskGetAlertsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskGetAlertsArgs)(nil)).Elem()
}

type WorkflowTaskGetAlertsInput interface {
	pulumi.Input

	ToWorkflowTaskGetAlertsOutput() WorkflowTaskGetAlertsOutput
	ToWorkflowTaskGetAlertsOutputWithContext(ctx context.Context) WorkflowTaskGetAlertsOutput
}

func (*WorkflowTaskGetAlerts) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskGetAlerts)(nil)).Elem()
}

func (i *WorkflowTaskGetAlerts) ToWorkflowTaskGetAlertsOutput() WorkflowTaskGetAlertsOutput {
	return i.ToWorkflowTaskGetAlertsOutputWithContext(context.Background())
}

func (i *WorkflowTaskGetAlerts) ToWorkflowTaskGetAlertsOutputWithContext(ctx context.Context) WorkflowTaskGetAlertsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskGetAlertsOutput)
}

// WorkflowTaskGetAlertsArrayInput is an input type that accepts WorkflowTaskGetAlertsArray and WorkflowTaskGetAlertsArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskGetAlertsArrayInput` via:
//
//	WorkflowTaskGetAlertsArray{ WorkflowTaskGetAlertsArgs{...} }
type WorkflowTaskGetAlertsArrayInput interface {
	pulumi.Input

	ToWorkflowTaskGetAlertsArrayOutput() WorkflowTaskGetAlertsArrayOutput
	ToWorkflowTaskGetAlertsArrayOutputWithContext(context.Context) WorkflowTaskGetAlertsArrayOutput
}

type WorkflowTaskGetAlertsArray []WorkflowTaskGetAlertsInput

func (WorkflowTaskGetAlertsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskGetAlerts)(nil)).Elem()
}

func (i WorkflowTaskGetAlertsArray) ToWorkflowTaskGetAlertsArrayOutput() WorkflowTaskGetAlertsArrayOutput {
	return i.ToWorkflowTaskGetAlertsArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskGetAlertsArray) ToWorkflowTaskGetAlertsArrayOutputWithContext(ctx context.Context) WorkflowTaskGetAlertsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskGetAlertsArrayOutput)
}

// WorkflowTaskGetAlertsMapInput is an input type that accepts WorkflowTaskGetAlertsMap and WorkflowTaskGetAlertsMapOutput values.
// You can construct a concrete instance of `WorkflowTaskGetAlertsMapInput` via:
//
//	WorkflowTaskGetAlertsMap{ "key": WorkflowTaskGetAlertsArgs{...} }
type WorkflowTaskGetAlertsMapInput interface {
	pulumi.Input

	ToWorkflowTaskGetAlertsMapOutput() WorkflowTaskGetAlertsMapOutput
	ToWorkflowTaskGetAlertsMapOutputWithContext(context.Context) WorkflowTaskGetAlertsMapOutput
}

type WorkflowTaskGetAlertsMap map[string]WorkflowTaskGetAlertsInput

func (WorkflowTaskGetAlertsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskGetAlerts)(nil)).Elem()
}

func (i WorkflowTaskGetAlertsMap) ToWorkflowTaskGetAlertsMapOutput() WorkflowTaskGetAlertsMapOutput {
	return i.ToWorkflowTaskGetAlertsMapOutputWithContext(context.Background())
}

func (i WorkflowTaskGetAlertsMap) ToWorkflowTaskGetAlertsMapOutputWithContext(ctx context.Context) WorkflowTaskGetAlertsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskGetAlertsMapOutput)
}

type WorkflowTaskGetAlertsOutput struct{ *pulumi.OutputState }

func (WorkflowTaskGetAlertsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskGetAlerts)(nil)).Elem()
}

func (o WorkflowTaskGetAlertsOutput) ToWorkflowTaskGetAlertsOutput() WorkflowTaskGetAlertsOutput {
	return o
}

func (o WorkflowTaskGetAlertsOutput) ToWorkflowTaskGetAlertsOutputWithContext(ctx context.Context) WorkflowTaskGetAlertsOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskGetAlertsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskGetAlerts) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskGetAlertsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskGetAlerts) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskGetAlertsOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskGetAlerts) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskGetAlertsOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskGetAlerts) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskGetAlertsOutput) TaskParams() WorkflowTaskGetAlertsTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskGetAlerts) WorkflowTaskGetAlertsTaskParamsOutput { return v.TaskParams }).(WorkflowTaskGetAlertsTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskGetAlertsOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskGetAlerts) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskGetAlertsArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskGetAlertsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskGetAlerts)(nil)).Elem()
}

func (o WorkflowTaskGetAlertsArrayOutput) ToWorkflowTaskGetAlertsArrayOutput() WorkflowTaskGetAlertsArrayOutput {
	return o
}

func (o WorkflowTaskGetAlertsArrayOutput) ToWorkflowTaskGetAlertsArrayOutputWithContext(ctx context.Context) WorkflowTaskGetAlertsArrayOutput {
	return o
}

func (o WorkflowTaskGetAlertsArrayOutput) Index(i pulumi.IntInput) WorkflowTaskGetAlertsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskGetAlerts {
		return vs[0].([]*WorkflowTaskGetAlerts)[vs[1].(int)]
	}).(WorkflowTaskGetAlertsOutput)
}

type WorkflowTaskGetAlertsMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskGetAlertsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskGetAlerts)(nil)).Elem()
}

func (o WorkflowTaskGetAlertsMapOutput) ToWorkflowTaskGetAlertsMapOutput() WorkflowTaskGetAlertsMapOutput {
	return o
}

func (o WorkflowTaskGetAlertsMapOutput) ToWorkflowTaskGetAlertsMapOutputWithContext(ctx context.Context) WorkflowTaskGetAlertsMapOutput {
	return o
}

func (o WorkflowTaskGetAlertsMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskGetAlertsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskGetAlerts {
		return vs[0].(map[string]*WorkflowTaskGetAlerts)[vs[1].(string)]
	}).(WorkflowTaskGetAlertsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskGetAlertsInput)(nil)).Elem(), &WorkflowTaskGetAlerts{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskGetAlertsArrayInput)(nil)).Elem(), WorkflowTaskGetAlertsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskGetAlertsMapInput)(nil)).Elem(), WorkflowTaskGetAlertsMap{})
	pulumi.RegisterOutputType(WorkflowTaskGetAlertsOutput{})
	pulumi.RegisterOutputType(WorkflowTaskGetAlertsArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskGetAlertsMapOutput{})
}
