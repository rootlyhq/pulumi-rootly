// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type WorkflowGroup struct {
	pulumi.CustomResourceState

	// A description of the workflow group.
	Description pulumi.StringOutput `pulumi:"description"`
	// Whether the group is expanded or collapsed.. Value must be one of true or false
	Expanded pulumi.BoolOutput `pulumi:"expanded"`
	// An emoji icon displayed next to the workflow group.
	Icon pulumi.StringOutput `pulumi:"icon"`
	// The kind of the workflow group. Value must be one of `simple`, `incident`, `postMortem`, `actionItem`, `pulse`, `alert`.
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// The name of the workflow group.
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow group
	Position pulumi.IntOutput `pulumi:"position"`
	// The slug of the workflow group.
	Slug pulumi.StringOutput `pulumi:"slug"`
}

// NewWorkflowGroup registers a new resource with the given unique name, arguments, and options.
func NewWorkflowGroup(ctx *pulumi.Context,
	name string, args *WorkflowGroupArgs, opts ...pulumi.ResourceOption) (*WorkflowGroup, error) {
	if args == nil {
		args = &WorkflowGroupArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowGroup
	err := ctx.RegisterResource("rootly:index/workflowGroup:WorkflowGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowGroup gets an existing WorkflowGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowGroupState, opts ...pulumi.ResourceOption) (*WorkflowGroup, error) {
	var resource WorkflowGroup
	err := ctx.ReadResource("rootly:index/workflowGroup:WorkflowGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowGroup resources.
type workflowGroupState struct {
	// A description of the workflow group.
	Description *string `pulumi:"description"`
	// Whether the group is expanded or collapsed.. Value must be one of true or false
	Expanded *bool `pulumi:"expanded"`
	// An emoji icon displayed next to the workflow group.
	Icon *string `pulumi:"icon"`
	// The kind of the workflow group. Value must be one of `simple`, `incident`, `postMortem`, `actionItem`, `pulse`, `alert`.
	Kind *string `pulumi:"kind"`
	// The name of the workflow group.
	Name *string `pulumi:"name"`
	// The position of the workflow group
	Position *int `pulumi:"position"`
	// The slug of the workflow group.
	Slug *string `pulumi:"slug"`
}

type WorkflowGroupState struct {
	// A description of the workflow group.
	Description pulumi.StringPtrInput
	// Whether the group is expanded or collapsed.. Value must be one of true or false
	Expanded pulumi.BoolPtrInput
	// An emoji icon displayed next to the workflow group.
	Icon pulumi.StringPtrInput
	// The kind of the workflow group. Value must be one of `simple`, `incident`, `postMortem`, `actionItem`, `pulse`, `alert`.
	Kind pulumi.StringPtrInput
	// The name of the workflow group.
	Name pulumi.StringPtrInput
	// The position of the workflow group
	Position pulumi.IntPtrInput
	// The slug of the workflow group.
	Slug pulumi.StringPtrInput
}

func (WorkflowGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowGroupState)(nil)).Elem()
}

type workflowGroupArgs struct {
	// A description of the workflow group.
	Description *string `pulumi:"description"`
	// Whether the group is expanded or collapsed.. Value must be one of true or false
	Expanded *bool `pulumi:"expanded"`
	// An emoji icon displayed next to the workflow group.
	Icon *string `pulumi:"icon"`
	// The kind of the workflow group. Value must be one of `simple`, `incident`, `postMortem`, `actionItem`, `pulse`, `alert`.
	Kind *string `pulumi:"kind"`
	// The name of the workflow group.
	Name *string `pulumi:"name"`
	// The position of the workflow group
	Position *int `pulumi:"position"`
	// The slug of the workflow group.
	Slug *string `pulumi:"slug"`
}

// The set of arguments for constructing a WorkflowGroup resource.
type WorkflowGroupArgs struct {
	// A description of the workflow group.
	Description pulumi.StringPtrInput
	// Whether the group is expanded or collapsed.. Value must be one of true or false
	Expanded pulumi.BoolPtrInput
	// An emoji icon displayed next to the workflow group.
	Icon pulumi.StringPtrInput
	// The kind of the workflow group. Value must be one of `simple`, `incident`, `postMortem`, `actionItem`, `pulse`, `alert`.
	Kind pulumi.StringPtrInput
	// The name of the workflow group.
	Name pulumi.StringPtrInput
	// The position of the workflow group
	Position pulumi.IntPtrInput
	// The slug of the workflow group.
	Slug pulumi.StringPtrInput
}

func (WorkflowGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowGroupArgs)(nil)).Elem()
}

type WorkflowGroupInput interface {
	pulumi.Input

	ToWorkflowGroupOutput() WorkflowGroupOutput
	ToWorkflowGroupOutputWithContext(ctx context.Context) WorkflowGroupOutput
}

func (*WorkflowGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowGroup)(nil)).Elem()
}

func (i *WorkflowGroup) ToWorkflowGroupOutput() WorkflowGroupOutput {
	return i.ToWorkflowGroupOutputWithContext(context.Background())
}

func (i *WorkflowGroup) ToWorkflowGroupOutputWithContext(ctx context.Context) WorkflowGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowGroupOutput)
}

// WorkflowGroupArrayInput is an input type that accepts WorkflowGroupArray and WorkflowGroupArrayOutput values.
// You can construct a concrete instance of `WorkflowGroupArrayInput` via:
//
//	WorkflowGroupArray{ WorkflowGroupArgs{...} }
type WorkflowGroupArrayInput interface {
	pulumi.Input

	ToWorkflowGroupArrayOutput() WorkflowGroupArrayOutput
	ToWorkflowGroupArrayOutputWithContext(context.Context) WorkflowGroupArrayOutput
}

type WorkflowGroupArray []WorkflowGroupInput

func (WorkflowGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowGroup)(nil)).Elem()
}

func (i WorkflowGroupArray) ToWorkflowGroupArrayOutput() WorkflowGroupArrayOutput {
	return i.ToWorkflowGroupArrayOutputWithContext(context.Background())
}

func (i WorkflowGroupArray) ToWorkflowGroupArrayOutputWithContext(ctx context.Context) WorkflowGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowGroupArrayOutput)
}

// WorkflowGroupMapInput is an input type that accepts WorkflowGroupMap and WorkflowGroupMapOutput values.
// You can construct a concrete instance of `WorkflowGroupMapInput` via:
//
//	WorkflowGroupMap{ "key": WorkflowGroupArgs{...} }
type WorkflowGroupMapInput interface {
	pulumi.Input

	ToWorkflowGroupMapOutput() WorkflowGroupMapOutput
	ToWorkflowGroupMapOutputWithContext(context.Context) WorkflowGroupMapOutput
}

type WorkflowGroupMap map[string]WorkflowGroupInput

func (WorkflowGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowGroup)(nil)).Elem()
}

func (i WorkflowGroupMap) ToWorkflowGroupMapOutput() WorkflowGroupMapOutput {
	return i.ToWorkflowGroupMapOutputWithContext(context.Background())
}

func (i WorkflowGroupMap) ToWorkflowGroupMapOutputWithContext(ctx context.Context) WorkflowGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowGroupMapOutput)
}

type WorkflowGroupOutput struct{ *pulumi.OutputState }

func (WorkflowGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowGroup)(nil)).Elem()
}

func (o WorkflowGroupOutput) ToWorkflowGroupOutput() WorkflowGroupOutput {
	return o
}

func (o WorkflowGroupOutput) ToWorkflowGroupOutputWithContext(ctx context.Context) WorkflowGroupOutput {
	return o
}

// A description of the workflow group.
func (o WorkflowGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowGroup) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Whether the group is expanded or collapsed.. Value must be one of true or false
func (o WorkflowGroupOutput) Expanded() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkflowGroup) pulumi.BoolOutput { return v.Expanded }).(pulumi.BoolOutput)
}

// An emoji icon displayed next to the workflow group.
func (o WorkflowGroupOutput) Icon() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowGroup) pulumi.StringOutput { return v.Icon }).(pulumi.StringOutput)
}

// The kind of the workflow group. Value must be one of `simple`, `incident`, `postMortem`, `actionItem`, `pulse`, `alert`.
func (o WorkflowGroupOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *WorkflowGroup) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// The name of the workflow group.
func (o WorkflowGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow group
func (o WorkflowGroupOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowGroup) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// The slug of the workflow group.
func (o WorkflowGroupOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowGroup) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type WorkflowGroupArrayOutput struct{ *pulumi.OutputState }

func (WorkflowGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowGroup)(nil)).Elem()
}

func (o WorkflowGroupArrayOutput) ToWorkflowGroupArrayOutput() WorkflowGroupArrayOutput {
	return o
}

func (o WorkflowGroupArrayOutput) ToWorkflowGroupArrayOutputWithContext(ctx context.Context) WorkflowGroupArrayOutput {
	return o
}

func (o WorkflowGroupArrayOutput) Index(i pulumi.IntInput) WorkflowGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowGroup {
		return vs[0].([]*WorkflowGroup)[vs[1].(int)]
	}).(WorkflowGroupOutput)
}

type WorkflowGroupMapOutput struct{ *pulumi.OutputState }

func (WorkflowGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowGroup)(nil)).Elem()
}

func (o WorkflowGroupMapOutput) ToWorkflowGroupMapOutput() WorkflowGroupMapOutput {
	return o
}

func (o WorkflowGroupMapOutput) ToWorkflowGroupMapOutputWithContext(ctx context.Context) WorkflowGroupMapOutput {
	return o
}

func (o WorkflowGroupMapOutput) MapIndex(k pulumi.StringInput) WorkflowGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowGroup {
		return vs[0].(map[string]*WorkflowGroup)[vs[1].(string)]
	}).(WorkflowGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowGroupInput)(nil)).Elem(), &WorkflowGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowGroupArrayInput)(nil)).Elem(), WorkflowGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowGroupMapInput)(nil)).Elem(), WorkflowGroupMap{})
	pulumi.RegisterOutputType(WorkflowGroupOutput{})
	pulumi.RegisterOutputType(WorkflowGroupArrayOutput{})
	pulumi.RegisterOutputType(WorkflowGroupMapOutput{})
}
