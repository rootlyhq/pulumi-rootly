// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow publishIncident task.
//
// ## Example Usage
type WorkflowTaskPublishIncident struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskPublishIncidentTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskPublishIncident registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskPublishIncident(ctx *pulumi.Context,
	name string, args *WorkflowTaskPublishIncidentArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskPublishIncident, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskPublishIncident
	err := ctx.RegisterResource("rootly:index/workflowTaskPublishIncident:WorkflowTaskPublishIncident", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskPublishIncident gets an existing WorkflowTaskPublishIncident resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskPublishIncident(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskPublishIncidentState, opts ...pulumi.ResourceOption) (*WorkflowTaskPublishIncident, error) {
	var resource WorkflowTaskPublishIncident
	err := ctx.ReadResource("rootly:index/workflowTaskPublishIncident:WorkflowTaskPublishIncident", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskPublishIncident resources.
type workflowTaskPublishIncidentState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskPublishIncidentTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskPublishIncidentState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskPublishIncidentTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskPublishIncidentState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskPublishIncidentState)(nil)).Elem()
}

type workflowTaskPublishIncidentArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskPublishIncidentTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskPublishIncident resource.
type WorkflowTaskPublishIncidentArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskPublishIncidentTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskPublishIncidentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskPublishIncidentArgs)(nil)).Elem()
}

type WorkflowTaskPublishIncidentInput interface {
	pulumi.Input

	ToWorkflowTaskPublishIncidentOutput() WorkflowTaskPublishIncidentOutput
	ToWorkflowTaskPublishIncidentOutputWithContext(ctx context.Context) WorkflowTaskPublishIncidentOutput
}

func (*WorkflowTaskPublishIncident) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskPublishIncident)(nil)).Elem()
}

func (i *WorkflowTaskPublishIncident) ToWorkflowTaskPublishIncidentOutput() WorkflowTaskPublishIncidentOutput {
	return i.ToWorkflowTaskPublishIncidentOutputWithContext(context.Background())
}

func (i *WorkflowTaskPublishIncident) ToWorkflowTaskPublishIncidentOutputWithContext(ctx context.Context) WorkflowTaskPublishIncidentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskPublishIncidentOutput)
}

// WorkflowTaskPublishIncidentArrayInput is an input type that accepts WorkflowTaskPublishIncidentArray and WorkflowTaskPublishIncidentArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskPublishIncidentArrayInput` via:
//
//	WorkflowTaskPublishIncidentArray{ WorkflowTaskPublishIncidentArgs{...} }
type WorkflowTaskPublishIncidentArrayInput interface {
	pulumi.Input

	ToWorkflowTaskPublishIncidentArrayOutput() WorkflowTaskPublishIncidentArrayOutput
	ToWorkflowTaskPublishIncidentArrayOutputWithContext(context.Context) WorkflowTaskPublishIncidentArrayOutput
}

type WorkflowTaskPublishIncidentArray []WorkflowTaskPublishIncidentInput

func (WorkflowTaskPublishIncidentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskPublishIncident)(nil)).Elem()
}

func (i WorkflowTaskPublishIncidentArray) ToWorkflowTaskPublishIncidentArrayOutput() WorkflowTaskPublishIncidentArrayOutput {
	return i.ToWorkflowTaskPublishIncidentArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskPublishIncidentArray) ToWorkflowTaskPublishIncidentArrayOutputWithContext(ctx context.Context) WorkflowTaskPublishIncidentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskPublishIncidentArrayOutput)
}

// WorkflowTaskPublishIncidentMapInput is an input type that accepts WorkflowTaskPublishIncidentMap and WorkflowTaskPublishIncidentMapOutput values.
// You can construct a concrete instance of `WorkflowTaskPublishIncidentMapInput` via:
//
//	WorkflowTaskPublishIncidentMap{ "key": WorkflowTaskPublishIncidentArgs{...} }
type WorkflowTaskPublishIncidentMapInput interface {
	pulumi.Input

	ToWorkflowTaskPublishIncidentMapOutput() WorkflowTaskPublishIncidentMapOutput
	ToWorkflowTaskPublishIncidentMapOutputWithContext(context.Context) WorkflowTaskPublishIncidentMapOutput
}

type WorkflowTaskPublishIncidentMap map[string]WorkflowTaskPublishIncidentInput

func (WorkflowTaskPublishIncidentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskPublishIncident)(nil)).Elem()
}

func (i WorkflowTaskPublishIncidentMap) ToWorkflowTaskPublishIncidentMapOutput() WorkflowTaskPublishIncidentMapOutput {
	return i.ToWorkflowTaskPublishIncidentMapOutputWithContext(context.Background())
}

func (i WorkflowTaskPublishIncidentMap) ToWorkflowTaskPublishIncidentMapOutputWithContext(ctx context.Context) WorkflowTaskPublishIncidentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskPublishIncidentMapOutput)
}

type WorkflowTaskPublishIncidentOutput struct{ *pulumi.OutputState }

func (WorkflowTaskPublishIncidentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskPublishIncident)(nil)).Elem()
}

func (o WorkflowTaskPublishIncidentOutput) ToWorkflowTaskPublishIncidentOutput() WorkflowTaskPublishIncidentOutput {
	return o
}

func (o WorkflowTaskPublishIncidentOutput) ToWorkflowTaskPublishIncidentOutputWithContext(ctx context.Context) WorkflowTaskPublishIncidentOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskPublishIncidentOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskPublishIncident) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskPublishIncidentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskPublishIncident) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskPublishIncidentOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskPublishIncident) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskPublishIncidentOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskPublishIncident) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskPublishIncidentOutput) TaskParams() WorkflowTaskPublishIncidentTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskPublishIncident) WorkflowTaskPublishIncidentTaskParamsOutput { return v.TaskParams }).(WorkflowTaskPublishIncidentTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskPublishIncidentOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskPublishIncident) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskPublishIncidentArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskPublishIncidentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskPublishIncident)(nil)).Elem()
}

func (o WorkflowTaskPublishIncidentArrayOutput) ToWorkflowTaskPublishIncidentArrayOutput() WorkflowTaskPublishIncidentArrayOutput {
	return o
}

func (o WorkflowTaskPublishIncidentArrayOutput) ToWorkflowTaskPublishIncidentArrayOutputWithContext(ctx context.Context) WorkflowTaskPublishIncidentArrayOutput {
	return o
}

func (o WorkflowTaskPublishIncidentArrayOutput) Index(i pulumi.IntInput) WorkflowTaskPublishIncidentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskPublishIncident {
		return vs[0].([]*WorkflowTaskPublishIncident)[vs[1].(int)]
	}).(WorkflowTaskPublishIncidentOutput)
}

type WorkflowTaskPublishIncidentMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskPublishIncidentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskPublishIncident)(nil)).Elem()
}

func (o WorkflowTaskPublishIncidentMapOutput) ToWorkflowTaskPublishIncidentMapOutput() WorkflowTaskPublishIncidentMapOutput {
	return o
}

func (o WorkflowTaskPublishIncidentMapOutput) ToWorkflowTaskPublishIncidentMapOutputWithContext(ctx context.Context) WorkflowTaskPublishIncidentMapOutput {
	return o
}

func (o WorkflowTaskPublishIncidentMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskPublishIncidentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskPublishIncident {
		return vs[0].(map[string]*WorkflowTaskPublishIncident)[vs[1].(string)]
	}).(WorkflowTaskPublishIncidentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskPublishIncidentInput)(nil)).Elem(), &WorkflowTaskPublishIncident{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskPublishIncidentArrayInput)(nil)).Elem(), WorkflowTaskPublishIncidentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskPublishIncidentMapInput)(nil)).Elem(), WorkflowTaskPublishIncidentMap{})
	pulumi.RegisterOutputType(WorkflowTaskPublishIncidentOutput{})
	pulumi.RegisterOutputType(WorkflowTaskPublishIncidentArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskPublishIncidentMapOutput{})
}
