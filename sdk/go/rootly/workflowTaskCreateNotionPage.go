// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createNotionPage task.
type WorkflowTaskCreateNotionPage struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateNotionPageTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreateNotionPage registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreateNotionPage(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreateNotionPageArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateNotionPage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreateNotionPage
	err := ctx.RegisterResource("rootly:index/workflowTaskCreateNotionPage:WorkflowTaskCreateNotionPage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreateNotionPage gets an existing WorkflowTaskCreateNotionPage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreateNotionPage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreateNotionPageState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateNotionPage, error) {
	var resource WorkflowTaskCreateNotionPage
	err := ctx.ReadResource("rootly:index/workflowTaskCreateNotionPage:WorkflowTaskCreateNotionPage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreateNotionPage resources.
type workflowTaskCreateNotionPageState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreateNotionPageTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreateNotionPageState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateNotionPageTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreateNotionPageState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateNotionPageState)(nil)).Elem()
}

type workflowTaskCreateNotionPageArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateNotionPageTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreateNotionPage resource.
type WorkflowTaskCreateNotionPageArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateNotionPageTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreateNotionPageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateNotionPageArgs)(nil)).Elem()
}

type WorkflowTaskCreateNotionPageInput interface {
	pulumi.Input

	ToWorkflowTaskCreateNotionPageOutput() WorkflowTaskCreateNotionPageOutput
	ToWorkflowTaskCreateNotionPageOutputWithContext(ctx context.Context) WorkflowTaskCreateNotionPageOutput
}

func (*WorkflowTaskCreateNotionPage) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateNotionPage)(nil)).Elem()
}

func (i *WorkflowTaskCreateNotionPage) ToWorkflowTaskCreateNotionPageOutput() WorkflowTaskCreateNotionPageOutput {
	return i.ToWorkflowTaskCreateNotionPageOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreateNotionPage) ToWorkflowTaskCreateNotionPageOutputWithContext(ctx context.Context) WorkflowTaskCreateNotionPageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateNotionPageOutput)
}

// WorkflowTaskCreateNotionPageArrayInput is an input type that accepts WorkflowTaskCreateNotionPageArray and WorkflowTaskCreateNotionPageArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateNotionPageArrayInput` via:
//
//	WorkflowTaskCreateNotionPageArray{ WorkflowTaskCreateNotionPageArgs{...} }
type WorkflowTaskCreateNotionPageArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreateNotionPageArrayOutput() WorkflowTaskCreateNotionPageArrayOutput
	ToWorkflowTaskCreateNotionPageArrayOutputWithContext(context.Context) WorkflowTaskCreateNotionPageArrayOutput
}

type WorkflowTaskCreateNotionPageArray []WorkflowTaskCreateNotionPageInput

func (WorkflowTaskCreateNotionPageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateNotionPage)(nil)).Elem()
}

func (i WorkflowTaskCreateNotionPageArray) ToWorkflowTaskCreateNotionPageArrayOutput() WorkflowTaskCreateNotionPageArrayOutput {
	return i.ToWorkflowTaskCreateNotionPageArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateNotionPageArray) ToWorkflowTaskCreateNotionPageArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateNotionPageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateNotionPageArrayOutput)
}

// WorkflowTaskCreateNotionPageMapInput is an input type that accepts WorkflowTaskCreateNotionPageMap and WorkflowTaskCreateNotionPageMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateNotionPageMapInput` via:
//
//	WorkflowTaskCreateNotionPageMap{ "key": WorkflowTaskCreateNotionPageArgs{...} }
type WorkflowTaskCreateNotionPageMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreateNotionPageMapOutput() WorkflowTaskCreateNotionPageMapOutput
	ToWorkflowTaskCreateNotionPageMapOutputWithContext(context.Context) WorkflowTaskCreateNotionPageMapOutput
}

type WorkflowTaskCreateNotionPageMap map[string]WorkflowTaskCreateNotionPageInput

func (WorkflowTaskCreateNotionPageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateNotionPage)(nil)).Elem()
}

func (i WorkflowTaskCreateNotionPageMap) ToWorkflowTaskCreateNotionPageMapOutput() WorkflowTaskCreateNotionPageMapOutput {
	return i.ToWorkflowTaskCreateNotionPageMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateNotionPageMap) ToWorkflowTaskCreateNotionPageMapOutputWithContext(ctx context.Context) WorkflowTaskCreateNotionPageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateNotionPageMapOutput)
}

type WorkflowTaskCreateNotionPageOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateNotionPageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateNotionPage)(nil)).Elem()
}

func (o WorkflowTaskCreateNotionPageOutput) ToWorkflowTaskCreateNotionPageOutput() WorkflowTaskCreateNotionPageOutput {
	return o
}

func (o WorkflowTaskCreateNotionPageOutput) ToWorkflowTaskCreateNotionPageOutputWithContext(ctx context.Context) WorkflowTaskCreateNotionPageOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreateNotionPageOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateNotionPage) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreateNotionPageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateNotionPage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreateNotionPageOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateNotionPage) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreateNotionPageOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateNotionPage) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreateNotionPageOutput) TaskParams() WorkflowTaskCreateNotionPageTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateNotionPage) WorkflowTaskCreateNotionPageTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskCreateNotionPageTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreateNotionPageOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateNotionPage) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreateNotionPageArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateNotionPageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateNotionPage)(nil)).Elem()
}

func (o WorkflowTaskCreateNotionPageArrayOutput) ToWorkflowTaskCreateNotionPageArrayOutput() WorkflowTaskCreateNotionPageArrayOutput {
	return o
}

func (o WorkflowTaskCreateNotionPageArrayOutput) ToWorkflowTaskCreateNotionPageArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateNotionPageArrayOutput {
	return o
}

func (o WorkflowTaskCreateNotionPageArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreateNotionPageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreateNotionPage {
		return vs[0].([]*WorkflowTaskCreateNotionPage)[vs[1].(int)]
	}).(WorkflowTaskCreateNotionPageOutput)
}

type WorkflowTaskCreateNotionPageMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateNotionPageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateNotionPage)(nil)).Elem()
}

func (o WorkflowTaskCreateNotionPageMapOutput) ToWorkflowTaskCreateNotionPageMapOutput() WorkflowTaskCreateNotionPageMapOutput {
	return o
}

func (o WorkflowTaskCreateNotionPageMapOutput) ToWorkflowTaskCreateNotionPageMapOutputWithContext(ctx context.Context) WorkflowTaskCreateNotionPageMapOutput {
	return o
}

func (o WorkflowTaskCreateNotionPageMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreateNotionPageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreateNotionPage {
		return vs[0].(map[string]*WorkflowTaskCreateNotionPage)[vs[1].(string)]
	}).(WorkflowTaskCreateNotionPageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateNotionPageInput)(nil)).Elem(), &WorkflowTaskCreateNotionPage{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateNotionPageArrayInput)(nil)).Elem(), WorkflowTaskCreateNotionPageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateNotionPageMapInput)(nil)).Elem(), WorkflowTaskCreateNotionPageMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreateNotionPageOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateNotionPageArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateNotionPageMapOutput{})
}
