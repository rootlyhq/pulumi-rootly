// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow updateClickupTask task.
type WorkflowTaskUpdateClickupTask struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateClickupTaskTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskUpdateClickupTask registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskUpdateClickupTask(ctx *pulumi.Context,
	name string, args *WorkflowTaskUpdateClickupTaskArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateClickupTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskUpdateClickupTask
	err := ctx.RegisterResource("rootly:index/workflowTaskUpdateClickupTask:WorkflowTaskUpdateClickupTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskUpdateClickupTask gets an existing WorkflowTaskUpdateClickupTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskUpdateClickupTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskUpdateClickupTaskState, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateClickupTask, error) {
	var resource WorkflowTaskUpdateClickupTask
	err := ctx.ReadResource("rootly:index/workflowTaskUpdateClickupTask:WorkflowTaskUpdateClickupTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskUpdateClickupTask resources.
type workflowTaskUpdateClickupTaskState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskUpdateClickupTaskTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskUpdateClickupTaskState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateClickupTaskTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskUpdateClickupTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateClickupTaskState)(nil)).Elem()
}

type workflowTaskUpdateClickupTaskArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateClickupTaskTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskUpdateClickupTask resource.
type WorkflowTaskUpdateClickupTaskArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateClickupTaskTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskUpdateClickupTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateClickupTaskArgs)(nil)).Elem()
}

type WorkflowTaskUpdateClickupTaskInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateClickupTaskOutput() WorkflowTaskUpdateClickupTaskOutput
	ToWorkflowTaskUpdateClickupTaskOutputWithContext(ctx context.Context) WorkflowTaskUpdateClickupTaskOutput
}

func (*WorkflowTaskUpdateClickupTask) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateClickupTask)(nil)).Elem()
}

func (i *WorkflowTaskUpdateClickupTask) ToWorkflowTaskUpdateClickupTaskOutput() WorkflowTaskUpdateClickupTaskOutput {
	return i.ToWorkflowTaskUpdateClickupTaskOutputWithContext(context.Background())
}

func (i *WorkflowTaskUpdateClickupTask) ToWorkflowTaskUpdateClickupTaskOutputWithContext(ctx context.Context) WorkflowTaskUpdateClickupTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateClickupTaskOutput)
}

// WorkflowTaskUpdateClickupTaskArrayInput is an input type that accepts WorkflowTaskUpdateClickupTaskArray and WorkflowTaskUpdateClickupTaskArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateClickupTaskArrayInput` via:
//
//	WorkflowTaskUpdateClickupTaskArray{ WorkflowTaskUpdateClickupTaskArgs{...} }
type WorkflowTaskUpdateClickupTaskArrayInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateClickupTaskArrayOutput() WorkflowTaskUpdateClickupTaskArrayOutput
	ToWorkflowTaskUpdateClickupTaskArrayOutputWithContext(context.Context) WorkflowTaskUpdateClickupTaskArrayOutput
}

type WorkflowTaskUpdateClickupTaskArray []WorkflowTaskUpdateClickupTaskInput

func (WorkflowTaskUpdateClickupTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateClickupTask)(nil)).Elem()
}

func (i WorkflowTaskUpdateClickupTaskArray) ToWorkflowTaskUpdateClickupTaskArrayOutput() WorkflowTaskUpdateClickupTaskArrayOutput {
	return i.ToWorkflowTaskUpdateClickupTaskArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateClickupTaskArray) ToWorkflowTaskUpdateClickupTaskArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateClickupTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateClickupTaskArrayOutput)
}

// WorkflowTaskUpdateClickupTaskMapInput is an input type that accepts WorkflowTaskUpdateClickupTaskMap and WorkflowTaskUpdateClickupTaskMapOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateClickupTaskMapInput` via:
//
//	WorkflowTaskUpdateClickupTaskMap{ "key": WorkflowTaskUpdateClickupTaskArgs{...} }
type WorkflowTaskUpdateClickupTaskMapInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateClickupTaskMapOutput() WorkflowTaskUpdateClickupTaskMapOutput
	ToWorkflowTaskUpdateClickupTaskMapOutputWithContext(context.Context) WorkflowTaskUpdateClickupTaskMapOutput
}

type WorkflowTaskUpdateClickupTaskMap map[string]WorkflowTaskUpdateClickupTaskInput

func (WorkflowTaskUpdateClickupTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateClickupTask)(nil)).Elem()
}

func (i WorkflowTaskUpdateClickupTaskMap) ToWorkflowTaskUpdateClickupTaskMapOutput() WorkflowTaskUpdateClickupTaskMapOutput {
	return i.ToWorkflowTaskUpdateClickupTaskMapOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateClickupTaskMap) ToWorkflowTaskUpdateClickupTaskMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateClickupTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateClickupTaskMapOutput)
}

type WorkflowTaskUpdateClickupTaskOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateClickupTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateClickupTask)(nil)).Elem()
}

func (o WorkflowTaskUpdateClickupTaskOutput) ToWorkflowTaskUpdateClickupTaskOutput() WorkflowTaskUpdateClickupTaskOutput {
	return o
}

func (o WorkflowTaskUpdateClickupTaskOutput) ToWorkflowTaskUpdateClickupTaskOutputWithContext(ctx context.Context) WorkflowTaskUpdateClickupTaskOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskUpdateClickupTaskOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateClickupTask) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskUpdateClickupTaskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateClickupTask) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskUpdateClickupTaskOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateClickupTask) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskUpdateClickupTaskOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateClickupTask) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskUpdateClickupTaskOutput) TaskParams() WorkflowTaskUpdateClickupTaskTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateClickupTask) WorkflowTaskUpdateClickupTaskTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskUpdateClickupTaskTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskUpdateClickupTaskOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateClickupTask) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskUpdateClickupTaskArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateClickupTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateClickupTask)(nil)).Elem()
}

func (o WorkflowTaskUpdateClickupTaskArrayOutput) ToWorkflowTaskUpdateClickupTaskArrayOutput() WorkflowTaskUpdateClickupTaskArrayOutput {
	return o
}

func (o WorkflowTaskUpdateClickupTaskArrayOutput) ToWorkflowTaskUpdateClickupTaskArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateClickupTaskArrayOutput {
	return o
}

func (o WorkflowTaskUpdateClickupTaskArrayOutput) Index(i pulumi.IntInput) WorkflowTaskUpdateClickupTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateClickupTask {
		return vs[0].([]*WorkflowTaskUpdateClickupTask)[vs[1].(int)]
	}).(WorkflowTaskUpdateClickupTaskOutput)
}

type WorkflowTaskUpdateClickupTaskMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateClickupTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateClickupTask)(nil)).Elem()
}

func (o WorkflowTaskUpdateClickupTaskMapOutput) ToWorkflowTaskUpdateClickupTaskMapOutput() WorkflowTaskUpdateClickupTaskMapOutput {
	return o
}

func (o WorkflowTaskUpdateClickupTaskMapOutput) ToWorkflowTaskUpdateClickupTaskMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateClickupTaskMapOutput {
	return o
}

func (o WorkflowTaskUpdateClickupTaskMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskUpdateClickupTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateClickupTask {
		return vs[0].(map[string]*WorkflowTaskUpdateClickupTask)[vs[1].(string)]
	}).(WorkflowTaskUpdateClickupTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateClickupTaskInput)(nil)).Elem(), &WorkflowTaskUpdateClickupTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateClickupTaskArrayInput)(nil)).Elem(), WorkflowTaskUpdateClickupTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateClickupTaskMapInput)(nil)).Elem(), WorkflowTaskUpdateClickupTaskMap{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateClickupTaskOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateClickupTaskArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateClickupTaskMapOutput{})
}
