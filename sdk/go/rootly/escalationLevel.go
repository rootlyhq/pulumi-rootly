// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type EscalationLevel struct {
	pulumi.CustomResourceState

	// Delay before notification targets will be alerted.
	Delay pulumi.IntOutput `pulumi:"delay"`
	// The ID of the escalation policy
	EscalationPolicyId pulumi.StringOutput `pulumi:"escalationPolicyId"`
	// Escalation level's notification targets
	NotificationTargetParams EscalationLevelNotificationTargetParamArrayOutput `pulumi:"notificationTargetParams"`
	// Position of the escalation policy level
	Position pulumi.IntOutput `pulumi:"position"`
}

// NewEscalationLevel registers a new resource with the given unique name, arguments, and options.
func NewEscalationLevel(ctx *pulumi.Context,
	name string, args *EscalationLevelArgs, opts ...pulumi.ResourceOption) (*EscalationLevel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.NotificationTargetParams == nil {
		return nil, errors.New("invalid value for required argument 'NotificationTargetParams'")
	}
	if args.Position == nil {
		return nil, errors.New("invalid value for required argument 'Position'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EscalationLevel
	err := ctx.RegisterResource("rootly:index/escalationLevel:EscalationLevel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEscalationLevel gets an existing EscalationLevel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEscalationLevel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EscalationLevelState, opts ...pulumi.ResourceOption) (*EscalationLevel, error) {
	var resource EscalationLevel
	err := ctx.ReadResource("rootly:index/escalationLevel:EscalationLevel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EscalationLevel resources.
type escalationLevelState struct {
	// Delay before notification targets will be alerted.
	Delay *int `pulumi:"delay"`
	// The ID of the escalation policy
	EscalationPolicyId *string `pulumi:"escalationPolicyId"`
	// Escalation level's notification targets
	NotificationTargetParams []EscalationLevelNotificationTargetParam `pulumi:"notificationTargetParams"`
	// Position of the escalation policy level
	Position *int `pulumi:"position"`
}

type EscalationLevelState struct {
	// Delay before notification targets will be alerted.
	Delay pulumi.IntPtrInput
	// The ID of the escalation policy
	EscalationPolicyId pulumi.StringPtrInput
	// Escalation level's notification targets
	NotificationTargetParams EscalationLevelNotificationTargetParamArrayInput
	// Position of the escalation policy level
	Position pulumi.IntPtrInput
}

func (EscalationLevelState) ElementType() reflect.Type {
	return reflect.TypeOf((*escalationLevelState)(nil)).Elem()
}

type escalationLevelArgs struct {
	// Delay before notification targets will be alerted.
	Delay *int `pulumi:"delay"`
	// The ID of the escalation policy
	EscalationPolicyId *string `pulumi:"escalationPolicyId"`
	// Escalation level's notification targets
	NotificationTargetParams []EscalationLevelNotificationTargetParam `pulumi:"notificationTargetParams"`
	// Position of the escalation policy level
	Position int `pulumi:"position"`
}

// The set of arguments for constructing a EscalationLevel resource.
type EscalationLevelArgs struct {
	// Delay before notification targets will be alerted.
	Delay pulumi.IntPtrInput
	// The ID of the escalation policy
	EscalationPolicyId pulumi.StringPtrInput
	// Escalation level's notification targets
	NotificationTargetParams EscalationLevelNotificationTargetParamArrayInput
	// Position of the escalation policy level
	Position pulumi.IntInput
}

func (EscalationLevelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*escalationLevelArgs)(nil)).Elem()
}

type EscalationLevelInput interface {
	pulumi.Input

	ToEscalationLevelOutput() EscalationLevelOutput
	ToEscalationLevelOutputWithContext(ctx context.Context) EscalationLevelOutput
}

func (*EscalationLevel) ElementType() reflect.Type {
	return reflect.TypeOf((**EscalationLevel)(nil)).Elem()
}

func (i *EscalationLevel) ToEscalationLevelOutput() EscalationLevelOutput {
	return i.ToEscalationLevelOutputWithContext(context.Background())
}

func (i *EscalationLevel) ToEscalationLevelOutputWithContext(ctx context.Context) EscalationLevelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationLevelOutput)
}

// EscalationLevelArrayInput is an input type that accepts EscalationLevelArray and EscalationLevelArrayOutput values.
// You can construct a concrete instance of `EscalationLevelArrayInput` via:
//
//	EscalationLevelArray{ EscalationLevelArgs{...} }
type EscalationLevelArrayInput interface {
	pulumi.Input

	ToEscalationLevelArrayOutput() EscalationLevelArrayOutput
	ToEscalationLevelArrayOutputWithContext(context.Context) EscalationLevelArrayOutput
}

type EscalationLevelArray []EscalationLevelInput

func (EscalationLevelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EscalationLevel)(nil)).Elem()
}

func (i EscalationLevelArray) ToEscalationLevelArrayOutput() EscalationLevelArrayOutput {
	return i.ToEscalationLevelArrayOutputWithContext(context.Background())
}

func (i EscalationLevelArray) ToEscalationLevelArrayOutputWithContext(ctx context.Context) EscalationLevelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationLevelArrayOutput)
}

// EscalationLevelMapInput is an input type that accepts EscalationLevelMap and EscalationLevelMapOutput values.
// You can construct a concrete instance of `EscalationLevelMapInput` via:
//
//	EscalationLevelMap{ "key": EscalationLevelArgs{...} }
type EscalationLevelMapInput interface {
	pulumi.Input

	ToEscalationLevelMapOutput() EscalationLevelMapOutput
	ToEscalationLevelMapOutputWithContext(context.Context) EscalationLevelMapOutput
}

type EscalationLevelMap map[string]EscalationLevelInput

func (EscalationLevelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EscalationLevel)(nil)).Elem()
}

func (i EscalationLevelMap) ToEscalationLevelMapOutput() EscalationLevelMapOutput {
	return i.ToEscalationLevelMapOutputWithContext(context.Background())
}

func (i EscalationLevelMap) ToEscalationLevelMapOutputWithContext(ctx context.Context) EscalationLevelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationLevelMapOutput)
}

type EscalationLevelOutput struct{ *pulumi.OutputState }

func (EscalationLevelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EscalationLevel)(nil)).Elem()
}

func (o EscalationLevelOutput) ToEscalationLevelOutput() EscalationLevelOutput {
	return o
}

func (o EscalationLevelOutput) ToEscalationLevelOutputWithContext(ctx context.Context) EscalationLevelOutput {
	return o
}

// Delay before notification targets will be alerted.
func (o EscalationLevelOutput) Delay() pulumi.IntOutput {
	return o.ApplyT(func(v *EscalationLevel) pulumi.IntOutput { return v.Delay }).(pulumi.IntOutput)
}

// The ID of the escalation policy
func (o EscalationLevelOutput) EscalationPolicyId() pulumi.StringOutput {
	return o.ApplyT(func(v *EscalationLevel) pulumi.StringOutput { return v.EscalationPolicyId }).(pulumi.StringOutput)
}

// Escalation level's notification targets
func (o EscalationLevelOutput) NotificationTargetParams() EscalationLevelNotificationTargetParamArrayOutput {
	return o.ApplyT(func(v *EscalationLevel) EscalationLevelNotificationTargetParamArrayOutput {
		return v.NotificationTargetParams
	}).(EscalationLevelNotificationTargetParamArrayOutput)
}

// Position of the escalation policy level
func (o EscalationLevelOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *EscalationLevel) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

type EscalationLevelArrayOutput struct{ *pulumi.OutputState }

func (EscalationLevelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EscalationLevel)(nil)).Elem()
}

func (o EscalationLevelArrayOutput) ToEscalationLevelArrayOutput() EscalationLevelArrayOutput {
	return o
}

func (o EscalationLevelArrayOutput) ToEscalationLevelArrayOutputWithContext(ctx context.Context) EscalationLevelArrayOutput {
	return o
}

func (o EscalationLevelArrayOutput) Index(i pulumi.IntInput) EscalationLevelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EscalationLevel {
		return vs[0].([]*EscalationLevel)[vs[1].(int)]
	}).(EscalationLevelOutput)
}

type EscalationLevelMapOutput struct{ *pulumi.OutputState }

func (EscalationLevelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EscalationLevel)(nil)).Elem()
}

func (o EscalationLevelMapOutput) ToEscalationLevelMapOutput() EscalationLevelMapOutput {
	return o
}

func (o EscalationLevelMapOutput) ToEscalationLevelMapOutputWithContext(ctx context.Context) EscalationLevelMapOutput {
	return o
}

func (o EscalationLevelMapOutput) MapIndex(k pulumi.StringInput) EscalationLevelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EscalationLevel {
		return vs[0].(map[string]*EscalationLevel)[vs[1].(string)]
	}).(EscalationLevelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationLevelInput)(nil)).Elem(), &EscalationLevel{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationLevelArrayInput)(nil)).Elem(), EscalationLevelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationLevelMapInput)(nil)).Elem(), EscalationLevelMap{})
	pulumi.RegisterOutputType(EscalationLevelOutput{})
	pulumi.RegisterOutputType(EscalationLevelArrayOutput{})
	pulumi.RegisterOutputType(EscalationLevelMapOutput{})
}
