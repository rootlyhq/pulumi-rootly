// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow updateJiraIssue task.
type WorkflowTaskUpdateJiraIssue struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateJiraIssueTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskUpdateJiraIssue registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskUpdateJiraIssue(ctx *pulumi.Context,
	name string, args *WorkflowTaskUpdateJiraIssueArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateJiraIssue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskUpdateJiraIssue
	err := ctx.RegisterResource("rootly:index/workflowTaskUpdateJiraIssue:WorkflowTaskUpdateJiraIssue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskUpdateJiraIssue gets an existing WorkflowTaskUpdateJiraIssue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskUpdateJiraIssue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskUpdateJiraIssueState, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateJiraIssue, error) {
	var resource WorkflowTaskUpdateJiraIssue
	err := ctx.ReadResource("rootly:index/workflowTaskUpdateJiraIssue:WorkflowTaskUpdateJiraIssue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskUpdateJiraIssue resources.
type workflowTaskUpdateJiraIssueState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskUpdateJiraIssueTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskUpdateJiraIssueState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateJiraIssueTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskUpdateJiraIssueState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateJiraIssueState)(nil)).Elem()
}

type workflowTaskUpdateJiraIssueArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateJiraIssueTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskUpdateJiraIssue resource.
type WorkflowTaskUpdateJiraIssueArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateJiraIssueTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskUpdateJiraIssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateJiraIssueArgs)(nil)).Elem()
}

type WorkflowTaskUpdateJiraIssueInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateJiraIssueOutput() WorkflowTaskUpdateJiraIssueOutput
	ToWorkflowTaskUpdateJiraIssueOutputWithContext(ctx context.Context) WorkflowTaskUpdateJiraIssueOutput
}

func (*WorkflowTaskUpdateJiraIssue) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateJiraIssue)(nil)).Elem()
}

func (i *WorkflowTaskUpdateJiraIssue) ToWorkflowTaskUpdateJiraIssueOutput() WorkflowTaskUpdateJiraIssueOutput {
	return i.ToWorkflowTaskUpdateJiraIssueOutputWithContext(context.Background())
}

func (i *WorkflowTaskUpdateJiraIssue) ToWorkflowTaskUpdateJiraIssueOutputWithContext(ctx context.Context) WorkflowTaskUpdateJiraIssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateJiraIssueOutput)
}

// WorkflowTaskUpdateJiraIssueArrayInput is an input type that accepts WorkflowTaskUpdateJiraIssueArray and WorkflowTaskUpdateJiraIssueArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateJiraIssueArrayInput` via:
//
//	WorkflowTaskUpdateJiraIssueArray{ WorkflowTaskUpdateJiraIssueArgs{...} }
type WorkflowTaskUpdateJiraIssueArrayInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateJiraIssueArrayOutput() WorkflowTaskUpdateJiraIssueArrayOutput
	ToWorkflowTaskUpdateJiraIssueArrayOutputWithContext(context.Context) WorkflowTaskUpdateJiraIssueArrayOutput
}

type WorkflowTaskUpdateJiraIssueArray []WorkflowTaskUpdateJiraIssueInput

func (WorkflowTaskUpdateJiraIssueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateJiraIssue)(nil)).Elem()
}

func (i WorkflowTaskUpdateJiraIssueArray) ToWorkflowTaskUpdateJiraIssueArrayOutput() WorkflowTaskUpdateJiraIssueArrayOutput {
	return i.ToWorkflowTaskUpdateJiraIssueArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateJiraIssueArray) ToWorkflowTaskUpdateJiraIssueArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateJiraIssueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateJiraIssueArrayOutput)
}

// WorkflowTaskUpdateJiraIssueMapInput is an input type that accepts WorkflowTaskUpdateJiraIssueMap and WorkflowTaskUpdateJiraIssueMapOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateJiraIssueMapInput` via:
//
//	WorkflowTaskUpdateJiraIssueMap{ "key": WorkflowTaskUpdateJiraIssueArgs{...} }
type WorkflowTaskUpdateJiraIssueMapInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateJiraIssueMapOutput() WorkflowTaskUpdateJiraIssueMapOutput
	ToWorkflowTaskUpdateJiraIssueMapOutputWithContext(context.Context) WorkflowTaskUpdateJiraIssueMapOutput
}

type WorkflowTaskUpdateJiraIssueMap map[string]WorkflowTaskUpdateJiraIssueInput

func (WorkflowTaskUpdateJiraIssueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateJiraIssue)(nil)).Elem()
}

func (i WorkflowTaskUpdateJiraIssueMap) ToWorkflowTaskUpdateJiraIssueMapOutput() WorkflowTaskUpdateJiraIssueMapOutput {
	return i.ToWorkflowTaskUpdateJiraIssueMapOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateJiraIssueMap) ToWorkflowTaskUpdateJiraIssueMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateJiraIssueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateJiraIssueMapOutput)
}

type WorkflowTaskUpdateJiraIssueOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateJiraIssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateJiraIssue)(nil)).Elem()
}

func (o WorkflowTaskUpdateJiraIssueOutput) ToWorkflowTaskUpdateJiraIssueOutput() WorkflowTaskUpdateJiraIssueOutput {
	return o
}

func (o WorkflowTaskUpdateJiraIssueOutput) ToWorkflowTaskUpdateJiraIssueOutputWithContext(ctx context.Context) WorkflowTaskUpdateJiraIssueOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskUpdateJiraIssueOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateJiraIssue) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskUpdateJiraIssueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateJiraIssue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskUpdateJiraIssueOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateJiraIssue) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskUpdateJiraIssueOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateJiraIssue) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskUpdateJiraIssueOutput) TaskParams() WorkflowTaskUpdateJiraIssueTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateJiraIssue) WorkflowTaskUpdateJiraIssueTaskParamsOutput { return v.TaskParams }).(WorkflowTaskUpdateJiraIssueTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskUpdateJiraIssueOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateJiraIssue) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskUpdateJiraIssueArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateJiraIssueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateJiraIssue)(nil)).Elem()
}

func (o WorkflowTaskUpdateJiraIssueArrayOutput) ToWorkflowTaskUpdateJiraIssueArrayOutput() WorkflowTaskUpdateJiraIssueArrayOutput {
	return o
}

func (o WorkflowTaskUpdateJiraIssueArrayOutput) ToWorkflowTaskUpdateJiraIssueArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateJiraIssueArrayOutput {
	return o
}

func (o WorkflowTaskUpdateJiraIssueArrayOutput) Index(i pulumi.IntInput) WorkflowTaskUpdateJiraIssueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateJiraIssue {
		return vs[0].([]*WorkflowTaskUpdateJiraIssue)[vs[1].(int)]
	}).(WorkflowTaskUpdateJiraIssueOutput)
}

type WorkflowTaskUpdateJiraIssueMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateJiraIssueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateJiraIssue)(nil)).Elem()
}

func (o WorkflowTaskUpdateJiraIssueMapOutput) ToWorkflowTaskUpdateJiraIssueMapOutput() WorkflowTaskUpdateJiraIssueMapOutput {
	return o
}

func (o WorkflowTaskUpdateJiraIssueMapOutput) ToWorkflowTaskUpdateJiraIssueMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateJiraIssueMapOutput {
	return o
}

func (o WorkflowTaskUpdateJiraIssueMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskUpdateJiraIssueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateJiraIssue {
		return vs[0].(map[string]*WorkflowTaskUpdateJiraIssue)[vs[1].(string)]
	}).(WorkflowTaskUpdateJiraIssueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateJiraIssueInput)(nil)).Elem(), &WorkflowTaskUpdateJiraIssue{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateJiraIssueArrayInput)(nil)).Elem(), WorkflowTaskUpdateJiraIssueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateJiraIssueMapInput)(nil)).Elem(), WorkflowTaskUpdateJiraIssueMap{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateJiraIssueOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateJiraIssueArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateJiraIssueMapOutput{})
}
