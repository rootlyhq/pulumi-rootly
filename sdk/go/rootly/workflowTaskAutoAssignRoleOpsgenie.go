// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow autoAssignRoleOpsgenie task.
type WorkflowTaskAutoAssignRoleOpsgenie struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAutoAssignRoleOpsgenieTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskAutoAssignRoleOpsgenie registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskAutoAssignRoleOpsgenie(ctx *pulumi.Context,
	name string, args *WorkflowTaskAutoAssignRoleOpsgenieArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskAutoAssignRoleOpsgenie, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskAutoAssignRoleOpsgenie
	err := ctx.RegisterResource("rootly:index/workflowTaskAutoAssignRoleOpsgenie:WorkflowTaskAutoAssignRoleOpsgenie", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskAutoAssignRoleOpsgenie gets an existing WorkflowTaskAutoAssignRoleOpsgenie resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskAutoAssignRoleOpsgenie(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskAutoAssignRoleOpsgenieState, opts ...pulumi.ResourceOption) (*WorkflowTaskAutoAssignRoleOpsgenie, error) {
	var resource WorkflowTaskAutoAssignRoleOpsgenie
	err := ctx.ReadResource("rootly:index/workflowTaskAutoAssignRoleOpsgenie:WorkflowTaskAutoAssignRoleOpsgenie", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskAutoAssignRoleOpsgenie resources.
type workflowTaskAutoAssignRoleOpsgenieState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskAutoAssignRoleOpsgenieTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskAutoAssignRoleOpsgenieState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAutoAssignRoleOpsgenieTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskAutoAssignRoleOpsgenieState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskAutoAssignRoleOpsgenieState)(nil)).Elem()
}

type workflowTaskAutoAssignRoleOpsgenieArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAutoAssignRoleOpsgenieTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskAutoAssignRoleOpsgenie resource.
type WorkflowTaskAutoAssignRoleOpsgenieArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAutoAssignRoleOpsgenieTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskAutoAssignRoleOpsgenieArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskAutoAssignRoleOpsgenieArgs)(nil)).Elem()
}

type WorkflowTaskAutoAssignRoleOpsgenieInput interface {
	pulumi.Input

	ToWorkflowTaskAutoAssignRoleOpsgenieOutput() WorkflowTaskAutoAssignRoleOpsgenieOutput
	ToWorkflowTaskAutoAssignRoleOpsgenieOutputWithContext(ctx context.Context) WorkflowTaskAutoAssignRoleOpsgenieOutput
}

func (*WorkflowTaskAutoAssignRoleOpsgenie) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskAutoAssignRoleOpsgenie)(nil)).Elem()
}

func (i *WorkflowTaskAutoAssignRoleOpsgenie) ToWorkflowTaskAutoAssignRoleOpsgenieOutput() WorkflowTaskAutoAssignRoleOpsgenieOutput {
	return i.ToWorkflowTaskAutoAssignRoleOpsgenieOutputWithContext(context.Background())
}

func (i *WorkflowTaskAutoAssignRoleOpsgenie) ToWorkflowTaskAutoAssignRoleOpsgenieOutputWithContext(ctx context.Context) WorkflowTaskAutoAssignRoleOpsgenieOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskAutoAssignRoleOpsgenieOutput)
}

// WorkflowTaskAutoAssignRoleOpsgenieArrayInput is an input type that accepts WorkflowTaskAutoAssignRoleOpsgenieArray and WorkflowTaskAutoAssignRoleOpsgenieArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskAutoAssignRoleOpsgenieArrayInput` via:
//
//	WorkflowTaskAutoAssignRoleOpsgenieArray{ WorkflowTaskAutoAssignRoleOpsgenieArgs{...} }
type WorkflowTaskAutoAssignRoleOpsgenieArrayInput interface {
	pulumi.Input

	ToWorkflowTaskAutoAssignRoleOpsgenieArrayOutput() WorkflowTaskAutoAssignRoleOpsgenieArrayOutput
	ToWorkflowTaskAutoAssignRoleOpsgenieArrayOutputWithContext(context.Context) WorkflowTaskAutoAssignRoleOpsgenieArrayOutput
}

type WorkflowTaskAutoAssignRoleOpsgenieArray []WorkflowTaskAutoAssignRoleOpsgenieInput

func (WorkflowTaskAutoAssignRoleOpsgenieArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskAutoAssignRoleOpsgenie)(nil)).Elem()
}

func (i WorkflowTaskAutoAssignRoleOpsgenieArray) ToWorkflowTaskAutoAssignRoleOpsgenieArrayOutput() WorkflowTaskAutoAssignRoleOpsgenieArrayOutput {
	return i.ToWorkflowTaskAutoAssignRoleOpsgenieArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskAutoAssignRoleOpsgenieArray) ToWorkflowTaskAutoAssignRoleOpsgenieArrayOutputWithContext(ctx context.Context) WorkflowTaskAutoAssignRoleOpsgenieArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskAutoAssignRoleOpsgenieArrayOutput)
}

// WorkflowTaskAutoAssignRoleOpsgenieMapInput is an input type that accepts WorkflowTaskAutoAssignRoleOpsgenieMap and WorkflowTaskAutoAssignRoleOpsgenieMapOutput values.
// You can construct a concrete instance of `WorkflowTaskAutoAssignRoleOpsgenieMapInput` via:
//
//	WorkflowTaskAutoAssignRoleOpsgenieMap{ "key": WorkflowTaskAutoAssignRoleOpsgenieArgs{...} }
type WorkflowTaskAutoAssignRoleOpsgenieMapInput interface {
	pulumi.Input

	ToWorkflowTaskAutoAssignRoleOpsgenieMapOutput() WorkflowTaskAutoAssignRoleOpsgenieMapOutput
	ToWorkflowTaskAutoAssignRoleOpsgenieMapOutputWithContext(context.Context) WorkflowTaskAutoAssignRoleOpsgenieMapOutput
}

type WorkflowTaskAutoAssignRoleOpsgenieMap map[string]WorkflowTaskAutoAssignRoleOpsgenieInput

func (WorkflowTaskAutoAssignRoleOpsgenieMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskAutoAssignRoleOpsgenie)(nil)).Elem()
}

func (i WorkflowTaskAutoAssignRoleOpsgenieMap) ToWorkflowTaskAutoAssignRoleOpsgenieMapOutput() WorkflowTaskAutoAssignRoleOpsgenieMapOutput {
	return i.ToWorkflowTaskAutoAssignRoleOpsgenieMapOutputWithContext(context.Background())
}

func (i WorkflowTaskAutoAssignRoleOpsgenieMap) ToWorkflowTaskAutoAssignRoleOpsgenieMapOutputWithContext(ctx context.Context) WorkflowTaskAutoAssignRoleOpsgenieMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskAutoAssignRoleOpsgenieMapOutput)
}

type WorkflowTaskAutoAssignRoleOpsgenieOutput struct{ *pulumi.OutputState }

func (WorkflowTaskAutoAssignRoleOpsgenieOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskAutoAssignRoleOpsgenie)(nil)).Elem()
}

func (o WorkflowTaskAutoAssignRoleOpsgenieOutput) ToWorkflowTaskAutoAssignRoleOpsgenieOutput() WorkflowTaskAutoAssignRoleOpsgenieOutput {
	return o
}

func (o WorkflowTaskAutoAssignRoleOpsgenieOutput) ToWorkflowTaskAutoAssignRoleOpsgenieOutputWithContext(ctx context.Context) WorkflowTaskAutoAssignRoleOpsgenieOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskAutoAssignRoleOpsgenieOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskAutoAssignRoleOpsgenie) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskAutoAssignRoleOpsgenieOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskAutoAssignRoleOpsgenie) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskAutoAssignRoleOpsgenieOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskAutoAssignRoleOpsgenie) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskAutoAssignRoleOpsgenieOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskAutoAssignRoleOpsgenie) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskAutoAssignRoleOpsgenieOutput) TaskParams() WorkflowTaskAutoAssignRoleOpsgenieTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskAutoAssignRoleOpsgenie) WorkflowTaskAutoAssignRoleOpsgenieTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskAutoAssignRoleOpsgenieTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskAutoAssignRoleOpsgenieOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskAutoAssignRoleOpsgenie) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskAutoAssignRoleOpsgenieArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskAutoAssignRoleOpsgenieArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskAutoAssignRoleOpsgenie)(nil)).Elem()
}

func (o WorkflowTaskAutoAssignRoleOpsgenieArrayOutput) ToWorkflowTaskAutoAssignRoleOpsgenieArrayOutput() WorkflowTaskAutoAssignRoleOpsgenieArrayOutput {
	return o
}

func (o WorkflowTaskAutoAssignRoleOpsgenieArrayOutput) ToWorkflowTaskAutoAssignRoleOpsgenieArrayOutputWithContext(ctx context.Context) WorkflowTaskAutoAssignRoleOpsgenieArrayOutput {
	return o
}

func (o WorkflowTaskAutoAssignRoleOpsgenieArrayOutput) Index(i pulumi.IntInput) WorkflowTaskAutoAssignRoleOpsgenieOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskAutoAssignRoleOpsgenie {
		return vs[0].([]*WorkflowTaskAutoAssignRoleOpsgenie)[vs[1].(int)]
	}).(WorkflowTaskAutoAssignRoleOpsgenieOutput)
}

type WorkflowTaskAutoAssignRoleOpsgenieMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskAutoAssignRoleOpsgenieMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskAutoAssignRoleOpsgenie)(nil)).Elem()
}

func (o WorkflowTaskAutoAssignRoleOpsgenieMapOutput) ToWorkflowTaskAutoAssignRoleOpsgenieMapOutput() WorkflowTaskAutoAssignRoleOpsgenieMapOutput {
	return o
}

func (o WorkflowTaskAutoAssignRoleOpsgenieMapOutput) ToWorkflowTaskAutoAssignRoleOpsgenieMapOutputWithContext(ctx context.Context) WorkflowTaskAutoAssignRoleOpsgenieMapOutput {
	return o
}

func (o WorkflowTaskAutoAssignRoleOpsgenieMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskAutoAssignRoleOpsgenieOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskAutoAssignRoleOpsgenie {
		return vs[0].(map[string]*WorkflowTaskAutoAssignRoleOpsgenie)[vs[1].(string)]
	}).(WorkflowTaskAutoAssignRoleOpsgenieOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskAutoAssignRoleOpsgenieInput)(nil)).Elem(), &WorkflowTaskAutoAssignRoleOpsgenie{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskAutoAssignRoleOpsgenieArrayInput)(nil)).Elem(), WorkflowTaskAutoAssignRoleOpsgenieArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskAutoAssignRoleOpsgenieMapInput)(nil)).Elem(), WorkflowTaskAutoAssignRoleOpsgenieMap{})
	pulumi.RegisterOutputType(WorkflowTaskAutoAssignRoleOpsgenieOutput{})
	pulumi.RegisterOutputType(WorkflowTaskAutoAssignRoleOpsgenieArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskAutoAssignRoleOpsgenieMapOutput{})
}
