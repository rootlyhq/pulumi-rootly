// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow addTeam task.
type WorkflowTaskAddTeam struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAddTeamTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskAddTeam registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskAddTeam(ctx *pulumi.Context,
	name string, args *WorkflowTaskAddTeamArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskAddTeam, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskAddTeam
	err := ctx.RegisterResource("rootly:index/workflowTaskAddTeam:WorkflowTaskAddTeam", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskAddTeam gets an existing WorkflowTaskAddTeam resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskAddTeam(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskAddTeamState, opts ...pulumi.ResourceOption) (*WorkflowTaskAddTeam, error) {
	var resource WorkflowTaskAddTeam
	err := ctx.ReadResource("rootly:index/workflowTaskAddTeam:WorkflowTaskAddTeam", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskAddTeam resources.
type workflowTaskAddTeamState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskAddTeamTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskAddTeamState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAddTeamTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskAddTeamState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskAddTeamState)(nil)).Elem()
}

type workflowTaskAddTeamArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAddTeamTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskAddTeam resource.
type WorkflowTaskAddTeamArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAddTeamTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskAddTeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskAddTeamArgs)(nil)).Elem()
}

type WorkflowTaskAddTeamInput interface {
	pulumi.Input

	ToWorkflowTaskAddTeamOutput() WorkflowTaskAddTeamOutput
	ToWorkflowTaskAddTeamOutputWithContext(ctx context.Context) WorkflowTaskAddTeamOutput
}

func (*WorkflowTaskAddTeam) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskAddTeam)(nil)).Elem()
}

func (i *WorkflowTaskAddTeam) ToWorkflowTaskAddTeamOutput() WorkflowTaskAddTeamOutput {
	return i.ToWorkflowTaskAddTeamOutputWithContext(context.Background())
}

func (i *WorkflowTaskAddTeam) ToWorkflowTaskAddTeamOutputWithContext(ctx context.Context) WorkflowTaskAddTeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskAddTeamOutput)
}

// WorkflowTaskAddTeamArrayInput is an input type that accepts WorkflowTaskAddTeamArray and WorkflowTaskAddTeamArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskAddTeamArrayInput` via:
//
//	WorkflowTaskAddTeamArray{ WorkflowTaskAddTeamArgs{...} }
type WorkflowTaskAddTeamArrayInput interface {
	pulumi.Input

	ToWorkflowTaskAddTeamArrayOutput() WorkflowTaskAddTeamArrayOutput
	ToWorkflowTaskAddTeamArrayOutputWithContext(context.Context) WorkflowTaskAddTeamArrayOutput
}

type WorkflowTaskAddTeamArray []WorkflowTaskAddTeamInput

func (WorkflowTaskAddTeamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskAddTeam)(nil)).Elem()
}

func (i WorkflowTaskAddTeamArray) ToWorkflowTaskAddTeamArrayOutput() WorkflowTaskAddTeamArrayOutput {
	return i.ToWorkflowTaskAddTeamArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskAddTeamArray) ToWorkflowTaskAddTeamArrayOutputWithContext(ctx context.Context) WorkflowTaskAddTeamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskAddTeamArrayOutput)
}

// WorkflowTaskAddTeamMapInput is an input type that accepts WorkflowTaskAddTeamMap and WorkflowTaskAddTeamMapOutput values.
// You can construct a concrete instance of `WorkflowTaskAddTeamMapInput` via:
//
//	WorkflowTaskAddTeamMap{ "key": WorkflowTaskAddTeamArgs{...} }
type WorkflowTaskAddTeamMapInput interface {
	pulumi.Input

	ToWorkflowTaskAddTeamMapOutput() WorkflowTaskAddTeamMapOutput
	ToWorkflowTaskAddTeamMapOutputWithContext(context.Context) WorkflowTaskAddTeamMapOutput
}

type WorkflowTaskAddTeamMap map[string]WorkflowTaskAddTeamInput

func (WorkflowTaskAddTeamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskAddTeam)(nil)).Elem()
}

func (i WorkflowTaskAddTeamMap) ToWorkflowTaskAddTeamMapOutput() WorkflowTaskAddTeamMapOutput {
	return i.ToWorkflowTaskAddTeamMapOutputWithContext(context.Background())
}

func (i WorkflowTaskAddTeamMap) ToWorkflowTaskAddTeamMapOutputWithContext(ctx context.Context) WorkflowTaskAddTeamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskAddTeamMapOutput)
}

type WorkflowTaskAddTeamOutput struct{ *pulumi.OutputState }

func (WorkflowTaskAddTeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskAddTeam)(nil)).Elem()
}

func (o WorkflowTaskAddTeamOutput) ToWorkflowTaskAddTeamOutput() WorkflowTaskAddTeamOutput {
	return o
}

func (o WorkflowTaskAddTeamOutput) ToWorkflowTaskAddTeamOutputWithContext(ctx context.Context) WorkflowTaskAddTeamOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskAddTeamOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskAddTeam) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskAddTeamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskAddTeam) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskAddTeamOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskAddTeam) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskAddTeamOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskAddTeam) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskAddTeamOutput) TaskParams() WorkflowTaskAddTeamTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskAddTeam) WorkflowTaskAddTeamTaskParamsOutput { return v.TaskParams }).(WorkflowTaskAddTeamTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskAddTeamOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskAddTeam) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskAddTeamArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskAddTeamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskAddTeam)(nil)).Elem()
}

func (o WorkflowTaskAddTeamArrayOutput) ToWorkflowTaskAddTeamArrayOutput() WorkflowTaskAddTeamArrayOutput {
	return o
}

func (o WorkflowTaskAddTeamArrayOutput) ToWorkflowTaskAddTeamArrayOutputWithContext(ctx context.Context) WorkflowTaskAddTeamArrayOutput {
	return o
}

func (o WorkflowTaskAddTeamArrayOutput) Index(i pulumi.IntInput) WorkflowTaskAddTeamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskAddTeam {
		return vs[0].([]*WorkflowTaskAddTeam)[vs[1].(int)]
	}).(WorkflowTaskAddTeamOutput)
}

type WorkflowTaskAddTeamMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskAddTeamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskAddTeam)(nil)).Elem()
}

func (o WorkflowTaskAddTeamMapOutput) ToWorkflowTaskAddTeamMapOutput() WorkflowTaskAddTeamMapOutput {
	return o
}

func (o WorkflowTaskAddTeamMapOutput) ToWorkflowTaskAddTeamMapOutputWithContext(ctx context.Context) WorkflowTaskAddTeamMapOutput {
	return o
}

func (o WorkflowTaskAddTeamMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskAddTeamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskAddTeam {
		return vs[0].(map[string]*WorkflowTaskAddTeam)[vs[1].(string)]
	}).(WorkflowTaskAddTeamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskAddTeamInput)(nil)).Elem(), &WorkflowTaskAddTeam{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskAddTeamArrayInput)(nil)).Elem(), WorkflowTaskAddTeamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskAddTeamMapInput)(nil)).Elem(), WorkflowTaskAddTeamMap{})
	pulumi.RegisterOutputType(WorkflowTaskAddTeamOutput{})
	pulumi.RegisterOutputType(WorkflowTaskAddTeamArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskAddTeamMapOutput{})
}
