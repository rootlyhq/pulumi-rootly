// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type Authorization struct {
	pulumi.CustomResourceState

	// The id of the resource being accessed.
	AuthorizableId pulumi.StringOutput `pulumi:"authorizableId"`
	// The type of resource being accessed.. Value must be one of `Dashboard`.
	AuthorizableType pulumi.StringPtrOutput `pulumi:"authorizableType"`
	// The resource id granted access.
	GranteeId pulumi.StringOutput `pulumi:"granteeId"`
	// The type of resource granted access.. Value must be one of `User`, `Team`.
	GranteeType pulumi.StringPtrOutput `pulumi:"granteeType"`
	// Value must be one of `read`, `update`, `authorize`, `destroy`.
	Permissions pulumi.StringArrayOutput `pulumi:"permissions"`
}

// NewAuthorization registers a new resource with the given unique name, arguments, and options.
func NewAuthorization(ctx *pulumi.Context,
	name string, args *AuthorizationArgs, opts ...pulumi.ResourceOption) (*Authorization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthorizableId == nil {
		return nil, errors.New("invalid value for required argument 'AuthorizableId'")
	}
	if args.GranteeId == nil {
		return nil, errors.New("invalid value for required argument 'GranteeId'")
	}
	if args.Permissions == nil {
		return nil, errors.New("invalid value for required argument 'Permissions'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Authorization
	err := ctx.RegisterResource("rootly:index/authorization:Authorization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAuthorization gets an existing Authorization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAuthorization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AuthorizationState, opts ...pulumi.ResourceOption) (*Authorization, error) {
	var resource Authorization
	err := ctx.ReadResource("rootly:index/authorization:Authorization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Authorization resources.
type authorizationState struct {
	// The id of the resource being accessed.
	AuthorizableId *string `pulumi:"authorizableId"`
	// The type of resource being accessed.. Value must be one of `Dashboard`.
	AuthorizableType *string `pulumi:"authorizableType"`
	// The resource id granted access.
	GranteeId *string `pulumi:"granteeId"`
	// The type of resource granted access.. Value must be one of `User`, `Team`.
	GranteeType *string `pulumi:"granteeType"`
	// Value must be one of `read`, `update`, `authorize`, `destroy`.
	Permissions []string `pulumi:"permissions"`
}

type AuthorizationState struct {
	// The id of the resource being accessed.
	AuthorizableId pulumi.StringPtrInput
	// The type of resource being accessed.. Value must be one of `Dashboard`.
	AuthorizableType pulumi.StringPtrInput
	// The resource id granted access.
	GranteeId pulumi.StringPtrInput
	// The type of resource granted access.. Value must be one of `User`, `Team`.
	GranteeType pulumi.StringPtrInput
	// Value must be one of `read`, `update`, `authorize`, `destroy`.
	Permissions pulumi.StringArrayInput
}

func (AuthorizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationState)(nil)).Elem()
}

type authorizationArgs struct {
	// The id of the resource being accessed.
	AuthorizableId string `pulumi:"authorizableId"`
	// The type of resource being accessed.. Value must be one of `Dashboard`.
	AuthorizableType *string `pulumi:"authorizableType"`
	// The resource id granted access.
	GranteeId string `pulumi:"granteeId"`
	// The type of resource granted access.. Value must be one of `User`, `Team`.
	GranteeType *string `pulumi:"granteeType"`
	// Value must be one of `read`, `update`, `authorize`, `destroy`.
	Permissions []string `pulumi:"permissions"`
}

// The set of arguments for constructing a Authorization resource.
type AuthorizationArgs struct {
	// The id of the resource being accessed.
	AuthorizableId pulumi.StringInput
	// The type of resource being accessed.. Value must be one of `Dashboard`.
	AuthorizableType pulumi.StringPtrInput
	// The resource id granted access.
	GranteeId pulumi.StringInput
	// The type of resource granted access.. Value must be one of `User`, `Team`.
	GranteeType pulumi.StringPtrInput
	// Value must be one of `read`, `update`, `authorize`, `destroy`.
	Permissions pulumi.StringArrayInput
}

func (AuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*authorizationArgs)(nil)).Elem()
}

type AuthorizationInput interface {
	pulumi.Input

	ToAuthorizationOutput() AuthorizationOutput
	ToAuthorizationOutputWithContext(ctx context.Context) AuthorizationOutput
}

func (*Authorization) ElementType() reflect.Type {
	return reflect.TypeOf((**Authorization)(nil)).Elem()
}

func (i *Authorization) ToAuthorizationOutput() AuthorizationOutput {
	return i.ToAuthorizationOutputWithContext(context.Background())
}

func (i *Authorization) ToAuthorizationOutputWithContext(ctx context.Context) AuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationOutput)
}

// AuthorizationArrayInput is an input type that accepts AuthorizationArray and AuthorizationArrayOutput values.
// You can construct a concrete instance of `AuthorizationArrayInput` via:
//
//	AuthorizationArray{ AuthorizationArgs{...} }
type AuthorizationArrayInput interface {
	pulumi.Input

	ToAuthorizationArrayOutput() AuthorizationArrayOutput
	ToAuthorizationArrayOutputWithContext(context.Context) AuthorizationArrayOutput
}

type AuthorizationArray []AuthorizationInput

func (AuthorizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Authorization)(nil)).Elem()
}

func (i AuthorizationArray) ToAuthorizationArrayOutput() AuthorizationArrayOutput {
	return i.ToAuthorizationArrayOutputWithContext(context.Background())
}

func (i AuthorizationArray) ToAuthorizationArrayOutputWithContext(ctx context.Context) AuthorizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationArrayOutput)
}

// AuthorizationMapInput is an input type that accepts AuthorizationMap and AuthorizationMapOutput values.
// You can construct a concrete instance of `AuthorizationMapInput` via:
//
//	AuthorizationMap{ "key": AuthorizationArgs{...} }
type AuthorizationMapInput interface {
	pulumi.Input

	ToAuthorizationMapOutput() AuthorizationMapOutput
	ToAuthorizationMapOutputWithContext(context.Context) AuthorizationMapOutput
}

type AuthorizationMap map[string]AuthorizationInput

func (AuthorizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Authorization)(nil)).Elem()
}

func (i AuthorizationMap) ToAuthorizationMapOutput() AuthorizationMapOutput {
	return i.ToAuthorizationMapOutputWithContext(context.Background())
}

func (i AuthorizationMap) ToAuthorizationMapOutputWithContext(ctx context.Context) AuthorizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AuthorizationMapOutput)
}

type AuthorizationOutput struct{ *pulumi.OutputState }

func (AuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Authorization)(nil)).Elem()
}

func (o AuthorizationOutput) ToAuthorizationOutput() AuthorizationOutput {
	return o
}

func (o AuthorizationOutput) ToAuthorizationOutputWithContext(ctx context.Context) AuthorizationOutput {
	return o
}

// The id of the resource being accessed.
func (o AuthorizationOutput) AuthorizableId() pulumi.StringOutput {
	return o.ApplyT(func(v *Authorization) pulumi.StringOutput { return v.AuthorizableId }).(pulumi.StringOutput)
}

// The type of resource being accessed.. Value must be one of `Dashboard`.
func (o AuthorizationOutput) AuthorizableType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authorization) pulumi.StringPtrOutput { return v.AuthorizableType }).(pulumi.StringPtrOutput)
}

// The resource id granted access.
func (o AuthorizationOutput) GranteeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Authorization) pulumi.StringOutput { return v.GranteeId }).(pulumi.StringOutput)
}

// The type of resource granted access.. Value must be one of `User`, `Team`.
func (o AuthorizationOutput) GranteeType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Authorization) pulumi.StringPtrOutput { return v.GranteeType }).(pulumi.StringPtrOutput)
}

// Value must be one of `read`, `update`, `authorize`, `destroy`.
func (o AuthorizationOutput) Permissions() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Authorization) pulumi.StringArrayOutput { return v.Permissions }).(pulumi.StringArrayOutput)
}

type AuthorizationArrayOutput struct{ *pulumi.OutputState }

func (AuthorizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Authorization)(nil)).Elem()
}

func (o AuthorizationArrayOutput) ToAuthorizationArrayOutput() AuthorizationArrayOutput {
	return o
}

func (o AuthorizationArrayOutput) ToAuthorizationArrayOutputWithContext(ctx context.Context) AuthorizationArrayOutput {
	return o
}

func (o AuthorizationArrayOutput) Index(i pulumi.IntInput) AuthorizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Authorization {
		return vs[0].([]*Authorization)[vs[1].(int)]
	}).(AuthorizationOutput)
}

type AuthorizationMapOutput struct{ *pulumi.OutputState }

func (AuthorizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Authorization)(nil)).Elem()
}

func (o AuthorizationMapOutput) ToAuthorizationMapOutput() AuthorizationMapOutput {
	return o
}

func (o AuthorizationMapOutput) ToAuthorizationMapOutputWithContext(ctx context.Context) AuthorizationMapOutput {
	return o
}

func (o AuthorizationMapOutput) MapIndex(k pulumi.StringInput) AuthorizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Authorization {
		return vs[0].(map[string]*Authorization)[vs[1].(string)]
	}).(AuthorizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationInput)(nil)).Elem(), &Authorization{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationArrayInput)(nil)).Elem(), AuthorizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AuthorizationMapInput)(nil)).Elem(), AuthorizationMap{})
	pulumi.RegisterOutputType(AuthorizationOutput{})
	pulumi.RegisterOutputType(AuthorizationArrayOutput{})
	pulumi.RegisterOutputType(AuthorizationMapOutput{})
}
