// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type OnCallShadow struct {
	pulumi.CustomResourceState

	// End datetime for shadow shift
	EndsAt pulumi.StringOutput `pulumi:"endsAt"`
	// ID of schedule the shadow shift belongs to
	ScheduleId pulumi.StringOutput `pulumi:"scheduleId"`
	// Which user the shadow shift belongs to.
	ShadowUserId pulumi.IntOutput `pulumi:"shadowUserId"`
	// ID of schedule or user the shadow user is shadowing
	ShadowableId pulumi.StringOutput `pulumi:"shadowableId"`
	// Value must be one of `User`, `Schedule`.
	ShadowableType pulumi.StringPtrOutput `pulumi:"shadowableType"`
	// Start datetime of shadow shift
	StartsAt pulumi.StringOutput `pulumi:"startsAt"`
}

// NewOnCallShadow registers a new resource with the given unique name, arguments, and options.
func NewOnCallShadow(ctx *pulumi.Context,
	name string, args *OnCallShadowArgs, opts ...pulumi.ResourceOption) (*OnCallShadow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndsAt == nil {
		return nil, errors.New("invalid value for required argument 'EndsAt'")
	}
	if args.ShadowUserId == nil {
		return nil, errors.New("invalid value for required argument 'ShadowUserId'")
	}
	if args.ShadowableId == nil {
		return nil, errors.New("invalid value for required argument 'ShadowableId'")
	}
	if args.StartsAt == nil {
		return nil, errors.New("invalid value for required argument 'StartsAt'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OnCallShadow
	err := ctx.RegisterResource("rootly:index/onCallShadow:OnCallShadow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOnCallShadow gets an existing OnCallShadow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOnCallShadow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OnCallShadowState, opts ...pulumi.ResourceOption) (*OnCallShadow, error) {
	var resource OnCallShadow
	err := ctx.ReadResource("rootly:index/onCallShadow:OnCallShadow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OnCallShadow resources.
type onCallShadowState struct {
	// End datetime for shadow shift
	EndsAt *string `pulumi:"endsAt"`
	// ID of schedule the shadow shift belongs to
	ScheduleId *string `pulumi:"scheduleId"`
	// Which user the shadow shift belongs to.
	ShadowUserId *int `pulumi:"shadowUserId"`
	// ID of schedule or user the shadow user is shadowing
	ShadowableId *string `pulumi:"shadowableId"`
	// Value must be one of `User`, `Schedule`.
	ShadowableType *string `pulumi:"shadowableType"`
	// Start datetime of shadow shift
	StartsAt *string `pulumi:"startsAt"`
}

type OnCallShadowState struct {
	// End datetime for shadow shift
	EndsAt pulumi.StringPtrInput
	// ID of schedule the shadow shift belongs to
	ScheduleId pulumi.StringPtrInput
	// Which user the shadow shift belongs to.
	ShadowUserId pulumi.IntPtrInput
	// ID of schedule or user the shadow user is shadowing
	ShadowableId pulumi.StringPtrInput
	// Value must be one of `User`, `Schedule`.
	ShadowableType pulumi.StringPtrInput
	// Start datetime of shadow shift
	StartsAt pulumi.StringPtrInput
}

func (OnCallShadowState) ElementType() reflect.Type {
	return reflect.TypeOf((*onCallShadowState)(nil)).Elem()
}

type onCallShadowArgs struct {
	// End datetime for shadow shift
	EndsAt string `pulumi:"endsAt"`
	// ID of schedule the shadow shift belongs to
	ScheduleId *string `pulumi:"scheduleId"`
	// Which user the shadow shift belongs to.
	ShadowUserId int `pulumi:"shadowUserId"`
	// ID of schedule or user the shadow user is shadowing
	ShadowableId string `pulumi:"shadowableId"`
	// Value must be one of `User`, `Schedule`.
	ShadowableType *string `pulumi:"shadowableType"`
	// Start datetime of shadow shift
	StartsAt string `pulumi:"startsAt"`
}

// The set of arguments for constructing a OnCallShadow resource.
type OnCallShadowArgs struct {
	// End datetime for shadow shift
	EndsAt pulumi.StringInput
	// ID of schedule the shadow shift belongs to
	ScheduleId pulumi.StringPtrInput
	// Which user the shadow shift belongs to.
	ShadowUserId pulumi.IntInput
	// ID of schedule or user the shadow user is shadowing
	ShadowableId pulumi.StringInput
	// Value must be one of `User`, `Schedule`.
	ShadowableType pulumi.StringPtrInput
	// Start datetime of shadow shift
	StartsAt pulumi.StringInput
}

func (OnCallShadowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*onCallShadowArgs)(nil)).Elem()
}

type OnCallShadowInput interface {
	pulumi.Input

	ToOnCallShadowOutput() OnCallShadowOutput
	ToOnCallShadowOutputWithContext(ctx context.Context) OnCallShadowOutput
}

func (*OnCallShadow) ElementType() reflect.Type {
	return reflect.TypeOf((**OnCallShadow)(nil)).Elem()
}

func (i *OnCallShadow) ToOnCallShadowOutput() OnCallShadowOutput {
	return i.ToOnCallShadowOutputWithContext(context.Background())
}

func (i *OnCallShadow) ToOnCallShadowOutputWithContext(ctx context.Context) OnCallShadowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnCallShadowOutput)
}

// OnCallShadowArrayInput is an input type that accepts OnCallShadowArray and OnCallShadowArrayOutput values.
// You can construct a concrete instance of `OnCallShadowArrayInput` via:
//
//	OnCallShadowArray{ OnCallShadowArgs{...} }
type OnCallShadowArrayInput interface {
	pulumi.Input

	ToOnCallShadowArrayOutput() OnCallShadowArrayOutput
	ToOnCallShadowArrayOutputWithContext(context.Context) OnCallShadowArrayOutput
}

type OnCallShadowArray []OnCallShadowInput

func (OnCallShadowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OnCallShadow)(nil)).Elem()
}

func (i OnCallShadowArray) ToOnCallShadowArrayOutput() OnCallShadowArrayOutput {
	return i.ToOnCallShadowArrayOutputWithContext(context.Background())
}

func (i OnCallShadowArray) ToOnCallShadowArrayOutputWithContext(ctx context.Context) OnCallShadowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnCallShadowArrayOutput)
}

// OnCallShadowMapInput is an input type that accepts OnCallShadowMap and OnCallShadowMapOutput values.
// You can construct a concrete instance of `OnCallShadowMapInput` via:
//
//	OnCallShadowMap{ "key": OnCallShadowArgs{...} }
type OnCallShadowMapInput interface {
	pulumi.Input

	ToOnCallShadowMapOutput() OnCallShadowMapOutput
	ToOnCallShadowMapOutputWithContext(context.Context) OnCallShadowMapOutput
}

type OnCallShadowMap map[string]OnCallShadowInput

func (OnCallShadowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OnCallShadow)(nil)).Elem()
}

func (i OnCallShadowMap) ToOnCallShadowMapOutput() OnCallShadowMapOutput {
	return i.ToOnCallShadowMapOutputWithContext(context.Background())
}

func (i OnCallShadowMap) ToOnCallShadowMapOutputWithContext(ctx context.Context) OnCallShadowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnCallShadowMapOutput)
}

type OnCallShadowOutput struct{ *pulumi.OutputState }

func (OnCallShadowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnCallShadow)(nil)).Elem()
}

func (o OnCallShadowOutput) ToOnCallShadowOutput() OnCallShadowOutput {
	return o
}

func (o OnCallShadowOutput) ToOnCallShadowOutputWithContext(ctx context.Context) OnCallShadowOutput {
	return o
}

// End datetime for shadow shift
func (o OnCallShadowOutput) EndsAt() pulumi.StringOutput {
	return o.ApplyT(func(v *OnCallShadow) pulumi.StringOutput { return v.EndsAt }).(pulumi.StringOutput)
}

// ID of schedule the shadow shift belongs to
func (o OnCallShadowOutput) ScheduleId() pulumi.StringOutput {
	return o.ApplyT(func(v *OnCallShadow) pulumi.StringOutput { return v.ScheduleId }).(pulumi.StringOutput)
}

// Which user the shadow shift belongs to.
func (o OnCallShadowOutput) ShadowUserId() pulumi.IntOutput {
	return o.ApplyT(func(v *OnCallShadow) pulumi.IntOutput { return v.ShadowUserId }).(pulumi.IntOutput)
}

// ID of schedule or user the shadow user is shadowing
func (o OnCallShadowOutput) ShadowableId() pulumi.StringOutput {
	return o.ApplyT(func(v *OnCallShadow) pulumi.StringOutput { return v.ShadowableId }).(pulumi.StringOutput)
}

// Value must be one of `User`, `Schedule`.
func (o OnCallShadowOutput) ShadowableType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *OnCallShadow) pulumi.StringPtrOutput { return v.ShadowableType }).(pulumi.StringPtrOutput)
}

// Start datetime of shadow shift
func (o OnCallShadowOutput) StartsAt() pulumi.StringOutput {
	return o.ApplyT(func(v *OnCallShadow) pulumi.StringOutput { return v.StartsAt }).(pulumi.StringOutput)
}

type OnCallShadowArrayOutput struct{ *pulumi.OutputState }

func (OnCallShadowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OnCallShadow)(nil)).Elem()
}

func (o OnCallShadowArrayOutput) ToOnCallShadowArrayOutput() OnCallShadowArrayOutput {
	return o
}

func (o OnCallShadowArrayOutput) ToOnCallShadowArrayOutputWithContext(ctx context.Context) OnCallShadowArrayOutput {
	return o
}

func (o OnCallShadowArrayOutput) Index(i pulumi.IntInput) OnCallShadowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OnCallShadow {
		return vs[0].([]*OnCallShadow)[vs[1].(int)]
	}).(OnCallShadowOutput)
}

type OnCallShadowMapOutput struct{ *pulumi.OutputState }

func (OnCallShadowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OnCallShadow)(nil)).Elem()
}

func (o OnCallShadowMapOutput) ToOnCallShadowMapOutput() OnCallShadowMapOutput {
	return o
}

func (o OnCallShadowMapOutput) ToOnCallShadowMapOutputWithContext(ctx context.Context) OnCallShadowMapOutput {
	return o
}

func (o OnCallShadowMapOutput) MapIndex(k pulumi.StringInput) OnCallShadowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OnCallShadow {
		return vs[0].(map[string]*OnCallShadow)[vs[1].(string)]
	}).(OnCallShadowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OnCallShadowInput)(nil)).Elem(), &OnCallShadow{})
	pulumi.RegisterInputType(reflect.TypeOf((*OnCallShadowArrayInput)(nil)).Elem(), OnCallShadowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OnCallShadowMapInput)(nil)).Elem(), OnCallShadowMap{})
	pulumi.RegisterOutputType(OnCallShadowOutput{})
	pulumi.RegisterOutputType(OnCallShadowArrayOutput{})
	pulumi.RegisterOutputType(OnCallShadowMapOutput{})
}
