// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages Incident Roles (e.g Commander, Ops Lead, Communication).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rootly/sdk/go/rootly"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := rootly.NewIncidentRole(ctx, "foo", nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import rootly:index/incidentRole:IncidentRole foo 11111111-2222-3333-4444-555555555555
// ```
type IncidentRole struct {
	pulumi.CustomResourceState

	// The description of the incident role
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Whether the incident role is enabled or not
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// The name of the incident role
	Name pulumi.StringOutput `pulumi:"name"`
	// The summary of the incident role
	Summary pulumi.StringPtrOutput `pulumi:"summary"`
}

// NewIncidentRole registers a new resource with the given unique name, arguments, and options.
func NewIncidentRole(ctx *pulumi.Context,
	name string, args *IncidentRoleArgs, opts ...pulumi.ResourceOption) (*IncidentRole, error) {
	if args == nil {
		args = &IncidentRoleArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource IncidentRole
	err := ctx.RegisterResource("rootly:index/incidentRole:IncidentRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIncidentRole gets an existing IncidentRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIncidentRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IncidentRoleState, opts ...pulumi.ResourceOption) (*IncidentRole, error) {
	var resource IncidentRole
	err := ctx.ReadResource("rootly:index/incidentRole:IncidentRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IncidentRole resources.
type incidentRoleState struct {
	// The description of the incident role
	Description *string `pulumi:"description"`
	// Whether the incident role is enabled or not
	Enabled *bool `pulumi:"enabled"`
	// The name of the incident role
	Name *string `pulumi:"name"`
	// The summary of the incident role
	Summary *string `pulumi:"summary"`
}

type IncidentRoleState struct {
	// The description of the incident role
	Description pulumi.StringPtrInput
	// Whether the incident role is enabled or not
	Enabled pulumi.BoolPtrInput
	// The name of the incident role
	Name pulumi.StringPtrInput
	// The summary of the incident role
	Summary pulumi.StringPtrInput
}

func (IncidentRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*incidentRoleState)(nil)).Elem()
}

type incidentRoleArgs struct {
	// The description of the incident role
	Description *string `pulumi:"description"`
	// Whether the incident role is enabled or not
	Enabled *bool `pulumi:"enabled"`
	// The name of the incident role
	Name *string `pulumi:"name"`
	// The summary of the incident role
	Summary *string `pulumi:"summary"`
}

// The set of arguments for constructing a IncidentRole resource.
type IncidentRoleArgs struct {
	// The description of the incident role
	Description pulumi.StringPtrInput
	// Whether the incident role is enabled or not
	Enabled pulumi.BoolPtrInput
	// The name of the incident role
	Name pulumi.StringPtrInput
	// The summary of the incident role
	Summary pulumi.StringPtrInput
}

func (IncidentRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*incidentRoleArgs)(nil)).Elem()
}

type IncidentRoleInput interface {
	pulumi.Input

	ToIncidentRoleOutput() IncidentRoleOutput
	ToIncidentRoleOutputWithContext(ctx context.Context) IncidentRoleOutput
}

func (*IncidentRole) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentRole)(nil)).Elem()
}

func (i *IncidentRole) ToIncidentRoleOutput() IncidentRoleOutput {
	return i.ToIncidentRoleOutputWithContext(context.Background())
}

func (i *IncidentRole) ToIncidentRoleOutputWithContext(ctx context.Context) IncidentRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentRoleOutput)
}

// IncidentRoleArrayInput is an input type that accepts IncidentRoleArray and IncidentRoleArrayOutput values.
// You can construct a concrete instance of `IncidentRoleArrayInput` via:
//
//          IncidentRoleArray{ IncidentRoleArgs{...} }
type IncidentRoleArrayInput interface {
	pulumi.Input

	ToIncidentRoleArrayOutput() IncidentRoleArrayOutput
	ToIncidentRoleArrayOutputWithContext(context.Context) IncidentRoleArrayOutput
}

type IncidentRoleArray []IncidentRoleInput

func (IncidentRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IncidentRole)(nil)).Elem()
}

func (i IncidentRoleArray) ToIncidentRoleArrayOutput() IncidentRoleArrayOutput {
	return i.ToIncidentRoleArrayOutputWithContext(context.Background())
}

func (i IncidentRoleArray) ToIncidentRoleArrayOutputWithContext(ctx context.Context) IncidentRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentRoleArrayOutput)
}

// IncidentRoleMapInput is an input type that accepts IncidentRoleMap and IncidentRoleMapOutput values.
// You can construct a concrete instance of `IncidentRoleMapInput` via:
//
//          IncidentRoleMap{ "key": IncidentRoleArgs{...} }
type IncidentRoleMapInput interface {
	pulumi.Input

	ToIncidentRoleMapOutput() IncidentRoleMapOutput
	ToIncidentRoleMapOutputWithContext(context.Context) IncidentRoleMapOutput
}

type IncidentRoleMap map[string]IncidentRoleInput

func (IncidentRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IncidentRole)(nil)).Elem()
}

func (i IncidentRoleMap) ToIncidentRoleMapOutput() IncidentRoleMapOutput {
	return i.ToIncidentRoleMapOutputWithContext(context.Background())
}

func (i IncidentRoleMap) ToIncidentRoleMapOutputWithContext(ctx context.Context) IncidentRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentRoleMapOutput)
}

type IncidentRoleOutput struct{ *pulumi.OutputState }

func (IncidentRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentRole)(nil)).Elem()
}

func (o IncidentRoleOutput) ToIncidentRoleOutput() IncidentRoleOutput {
	return o
}

func (o IncidentRoleOutput) ToIncidentRoleOutputWithContext(ctx context.Context) IncidentRoleOutput {
	return o
}

type IncidentRoleArrayOutput struct{ *pulumi.OutputState }

func (IncidentRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IncidentRole)(nil)).Elem()
}

func (o IncidentRoleArrayOutput) ToIncidentRoleArrayOutput() IncidentRoleArrayOutput {
	return o
}

func (o IncidentRoleArrayOutput) ToIncidentRoleArrayOutputWithContext(ctx context.Context) IncidentRoleArrayOutput {
	return o
}

func (o IncidentRoleArrayOutput) Index(i pulumi.IntInput) IncidentRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IncidentRole {
		return vs[0].([]*IncidentRole)[vs[1].(int)]
	}).(IncidentRoleOutput)
}

type IncidentRoleMapOutput struct{ *pulumi.OutputState }

func (IncidentRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IncidentRole)(nil)).Elem()
}

func (o IncidentRoleMapOutput) ToIncidentRoleMapOutput() IncidentRoleMapOutput {
	return o
}

func (o IncidentRoleMapOutput) ToIncidentRoleMapOutputWithContext(ctx context.Context) IncidentRoleMapOutput {
	return o
}

func (o IncidentRoleMapOutput) MapIndex(k pulumi.StringInput) IncidentRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IncidentRole {
		return vs[0].(map[string]*IncidentRole)[vs[1].(string)]
	}).(IncidentRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentRoleInput)(nil)).Elem(), &IncidentRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentRoleArrayInput)(nil)).Elem(), IncidentRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentRoleMapInput)(nil)).Elem(), IncidentRoleMap{})
	pulumi.RegisterOutputType(IncidentRoleOutput{})
	pulumi.RegisterOutputType(IncidentRoleArrayOutput{})
	pulumi.RegisterOutputType(IncidentRoleMapOutput{})
}
