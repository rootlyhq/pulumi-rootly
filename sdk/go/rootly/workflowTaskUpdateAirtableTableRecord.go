// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow updateAirtableTableRecord task.
type WorkflowTaskUpdateAirtableTableRecord struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateAirtableTableRecordTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskUpdateAirtableTableRecord registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskUpdateAirtableTableRecord(ctx *pulumi.Context,
	name string, args *WorkflowTaskUpdateAirtableTableRecordArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateAirtableTableRecord, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskUpdateAirtableTableRecord
	err := ctx.RegisterResource("rootly:index/workflowTaskUpdateAirtableTableRecord:WorkflowTaskUpdateAirtableTableRecord", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskUpdateAirtableTableRecord gets an existing WorkflowTaskUpdateAirtableTableRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskUpdateAirtableTableRecord(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskUpdateAirtableTableRecordState, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateAirtableTableRecord, error) {
	var resource WorkflowTaskUpdateAirtableTableRecord
	err := ctx.ReadResource("rootly:index/workflowTaskUpdateAirtableTableRecord:WorkflowTaskUpdateAirtableTableRecord", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskUpdateAirtableTableRecord resources.
type workflowTaskUpdateAirtableTableRecordState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskUpdateAirtableTableRecordTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskUpdateAirtableTableRecordState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateAirtableTableRecordTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskUpdateAirtableTableRecordState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateAirtableTableRecordState)(nil)).Elem()
}

type workflowTaskUpdateAirtableTableRecordArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateAirtableTableRecordTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskUpdateAirtableTableRecord resource.
type WorkflowTaskUpdateAirtableTableRecordArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateAirtableTableRecordTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskUpdateAirtableTableRecordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateAirtableTableRecordArgs)(nil)).Elem()
}

type WorkflowTaskUpdateAirtableTableRecordInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateAirtableTableRecordOutput() WorkflowTaskUpdateAirtableTableRecordOutput
	ToWorkflowTaskUpdateAirtableTableRecordOutputWithContext(ctx context.Context) WorkflowTaskUpdateAirtableTableRecordOutput
}

func (*WorkflowTaskUpdateAirtableTableRecord) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateAirtableTableRecord)(nil)).Elem()
}

func (i *WorkflowTaskUpdateAirtableTableRecord) ToWorkflowTaskUpdateAirtableTableRecordOutput() WorkflowTaskUpdateAirtableTableRecordOutput {
	return i.ToWorkflowTaskUpdateAirtableTableRecordOutputWithContext(context.Background())
}

func (i *WorkflowTaskUpdateAirtableTableRecord) ToWorkflowTaskUpdateAirtableTableRecordOutputWithContext(ctx context.Context) WorkflowTaskUpdateAirtableTableRecordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateAirtableTableRecordOutput)
}

// WorkflowTaskUpdateAirtableTableRecordArrayInput is an input type that accepts WorkflowTaskUpdateAirtableTableRecordArray and WorkflowTaskUpdateAirtableTableRecordArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateAirtableTableRecordArrayInput` via:
//
//	WorkflowTaskUpdateAirtableTableRecordArray{ WorkflowTaskUpdateAirtableTableRecordArgs{...} }
type WorkflowTaskUpdateAirtableTableRecordArrayInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateAirtableTableRecordArrayOutput() WorkflowTaskUpdateAirtableTableRecordArrayOutput
	ToWorkflowTaskUpdateAirtableTableRecordArrayOutputWithContext(context.Context) WorkflowTaskUpdateAirtableTableRecordArrayOutput
}

type WorkflowTaskUpdateAirtableTableRecordArray []WorkflowTaskUpdateAirtableTableRecordInput

func (WorkflowTaskUpdateAirtableTableRecordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateAirtableTableRecord)(nil)).Elem()
}

func (i WorkflowTaskUpdateAirtableTableRecordArray) ToWorkflowTaskUpdateAirtableTableRecordArrayOutput() WorkflowTaskUpdateAirtableTableRecordArrayOutput {
	return i.ToWorkflowTaskUpdateAirtableTableRecordArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateAirtableTableRecordArray) ToWorkflowTaskUpdateAirtableTableRecordArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateAirtableTableRecordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateAirtableTableRecordArrayOutput)
}

// WorkflowTaskUpdateAirtableTableRecordMapInput is an input type that accepts WorkflowTaskUpdateAirtableTableRecordMap and WorkflowTaskUpdateAirtableTableRecordMapOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateAirtableTableRecordMapInput` via:
//
//	WorkflowTaskUpdateAirtableTableRecordMap{ "key": WorkflowTaskUpdateAirtableTableRecordArgs{...} }
type WorkflowTaskUpdateAirtableTableRecordMapInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateAirtableTableRecordMapOutput() WorkflowTaskUpdateAirtableTableRecordMapOutput
	ToWorkflowTaskUpdateAirtableTableRecordMapOutputWithContext(context.Context) WorkflowTaskUpdateAirtableTableRecordMapOutput
}

type WorkflowTaskUpdateAirtableTableRecordMap map[string]WorkflowTaskUpdateAirtableTableRecordInput

func (WorkflowTaskUpdateAirtableTableRecordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateAirtableTableRecord)(nil)).Elem()
}

func (i WorkflowTaskUpdateAirtableTableRecordMap) ToWorkflowTaskUpdateAirtableTableRecordMapOutput() WorkflowTaskUpdateAirtableTableRecordMapOutput {
	return i.ToWorkflowTaskUpdateAirtableTableRecordMapOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateAirtableTableRecordMap) ToWorkflowTaskUpdateAirtableTableRecordMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateAirtableTableRecordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateAirtableTableRecordMapOutput)
}

type WorkflowTaskUpdateAirtableTableRecordOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateAirtableTableRecordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateAirtableTableRecord)(nil)).Elem()
}

func (o WorkflowTaskUpdateAirtableTableRecordOutput) ToWorkflowTaskUpdateAirtableTableRecordOutput() WorkflowTaskUpdateAirtableTableRecordOutput {
	return o
}

func (o WorkflowTaskUpdateAirtableTableRecordOutput) ToWorkflowTaskUpdateAirtableTableRecordOutputWithContext(ctx context.Context) WorkflowTaskUpdateAirtableTableRecordOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskUpdateAirtableTableRecordOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateAirtableTableRecord) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskUpdateAirtableTableRecordOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateAirtableTableRecord) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskUpdateAirtableTableRecordOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateAirtableTableRecord) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskUpdateAirtableTableRecordOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateAirtableTableRecord) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskUpdateAirtableTableRecordOutput) TaskParams() WorkflowTaskUpdateAirtableTableRecordTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateAirtableTableRecord) WorkflowTaskUpdateAirtableTableRecordTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskUpdateAirtableTableRecordTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskUpdateAirtableTableRecordOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateAirtableTableRecord) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskUpdateAirtableTableRecordArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateAirtableTableRecordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateAirtableTableRecord)(nil)).Elem()
}

func (o WorkflowTaskUpdateAirtableTableRecordArrayOutput) ToWorkflowTaskUpdateAirtableTableRecordArrayOutput() WorkflowTaskUpdateAirtableTableRecordArrayOutput {
	return o
}

func (o WorkflowTaskUpdateAirtableTableRecordArrayOutput) ToWorkflowTaskUpdateAirtableTableRecordArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateAirtableTableRecordArrayOutput {
	return o
}

func (o WorkflowTaskUpdateAirtableTableRecordArrayOutput) Index(i pulumi.IntInput) WorkflowTaskUpdateAirtableTableRecordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateAirtableTableRecord {
		return vs[0].([]*WorkflowTaskUpdateAirtableTableRecord)[vs[1].(int)]
	}).(WorkflowTaskUpdateAirtableTableRecordOutput)
}

type WorkflowTaskUpdateAirtableTableRecordMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateAirtableTableRecordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateAirtableTableRecord)(nil)).Elem()
}

func (o WorkflowTaskUpdateAirtableTableRecordMapOutput) ToWorkflowTaskUpdateAirtableTableRecordMapOutput() WorkflowTaskUpdateAirtableTableRecordMapOutput {
	return o
}

func (o WorkflowTaskUpdateAirtableTableRecordMapOutput) ToWorkflowTaskUpdateAirtableTableRecordMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateAirtableTableRecordMapOutput {
	return o
}

func (o WorkflowTaskUpdateAirtableTableRecordMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskUpdateAirtableTableRecordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateAirtableTableRecord {
		return vs[0].(map[string]*WorkflowTaskUpdateAirtableTableRecord)[vs[1].(string)]
	}).(WorkflowTaskUpdateAirtableTableRecordOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateAirtableTableRecordInput)(nil)).Elem(), &WorkflowTaskUpdateAirtableTableRecord{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateAirtableTableRecordArrayInput)(nil)).Elem(), WorkflowTaskUpdateAirtableTableRecordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateAirtableTableRecordMapInput)(nil)).Elem(), WorkflowTaskUpdateAirtableTableRecordMap{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateAirtableTableRecordOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateAirtableTableRecordArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateAirtableTableRecordMapOutput{})
}
