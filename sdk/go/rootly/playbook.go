// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type Playbook struct {
	pulumi.CustomResourceState

	// The Environment ID's to attach to the incident
	EnvironmentIds pulumi.StringArrayOutput `pulumi:"environmentIds"`
	// The external url of the playbook
	ExternalUrl pulumi.StringOutput `pulumi:"externalUrl"`
	// The Functionality ID's to attach to the incident
	FunctionalityIds pulumi.StringArrayOutput `pulumi:"functionalityIds"`
	// The Team ID's to attach to the incident
	GroupIds pulumi.StringArrayOutput `pulumi:"groupIds"`
	// The Incident Type ID's to attach to the incident
	IncidentTypeIds pulumi.StringArrayOutput `pulumi:"incidentTypeIds"`
	// The Service ID's to attach to the incident
	ServiceIds pulumi.StringArrayOutput `pulumi:"serviceIds"`
	// The Severity ID's to attach to the incident
	SeverityIds pulumi.StringArrayOutput `pulumi:"severityIds"`
	// The summary of the playbook
	Summary pulumi.StringOutput `pulumi:"summary"`
	// The title of the playbook
	Title pulumi.StringOutput `pulumi:"title"`
}

// NewPlaybook registers a new resource with the given unique name, arguments, and options.
func NewPlaybook(ctx *pulumi.Context,
	name string, args *PlaybookArgs, opts ...pulumi.ResourceOption) (*Playbook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Playbook
	err := ctx.RegisterResource("rootly:index/playbook:Playbook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlaybook gets an existing Playbook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlaybook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlaybookState, opts ...pulumi.ResourceOption) (*Playbook, error) {
	var resource Playbook
	err := ctx.ReadResource("rootly:index/playbook:Playbook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Playbook resources.
type playbookState struct {
	// The Environment ID's to attach to the incident
	EnvironmentIds []string `pulumi:"environmentIds"`
	// The external url of the playbook
	ExternalUrl *string `pulumi:"externalUrl"`
	// The Functionality ID's to attach to the incident
	FunctionalityIds []string `pulumi:"functionalityIds"`
	// The Team ID's to attach to the incident
	GroupIds []string `pulumi:"groupIds"`
	// The Incident Type ID's to attach to the incident
	IncidentTypeIds []string `pulumi:"incidentTypeIds"`
	// The Service ID's to attach to the incident
	ServiceIds []string `pulumi:"serviceIds"`
	// The Severity ID's to attach to the incident
	SeverityIds []string `pulumi:"severityIds"`
	// The summary of the playbook
	Summary *string `pulumi:"summary"`
	// The title of the playbook
	Title *string `pulumi:"title"`
}

type PlaybookState struct {
	// The Environment ID's to attach to the incident
	EnvironmentIds pulumi.StringArrayInput
	// The external url of the playbook
	ExternalUrl pulumi.StringPtrInput
	// The Functionality ID's to attach to the incident
	FunctionalityIds pulumi.StringArrayInput
	// The Team ID's to attach to the incident
	GroupIds pulumi.StringArrayInput
	// The Incident Type ID's to attach to the incident
	IncidentTypeIds pulumi.StringArrayInput
	// The Service ID's to attach to the incident
	ServiceIds pulumi.StringArrayInput
	// The Severity ID's to attach to the incident
	SeverityIds pulumi.StringArrayInput
	// The summary of the playbook
	Summary pulumi.StringPtrInput
	// The title of the playbook
	Title pulumi.StringPtrInput
}

func (PlaybookState) ElementType() reflect.Type {
	return reflect.TypeOf((*playbookState)(nil)).Elem()
}

type playbookArgs struct {
	// The Environment ID's to attach to the incident
	EnvironmentIds []string `pulumi:"environmentIds"`
	// The external url of the playbook
	ExternalUrl *string `pulumi:"externalUrl"`
	// The Functionality ID's to attach to the incident
	FunctionalityIds []string `pulumi:"functionalityIds"`
	// The Team ID's to attach to the incident
	GroupIds []string `pulumi:"groupIds"`
	// The Incident Type ID's to attach to the incident
	IncidentTypeIds []string `pulumi:"incidentTypeIds"`
	// The Service ID's to attach to the incident
	ServiceIds []string `pulumi:"serviceIds"`
	// The Severity ID's to attach to the incident
	SeverityIds []string `pulumi:"severityIds"`
	// The summary of the playbook
	Summary *string `pulumi:"summary"`
	// The title of the playbook
	Title string `pulumi:"title"`
}

// The set of arguments for constructing a Playbook resource.
type PlaybookArgs struct {
	// The Environment ID's to attach to the incident
	EnvironmentIds pulumi.StringArrayInput
	// The external url of the playbook
	ExternalUrl pulumi.StringPtrInput
	// The Functionality ID's to attach to the incident
	FunctionalityIds pulumi.StringArrayInput
	// The Team ID's to attach to the incident
	GroupIds pulumi.StringArrayInput
	// The Incident Type ID's to attach to the incident
	IncidentTypeIds pulumi.StringArrayInput
	// The Service ID's to attach to the incident
	ServiceIds pulumi.StringArrayInput
	// The Severity ID's to attach to the incident
	SeverityIds pulumi.StringArrayInput
	// The summary of the playbook
	Summary pulumi.StringPtrInput
	// The title of the playbook
	Title pulumi.StringInput
}

func (PlaybookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*playbookArgs)(nil)).Elem()
}

type PlaybookInput interface {
	pulumi.Input

	ToPlaybookOutput() PlaybookOutput
	ToPlaybookOutputWithContext(ctx context.Context) PlaybookOutput
}

func (*Playbook) ElementType() reflect.Type {
	return reflect.TypeOf((**Playbook)(nil)).Elem()
}

func (i *Playbook) ToPlaybookOutput() PlaybookOutput {
	return i.ToPlaybookOutputWithContext(context.Background())
}

func (i *Playbook) ToPlaybookOutputWithContext(ctx context.Context) PlaybookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybookOutput)
}

// PlaybookArrayInput is an input type that accepts PlaybookArray and PlaybookArrayOutput values.
// You can construct a concrete instance of `PlaybookArrayInput` via:
//
//	PlaybookArray{ PlaybookArgs{...} }
type PlaybookArrayInput interface {
	pulumi.Input

	ToPlaybookArrayOutput() PlaybookArrayOutput
	ToPlaybookArrayOutputWithContext(context.Context) PlaybookArrayOutput
}

type PlaybookArray []PlaybookInput

func (PlaybookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Playbook)(nil)).Elem()
}

func (i PlaybookArray) ToPlaybookArrayOutput() PlaybookArrayOutput {
	return i.ToPlaybookArrayOutputWithContext(context.Background())
}

func (i PlaybookArray) ToPlaybookArrayOutputWithContext(ctx context.Context) PlaybookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybookArrayOutput)
}

// PlaybookMapInput is an input type that accepts PlaybookMap and PlaybookMapOutput values.
// You can construct a concrete instance of `PlaybookMapInput` via:
//
//	PlaybookMap{ "key": PlaybookArgs{...} }
type PlaybookMapInput interface {
	pulumi.Input

	ToPlaybookMapOutput() PlaybookMapOutput
	ToPlaybookMapOutputWithContext(context.Context) PlaybookMapOutput
}

type PlaybookMap map[string]PlaybookInput

func (PlaybookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Playbook)(nil)).Elem()
}

func (i PlaybookMap) ToPlaybookMapOutput() PlaybookMapOutput {
	return i.ToPlaybookMapOutputWithContext(context.Background())
}

func (i PlaybookMap) ToPlaybookMapOutputWithContext(ctx context.Context) PlaybookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybookMapOutput)
}

type PlaybookOutput struct{ *pulumi.OutputState }

func (PlaybookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Playbook)(nil)).Elem()
}

func (o PlaybookOutput) ToPlaybookOutput() PlaybookOutput {
	return o
}

func (o PlaybookOutput) ToPlaybookOutputWithContext(ctx context.Context) PlaybookOutput {
	return o
}

// The Environment ID's to attach to the incident
func (o PlaybookOutput) EnvironmentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Playbook) pulumi.StringArrayOutput { return v.EnvironmentIds }).(pulumi.StringArrayOutput)
}

// The external url of the playbook
func (o PlaybookOutput) ExternalUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *Playbook) pulumi.StringOutput { return v.ExternalUrl }).(pulumi.StringOutput)
}

// The Functionality ID's to attach to the incident
func (o PlaybookOutput) FunctionalityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Playbook) pulumi.StringArrayOutput { return v.FunctionalityIds }).(pulumi.StringArrayOutput)
}

// The Team ID's to attach to the incident
func (o PlaybookOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Playbook) pulumi.StringArrayOutput { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// The Incident Type ID's to attach to the incident
func (o PlaybookOutput) IncidentTypeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Playbook) pulumi.StringArrayOutput { return v.IncidentTypeIds }).(pulumi.StringArrayOutput)
}

// The Service ID's to attach to the incident
func (o PlaybookOutput) ServiceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Playbook) pulumi.StringArrayOutput { return v.ServiceIds }).(pulumi.StringArrayOutput)
}

// The Severity ID's to attach to the incident
func (o PlaybookOutput) SeverityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Playbook) pulumi.StringArrayOutput { return v.SeverityIds }).(pulumi.StringArrayOutput)
}

// The summary of the playbook
func (o PlaybookOutput) Summary() pulumi.StringOutput {
	return o.ApplyT(func(v *Playbook) pulumi.StringOutput { return v.Summary }).(pulumi.StringOutput)
}

// The title of the playbook
func (o PlaybookOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *Playbook) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

type PlaybookArrayOutput struct{ *pulumi.OutputState }

func (PlaybookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Playbook)(nil)).Elem()
}

func (o PlaybookArrayOutput) ToPlaybookArrayOutput() PlaybookArrayOutput {
	return o
}

func (o PlaybookArrayOutput) ToPlaybookArrayOutputWithContext(ctx context.Context) PlaybookArrayOutput {
	return o
}

func (o PlaybookArrayOutput) Index(i pulumi.IntInput) PlaybookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Playbook {
		return vs[0].([]*Playbook)[vs[1].(int)]
	}).(PlaybookOutput)
}

type PlaybookMapOutput struct{ *pulumi.OutputState }

func (PlaybookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Playbook)(nil)).Elem()
}

func (o PlaybookMapOutput) ToPlaybookMapOutput() PlaybookMapOutput {
	return o
}

func (o PlaybookMapOutput) ToPlaybookMapOutputWithContext(ctx context.Context) PlaybookMapOutput {
	return o
}

func (o PlaybookMapOutput) MapIndex(k pulumi.StringInput) PlaybookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Playbook {
		return vs[0].(map[string]*Playbook)[vs[1].(string)]
	}).(PlaybookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybookInput)(nil)).Elem(), &Playbook{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybookArrayInput)(nil)).Elem(), PlaybookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybookMapInput)(nil)).Elem(), PlaybookMap{})
	pulumi.RegisterOutputType(PlaybookOutput{})
	pulumi.RegisterOutputType(PlaybookArrayOutput{})
	pulumi.RegisterOutputType(PlaybookMapOutput{})
}
