// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow archiveSlackChannels task.
//
// ## Example Usage
type WorkflowTaskArchiveSlackChannels struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskArchiveSlackChannelsTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskArchiveSlackChannels registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskArchiveSlackChannels(ctx *pulumi.Context,
	name string, args *WorkflowTaskArchiveSlackChannelsArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskArchiveSlackChannels, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskArchiveSlackChannels
	err := ctx.RegisterResource("rootly:index/workflowTaskArchiveSlackChannels:WorkflowTaskArchiveSlackChannels", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskArchiveSlackChannels gets an existing WorkflowTaskArchiveSlackChannels resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskArchiveSlackChannels(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskArchiveSlackChannelsState, opts ...pulumi.ResourceOption) (*WorkflowTaskArchiveSlackChannels, error) {
	var resource WorkflowTaskArchiveSlackChannels
	err := ctx.ReadResource("rootly:index/workflowTaskArchiveSlackChannels:WorkflowTaskArchiveSlackChannels", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskArchiveSlackChannels resources.
type workflowTaskArchiveSlackChannelsState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskArchiveSlackChannelsTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskArchiveSlackChannelsState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskArchiveSlackChannelsTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskArchiveSlackChannelsState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskArchiveSlackChannelsState)(nil)).Elem()
}

type workflowTaskArchiveSlackChannelsArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskArchiveSlackChannelsTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskArchiveSlackChannels resource.
type WorkflowTaskArchiveSlackChannelsArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskArchiveSlackChannelsTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskArchiveSlackChannelsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskArchiveSlackChannelsArgs)(nil)).Elem()
}

type WorkflowTaskArchiveSlackChannelsInput interface {
	pulumi.Input

	ToWorkflowTaskArchiveSlackChannelsOutput() WorkflowTaskArchiveSlackChannelsOutput
	ToWorkflowTaskArchiveSlackChannelsOutputWithContext(ctx context.Context) WorkflowTaskArchiveSlackChannelsOutput
}

func (*WorkflowTaskArchiveSlackChannels) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskArchiveSlackChannels)(nil)).Elem()
}

func (i *WorkflowTaskArchiveSlackChannels) ToWorkflowTaskArchiveSlackChannelsOutput() WorkflowTaskArchiveSlackChannelsOutput {
	return i.ToWorkflowTaskArchiveSlackChannelsOutputWithContext(context.Background())
}

func (i *WorkflowTaskArchiveSlackChannels) ToWorkflowTaskArchiveSlackChannelsOutputWithContext(ctx context.Context) WorkflowTaskArchiveSlackChannelsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskArchiveSlackChannelsOutput)
}

// WorkflowTaskArchiveSlackChannelsArrayInput is an input type that accepts WorkflowTaskArchiveSlackChannelsArray and WorkflowTaskArchiveSlackChannelsArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskArchiveSlackChannelsArrayInput` via:
//
//	WorkflowTaskArchiveSlackChannelsArray{ WorkflowTaskArchiveSlackChannelsArgs{...} }
type WorkflowTaskArchiveSlackChannelsArrayInput interface {
	pulumi.Input

	ToWorkflowTaskArchiveSlackChannelsArrayOutput() WorkflowTaskArchiveSlackChannelsArrayOutput
	ToWorkflowTaskArchiveSlackChannelsArrayOutputWithContext(context.Context) WorkflowTaskArchiveSlackChannelsArrayOutput
}

type WorkflowTaskArchiveSlackChannelsArray []WorkflowTaskArchiveSlackChannelsInput

func (WorkflowTaskArchiveSlackChannelsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskArchiveSlackChannels)(nil)).Elem()
}

func (i WorkflowTaskArchiveSlackChannelsArray) ToWorkflowTaskArchiveSlackChannelsArrayOutput() WorkflowTaskArchiveSlackChannelsArrayOutput {
	return i.ToWorkflowTaskArchiveSlackChannelsArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskArchiveSlackChannelsArray) ToWorkflowTaskArchiveSlackChannelsArrayOutputWithContext(ctx context.Context) WorkflowTaskArchiveSlackChannelsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskArchiveSlackChannelsArrayOutput)
}

// WorkflowTaskArchiveSlackChannelsMapInput is an input type that accepts WorkflowTaskArchiveSlackChannelsMap and WorkflowTaskArchiveSlackChannelsMapOutput values.
// You can construct a concrete instance of `WorkflowTaskArchiveSlackChannelsMapInput` via:
//
//	WorkflowTaskArchiveSlackChannelsMap{ "key": WorkflowTaskArchiveSlackChannelsArgs{...} }
type WorkflowTaskArchiveSlackChannelsMapInput interface {
	pulumi.Input

	ToWorkflowTaskArchiveSlackChannelsMapOutput() WorkflowTaskArchiveSlackChannelsMapOutput
	ToWorkflowTaskArchiveSlackChannelsMapOutputWithContext(context.Context) WorkflowTaskArchiveSlackChannelsMapOutput
}

type WorkflowTaskArchiveSlackChannelsMap map[string]WorkflowTaskArchiveSlackChannelsInput

func (WorkflowTaskArchiveSlackChannelsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskArchiveSlackChannels)(nil)).Elem()
}

func (i WorkflowTaskArchiveSlackChannelsMap) ToWorkflowTaskArchiveSlackChannelsMapOutput() WorkflowTaskArchiveSlackChannelsMapOutput {
	return i.ToWorkflowTaskArchiveSlackChannelsMapOutputWithContext(context.Background())
}

func (i WorkflowTaskArchiveSlackChannelsMap) ToWorkflowTaskArchiveSlackChannelsMapOutputWithContext(ctx context.Context) WorkflowTaskArchiveSlackChannelsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskArchiveSlackChannelsMapOutput)
}

type WorkflowTaskArchiveSlackChannelsOutput struct{ *pulumi.OutputState }

func (WorkflowTaskArchiveSlackChannelsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskArchiveSlackChannels)(nil)).Elem()
}

func (o WorkflowTaskArchiveSlackChannelsOutput) ToWorkflowTaskArchiveSlackChannelsOutput() WorkflowTaskArchiveSlackChannelsOutput {
	return o
}

func (o WorkflowTaskArchiveSlackChannelsOutput) ToWorkflowTaskArchiveSlackChannelsOutputWithContext(ctx context.Context) WorkflowTaskArchiveSlackChannelsOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskArchiveSlackChannelsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskArchiveSlackChannels) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskArchiveSlackChannelsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskArchiveSlackChannels) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskArchiveSlackChannelsOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskArchiveSlackChannels) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskArchiveSlackChannelsOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskArchiveSlackChannels) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskArchiveSlackChannelsOutput) TaskParams() WorkflowTaskArchiveSlackChannelsTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskArchiveSlackChannels) WorkflowTaskArchiveSlackChannelsTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskArchiveSlackChannelsTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskArchiveSlackChannelsOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskArchiveSlackChannels) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskArchiveSlackChannelsArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskArchiveSlackChannelsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskArchiveSlackChannels)(nil)).Elem()
}

func (o WorkflowTaskArchiveSlackChannelsArrayOutput) ToWorkflowTaskArchiveSlackChannelsArrayOutput() WorkflowTaskArchiveSlackChannelsArrayOutput {
	return o
}

func (o WorkflowTaskArchiveSlackChannelsArrayOutput) ToWorkflowTaskArchiveSlackChannelsArrayOutputWithContext(ctx context.Context) WorkflowTaskArchiveSlackChannelsArrayOutput {
	return o
}

func (o WorkflowTaskArchiveSlackChannelsArrayOutput) Index(i pulumi.IntInput) WorkflowTaskArchiveSlackChannelsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskArchiveSlackChannels {
		return vs[0].([]*WorkflowTaskArchiveSlackChannels)[vs[1].(int)]
	}).(WorkflowTaskArchiveSlackChannelsOutput)
}

type WorkflowTaskArchiveSlackChannelsMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskArchiveSlackChannelsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskArchiveSlackChannels)(nil)).Elem()
}

func (o WorkflowTaskArchiveSlackChannelsMapOutput) ToWorkflowTaskArchiveSlackChannelsMapOutput() WorkflowTaskArchiveSlackChannelsMapOutput {
	return o
}

func (o WorkflowTaskArchiveSlackChannelsMapOutput) ToWorkflowTaskArchiveSlackChannelsMapOutputWithContext(ctx context.Context) WorkflowTaskArchiveSlackChannelsMapOutput {
	return o
}

func (o WorkflowTaskArchiveSlackChannelsMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskArchiveSlackChannelsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskArchiveSlackChannels {
		return vs[0].(map[string]*WorkflowTaskArchiveSlackChannels)[vs[1].(string)]
	}).(WorkflowTaskArchiveSlackChannelsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskArchiveSlackChannelsInput)(nil)).Elem(), &WorkflowTaskArchiveSlackChannels{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskArchiveSlackChannelsArrayInput)(nil)).Elem(), WorkflowTaskArchiveSlackChannelsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskArchiveSlackChannelsMapInput)(nil)).Elem(), WorkflowTaskArchiveSlackChannelsMap{})
	pulumi.RegisterOutputType(WorkflowTaskArchiveSlackChannelsOutput{})
	pulumi.RegisterOutputType(WorkflowTaskArchiveSlackChannelsArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskArchiveSlackChannelsMapOutput{})
}
