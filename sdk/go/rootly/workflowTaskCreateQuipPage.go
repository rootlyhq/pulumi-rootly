// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createQuipPage task.
type WorkflowTaskCreateQuipPage struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateQuipPageTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreateQuipPage registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreateQuipPage(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreateQuipPageArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateQuipPage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreateQuipPage
	err := ctx.RegisterResource("rootly:index/workflowTaskCreateQuipPage:WorkflowTaskCreateQuipPage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreateQuipPage gets an existing WorkflowTaskCreateQuipPage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreateQuipPage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreateQuipPageState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateQuipPage, error) {
	var resource WorkflowTaskCreateQuipPage
	err := ctx.ReadResource("rootly:index/workflowTaskCreateQuipPage:WorkflowTaskCreateQuipPage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreateQuipPage resources.
type workflowTaskCreateQuipPageState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreateQuipPageTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreateQuipPageState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateQuipPageTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreateQuipPageState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateQuipPageState)(nil)).Elem()
}

type workflowTaskCreateQuipPageArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateQuipPageTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreateQuipPage resource.
type WorkflowTaskCreateQuipPageArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateQuipPageTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreateQuipPageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateQuipPageArgs)(nil)).Elem()
}

type WorkflowTaskCreateQuipPageInput interface {
	pulumi.Input

	ToWorkflowTaskCreateQuipPageOutput() WorkflowTaskCreateQuipPageOutput
	ToWorkflowTaskCreateQuipPageOutputWithContext(ctx context.Context) WorkflowTaskCreateQuipPageOutput
}

func (*WorkflowTaskCreateQuipPage) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateQuipPage)(nil)).Elem()
}

func (i *WorkflowTaskCreateQuipPage) ToWorkflowTaskCreateQuipPageOutput() WorkflowTaskCreateQuipPageOutput {
	return i.ToWorkflowTaskCreateQuipPageOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreateQuipPage) ToWorkflowTaskCreateQuipPageOutputWithContext(ctx context.Context) WorkflowTaskCreateQuipPageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateQuipPageOutput)
}

// WorkflowTaskCreateQuipPageArrayInput is an input type that accepts WorkflowTaskCreateQuipPageArray and WorkflowTaskCreateQuipPageArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateQuipPageArrayInput` via:
//
//	WorkflowTaskCreateQuipPageArray{ WorkflowTaskCreateQuipPageArgs{...} }
type WorkflowTaskCreateQuipPageArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreateQuipPageArrayOutput() WorkflowTaskCreateQuipPageArrayOutput
	ToWorkflowTaskCreateQuipPageArrayOutputWithContext(context.Context) WorkflowTaskCreateQuipPageArrayOutput
}

type WorkflowTaskCreateQuipPageArray []WorkflowTaskCreateQuipPageInput

func (WorkflowTaskCreateQuipPageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateQuipPage)(nil)).Elem()
}

func (i WorkflowTaskCreateQuipPageArray) ToWorkflowTaskCreateQuipPageArrayOutput() WorkflowTaskCreateQuipPageArrayOutput {
	return i.ToWorkflowTaskCreateQuipPageArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateQuipPageArray) ToWorkflowTaskCreateQuipPageArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateQuipPageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateQuipPageArrayOutput)
}

// WorkflowTaskCreateQuipPageMapInput is an input type that accepts WorkflowTaskCreateQuipPageMap and WorkflowTaskCreateQuipPageMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateQuipPageMapInput` via:
//
//	WorkflowTaskCreateQuipPageMap{ "key": WorkflowTaskCreateQuipPageArgs{...} }
type WorkflowTaskCreateQuipPageMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreateQuipPageMapOutput() WorkflowTaskCreateQuipPageMapOutput
	ToWorkflowTaskCreateQuipPageMapOutputWithContext(context.Context) WorkflowTaskCreateQuipPageMapOutput
}

type WorkflowTaskCreateQuipPageMap map[string]WorkflowTaskCreateQuipPageInput

func (WorkflowTaskCreateQuipPageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateQuipPage)(nil)).Elem()
}

func (i WorkflowTaskCreateQuipPageMap) ToWorkflowTaskCreateQuipPageMapOutput() WorkflowTaskCreateQuipPageMapOutput {
	return i.ToWorkflowTaskCreateQuipPageMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateQuipPageMap) ToWorkflowTaskCreateQuipPageMapOutputWithContext(ctx context.Context) WorkflowTaskCreateQuipPageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateQuipPageMapOutput)
}

type WorkflowTaskCreateQuipPageOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateQuipPageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateQuipPage)(nil)).Elem()
}

func (o WorkflowTaskCreateQuipPageOutput) ToWorkflowTaskCreateQuipPageOutput() WorkflowTaskCreateQuipPageOutput {
	return o
}

func (o WorkflowTaskCreateQuipPageOutput) ToWorkflowTaskCreateQuipPageOutputWithContext(ctx context.Context) WorkflowTaskCreateQuipPageOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreateQuipPageOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateQuipPage) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreateQuipPageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateQuipPage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreateQuipPageOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateQuipPage) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreateQuipPageOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateQuipPage) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreateQuipPageOutput) TaskParams() WorkflowTaskCreateQuipPageTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateQuipPage) WorkflowTaskCreateQuipPageTaskParamsOutput { return v.TaskParams }).(WorkflowTaskCreateQuipPageTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreateQuipPageOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateQuipPage) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreateQuipPageArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateQuipPageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateQuipPage)(nil)).Elem()
}

func (o WorkflowTaskCreateQuipPageArrayOutput) ToWorkflowTaskCreateQuipPageArrayOutput() WorkflowTaskCreateQuipPageArrayOutput {
	return o
}

func (o WorkflowTaskCreateQuipPageArrayOutput) ToWorkflowTaskCreateQuipPageArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateQuipPageArrayOutput {
	return o
}

func (o WorkflowTaskCreateQuipPageArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreateQuipPageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreateQuipPage {
		return vs[0].([]*WorkflowTaskCreateQuipPage)[vs[1].(int)]
	}).(WorkflowTaskCreateQuipPageOutput)
}

type WorkflowTaskCreateQuipPageMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateQuipPageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateQuipPage)(nil)).Elem()
}

func (o WorkflowTaskCreateQuipPageMapOutput) ToWorkflowTaskCreateQuipPageMapOutput() WorkflowTaskCreateQuipPageMapOutput {
	return o
}

func (o WorkflowTaskCreateQuipPageMapOutput) ToWorkflowTaskCreateQuipPageMapOutputWithContext(ctx context.Context) WorkflowTaskCreateQuipPageMapOutput {
	return o
}

func (o WorkflowTaskCreateQuipPageMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreateQuipPageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreateQuipPage {
		return vs[0].(map[string]*WorkflowTaskCreateQuipPage)[vs[1].(string)]
	}).(WorkflowTaskCreateQuipPageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateQuipPageInput)(nil)).Elem(), &WorkflowTaskCreateQuipPage{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateQuipPageArrayInput)(nil)).Elem(), WorkflowTaskCreateQuipPageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateQuipPageMapInput)(nil)).Elem(), WorkflowTaskCreateQuipPageMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreateQuipPageOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateQuipPageArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateQuipPageMapOutput{})
}
