// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createLinearIssue task.
type WorkflowTaskCreateLinearIssue struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateLinearIssueTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreateLinearIssue registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreateLinearIssue(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreateLinearIssueArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateLinearIssue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreateLinearIssue
	err := ctx.RegisterResource("rootly:index/workflowTaskCreateLinearIssue:WorkflowTaskCreateLinearIssue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreateLinearIssue gets an existing WorkflowTaskCreateLinearIssue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreateLinearIssue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreateLinearIssueState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateLinearIssue, error) {
	var resource WorkflowTaskCreateLinearIssue
	err := ctx.ReadResource("rootly:index/workflowTaskCreateLinearIssue:WorkflowTaskCreateLinearIssue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreateLinearIssue resources.
type workflowTaskCreateLinearIssueState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreateLinearIssueTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreateLinearIssueState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateLinearIssueTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreateLinearIssueState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateLinearIssueState)(nil)).Elem()
}

type workflowTaskCreateLinearIssueArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateLinearIssueTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreateLinearIssue resource.
type WorkflowTaskCreateLinearIssueArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateLinearIssueTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreateLinearIssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateLinearIssueArgs)(nil)).Elem()
}

type WorkflowTaskCreateLinearIssueInput interface {
	pulumi.Input

	ToWorkflowTaskCreateLinearIssueOutput() WorkflowTaskCreateLinearIssueOutput
	ToWorkflowTaskCreateLinearIssueOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearIssueOutput
}

func (*WorkflowTaskCreateLinearIssue) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateLinearIssue)(nil)).Elem()
}

func (i *WorkflowTaskCreateLinearIssue) ToWorkflowTaskCreateLinearIssueOutput() WorkflowTaskCreateLinearIssueOutput {
	return i.ToWorkflowTaskCreateLinearIssueOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreateLinearIssue) ToWorkflowTaskCreateLinearIssueOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearIssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateLinearIssueOutput)
}

// WorkflowTaskCreateLinearIssueArrayInput is an input type that accepts WorkflowTaskCreateLinearIssueArray and WorkflowTaskCreateLinearIssueArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateLinearIssueArrayInput` via:
//
//	WorkflowTaskCreateLinearIssueArray{ WorkflowTaskCreateLinearIssueArgs{...} }
type WorkflowTaskCreateLinearIssueArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreateLinearIssueArrayOutput() WorkflowTaskCreateLinearIssueArrayOutput
	ToWorkflowTaskCreateLinearIssueArrayOutputWithContext(context.Context) WorkflowTaskCreateLinearIssueArrayOutput
}

type WorkflowTaskCreateLinearIssueArray []WorkflowTaskCreateLinearIssueInput

func (WorkflowTaskCreateLinearIssueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateLinearIssue)(nil)).Elem()
}

func (i WorkflowTaskCreateLinearIssueArray) ToWorkflowTaskCreateLinearIssueArrayOutput() WorkflowTaskCreateLinearIssueArrayOutput {
	return i.ToWorkflowTaskCreateLinearIssueArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateLinearIssueArray) ToWorkflowTaskCreateLinearIssueArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearIssueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateLinearIssueArrayOutput)
}

// WorkflowTaskCreateLinearIssueMapInput is an input type that accepts WorkflowTaskCreateLinearIssueMap and WorkflowTaskCreateLinearIssueMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateLinearIssueMapInput` via:
//
//	WorkflowTaskCreateLinearIssueMap{ "key": WorkflowTaskCreateLinearIssueArgs{...} }
type WorkflowTaskCreateLinearIssueMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreateLinearIssueMapOutput() WorkflowTaskCreateLinearIssueMapOutput
	ToWorkflowTaskCreateLinearIssueMapOutputWithContext(context.Context) WorkflowTaskCreateLinearIssueMapOutput
}

type WorkflowTaskCreateLinearIssueMap map[string]WorkflowTaskCreateLinearIssueInput

func (WorkflowTaskCreateLinearIssueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateLinearIssue)(nil)).Elem()
}

func (i WorkflowTaskCreateLinearIssueMap) ToWorkflowTaskCreateLinearIssueMapOutput() WorkflowTaskCreateLinearIssueMapOutput {
	return i.ToWorkflowTaskCreateLinearIssueMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateLinearIssueMap) ToWorkflowTaskCreateLinearIssueMapOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearIssueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateLinearIssueMapOutput)
}

type WorkflowTaskCreateLinearIssueOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateLinearIssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateLinearIssue)(nil)).Elem()
}

func (o WorkflowTaskCreateLinearIssueOutput) ToWorkflowTaskCreateLinearIssueOutput() WorkflowTaskCreateLinearIssueOutput {
	return o
}

func (o WorkflowTaskCreateLinearIssueOutput) ToWorkflowTaskCreateLinearIssueOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearIssueOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreateLinearIssueOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateLinearIssue) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreateLinearIssueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateLinearIssue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreateLinearIssueOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateLinearIssue) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreateLinearIssueOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateLinearIssue) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreateLinearIssueOutput) TaskParams() WorkflowTaskCreateLinearIssueTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateLinearIssue) WorkflowTaskCreateLinearIssueTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskCreateLinearIssueTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreateLinearIssueOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateLinearIssue) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreateLinearIssueArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateLinearIssueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateLinearIssue)(nil)).Elem()
}

func (o WorkflowTaskCreateLinearIssueArrayOutput) ToWorkflowTaskCreateLinearIssueArrayOutput() WorkflowTaskCreateLinearIssueArrayOutput {
	return o
}

func (o WorkflowTaskCreateLinearIssueArrayOutput) ToWorkflowTaskCreateLinearIssueArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearIssueArrayOutput {
	return o
}

func (o WorkflowTaskCreateLinearIssueArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreateLinearIssueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreateLinearIssue {
		return vs[0].([]*WorkflowTaskCreateLinearIssue)[vs[1].(int)]
	}).(WorkflowTaskCreateLinearIssueOutput)
}

type WorkflowTaskCreateLinearIssueMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateLinearIssueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateLinearIssue)(nil)).Elem()
}

func (o WorkflowTaskCreateLinearIssueMapOutput) ToWorkflowTaskCreateLinearIssueMapOutput() WorkflowTaskCreateLinearIssueMapOutput {
	return o
}

func (o WorkflowTaskCreateLinearIssueMapOutput) ToWorkflowTaskCreateLinearIssueMapOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearIssueMapOutput {
	return o
}

func (o WorkflowTaskCreateLinearIssueMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreateLinearIssueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreateLinearIssue {
		return vs[0].(map[string]*WorkflowTaskCreateLinearIssue)[vs[1].(string)]
	}).(WorkflowTaskCreateLinearIssueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateLinearIssueInput)(nil)).Elem(), &WorkflowTaskCreateLinearIssue{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateLinearIssueArrayInput)(nil)).Elem(), WorkflowTaskCreateLinearIssueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateLinearIssueMapInput)(nil)).Elem(), WorkflowTaskCreateLinearIssueMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreateLinearIssueOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateLinearIssueArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateLinearIssueMapOutput{})
}
