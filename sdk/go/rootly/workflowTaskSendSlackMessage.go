// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow sendSlackMessage task.
//
// ## Example Usage
type WorkflowTaskSendSlackMessage struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSendSlackMessageTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskSendSlackMessage registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskSendSlackMessage(ctx *pulumi.Context,
	name string, args *WorkflowTaskSendSlackMessageArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskSendSlackMessage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskSendSlackMessage
	err := ctx.RegisterResource("rootly:index/workflowTaskSendSlackMessage:WorkflowTaskSendSlackMessage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskSendSlackMessage gets an existing WorkflowTaskSendSlackMessage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskSendSlackMessage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskSendSlackMessageState, opts ...pulumi.ResourceOption) (*WorkflowTaskSendSlackMessage, error) {
	var resource WorkflowTaskSendSlackMessage
	err := ctx.ReadResource("rootly:index/workflowTaskSendSlackMessage:WorkflowTaskSendSlackMessage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskSendSlackMessage resources.
type workflowTaskSendSlackMessageState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskSendSlackMessageTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskSendSlackMessageState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSendSlackMessageTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskSendSlackMessageState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskSendSlackMessageState)(nil)).Elem()
}

type workflowTaskSendSlackMessageArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSendSlackMessageTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskSendSlackMessage resource.
type WorkflowTaskSendSlackMessageArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSendSlackMessageTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskSendSlackMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskSendSlackMessageArgs)(nil)).Elem()
}

type WorkflowTaskSendSlackMessageInput interface {
	pulumi.Input

	ToWorkflowTaskSendSlackMessageOutput() WorkflowTaskSendSlackMessageOutput
	ToWorkflowTaskSendSlackMessageOutputWithContext(ctx context.Context) WorkflowTaskSendSlackMessageOutput
}

func (*WorkflowTaskSendSlackMessage) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskSendSlackMessage)(nil)).Elem()
}

func (i *WorkflowTaskSendSlackMessage) ToWorkflowTaskSendSlackMessageOutput() WorkflowTaskSendSlackMessageOutput {
	return i.ToWorkflowTaskSendSlackMessageOutputWithContext(context.Background())
}

func (i *WorkflowTaskSendSlackMessage) ToWorkflowTaskSendSlackMessageOutputWithContext(ctx context.Context) WorkflowTaskSendSlackMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSendSlackMessageOutput)
}

// WorkflowTaskSendSlackMessageArrayInput is an input type that accepts WorkflowTaskSendSlackMessageArray and WorkflowTaskSendSlackMessageArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskSendSlackMessageArrayInput` via:
//
//	WorkflowTaskSendSlackMessageArray{ WorkflowTaskSendSlackMessageArgs{...} }
type WorkflowTaskSendSlackMessageArrayInput interface {
	pulumi.Input

	ToWorkflowTaskSendSlackMessageArrayOutput() WorkflowTaskSendSlackMessageArrayOutput
	ToWorkflowTaskSendSlackMessageArrayOutputWithContext(context.Context) WorkflowTaskSendSlackMessageArrayOutput
}

type WorkflowTaskSendSlackMessageArray []WorkflowTaskSendSlackMessageInput

func (WorkflowTaskSendSlackMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskSendSlackMessage)(nil)).Elem()
}

func (i WorkflowTaskSendSlackMessageArray) ToWorkflowTaskSendSlackMessageArrayOutput() WorkflowTaskSendSlackMessageArrayOutput {
	return i.ToWorkflowTaskSendSlackMessageArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskSendSlackMessageArray) ToWorkflowTaskSendSlackMessageArrayOutputWithContext(ctx context.Context) WorkflowTaskSendSlackMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSendSlackMessageArrayOutput)
}

// WorkflowTaskSendSlackMessageMapInput is an input type that accepts WorkflowTaskSendSlackMessageMap and WorkflowTaskSendSlackMessageMapOutput values.
// You can construct a concrete instance of `WorkflowTaskSendSlackMessageMapInput` via:
//
//	WorkflowTaskSendSlackMessageMap{ "key": WorkflowTaskSendSlackMessageArgs{...} }
type WorkflowTaskSendSlackMessageMapInput interface {
	pulumi.Input

	ToWorkflowTaskSendSlackMessageMapOutput() WorkflowTaskSendSlackMessageMapOutput
	ToWorkflowTaskSendSlackMessageMapOutputWithContext(context.Context) WorkflowTaskSendSlackMessageMapOutput
}

type WorkflowTaskSendSlackMessageMap map[string]WorkflowTaskSendSlackMessageInput

func (WorkflowTaskSendSlackMessageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskSendSlackMessage)(nil)).Elem()
}

func (i WorkflowTaskSendSlackMessageMap) ToWorkflowTaskSendSlackMessageMapOutput() WorkflowTaskSendSlackMessageMapOutput {
	return i.ToWorkflowTaskSendSlackMessageMapOutputWithContext(context.Background())
}

func (i WorkflowTaskSendSlackMessageMap) ToWorkflowTaskSendSlackMessageMapOutputWithContext(ctx context.Context) WorkflowTaskSendSlackMessageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSendSlackMessageMapOutput)
}

type WorkflowTaskSendSlackMessageOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSendSlackMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskSendSlackMessage)(nil)).Elem()
}

func (o WorkflowTaskSendSlackMessageOutput) ToWorkflowTaskSendSlackMessageOutput() WorkflowTaskSendSlackMessageOutput {
	return o
}

func (o WorkflowTaskSendSlackMessageOutput) ToWorkflowTaskSendSlackMessageOutputWithContext(ctx context.Context) WorkflowTaskSendSlackMessageOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskSendSlackMessageOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskSendSlackMessage) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskSendSlackMessageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskSendSlackMessage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskSendSlackMessageOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskSendSlackMessage) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskSendSlackMessageOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskSendSlackMessage) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskSendSlackMessageOutput) TaskParams() WorkflowTaskSendSlackMessageTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskSendSlackMessage) WorkflowTaskSendSlackMessageTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskSendSlackMessageTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskSendSlackMessageOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskSendSlackMessage) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskSendSlackMessageArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSendSlackMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskSendSlackMessage)(nil)).Elem()
}

func (o WorkflowTaskSendSlackMessageArrayOutput) ToWorkflowTaskSendSlackMessageArrayOutput() WorkflowTaskSendSlackMessageArrayOutput {
	return o
}

func (o WorkflowTaskSendSlackMessageArrayOutput) ToWorkflowTaskSendSlackMessageArrayOutputWithContext(ctx context.Context) WorkflowTaskSendSlackMessageArrayOutput {
	return o
}

func (o WorkflowTaskSendSlackMessageArrayOutput) Index(i pulumi.IntInput) WorkflowTaskSendSlackMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskSendSlackMessage {
		return vs[0].([]*WorkflowTaskSendSlackMessage)[vs[1].(int)]
	}).(WorkflowTaskSendSlackMessageOutput)
}

type WorkflowTaskSendSlackMessageMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSendSlackMessageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskSendSlackMessage)(nil)).Elem()
}

func (o WorkflowTaskSendSlackMessageMapOutput) ToWorkflowTaskSendSlackMessageMapOutput() WorkflowTaskSendSlackMessageMapOutput {
	return o
}

func (o WorkflowTaskSendSlackMessageMapOutput) ToWorkflowTaskSendSlackMessageMapOutputWithContext(ctx context.Context) WorkflowTaskSendSlackMessageMapOutput {
	return o
}

func (o WorkflowTaskSendSlackMessageMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskSendSlackMessageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskSendSlackMessage {
		return vs[0].(map[string]*WorkflowTaskSendSlackMessage)[vs[1].(string)]
	}).(WorkflowTaskSendSlackMessageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSendSlackMessageInput)(nil)).Elem(), &WorkflowTaskSendSlackMessage{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSendSlackMessageArrayInput)(nil)).Elem(), WorkflowTaskSendSlackMessageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSendSlackMessageMapInput)(nil)).Elem(), WorkflowTaskSendSlackMessageMap{})
	pulumi.RegisterOutputType(WorkflowTaskSendSlackMessageOutput{})
	pulumi.RegisterOutputType(WorkflowTaskSendSlackMessageArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskSendSlackMessageMapOutput{})
}
