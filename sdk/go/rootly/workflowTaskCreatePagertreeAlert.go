// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createPagertreeAlert task.
type WorkflowTaskCreatePagertreeAlert struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreatePagertreeAlertTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreatePagertreeAlert registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreatePagertreeAlert(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreatePagertreeAlertArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreatePagertreeAlert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreatePagertreeAlert
	err := ctx.RegisterResource("rootly:index/workflowTaskCreatePagertreeAlert:WorkflowTaskCreatePagertreeAlert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreatePagertreeAlert gets an existing WorkflowTaskCreatePagertreeAlert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreatePagertreeAlert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreatePagertreeAlertState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreatePagertreeAlert, error) {
	var resource WorkflowTaskCreatePagertreeAlert
	err := ctx.ReadResource("rootly:index/workflowTaskCreatePagertreeAlert:WorkflowTaskCreatePagertreeAlert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreatePagertreeAlert resources.
type workflowTaskCreatePagertreeAlertState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreatePagertreeAlertTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreatePagertreeAlertState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreatePagertreeAlertTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreatePagertreeAlertState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreatePagertreeAlertState)(nil)).Elem()
}

type workflowTaskCreatePagertreeAlertArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreatePagertreeAlertTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreatePagertreeAlert resource.
type WorkflowTaskCreatePagertreeAlertArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreatePagertreeAlertTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreatePagertreeAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreatePagertreeAlertArgs)(nil)).Elem()
}

type WorkflowTaskCreatePagertreeAlertInput interface {
	pulumi.Input

	ToWorkflowTaskCreatePagertreeAlertOutput() WorkflowTaskCreatePagertreeAlertOutput
	ToWorkflowTaskCreatePagertreeAlertOutputWithContext(ctx context.Context) WorkflowTaskCreatePagertreeAlertOutput
}

func (*WorkflowTaskCreatePagertreeAlert) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreatePagertreeAlert)(nil)).Elem()
}

func (i *WorkflowTaskCreatePagertreeAlert) ToWorkflowTaskCreatePagertreeAlertOutput() WorkflowTaskCreatePagertreeAlertOutput {
	return i.ToWorkflowTaskCreatePagertreeAlertOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreatePagertreeAlert) ToWorkflowTaskCreatePagertreeAlertOutputWithContext(ctx context.Context) WorkflowTaskCreatePagertreeAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreatePagertreeAlertOutput)
}

// WorkflowTaskCreatePagertreeAlertArrayInput is an input type that accepts WorkflowTaskCreatePagertreeAlertArray and WorkflowTaskCreatePagertreeAlertArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreatePagertreeAlertArrayInput` via:
//
//	WorkflowTaskCreatePagertreeAlertArray{ WorkflowTaskCreatePagertreeAlertArgs{...} }
type WorkflowTaskCreatePagertreeAlertArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreatePagertreeAlertArrayOutput() WorkflowTaskCreatePagertreeAlertArrayOutput
	ToWorkflowTaskCreatePagertreeAlertArrayOutputWithContext(context.Context) WorkflowTaskCreatePagertreeAlertArrayOutput
}

type WorkflowTaskCreatePagertreeAlertArray []WorkflowTaskCreatePagertreeAlertInput

func (WorkflowTaskCreatePagertreeAlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreatePagertreeAlert)(nil)).Elem()
}

func (i WorkflowTaskCreatePagertreeAlertArray) ToWorkflowTaskCreatePagertreeAlertArrayOutput() WorkflowTaskCreatePagertreeAlertArrayOutput {
	return i.ToWorkflowTaskCreatePagertreeAlertArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreatePagertreeAlertArray) ToWorkflowTaskCreatePagertreeAlertArrayOutputWithContext(ctx context.Context) WorkflowTaskCreatePagertreeAlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreatePagertreeAlertArrayOutput)
}

// WorkflowTaskCreatePagertreeAlertMapInput is an input type that accepts WorkflowTaskCreatePagertreeAlertMap and WorkflowTaskCreatePagertreeAlertMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreatePagertreeAlertMapInput` via:
//
//	WorkflowTaskCreatePagertreeAlertMap{ "key": WorkflowTaskCreatePagertreeAlertArgs{...} }
type WorkflowTaskCreatePagertreeAlertMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreatePagertreeAlertMapOutput() WorkflowTaskCreatePagertreeAlertMapOutput
	ToWorkflowTaskCreatePagertreeAlertMapOutputWithContext(context.Context) WorkflowTaskCreatePagertreeAlertMapOutput
}

type WorkflowTaskCreatePagertreeAlertMap map[string]WorkflowTaskCreatePagertreeAlertInput

func (WorkflowTaskCreatePagertreeAlertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreatePagertreeAlert)(nil)).Elem()
}

func (i WorkflowTaskCreatePagertreeAlertMap) ToWorkflowTaskCreatePagertreeAlertMapOutput() WorkflowTaskCreatePagertreeAlertMapOutput {
	return i.ToWorkflowTaskCreatePagertreeAlertMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreatePagertreeAlertMap) ToWorkflowTaskCreatePagertreeAlertMapOutputWithContext(ctx context.Context) WorkflowTaskCreatePagertreeAlertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreatePagertreeAlertMapOutput)
}

type WorkflowTaskCreatePagertreeAlertOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreatePagertreeAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreatePagertreeAlert)(nil)).Elem()
}

func (o WorkflowTaskCreatePagertreeAlertOutput) ToWorkflowTaskCreatePagertreeAlertOutput() WorkflowTaskCreatePagertreeAlertOutput {
	return o
}

func (o WorkflowTaskCreatePagertreeAlertOutput) ToWorkflowTaskCreatePagertreeAlertOutputWithContext(ctx context.Context) WorkflowTaskCreatePagertreeAlertOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreatePagertreeAlertOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreatePagertreeAlert) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreatePagertreeAlertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreatePagertreeAlert) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreatePagertreeAlertOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreatePagertreeAlert) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreatePagertreeAlertOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreatePagertreeAlert) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreatePagertreeAlertOutput) TaskParams() WorkflowTaskCreatePagertreeAlertTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreatePagertreeAlert) WorkflowTaskCreatePagertreeAlertTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskCreatePagertreeAlertTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreatePagertreeAlertOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreatePagertreeAlert) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreatePagertreeAlertArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreatePagertreeAlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreatePagertreeAlert)(nil)).Elem()
}

func (o WorkflowTaskCreatePagertreeAlertArrayOutput) ToWorkflowTaskCreatePagertreeAlertArrayOutput() WorkflowTaskCreatePagertreeAlertArrayOutput {
	return o
}

func (o WorkflowTaskCreatePagertreeAlertArrayOutput) ToWorkflowTaskCreatePagertreeAlertArrayOutputWithContext(ctx context.Context) WorkflowTaskCreatePagertreeAlertArrayOutput {
	return o
}

func (o WorkflowTaskCreatePagertreeAlertArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreatePagertreeAlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreatePagertreeAlert {
		return vs[0].([]*WorkflowTaskCreatePagertreeAlert)[vs[1].(int)]
	}).(WorkflowTaskCreatePagertreeAlertOutput)
}

type WorkflowTaskCreatePagertreeAlertMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreatePagertreeAlertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreatePagertreeAlert)(nil)).Elem()
}

func (o WorkflowTaskCreatePagertreeAlertMapOutput) ToWorkflowTaskCreatePagertreeAlertMapOutput() WorkflowTaskCreatePagertreeAlertMapOutput {
	return o
}

func (o WorkflowTaskCreatePagertreeAlertMapOutput) ToWorkflowTaskCreatePagertreeAlertMapOutputWithContext(ctx context.Context) WorkflowTaskCreatePagertreeAlertMapOutput {
	return o
}

func (o WorkflowTaskCreatePagertreeAlertMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreatePagertreeAlertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreatePagertreeAlert {
		return vs[0].(map[string]*WorkflowTaskCreatePagertreeAlert)[vs[1].(string)]
	}).(WorkflowTaskCreatePagertreeAlertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreatePagertreeAlertInput)(nil)).Elem(), &WorkflowTaskCreatePagertreeAlert{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreatePagertreeAlertArrayInput)(nil)).Elem(), WorkflowTaskCreatePagertreeAlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreatePagertreeAlertMapInput)(nil)).Elem(), WorkflowTaskCreatePagertreeAlertMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreatePagertreeAlertOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreatePagertreeAlertArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreatePagertreeAlertMapOutput{})
}
