// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow sendWhatsappMessage task.
type WorkflowTaskSendWhatsappMessage struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSendWhatsappMessageTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskSendWhatsappMessage registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskSendWhatsappMessage(ctx *pulumi.Context,
	name string, args *WorkflowTaskSendWhatsappMessageArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskSendWhatsappMessage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskSendWhatsappMessage
	err := ctx.RegisterResource("rootly:index/workflowTaskSendWhatsappMessage:WorkflowTaskSendWhatsappMessage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskSendWhatsappMessage gets an existing WorkflowTaskSendWhatsappMessage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskSendWhatsappMessage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskSendWhatsappMessageState, opts ...pulumi.ResourceOption) (*WorkflowTaskSendWhatsappMessage, error) {
	var resource WorkflowTaskSendWhatsappMessage
	err := ctx.ReadResource("rootly:index/workflowTaskSendWhatsappMessage:WorkflowTaskSendWhatsappMessage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskSendWhatsappMessage resources.
type workflowTaskSendWhatsappMessageState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskSendWhatsappMessageTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskSendWhatsappMessageState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSendWhatsappMessageTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskSendWhatsappMessageState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskSendWhatsappMessageState)(nil)).Elem()
}

type workflowTaskSendWhatsappMessageArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSendWhatsappMessageTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskSendWhatsappMessage resource.
type WorkflowTaskSendWhatsappMessageArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSendWhatsappMessageTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskSendWhatsappMessageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskSendWhatsappMessageArgs)(nil)).Elem()
}

type WorkflowTaskSendWhatsappMessageInput interface {
	pulumi.Input

	ToWorkflowTaskSendWhatsappMessageOutput() WorkflowTaskSendWhatsappMessageOutput
	ToWorkflowTaskSendWhatsappMessageOutputWithContext(ctx context.Context) WorkflowTaskSendWhatsappMessageOutput
}

func (*WorkflowTaskSendWhatsappMessage) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskSendWhatsappMessage)(nil)).Elem()
}

func (i *WorkflowTaskSendWhatsappMessage) ToWorkflowTaskSendWhatsappMessageOutput() WorkflowTaskSendWhatsappMessageOutput {
	return i.ToWorkflowTaskSendWhatsappMessageOutputWithContext(context.Background())
}

func (i *WorkflowTaskSendWhatsappMessage) ToWorkflowTaskSendWhatsappMessageOutputWithContext(ctx context.Context) WorkflowTaskSendWhatsappMessageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSendWhatsappMessageOutput)
}

// WorkflowTaskSendWhatsappMessageArrayInput is an input type that accepts WorkflowTaskSendWhatsappMessageArray and WorkflowTaskSendWhatsappMessageArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskSendWhatsappMessageArrayInput` via:
//
//	WorkflowTaskSendWhatsappMessageArray{ WorkflowTaskSendWhatsappMessageArgs{...} }
type WorkflowTaskSendWhatsappMessageArrayInput interface {
	pulumi.Input

	ToWorkflowTaskSendWhatsappMessageArrayOutput() WorkflowTaskSendWhatsappMessageArrayOutput
	ToWorkflowTaskSendWhatsappMessageArrayOutputWithContext(context.Context) WorkflowTaskSendWhatsappMessageArrayOutput
}

type WorkflowTaskSendWhatsappMessageArray []WorkflowTaskSendWhatsappMessageInput

func (WorkflowTaskSendWhatsappMessageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskSendWhatsappMessage)(nil)).Elem()
}

func (i WorkflowTaskSendWhatsappMessageArray) ToWorkflowTaskSendWhatsappMessageArrayOutput() WorkflowTaskSendWhatsappMessageArrayOutput {
	return i.ToWorkflowTaskSendWhatsappMessageArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskSendWhatsappMessageArray) ToWorkflowTaskSendWhatsappMessageArrayOutputWithContext(ctx context.Context) WorkflowTaskSendWhatsappMessageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSendWhatsappMessageArrayOutput)
}

// WorkflowTaskSendWhatsappMessageMapInput is an input type that accepts WorkflowTaskSendWhatsappMessageMap and WorkflowTaskSendWhatsappMessageMapOutput values.
// You can construct a concrete instance of `WorkflowTaskSendWhatsappMessageMapInput` via:
//
//	WorkflowTaskSendWhatsappMessageMap{ "key": WorkflowTaskSendWhatsappMessageArgs{...} }
type WorkflowTaskSendWhatsappMessageMapInput interface {
	pulumi.Input

	ToWorkflowTaskSendWhatsappMessageMapOutput() WorkflowTaskSendWhatsappMessageMapOutput
	ToWorkflowTaskSendWhatsappMessageMapOutputWithContext(context.Context) WorkflowTaskSendWhatsappMessageMapOutput
}

type WorkflowTaskSendWhatsappMessageMap map[string]WorkflowTaskSendWhatsappMessageInput

func (WorkflowTaskSendWhatsappMessageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskSendWhatsappMessage)(nil)).Elem()
}

func (i WorkflowTaskSendWhatsappMessageMap) ToWorkflowTaskSendWhatsappMessageMapOutput() WorkflowTaskSendWhatsappMessageMapOutput {
	return i.ToWorkflowTaskSendWhatsappMessageMapOutputWithContext(context.Background())
}

func (i WorkflowTaskSendWhatsappMessageMap) ToWorkflowTaskSendWhatsappMessageMapOutputWithContext(ctx context.Context) WorkflowTaskSendWhatsappMessageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSendWhatsappMessageMapOutput)
}

type WorkflowTaskSendWhatsappMessageOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSendWhatsappMessageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskSendWhatsappMessage)(nil)).Elem()
}

func (o WorkflowTaskSendWhatsappMessageOutput) ToWorkflowTaskSendWhatsappMessageOutput() WorkflowTaskSendWhatsappMessageOutput {
	return o
}

func (o WorkflowTaskSendWhatsappMessageOutput) ToWorkflowTaskSendWhatsappMessageOutputWithContext(ctx context.Context) WorkflowTaskSendWhatsappMessageOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskSendWhatsappMessageOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskSendWhatsappMessage) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskSendWhatsappMessageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskSendWhatsappMessage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskSendWhatsappMessageOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskSendWhatsappMessage) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskSendWhatsappMessageOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskSendWhatsappMessage) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskSendWhatsappMessageOutput) TaskParams() WorkflowTaskSendWhatsappMessageTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskSendWhatsappMessage) WorkflowTaskSendWhatsappMessageTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskSendWhatsappMessageTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskSendWhatsappMessageOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskSendWhatsappMessage) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskSendWhatsappMessageArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSendWhatsappMessageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskSendWhatsappMessage)(nil)).Elem()
}

func (o WorkflowTaskSendWhatsappMessageArrayOutput) ToWorkflowTaskSendWhatsappMessageArrayOutput() WorkflowTaskSendWhatsappMessageArrayOutput {
	return o
}

func (o WorkflowTaskSendWhatsappMessageArrayOutput) ToWorkflowTaskSendWhatsappMessageArrayOutputWithContext(ctx context.Context) WorkflowTaskSendWhatsappMessageArrayOutput {
	return o
}

func (o WorkflowTaskSendWhatsappMessageArrayOutput) Index(i pulumi.IntInput) WorkflowTaskSendWhatsappMessageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskSendWhatsappMessage {
		return vs[0].([]*WorkflowTaskSendWhatsappMessage)[vs[1].(int)]
	}).(WorkflowTaskSendWhatsappMessageOutput)
}

type WorkflowTaskSendWhatsappMessageMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSendWhatsappMessageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskSendWhatsappMessage)(nil)).Elem()
}

func (o WorkflowTaskSendWhatsappMessageMapOutput) ToWorkflowTaskSendWhatsappMessageMapOutput() WorkflowTaskSendWhatsappMessageMapOutput {
	return o
}

func (o WorkflowTaskSendWhatsappMessageMapOutput) ToWorkflowTaskSendWhatsappMessageMapOutputWithContext(ctx context.Context) WorkflowTaskSendWhatsappMessageMapOutput {
	return o
}

func (o WorkflowTaskSendWhatsappMessageMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskSendWhatsappMessageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskSendWhatsappMessage {
		return vs[0].(map[string]*WorkflowTaskSendWhatsappMessage)[vs[1].(string)]
	}).(WorkflowTaskSendWhatsappMessageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSendWhatsappMessageInput)(nil)).Elem(), &WorkflowTaskSendWhatsappMessage{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSendWhatsappMessageArrayInput)(nil)).Elem(), WorkflowTaskSendWhatsappMessageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSendWhatsappMessageMapInput)(nil)).Elem(), WorkflowTaskSendWhatsappMessageMap{})
	pulumi.RegisterOutputType(WorkflowTaskSendWhatsappMessageOutput{})
	pulumi.RegisterOutputType(WorkflowTaskSendWhatsappMessageArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskSendWhatsappMessageMapOutput{})
}
