// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type WorkflowPostMortem struct {
	pulumi.CustomResourceState

	CauseIds pulumi.StringArrayOutput `pulumi:"causeIds"`
	// Workflow command
	Command pulumi.StringOutput `pulumi:"command"`
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled pulumi.BoolOutput `pulumi:"commandFeedbackEnabled"`
	// The description of the workflow
	Description      pulumi.StringOutput      `pulumi:"description"`
	Enabled          pulumi.BoolPtrOutput     `pulumi:"enabled"`
	EnvironmentIds   pulumi.StringArrayOutput `pulumi:"environmentIds"`
	FunctionalityIds pulumi.StringArrayOutput `pulumi:"functionalityIds"`
	GroupIds         pulumi.StringArrayOutput `pulumi:"groupIds"`
	IncidentRoleIds  pulumi.StringArrayOutput `pulumi:"incidentRoleIds"`
	IncidentTypeIds  pulumi.StringArrayOutput `pulumi:"incidentTypeIds"`
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked pulumi.BoolOutput `pulumi:"locked"`
	// The title of the workflow
	Name pulumi.StringOutput `pulumi:"name"`
	// The order which the workflow should run with other workflows.
	Position pulumi.IntOutput `pulumi:"position"`
	// Repeat workflow every duration
	RepeatEveryDuration pulumi.StringOutput `pulumi:"repeatEveryDuration"`
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   pulumi.StringArrayOutput `pulumi:"repeatOns"`
	ServiceIds  pulumi.StringArrayOutput `pulumi:"serviceIds"`
	SeverityIds pulumi.StringArrayOutput `pulumi:"severityIds"`
	// The slug of the workflow
	Slug          pulumi.StringOutput                   `pulumi:"slug"`
	TriggerParams WorkflowPostMortemTriggerParamsOutput `pulumi:"triggerParams"`
	// Wait this duration before executing
	Wait pulumi.StringOutput `pulumi:"wait"`
	// The group this workflow belongs to.
	WorkflowGroupId pulumi.StringOutput `pulumi:"workflowGroupId"`
}

// NewWorkflowPostMortem registers a new resource with the given unique name, arguments, and options.
func NewWorkflowPostMortem(ctx *pulumi.Context,
	name string, args *WorkflowPostMortemArgs, opts ...pulumi.ResourceOption) (*WorkflowPostMortem, error) {
	if args == nil {
		args = &WorkflowPostMortemArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowPostMortem
	err := ctx.RegisterResource("rootly:index/workflowPostMortem:WorkflowPostMortem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowPostMortem gets an existing WorkflowPostMortem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowPostMortem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowPostMortemState, opts ...pulumi.ResourceOption) (*WorkflowPostMortem, error) {
	var resource WorkflowPostMortem
	err := ctx.ReadResource("rootly:index/workflowPostMortem:WorkflowPostMortem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowPostMortem resources.
type workflowPostMortemState struct {
	CauseIds []string `pulumi:"causeIds"`
	// Workflow command
	Command *string `pulumi:"command"`
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled *bool `pulumi:"commandFeedbackEnabled"`
	// The description of the workflow
	Description      *string  `pulumi:"description"`
	Enabled          *bool    `pulumi:"enabled"`
	EnvironmentIds   []string `pulumi:"environmentIds"`
	FunctionalityIds []string `pulumi:"functionalityIds"`
	GroupIds         []string `pulumi:"groupIds"`
	IncidentRoleIds  []string `pulumi:"incidentRoleIds"`
	IncidentTypeIds  []string `pulumi:"incidentTypeIds"`
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked *bool `pulumi:"locked"`
	// The title of the workflow
	Name *string `pulumi:"name"`
	// The order which the workflow should run with other workflows.
	Position *int `pulumi:"position"`
	// Repeat workflow every duration
	RepeatEveryDuration *string `pulumi:"repeatEveryDuration"`
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   []string `pulumi:"repeatOns"`
	ServiceIds  []string `pulumi:"serviceIds"`
	SeverityIds []string `pulumi:"severityIds"`
	// The slug of the workflow
	Slug          *string                          `pulumi:"slug"`
	TriggerParams *WorkflowPostMortemTriggerParams `pulumi:"triggerParams"`
	// Wait this duration before executing
	Wait *string `pulumi:"wait"`
	// The group this workflow belongs to.
	WorkflowGroupId *string `pulumi:"workflowGroupId"`
}

type WorkflowPostMortemState struct {
	CauseIds pulumi.StringArrayInput
	// Workflow command
	Command pulumi.StringPtrInput
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled pulumi.BoolPtrInput
	// The description of the workflow
	Description      pulumi.StringPtrInput
	Enabled          pulumi.BoolPtrInput
	EnvironmentIds   pulumi.StringArrayInput
	FunctionalityIds pulumi.StringArrayInput
	GroupIds         pulumi.StringArrayInput
	IncidentRoleIds  pulumi.StringArrayInput
	IncidentTypeIds  pulumi.StringArrayInput
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked pulumi.BoolPtrInput
	// The title of the workflow
	Name pulumi.StringPtrInput
	// The order which the workflow should run with other workflows.
	Position pulumi.IntPtrInput
	// Repeat workflow every duration
	RepeatEveryDuration pulumi.StringPtrInput
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   pulumi.StringArrayInput
	ServiceIds  pulumi.StringArrayInput
	SeverityIds pulumi.StringArrayInput
	// The slug of the workflow
	Slug          pulumi.StringPtrInput
	TriggerParams WorkflowPostMortemTriggerParamsPtrInput
	// Wait this duration before executing
	Wait pulumi.StringPtrInput
	// The group this workflow belongs to.
	WorkflowGroupId pulumi.StringPtrInput
}

func (WorkflowPostMortemState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowPostMortemState)(nil)).Elem()
}

type workflowPostMortemArgs struct {
	CauseIds []string `pulumi:"causeIds"`
	// Workflow command
	Command *string `pulumi:"command"`
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled *bool `pulumi:"commandFeedbackEnabled"`
	// The description of the workflow
	Description      *string  `pulumi:"description"`
	Enabled          *bool    `pulumi:"enabled"`
	EnvironmentIds   []string `pulumi:"environmentIds"`
	FunctionalityIds []string `pulumi:"functionalityIds"`
	GroupIds         []string `pulumi:"groupIds"`
	IncidentRoleIds  []string `pulumi:"incidentRoleIds"`
	IncidentTypeIds  []string `pulumi:"incidentTypeIds"`
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked *bool `pulumi:"locked"`
	// The title of the workflow
	Name *string `pulumi:"name"`
	// The order which the workflow should run with other workflows.
	Position *int `pulumi:"position"`
	// Repeat workflow every duration
	RepeatEveryDuration *string `pulumi:"repeatEveryDuration"`
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   []string `pulumi:"repeatOns"`
	ServiceIds  []string `pulumi:"serviceIds"`
	SeverityIds []string `pulumi:"severityIds"`
	// The slug of the workflow
	Slug          *string                          `pulumi:"slug"`
	TriggerParams *WorkflowPostMortemTriggerParams `pulumi:"triggerParams"`
	// Wait this duration before executing
	Wait *string `pulumi:"wait"`
	// The group this workflow belongs to.
	WorkflowGroupId *string `pulumi:"workflowGroupId"`
}

// The set of arguments for constructing a WorkflowPostMortem resource.
type WorkflowPostMortemArgs struct {
	CauseIds pulumi.StringArrayInput
	// Workflow command
	Command pulumi.StringPtrInput
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled pulumi.BoolPtrInput
	// The description of the workflow
	Description      pulumi.StringPtrInput
	Enabled          pulumi.BoolPtrInput
	EnvironmentIds   pulumi.StringArrayInput
	FunctionalityIds pulumi.StringArrayInput
	GroupIds         pulumi.StringArrayInput
	IncidentRoleIds  pulumi.StringArrayInput
	IncidentTypeIds  pulumi.StringArrayInput
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked pulumi.BoolPtrInput
	// The title of the workflow
	Name pulumi.StringPtrInput
	// The order which the workflow should run with other workflows.
	Position pulumi.IntPtrInput
	// Repeat workflow every duration
	RepeatEveryDuration pulumi.StringPtrInput
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   pulumi.StringArrayInput
	ServiceIds  pulumi.StringArrayInput
	SeverityIds pulumi.StringArrayInput
	// The slug of the workflow
	Slug          pulumi.StringPtrInput
	TriggerParams WorkflowPostMortemTriggerParamsPtrInput
	// Wait this duration before executing
	Wait pulumi.StringPtrInput
	// The group this workflow belongs to.
	WorkflowGroupId pulumi.StringPtrInput
}

func (WorkflowPostMortemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowPostMortemArgs)(nil)).Elem()
}

type WorkflowPostMortemInput interface {
	pulumi.Input

	ToWorkflowPostMortemOutput() WorkflowPostMortemOutput
	ToWorkflowPostMortemOutputWithContext(ctx context.Context) WorkflowPostMortemOutput
}

func (*WorkflowPostMortem) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowPostMortem)(nil)).Elem()
}

func (i *WorkflowPostMortem) ToWorkflowPostMortemOutput() WorkflowPostMortemOutput {
	return i.ToWorkflowPostMortemOutputWithContext(context.Background())
}

func (i *WorkflowPostMortem) ToWorkflowPostMortemOutputWithContext(ctx context.Context) WorkflowPostMortemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowPostMortemOutput)
}

// WorkflowPostMortemArrayInput is an input type that accepts WorkflowPostMortemArray and WorkflowPostMortemArrayOutput values.
// You can construct a concrete instance of `WorkflowPostMortemArrayInput` via:
//
//	WorkflowPostMortemArray{ WorkflowPostMortemArgs{...} }
type WorkflowPostMortemArrayInput interface {
	pulumi.Input

	ToWorkflowPostMortemArrayOutput() WorkflowPostMortemArrayOutput
	ToWorkflowPostMortemArrayOutputWithContext(context.Context) WorkflowPostMortemArrayOutput
}

type WorkflowPostMortemArray []WorkflowPostMortemInput

func (WorkflowPostMortemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowPostMortem)(nil)).Elem()
}

func (i WorkflowPostMortemArray) ToWorkflowPostMortemArrayOutput() WorkflowPostMortemArrayOutput {
	return i.ToWorkflowPostMortemArrayOutputWithContext(context.Background())
}

func (i WorkflowPostMortemArray) ToWorkflowPostMortemArrayOutputWithContext(ctx context.Context) WorkflowPostMortemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowPostMortemArrayOutput)
}

// WorkflowPostMortemMapInput is an input type that accepts WorkflowPostMortemMap and WorkflowPostMortemMapOutput values.
// You can construct a concrete instance of `WorkflowPostMortemMapInput` via:
//
//	WorkflowPostMortemMap{ "key": WorkflowPostMortemArgs{...} }
type WorkflowPostMortemMapInput interface {
	pulumi.Input

	ToWorkflowPostMortemMapOutput() WorkflowPostMortemMapOutput
	ToWorkflowPostMortemMapOutputWithContext(context.Context) WorkflowPostMortemMapOutput
}

type WorkflowPostMortemMap map[string]WorkflowPostMortemInput

func (WorkflowPostMortemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowPostMortem)(nil)).Elem()
}

func (i WorkflowPostMortemMap) ToWorkflowPostMortemMapOutput() WorkflowPostMortemMapOutput {
	return i.ToWorkflowPostMortemMapOutputWithContext(context.Background())
}

func (i WorkflowPostMortemMap) ToWorkflowPostMortemMapOutputWithContext(ctx context.Context) WorkflowPostMortemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowPostMortemMapOutput)
}

type WorkflowPostMortemOutput struct{ *pulumi.OutputState }

func (WorkflowPostMortemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowPostMortem)(nil)).Elem()
}

func (o WorkflowPostMortemOutput) ToWorkflowPostMortemOutput() WorkflowPostMortemOutput {
	return o
}

func (o WorkflowPostMortemOutput) ToWorkflowPostMortemOutputWithContext(ctx context.Context) WorkflowPostMortemOutput {
	return o
}

func (o WorkflowPostMortemOutput) CauseIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.StringArrayOutput { return v.CauseIds }).(pulumi.StringArrayOutput)
}

// Workflow command
func (o WorkflowPostMortemOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.StringOutput { return v.Command }).(pulumi.StringOutput)
}

// This will notify you back when the workflow is starting. Value must be one of true or false
func (o WorkflowPostMortemOutput) CommandFeedbackEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.BoolOutput { return v.CommandFeedbackEnabled }).(pulumi.BoolOutput)
}

// The description of the workflow
func (o WorkflowPostMortemOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o WorkflowPostMortemOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o WorkflowPostMortemOutput) EnvironmentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.StringArrayOutput { return v.EnvironmentIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowPostMortemOutput) FunctionalityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.StringArrayOutput { return v.FunctionalityIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowPostMortemOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.StringArrayOutput { return v.GroupIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowPostMortemOutput) IncidentRoleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.StringArrayOutput { return v.IncidentRoleIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowPostMortemOutput) IncidentTypeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.StringArrayOutput { return v.IncidentTypeIds }).(pulumi.StringArrayOutput)
}

// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
func (o WorkflowPostMortemOutput) Locked() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.BoolOutput { return v.Locked }).(pulumi.BoolOutput)
}

// The title of the workflow
func (o WorkflowPostMortemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The order which the workflow should run with other workflows.
func (o WorkflowPostMortemOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Repeat workflow every duration
func (o WorkflowPostMortemOutput) RepeatEveryDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.StringOutput { return v.RepeatEveryDuration }).(pulumi.StringOutput)
}

// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
func (o WorkflowPostMortemOutput) RepeatOns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.StringArrayOutput { return v.RepeatOns }).(pulumi.StringArrayOutput)
}

func (o WorkflowPostMortemOutput) ServiceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.StringArrayOutput { return v.ServiceIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowPostMortemOutput) SeverityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.StringArrayOutput { return v.SeverityIds }).(pulumi.StringArrayOutput)
}

// The slug of the workflow
func (o WorkflowPostMortemOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o WorkflowPostMortemOutput) TriggerParams() WorkflowPostMortemTriggerParamsOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) WorkflowPostMortemTriggerParamsOutput { return v.TriggerParams }).(WorkflowPostMortemTriggerParamsOutput)
}

// Wait this duration before executing
func (o WorkflowPostMortemOutput) Wait() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.StringOutput { return v.Wait }).(pulumi.StringOutput)
}

// The group this workflow belongs to.
func (o WorkflowPostMortemOutput) WorkflowGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowPostMortem) pulumi.StringOutput { return v.WorkflowGroupId }).(pulumi.StringOutput)
}

type WorkflowPostMortemArrayOutput struct{ *pulumi.OutputState }

func (WorkflowPostMortemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowPostMortem)(nil)).Elem()
}

func (o WorkflowPostMortemArrayOutput) ToWorkflowPostMortemArrayOutput() WorkflowPostMortemArrayOutput {
	return o
}

func (o WorkflowPostMortemArrayOutput) ToWorkflowPostMortemArrayOutputWithContext(ctx context.Context) WorkflowPostMortemArrayOutput {
	return o
}

func (o WorkflowPostMortemArrayOutput) Index(i pulumi.IntInput) WorkflowPostMortemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowPostMortem {
		return vs[0].([]*WorkflowPostMortem)[vs[1].(int)]
	}).(WorkflowPostMortemOutput)
}

type WorkflowPostMortemMapOutput struct{ *pulumi.OutputState }

func (WorkflowPostMortemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowPostMortem)(nil)).Elem()
}

func (o WorkflowPostMortemMapOutput) ToWorkflowPostMortemMapOutput() WorkflowPostMortemMapOutput {
	return o
}

func (o WorkflowPostMortemMapOutput) ToWorkflowPostMortemMapOutputWithContext(ctx context.Context) WorkflowPostMortemMapOutput {
	return o
}

func (o WorkflowPostMortemMapOutput) MapIndex(k pulumi.StringInput) WorkflowPostMortemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowPostMortem {
		return vs[0].(map[string]*WorkflowPostMortem)[vs[1].(string)]
	}).(WorkflowPostMortemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowPostMortemInput)(nil)).Elem(), &WorkflowPostMortem{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowPostMortemArrayInput)(nil)).Elem(), WorkflowPostMortemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowPostMortemMapInput)(nil)).Elem(), WorkflowPostMortemMap{})
	pulumi.RegisterOutputType(WorkflowPostMortemOutput{})
	pulumi.RegisterOutputType(WorkflowPostMortemArrayOutput{})
	pulumi.RegisterOutputType(WorkflowPostMortemMapOutput{})
}
