// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow sendSms task.
//
// ## Example Usage
type WorkflowTaskSendSms struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSendSmsTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskSendSms registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskSendSms(ctx *pulumi.Context,
	name string, args *WorkflowTaskSendSmsArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskSendSms, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskSendSms
	err := ctx.RegisterResource("rootly:index/workflowTaskSendSms:WorkflowTaskSendSms", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskSendSms gets an existing WorkflowTaskSendSms resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskSendSms(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskSendSmsState, opts ...pulumi.ResourceOption) (*WorkflowTaskSendSms, error) {
	var resource WorkflowTaskSendSms
	err := ctx.ReadResource("rootly:index/workflowTaskSendSms:WorkflowTaskSendSms", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskSendSms resources.
type workflowTaskSendSmsState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskSendSmsTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskSendSmsState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSendSmsTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskSendSmsState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskSendSmsState)(nil)).Elem()
}

type workflowTaskSendSmsArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSendSmsTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskSendSms resource.
type WorkflowTaskSendSmsArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSendSmsTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskSendSmsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskSendSmsArgs)(nil)).Elem()
}

type WorkflowTaskSendSmsInput interface {
	pulumi.Input

	ToWorkflowTaskSendSmsOutput() WorkflowTaskSendSmsOutput
	ToWorkflowTaskSendSmsOutputWithContext(ctx context.Context) WorkflowTaskSendSmsOutput
}

func (*WorkflowTaskSendSms) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskSendSms)(nil)).Elem()
}

func (i *WorkflowTaskSendSms) ToWorkflowTaskSendSmsOutput() WorkflowTaskSendSmsOutput {
	return i.ToWorkflowTaskSendSmsOutputWithContext(context.Background())
}

func (i *WorkflowTaskSendSms) ToWorkflowTaskSendSmsOutputWithContext(ctx context.Context) WorkflowTaskSendSmsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSendSmsOutput)
}

// WorkflowTaskSendSmsArrayInput is an input type that accepts WorkflowTaskSendSmsArray and WorkflowTaskSendSmsArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskSendSmsArrayInput` via:
//
//	WorkflowTaskSendSmsArray{ WorkflowTaskSendSmsArgs{...} }
type WorkflowTaskSendSmsArrayInput interface {
	pulumi.Input

	ToWorkflowTaskSendSmsArrayOutput() WorkflowTaskSendSmsArrayOutput
	ToWorkflowTaskSendSmsArrayOutputWithContext(context.Context) WorkflowTaskSendSmsArrayOutput
}

type WorkflowTaskSendSmsArray []WorkflowTaskSendSmsInput

func (WorkflowTaskSendSmsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskSendSms)(nil)).Elem()
}

func (i WorkflowTaskSendSmsArray) ToWorkflowTaskSendSmsArrayOutput() WorkflowTaskSendSmsArrayOutput {
	return i.ToWorkflowTaskSendSmsArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskSendSmsArray) ToWorkflowTaskSendSmsArrayOutputWithContext(ctx context.Context) WorkflowTaskSendSmsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSendSmsArrayOutput)
}

// WorkflowTaskSendSmsMapInput is an input type that accepts WorkflowTaskSendSmsMap and WorkflowTaskSendSmsMapOutput values.
// You can construct a concrete instance of `WorkflowTaskSendSmsMapInput` via:
//
//	WorkflowTaskSendSmsMap{ "key": WorkflowTaskSendSmsArgs{...} }
type WorkflowTaskSendSmsMapInput interface {
	pulumi.Input

	ToWorkflowTaskSendSmsMapOutput() WorkflowTaskSendSmsMapOutput
	ToWorkflowTaskSendSmsMapOutputWithContext(context.Context) WorkflowTaskSendSmsMapOutput
}

type WorkflowTaskSendSmsMap map[string]WorkflowTaskSendSmsInput

func (WorkflowTaskSendSmsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskSendSms)(nil)).Elem()
}

func (i WorkflowTaskSendSmsMap) ToWorkflowTaskSendSmsMapOutput() WorkflowTaskSendSmsMapOutput {
	return i.ToWorkflowTaskSendSmsMapOutputWithContext(context.Background())
}

func (i WorkflowTaskSendSmsMap) ToWorkflowTaskSendSmsMapOutputWithContext(ctx context.Context) WorkflowTaskSendSmsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSendSmsMapOutput)
}

type WorkflowTaskSendSmsOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSendSmsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskSendSms)(nil)).Elem()
}

func (o WorkflowTaskSendSmsOutput) ToWorkflowTaskSendSmsOutput() WorkflowTaskSendSmsOutput {
	return o
}

func (o WorkflowTaskSendSmsOutput) ToWorkflowTaskSendSmsOutputWithContext(ctx context.Context) WorkflowTaskSendSmsOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskSendSmsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskSendSms) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskSendSmsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskSendSms) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskSendSmsOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskSendSms) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskSendSmsOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskSendSms) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskSendSmsOutput) TaskParams() WorkflowTaskSendSmsTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskSendSms) WorkflowTaskSendSmsTaskParamsOutput { return v.TaskParams }).(WorkflowTaskSendSmsTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskSendSmsOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskSendSms) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskSendSmsArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSendSmsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskSendSms)(nil)).Elem()
}

func (o WorkflowTaskSendSmsArrayOutput) ToWorkflowTaskSendSmsArrayOutput() WorkflowTaskSendSmsArrayOutput {
	return o
}

func (o WorkflowTaskSendSmsArrayOutput) ToWorkflowTaskSendSmsArrayOutputWithContext(ctx context.Context) WorkflowTaskSendSmsArrayOutput {
	return o
}

func (o WorkflowTaskSendSmsArrayOutput) Index(i pulumi.IntInput) WorkflowTaskSendSmsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskSendSms {
		return vs[0].([]*WorkflowTaskSendSms)[vs[1].(int)]
	}).(WorkflowTaskSendSmsOutput)
}

type WorkflowTaskSendSmsMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSendSmsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskSendSms)(nil)).Elem()
}

func (o WorkflowTaskSendSmsMapOutput) ToWorkflowTaskSendSmsMapOutput() WorkflowTaskSendSmsMapOutput {
	return o
}

func (o WorkflowTaskSendSmsMapOutput) ToWorkflowTaskSendSmsMapOutputWithContext(ctx context.Context) WorkflowTaskSendSmsMapOutput {
	return o
}

func (o WorkflowTaskSendSmsMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskSendSmsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskSendSms {
		return vs[0].(map[string]*WorkflowTaskSendSms)[vs[1].(string)]
	}).(WorkflowTaskSendSmsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSendSmsInput)(nil)).Elem(), &WorkflowTaskSendSms{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSendSmsArrayInput)(nil)).Elem(), WorkflowTaskSendSmsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSendSmsMapInput)(nil)).Elem(), WorkflowTaskSendSmsMap{})
	pulumi.RegisterOutputType(WorkflowTaskSendSmsOutput{})
	pulumi.RegisterOutputType(WorkflowTaskSendSmsArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskSendSmsMapOutput{})
}
