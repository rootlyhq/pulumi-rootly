// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow triggerWorkflow task.
//
// ## Example Usage
type WorkflowTaskTriggerWorkflow struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskTriggerWorkflowTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskTriggerWorkflow registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskTriggerWorkflow(ctx *pulumi.Context,
	name string, args *WorkflowTaskTriggerWorkflowArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskTriggerWorkflow, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskTriggerWorkflow
	err := ctx.RegisterResource("rootly:index/workflowTaskTriggerWorkflow:WorkflowTaskTriggerWorkflow", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskTriggerWorkflow gets an existing WorkflowTaskTriggerWorkflow resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskTriggerWorkflow(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskTriggerWorkflowState, opts ...pulumi.ResourceOption) (*WorkflowTaskTriggerWorkflow, error) {
	var resource WorkflowTaskTriggerWorkflow
	err := ctx.ReadResource("rootly:index/workflowTaskTriggerWorkflow:WorkflowTaskTriggerWorkflow", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskTriggerWorkflow resources.
type workflowTaskTriggerWorkflowState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskTriggerWorkflowTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskTriggerWorkflowState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskTriggerWorkflowTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskTriggerWorkflowState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskTriggerWorkflowState)(nil)).Elem()
}

type workflowTaskTriggerWorkflowArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskTriggerWorkflowTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskTriggerWorkflow resource.
type WorkflowTaskTriggerWorkflowArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskTriggerWorkflowTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskTriggerWorkflowArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskTriggerWorkflowArgs)(nil)).Elem()
}

type WorkflowTaskTriggerWorkflowInput interface {
	pulumi.Input

	ToWorkflowTaskTriggerWorkflowOutput() WorkflowTaskTriggerWorkflowOutput
	ToWorkflowTaskTriggerWorkflowOutputWithContext(ctx context.Context) WorkflowTaskTriggerWorkflowOutput
}

func (*WorkflowTaskTriggerWorkflow) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskTriggerWorkflow)(nil)).Elem()
}

func (i *WorkflowTaskTriggerWorkflow) ToWorkflowTaskTriggerWorkflowOutput() WorkflowTaskTriggerWorkflowOutput {
	return i.ToWorkflowTaskTriggerWorkflowOutputWithContext(context.Background())
}

func (i *WorkflowTaskTriggerWorkflow) ToWorkflowTaskTriggerWorkflowOutputWithContext(ctx context.Context) WorkflowTaskTriggerWorkflowOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskTriggerWorkflowOutput)
}

// WorkflowTaskTriggerWorkflowArrayInput is an input type that accepts WorkflowTaskTriggerWorkflowArray and WorkflowTaskTriggerWorkflowArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskTriggerWorkflowArrayInput` via:
//
//	WorkflowTaskTriggerWorkflowArray{ WorkflowTaskTriggerWorkflowArgs{...} }
type WorkflowTaskTriggerWorkflowArrayInput interface {
	pulumi.Input

	ToWorkflowTaskTriggerWorkflowArrayOutput() WorkflowTaskTriggerWorkflowArrayOutput
	ToWorkflowTaskTriggerWorkflowArrayOutputWithContext(context.Context) WorkflowTaskTriggerWorkflowArrayOutput
}

type WorkflowTaskTriggerWorkflowArray []WorkflowTaskTriggerWorkflowInput

func (WorkflowTaskTriggerWorkflowArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskTriggerWorkflow)(nil)).Elem()
}

func (i WorkflowTaskTriggerWorkflowArray) ToWorkflowTaskTriggerWorkflowArrayOutput() WorkflowTaskTriggerWorkflowArrayOutput {
	return i.ToWorkflowTaskTriggerWorkflowArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskTriggerWorkflowArray) ToWorkflowTaskTriggerWorkflowArrayOutputWithContext(ctx context.Context) WorkflowTaskTriggerWorkflowArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskTriggerWorkflowArrayOutput)
}

// WorkflowTaskTriggerWorkflowMapInput is an input type that accepts WorkflowTaskTriggerWorkflowMap and WorkflowTaskTriggerWorkflowMapOutput values.
// You can construct a concrete instance of `WorkflowTaskTriggerWorkflowMapInput` via:
//
//	WorkflowTaskTriggerWorkflowMap{ "key": WorkflowTaskTriggerWorkflowArgs{...} }
type WorkflowTaskTriggerWorkflowMapInput interface {
	pulumi.Input

	ToWorkflowTaskTriggerWorkflowMapOutput() WorkflowTaskTriggerWorkflowMapOutput
	ToWorkflowTaskTriggerWorkflowMapOutputWithContext(context.Context) WorkflowTaskTriggerWorkflowMapOutput
}

type WorkflowTaskTriggerWorkflowMap map[string]WorkflowTaskTriggerWorkflowInput

func (WorkflowTaskTriggerWorkflowMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskTriggerWorkflow)(nil)).Elem()
}

func (i WorkflowTaskTriggerWorkflowMap) ToWorkflowTaskTriggerWorkflowMapOutput() WorkflowTaskTriggerWorkflowMapOutput {
	return i.ToWorkflowTaskTriggerWorkflowMapOutputWithContext(context.Background())
}

func (i WorkflowTaskTriggerWorkflowMap) ToWorkflowTaskTriggerWorkflowMapOutputWithContext(ctx context.Context) WorkflowTaskTriggerWorkflowMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskTriggerWorkflowMapOutput)
}

type WorkflowTaskTriggerWorkflowOutput struct{ *pulumi.OutputState }

func (WorkflowTaskTriggerWorkflowOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskTriggerWorkflow)(nil)).Elem()
}

func (o WorkflowTaskTriggerWorkflowOutput) ToWorkflowTaskTriggerWorkflowOutput() WorkflowTaskTriggerWorkflowOutput {
	return o
}

func (o WorkflowTaskTriggerWorkflowOutput) ToWorkflowTaskTriggerWorkflowOutputWithContext(ctx context.Context) WorkflowTaskTriggerWorkflowOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskTriggerWorkflowOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskTriggerWorkflow) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskTriggerWorkflowOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskTriggerWorkflow) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskTriggerWorkflowOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskTriggerWorkflow) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskTriggerWorkflowOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskTriggerWorkflow) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskTriggerWorkflowOutput) TaskParams() WorkflowTaskTriggerWorkflowTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskTriggerWorkflow) WorkflowTaskTriggerWorkflowTaskParamsOutput { return v.TaskParams }).(WorkflowTaskTriggerWorkflowTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskTriggerWorkflowOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskTriggerWorkflow) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskTriggerWorkflowArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskTriggerWorkflowArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskTriggerWorkflow)(nil)).Elem()
}

func (o WorkflowTaskTriggerWorkflowArrayOutput) ToWorkflowTaskTriggerWorkflowArrayOutput() WorkflowTaskTriggerWorkflowArrayOutput {
	return o
}

func (o WorkflowTaskTriggerWorkflowArrayOutput) ToWorkflowTaskTriggerWorkflowArrayOutputWithContext(ctx context.Context) WorkflowTaskTriggerWorkflowArrayOutput {
	return o
}

func (o WorkflowTaskTriggerWorkflowArrayOutput) Index(i pulumi.IntInput) WorkflowTaskTriggerWorkflowOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskTriggerWorkflow {
		return vs[0].([]*WorkflowTaskTriggerWorkflow)[vs[1].(int)]
	}).(WorkflowTaskTriggerWorkflowOutput)
}

type WorkflowTaskTriggerWorkflowMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskTriggerWorkflowMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskTriggerWorkflow)(nil)).Elem()
}

func (o WorkflowTaskTriggerWorkflowMapOutput) ToWorkflowTaskTriggerWorkflowMapOutput() WorkflowTaskTriggerWorkflowMapOutput {
	return o
}

func (o WorkflowTaskTriggerWorkflowMapOutput) ToWorkflowTaskTriggerWorkflowMapOutputWithContext(ctx context.Context) WorkflowTaskTriggerWorkflowMapOutput {
	return o
}

func (o WorkflowTaskTriggerWorkflowMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskTriggerWorkflowOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskTriggerWorkflow {
		return vs[0].(map[string]*WorkflowTaskTriggerWorkflow)[vs[1].(string)]
	}).(WorkflowTaskTriggerWorkflowOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskTriggerWorkflowInput)(nil)).Elem(), &WorkflowTaskTriggerWorkflow{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskTriggerWorkflowArrayInput)(nil)).Elem(), WorkflowTaskTriggerWorkflowArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskTriggerWorkflowMapInput)(nil)).Elem(), WorkflowTaskTriggerWorkflowMap{})
	pulumi.RegisterOutputType(WorkflowTaskTriggerWorkflowOutput{})
	pulumi.RegisterOutputType(WorkflowTaskTriggerWorkflowArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskTriggerWorkflowMapOutput{})
}
