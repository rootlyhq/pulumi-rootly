// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type RetrospectiveConfiguration struct {
	pulumi.CustomResourceState

	// Teams associated with the retrospective configuration.
	GroupIds pulumi.StringArrayOutput `pulumi:"groupIds"`
	// Incident types associated with the retrospective configuration.
	IncidentTypeIds pulumi.StringArrayOutput `pulumi:"incidentTypeIds"`
	// The kind of the retrospective configuration.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Severities associated with the retrospective configuration.
	SeverityIds pulumi.StringArrayOutput `pulumi:"severityIds"`
}

// NewRetrospectiveConfiguration registers a new resource with the given unique name, arguments, and options.
func NewRetrospectiveConfiguration(ctx *pulumi.Context,
	name string, args *RetrospectiveConfigurationArgs, opts ...pulumi.ResourceOption) (*RetrospectiveConfiguration, error) {
	if args == nil {
		args = &RetrospectiveConfigurationArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RetrospectiveConfiguration
	err := ctx.RegisterResource("rootly:index/retrospectiveConfiguration:RetrospectiveConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRetrospectiveConfiguration gets an existing RetrospectiveConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRetrospectiveConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RetrospectiveConfigurationState, opts ...pulumi.ResourceOption) (*RetrospectiveConfiguration, error) {
	var resource RetrospectiveConfiguration
	err := ctx.ReadResource("rootly:index/retrospectiveConfiguration:RetrospectiveConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RetrospectiveConfiguration resources.
type retrospectiveConfigurationState struct {
	// Teams associated with the retrospective configuration.
	GroupIds []string `pulumi:"groupIds"`
	// Incident types associated with the retrospective configuration.
	IncidentTypeIds []string `pulumi:"incidentTypeIds"`
	// The kind of the retrospective configuration.
	Kind *string `pulumi:"kind"`
	// Severities associated with the retrospective configuration.
	SeverityIds []string `pulumi:"severityIds"`
}

type RetrospectiveConfigurationState struct {
	// Teams associated with the retrospective configuration.
	GroupIds pulumi.StringArrayInput
	// Incident types associated with the retrospective configuration.
	IncidentTypeIds pulumi.StringArrayInput
	// The kind of the retrospective configuration.
	Kind pulumi.StringPtrInput
	// Severities associated with the retrospective configuration.
	SeverityIds pulumi.StringArrayInput
}

func (RetrospectiveConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*retrospectiveConfigurationState)(nil)).Elem()
}

type retrospectiveConfigurationArgs struct {
	// Teams associated with the retrospective configuration.
	GroupIds []string `pulumi:"groupIds"`
	// Incident types associated with the retrospective configuration.
	IncidentTypeIds []string `pulumi:"incidentTypeIds"`
	// The kind of the retrospective configuration.
	Kind *string `pulumi:"kind"`
	// Severities associated with the retrospective configuration.
	SeverityIds []string `pulumi:"severityIds"`
}

// The set of arguments for constructing a RetrospectiveConfiguration resource.
type RetrospectiveConfigurationArgs struct {
	// Teams associated with the retrospective configuration.
	GroupIds pulumi.StringArrayInput
	// Incident types associated with the retrospective configuration.
	IncidentTypeIds pulumi.StringArrayInput
	// The kind of the retrospective configuration.
	Kind pulumi.StringPtrInput
	// Severities associated with the retrospective configuration.
	SeverityIds pulumi.StringArrayInput
}

func (RetrospectiveConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*retrospectiveConfigurationArgs)(nil)).Elem()
}

type RetrospectiveConfigurationInput interface {
	pulumi.Input

	ToRetrospectiveConfigurationOutput() RetrospectiveConfigurationOutput
	ToRetrospectiveConfigurationOutputWithContext(ctx context.Context) RetrospectiveConfigurationOutput
}

func (*RetrospectiveConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**RetrospectiveConfiguration)(nil)).Elem()
}

func (i *RetrospectiveConfiguration) ToRetrospectiveConfigurationOutput() RetrospectiveConfigurationOutput {
	return i.ToRetrospectiveConfigurationOutputWithContext(context.Background())
}

func (i *RetrospectiveConfiguration) ToRetrospectiveConfigurationOutputWithContext(ctx context.Context) RetrospectiveConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetrospectiveConfigurationOutput)
}

// RetrospectiveConfigurationArrayInput is an input type that accepts RetrospectiveConfigurationArray and RetrospectiveConfigurationArrayOutput values.
// You can construct a concrete instance of `RetrospectiveConfigurationArrayInput` via:
//
//	RetrospectiveConfigurationArray{ RetrospectiveConfigurationArgs{...} }
type RetrospectiveConfigurationArrayInput interface {
	pulumi.Input

	ToRetrospectiveConfigurationArrayOutput() RetrospectiveConfigurationArrayOutput
	ToRetrospectiveConfigurationArrayOutputWithContext(context.Context) RetrospectiveConfigurationArrayOutput
}

type RetrospectiveConfigurationArray []RetrospectiveConfigurationInput

func (RetrospectiveConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RetrospectiveConfiguration)(nil)).Elem()
}

func (i RetrospectiveConfigurationArray) ToRetrospectiveConfigurationArrayOutput() RetrospectiveConfigurationArrayOutput {
	return i.ToRetrospectiveConfigurationArrayOutputWithContext(context.Background())
}

func (i RetrospectiveConfigurationArray) ToRetrospectiveConfigurationArrayOutputWithContext(ctx context.Context) RetrospectiveConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetrospectiveConfigurationArrayOutput)
}

// RetrospectiveConfigurationMapInput is an input type that accepts RetrospectiveConfigurationMap and RetrospectiveConfigurationMapOutput values.
// You can construct a concrete instance of `RetrospectiveConfigurationMapInput` via:
//
//	RetrospectiveConfigurationMap{ "key": RetrospectiveConfigurationArgs{...} }
type RetrospectiveConfigurationMapInput interface {
	pulumi.Input

	ToRetrospectiveConfigurationMapOutput() RetrospectiveConfigurationMapOutput
	ToRetrospectiveConfigurationMapOutputWithContext(context.Context) RetrospectiveConfigurationMapOutput
}

type RetrospectiveConfigurationMap map[string]RetrospectiveConfigurationInput

func (RetrospectiveConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RetrospectiveConfiguration)(nil)).Elem()
}

func (i RetrospectiveConfigurationMap) ToRetrospectiveConfigurationMapOutput() RetrospectiveConfigurationMapOutput {
	return i.ToRetrospectiveConfigurationMapOutputWithContext(context.Background())
}

func (i RetrospectiveConfigurationMap) ToRetrospectiveConfigurationMapOutputWithContext(ctx context.Context) RetrospectiveConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetrospectiveConfigurationMapOutput)
}

type RetrospectiveConfigurationOutput struct{ *pulumi.OutputState }

func (RetrospectiveConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetrospectiveConfiguration)(nil)).Elem()
}

func (o RetrospectiveConfigurationOutput) ToRetrospectiveConfigurationOutput() RetrospectiveConfigurationOutput {
	return o
}

func (o RetrospectiveConfigurationOutput) ToRetrospectiveConfigurationOutputWithContext(ctx context.Context) RetrospectiveConfigurationOutput {
	return o
}

// Teams associated with the retrospective configuration.
func (o RetrospectiveConfigurationOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RetrospectiveConfiguration) pulumi.StringArrayOutput { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// Incident types associated with the retrospective configuration.
func (o RetrospectiveConfigurationOutput) IncidentTypeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RetrospectiveConfiguration) pulumi.StringArrayOutput { return v.IncidentTypeIds }).(pulumi.StringArrayOutput)
}

// The kind of the retrospective configuration.
func (o RetrospectiveConfigurationOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *RetrospectiveConfiguration) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Severities associated with the retrospective configuration.
func (o RetrospectiveConfigurationOutput) SeverityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *RetrospectiveConfiguration) pulumi.StringArrayOutput { return v.SeverityIds }).(pulumi.StringArrayOutput)
}

type RetrospectiveConfigurationArrayOutput struct{ *pulumi.OutputState }

func (RetrospectiveConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RetrospectiveConfiguration)(nil)).Elem()
}

func (o RetrospectiveConfigurationArrayOutput) ToRetrospectiveConfigurationArrayOutput() RetrospectiveConfigurationArrayOutput {
	return o
}

func (o RetrospectiveConfigurationArrayOutput) ToRetrospectiveConfigurationArrayOutputWithContext(ctx context.Context) RetrospectiveConfigurationArrayOutput {
	return o
}

func (o RetrospectiveConfigurationArrayOutput) Index(i pulumi.IntInput) RetrospectiveConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RetrospectiveConfiguration {
		return vs[0].([]*RetrospectiveConfiguration)[vs[1].(int)]
	}).(RetrospectiveConfigurationOutput)
}

type RetrospectiveConfigurationMapOutput struct{ *pulumi.OutputState }

func (RetrospectiveConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RetrospectiveConfiguration)(nil)).Elem()
}

func (o RetrospectiveConfigurationMapOutput) ToRetrospectiveConfigurationMapOutput() RetrospectiveConfigurationMapOutput {
	return o
}

func (o RetrospectiveConfigurationMapOutput) ToRetrospectiveConfigurationMapOutputWithContext(ctx context.Context) RetrospectiveConfigurationMapOutput {
	return o
}

func (o RetrospectiveConfigurationMapOutput) MapIndex(k pulumi.StringInput) RetrospectiveConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RetrospectiveConfiguration {
		return vs[0].(map[string]*RetrospectiveConfiguration)[vs[1].(string)]
	}).(RetrospectiveConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RetrospectiveConfigurationInput)(nil)).Elem(), &RetrospectiveConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetrospectiveConfigurationArrayInput)(nil)).Elem(), RetrospectiveConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetrospectiveConfigurationMapInput)(nil)).Elem(), RetrospectiveConfigurationMap{})
	pulumi.RegisterOutputType(RetrospectiveConfigurationOutput{})
	pulumi.RegisterOutputType(RetrospectiveConfigurationArrayOutput{})
	pulumi.RegisterOutputType(RetrospectiveConfigurationMapOutput{})
}
