// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type Team struct {
	pulumi.CustomResourceState

	// The hex color of the team
	Color pulumi.StringOutput `pulumi:"color"`
	// The description of the team
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the team
	Name pulumi.StringOutput `pulumi:"name"`
	// Emails to attach to the team
	NotifyEmails pulumi.StringArrayOutput `pulumi:"notifyEmails"`
	// The Opsgenie group id associated to this team
	OpsgenieId pulumi.StringOutput `pulumi:"opsgenieId"`
	// The PagerDuty group id associated to this team
	PagerdutyId pulumi.StringOutput `pulumi:"pagerdutyId"`
	// The PagerDuty service id associated to this team
	PagerdutyServiceId pulumi.StringOutput `pulumi:"pagerdutyServiceId"`
	// The PagerTree group id associated to this team
	PagertreeId pulumi.StringOutput `pulumi:"pagertreeId"`
	// Position of the team
	Position pulumi.IntOutput `pulumi:"position"`
	// Slack Aliases associated with this service
	SlackAliases TeamSlackAliasArrayOutput `pulumi:"slackAliases"`
	// Slack Channels associated with this service
	SlackChannels TeamSlackChannelArrayOutput `pulumi:"slackChannels"`
	Slug          pulumi.StringOutput         `pulumi:"slug"`
	// The User ID's members of this team
	UserIds pulumi.IntArrayOutput `pulumi:"userIds"`
	// The VictorOps group id associated to this team
	VictorOpsId pulumi.StringOutput `pulumi:"victorOpsId"`
}

// NewTeam registers a new resource with the given unique name, arguments, and options.
func NewTeam(ctx *pulumi.Context,
	name string, args *TeamArgs, opts ...pulumi.ResourceOption) (*Team, error) {
	if args == nil {
		args = &TeamArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Team
	err := ctx.RegisterResource("rootly:index/team:Team", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetTeam gets an existing Team resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetTeam(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *TeamState, opts ...pulumi.ResourceOption) (*Team, error) {
	var resource Team
	err := ctx.ReadResource("rootly:index/team:Team", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Team resources.
type teamState struct {
	// The hex color of the team
	Color *string `pulumi:"color"`
	// The description of the team
	Description *string `pulumi:"description"`
	// The name of the team
	Name *string `pulumi:"name"`
	// Emails to attach to the team
	NotifyEmails []string `pulumi:"notifyEmails"`
	// The Opsgenie group id associated to this team
	OpsgenieId *string `pulumi:"opsgenieId"`
	// The PagerDuty group id associated to this team
	PagerdutyId *string `pulumi:"pagerdutyId"`
	// The PagerDuty service id associated to this team
	PagerdutyServiceId *string `pulumi:"pagerdutyServiceId"`
	// The PagerTree group id associated to this team
	PagertreeId *string `pulumi:"pagertreeId"`
	// Position of the team
	Position *int `pulumi:"position"`
	// Slack Aliases associated with this service
	SlackAliases []TeamSlackAlias `pulumi:"slackAliases"`
	// Slack Channels associated with this service
	SlackChannels []TeamSlackChannel `pulumi:"slackChannels"`
	Slug          *string            `pulumi:"slug"`
	// The User ID's members of this team
	UserIds []int `pulumi:"userIds"`
	// The VictorOps group id associated to this team
	VictorOpsId *string `pulumi:"victorOpsId"`
}

type TeamState struct {
	// The hex color of the team
	Color pulumi.StringPtrInput
	// The description of the team
	Description pulumi.StringPtrInput
	// The name of the team
	Name pulumi.StringPtrInput
	// Emails to attach to the team
	NotifyEmails pulumi.StringArrayInput
	// The Opsgenie group id associated to this team
	OpsgenieId pulumi.StringPtrInput
	// The PagerDuty group id associated to this team
	PagerdutyId pulumi.StringPtrInput
	// The PagerDuty service id associated to this team
	PagerdutyServiceId pulumi.StringPtrInput
	// The PagerTree group id associated to this team
	PagertreeId pulumi.StringPtrInput
	// Position of the team
	Position pulumi.IntPtrInput
	// Slack Aliases associated with this service
	SlackAliases TeamSlackAliasArrayInput
	// Slack Channels associated with this service
	SlackChannels TeamSlackChannelArrayInput
	Slug          pulumi.StringPtrInput
	// The User ID's members of this team
	UserIds pulumi.IntArrayInput
	// The VictorOps group id associated to this team
	VictorOpsId pulumi.StringPtrInput
}

func (TeamState) ElementType() reflect.Type {
	return reflect.TypeOf((*teamState)(nil)).Elem()
}

type teamArgs struct {
	// The hex color of the team
	Color *string `pulumi:"color"`
	// The description of the team
	Description *string `pulumi:"description"`
	// The name of the team
	Name *string `pulumi:"name"`
	// Emails to attach to the team
	NotifyEmails []string `pulumi:"notifyEmails"`
	// The Opsgenie group id associated to this team
	OpsgenieId *string `pulumi:"opsgenieId"`
	// The PagerDuty group id associated to this team
	PagerdutyId *string `pulumi:"pagerdutyId"`
	// The PagerDuty service id associated to this team
	PagerdutyServiceId *string `pulumi:"pagerdutyServiceId"`
	// The PagerTree group id associated to this team
	PagertreeId *string `pulumi:"pagertreeId"`
	// Position of the team
	Position *int `pulumi:"position"`
	// Slack Aliases associated with this service
	SlackAliases []TeamSlackAlias `pulumi:"slackAliases"`
	// Slack Channels associated with this service
	SlackChannels []TeamSlackChannel `pulumi:"slackChannels"`
	Slug          *string            `pulumi:"slug"`
	// The User ID's members of this team
	UserIds []int `pulumi:"userIds"`
	// The VictorOps group id associated to this team
	VictorOpsId *string `pulumi:"victorOpsId"`
}

// The set of arguments for constructing a Team resource.
type TeamArgs struct {
	// The hex color of the team
	Color pulumi.StringPtrInput
	// The description of the team
	Description pulumi.StringPtrInput
	// The name of the team
	Name pulumi.StringPtrInput
	// Emails to attach to the team
	NotifyEmails pulumi.StringArrayInput
	// The Opsgenie group id associated to this team
	OpsgenieId pulumi.StringPtrInput
	// The PagerDuty group id associated to this team
	PagerdutyId pulumi.StringPtrInput
	// The PagerDuty service id associated to this team
	PagerdutyServiceId pulumi.StringPtrInput
	// The PagerTree group id associated to this team
	PagertreeId pulumi.StringPtrInput
	// Position of the team
	Position pulumi.IntPtrInput
	// Slack Aliases associated with this service
	SlackAliases TeamSlackAliasArrayInput
	// Slack Channels associated with this service
	SlackChannels TeamSlackChannelArrayInput
	Slug          pulumi.StringPtrInput
	// The User ID's members of this team
	UserIds pulumi.IntArrayInput
	// The VictorOps group id associated to this team
	VictorOpsId pulumi.StringPtrInput
}

func (TeamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*teamArgs)(nil)).Elem()
}

type TeamInput interface {
	pulumi.Input

	ToTeamOutput() TeamOutput
	ToTeamOutputWithContext(ctx context.Context) TeamOutput
}

func (*Team) ElementType() reflect.Type {
	return reflect.TypeOf((**Team)(nil)).Elem()
}

func (i *Team) ToTeamOutput() TeamOutput {
	return i.ToTeamOutputWithContext(context.Background())
}

func (i *Team) ToTeamOutputWithContext(ctx context.Context) TeamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamOutput)
}

// TeamArrayInput is an input type that accepts TeamArray and TeamArrayOutput values.
// You can construct a concrete instance of `TeamArrayInput` via:
//
//	TeamArray{ TeamArgs{...} }
type TeamArrayInput interface {
	pulumi.Input

	ToTeamArrayOutput() TeamArrayOutput
	ToTeamArrayOutputWithContext(context.Context) TeamArrayOutput
}

type TeamArray []TeamInput

func (TeamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Team)(nil)).Elem()
}

func (i TeamArray) ToTeamArrayOutput() TeamArrayOutput {
	return i.ToTeamArrayOutputWithContext(context.Background())
}

func (i TeamArray) ToTeamArrayOutputWithContext(ctx context.Context) TeamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamArrayOutput)
}

// TeamMapInput is an input type that accepts TeamMap and TeamMapOutput values.
// You can construct a concrete instance of `TeamMapInput` via:
//
//	TeamMap{ "key": TeamArgs{...} }
type TeamMapInput interface {
	pulumi.Input

	ToTeamMapOutput() TeamMapOutput
	ToTeamMapOutputWithContext(context.Context) TeamMapOutput
}

type TeamMap map[string]TeamInput

func (TeamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Team)(nil)).Elem()
}

func (i TeamMap) ToTeamMapOutput() TeamMapOutput {
	return i.ToTeamMapOutputWithContext(context.Background())
}

func (i TeamMap) ToTeamMapOutputWithContext(ctx context.Context) TeamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(TeamMapOutput)
}

type TeamOutput struct{ *pulumi.OutputState }

func (TeamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Team)(nil)).Elem()
}

func (o TeamOutput) ToTeamOutput() TeamOutput {
	return o
}

func (o TeamOutput) ToTeamOutputWithContext(ctx context.Context) TeamOutput {
	return o
}

// The hex color of the team
func (o TeamOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.Color }).(pulumi.StringOutput)
}

// The description of the team
func (o TeamOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the team
func (o TeamOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Emails to attach to the team
func (o TeamOutput) NotifyEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Team) pulumi.StringArrayOutput { return v.NotifyEmails }).(pulumi.StringArrayOutput)
}

// The Opsgenie group id associated to this team
func (o TeamOutput) OpsgenieId() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.OpsgenieId }).(pulumi.StringOutput)
}

// The PagerDuty group id associated to this team
func (o TeamOutput) PagerdutyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.PagerdutyId }).(pulumi.StringOutput)
}

// The PagerDuty service id associated to this team
func (o TeamOutput) PagerdutyServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.PagerdutyServiceId }).(pulumi.StringOutput)
}

// The PagerTree group id associated to this team
func (o TeamOutput) PagertreeId() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.PagertreeId }).(pulumi.StringOutput)
}

// Position of the team
func (o TeamOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *Team) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Slack Aliases associated with this service
func (o TeamOutput) SlackAliases() TeamSlackAliasArrayOutput {
	return o.ApplyT(func(v *Team) TeamSlackAliasArrayOutput { return v.SlackAliases }).(TeamSlackAliasArrayOutput)
}

// Slack Channels associated with this service
func (o TeamOutput) SlackChannels() TeamSlackChannelArrayOutput {
	return o.ApplyT(func(v *Team) TeamSlackChannelArrayOutput { return v.SlackChannels }).(TeamSlackChannelArrayOutput)
}

func (o TeamOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// The User ID's members of this team
func (o TeamOutput) UserIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Team) pulumi.IntArrayOutput { return v.UserIds }).(pulumi.IntArrayOutput)
}

// The VictorOps group id associated to this team
func (o TeamOutput) VictorOpsId() pulumi.StringOutput {
	return o.ApplyT(func(v *Team) pulumi.StringOutput { return v.VictorOpsId }).(pulumi.StringOutput)
}

type TeamArrayOutput struct{ *pulumi.OutputState }

func (TeamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Team)(nil)).Elem()
}

func (o TeamArrayOutput) ToTeamArrayOutput() TeamArrayOutput {
	return o
}

func (o TeamArrayOutput) ToTeamArrayOutputWithContext(ctx context.Context) TeamArrayOutput {
	return o
}

func (o TeamArrayOutput) Index(i pulumi.IntInput) TeamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Team {
		return vs[0].([]*Team)[vs[1].(int)]
	}).(TeamOutput)
}

type TeamMapOutput struct{ *pulumi.OutputState }

func (TeamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Team)(nil)).Elem()
}

func (o TeamMapOutput) ToTeamMapOutput() TeamMapOutput {
	return o
}

func (o TeamMapOutput) ToTeamMapOutputWithContext(ctx context.Context) TeamMapOutput {
	return o
}

func (o TeamMapOutput) MapIndex(k pulumi.StringInput) TeamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Team {
		return vs[0].(map[string]*Team)[vs[1].(string)]
	}).(TeamOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*TeamInput)(nil)).Elem(), &Team{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamArrayInput)(nil)).Elem(), TeamArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*TeamMapInput)(nil)).Elem(), TeamMap{})
	pulumi.RegisterOutputType(TeamOutput{})
	pulumi.RegisterOutputType(TeamArrayOutput{})
	pulumi.RegisterOutputType(TeamMapOutput{})
}
