// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type FormSetCondition struct {
	pulumi.CustomResourceState

	// The condition comparison.. Value must be one of `equal`.
	Comparison pulumi.StringPtrOutput `pulumi:"comparison"`
	// The form field this condition applies.
	FormFieldId pulumi.StringOutput `pulumi:"formFieldId"`
	// The form set this condition applies.
	FormSetId pulumi.StringOutput `pulumi:"formSetId"`
	// The values for comparison.
	Values pulumi.StringArrayOutput `pulumi:"values"`
}

// NewFormSetCondition registers a new resource with the given unique name, arguments, and options.
func NewFormSetCondition(ctx *pulumi.Context,
	name string, args *FormSetConditionArgs, opts ...pulumi.ResourceOption) (*FormSetCondition, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FormFieldId == nil {
		return nil, errors.New("invalid value for required argument 'FormFieldId'")
	}
	if args.Values == nil {
		return nil, errors.New("invalid value for required argument 'Values'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FormSetCondition
	err := ctx.RegisterResource("rootly:index/formSetCondition:FormSetCondition", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFormSetCondition gets an existing FormSetCondition resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFormSetCondition(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FormSetConditionState, opts ...pulumi.ResourceOption) (*FormSetCondition, error) {
	var resource FormSetCondition
	err := ctx.ReadResource("rootly:index/formSetCondition:FormSetCondition", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FormSetCondition resources.
type formSetConditionState struct {
	// The condition comparison.. Value must be one of `equal`.
	Comparison *string `pulumi:"comparison"`
	// The form field this condition applies.
	FormFieldId *string `pulumi:"formFieldId"`
	// The form set this condition applies.
	FormSetId *string `pulumi:"formSetId"`
	// The values for comparison.
	Values []string `pulumi:"values"`
}

type FormSetConditionState struct {
	// The condition comparison.. Value must be one of `equal`.
	Comparison pulumi.StringPtrInput
	// The form field this condition applies.
	FormFieldId pulumi.StringPtrInput
	// The form set this condition applies.
	FormSetId pulumi.StringPtrInput
	// The values for comparison.
	Values pulumi.StringArrayInput
}

func (FormSetConditionState) ElementType() reflect.Type {
	return reflect.TypeOf((*formSetConditionState)(nil)).Elem()
}

type formSetConditionArgs struct {
	// The condition comparison.. Value must be one of `equal`.
	Comparison *string `pulumi:"comparison"`
	// The form field this condition applies.
	FormFieldId string `pulumi:"formFieldId"`
	// The form set this condition applies.
	FormSetId *string `pulumi:"formSetId"`
	// The values for comparison.
	Values []string `pulumi:"values"`
}

// The set of arguments for constructing a FormSetCondition resource.
type FormSetConditionArgs struct {
	// The condition comparison.. Value must be one of `equal`.
	Comparison pulumi.StringPtrInput
	// The form field this condition applies.
	FormFieldId pulumi.StringInput
	// The form set this condition applies.
	FormSetId pulumi.StringPtrInput
	// The values for comparison.
	Values pulumi.StringArrayInput
}

func (FormSetConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*formSetConditionArgs)(nil)).Elem()
}

type FormSetConditionInput interface {
	pulumi.Input

	ToFormSetConditionOutput() FormSetConditionOutput
	ToFormSetConditionOutputWithContext(ctx context.Context) FormSetConditionOutput
}

func (*FormSetCondition) ElementType() reflect.Type {
	return reflect.TypeOf((**FormSetCondition)(nil)).Elem()
}

func (i *FormSetCondition) ToFormSetConditionOutput() FormSetConditionOutput {
	return i.ToFormSetConditionOutputWithContext(context.Background())
}

func (i *FormSetCondition) ToFormSetConditionOutputWithContext(ctx context.Context) FormSetConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormSetConditionOutput)
}

// FormSetConditionArrayInput is an input type that accepts FormSetConditionArray and FormSetConditionArrayOutput values.
// You can construct a concrete instance of `FormSetConditionArrayInput` via:
//
//	FormSetConditionArray{ FormSetConditionArgs{...} }
type FormSetConditionArrayInput interface {
	pulumi.Input

	ToFormSetConditionArrayOutput() FormSetConditionArrayOutput
	ToFormSetConditionArrayOutputWithContext(context.Context) FormSetConditionArrayOutput
}

type FormSetConditionArray []FormSetConditionInput

func (FormSetConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FormSetCondition)(nil)).Elem()
}

func (i FormSetConditionArray) ToFormSetConditionArrayOutput() FormSetConditionArrayOutput {
	return i.ToFormSetConditionArrayOutputWithContext(context.Background())
}

func (i FormSetConditionArray) ToFormSetConditionArrayOutputWithContext(ctx context.Context) FormSetConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormSetConditionArrayOutput)
}

// FormSetConditionMapInput is an input type that accepts FormSetConditionMap and FormSetConditionMapOutput values.
// You can construct a concrete instance of `FormSetConditionMapInput` via:
//
//	FormSetConditionMap{ "key": FormSetConditionArgs{...} }
type FormSetConditionMapInput interface {
	pulumi.Input

	ToFormSetConditionMapOutput() FormSetConditionMapOutput
	ToFormSetConditionMapOutputWithContext(context.Context) FormSetConditionMapOutput
}

type FormSetConditionMap map[string]FormSetConditionInput

func (FormSetConditionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FormSetCondition)(nil)).Elem()
}

func (i FormSetConditionMap) ToFormSetConditionMapOutput() FormSetConditionMapOutput {
	return i.ToFormSetConditionMapOutputWithContext(context.Background())
}

func (i FormSetConditionMap) ToFormSetConditionMapOutputWithContext(ctx context.Context) FormSetConditionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormSetConditionMapOutput)
}

type FormSetConditionOutput struct{ *pulumi.OutputState }

func (FormSetConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormSetCondition)(nil)).Elem()
}

func (o FormSetConditionOutput) ToFormSetConditionOutput() FormSetConditionOutput {
	return o
}

func (o FormSetConditionOutput) ToFormSetConditionOutputWithContext(ctx context.Context) FormSetConditionOutput {
	return o
}

// The condition comparison.. Value must be one of `equal`.
func (o FormSetConditionOutput) Comparison() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormSetCondition) pulumi.StringPtrOutput { return v.Comparison }).(pulumi.StringPtrOutput)
}

// The form field this condition applies.
func (o FormSetConditionOutput) FormFieldId() pulumi.StringOutput {
	return o.ApplyT(func(v *FormSetCondition) pulumi.StringOutput { return v.FormFieldId }).(pulumi.StringOutput)
}

// The form set this condition applies.
func (o FormSetConditionOutput) FormSetId() pulumi.StringOutput {
	return o.ApplyT(func(v *FormSetCondition) pulumi.StringOutput { return v.FormSetId }).(pulumi.StringOutput)
}

// The values for comparison.
func (o FormSetConditionOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FormSetCondition) pulumi.StringArrayOutput { return v.Values }).(pulumi.StringArrayOutput)
}

type FormSetConditionArrayOutput struct{ *pulumi.OutputState }

func (FormSetConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FormSetCondition)(nil)).Elem()
}

func (o FormSetConditionArrayOutput) ToFormSetConditionArrayOutput() FormSetConditionArrayOutput {
	return o
}

func (o FormSetConditionArrayOutput) ToFormSetConditionArrayOutputWithContext(ctx context.Context) FormSetConditionArrayOutput {
	return o
}

func (o FormSetConditionArrayOutput) Index(i pulumi.IntInput) FormSetConditionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FormSetCondition {
		return vs[0].([]*FormSetCondition)[vs[1].(int)]
	}).(FormSetConditionOutput)
}

type FormSetConditionMapOutput struct{ *pulumi.OutputState }

func (FormSetConditionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FormSetCondition)(nil)).Elem()
}

func (o FormSetConditionMapOutput) ToFormSetConditionMapOutput() FormSetConditionMapOutput {
	return o
}

func (o FormSetConditionMapOutput) ToFormSetConditionMapOutputWithContext(ctx context.Context) FormSetConditionMapOutput {
	return o
}

func (o FormSetConditionMapOutput) MapIndex(k pulumi.StringInput) FormSetConditionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FormSetCondition {
		return vs[0].(map[string]*FormSetCondition)[vs[1].(string)]
	}).(FormSetConditionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FormSetConditionInput)(nil)).Elem(), &FormSetCondition{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormSetConditionArrayInput)(nil)).Elem(), FormSetConditionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormSetConditionMapInput)(nil)).Elem(), FormSetConditionMap{})
	pulumi.RegisterOutputType(FormSetConditionOutput{})
	pulumi.RegisterOutputType(FormSetConditionArrayOutput{})
	pulumi.RegisterOutputType(FormSetConditionMapOutput{})
}
