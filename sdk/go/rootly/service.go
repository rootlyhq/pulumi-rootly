// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// ## Example Usage
type Service struct {
	pulumi.CustomResourceState

	// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
	BackstageId pulumi.StringOutput `pulumi:"backstageId"`
	// The hex color of the service
	Color pulumi.StringOutput `pulumi:"color"`
	// The description of the service
	Description pulumi.StringOutput `pulumi:"description"`
	// Environments associated with this service
	EnvironmentIds pulumi.StringArrayOutput `pulumi:"environmentIds"`
	// The GitHub repository branch associated to this service. eg: main
	GithubRepositoryBranch pulumi.StringOutput `pulumi:"githubRepositoryBranch"`
	// The GitHub repository name associated to this service. eg: rootlyhq/my-service
	GithubRepositoryName pulumi.StringOutput `pulumi:"githubRepositoryName"`
	// The Gitlab repository branch associated to this service. eg: main
	GitlabRepositoryBranch pulumi.StringOutput `pulumi:"gitlabRepositoryBranch"`
	// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
	GitlabRepositoryName pulumi.StringOutput `pulumi:"gitlabRepositoryName"`
	// The name of the service
	Name pulumi.StringOutput `pulumi:"name"`
	// Emails attached to the service
	NotifyEmails pulumi.StringArrayOutput `pulumi:"notifyEmails"`
	// The Opsgenie service id associated to this service
	OpsgenieId pulumi.StringOutput `pulumi:"opsgenieId"`
	// Owner Teams associated with this service
	OwnersGroupIds pulumi.StringArrayOutput `pulumi:"ownersGroupIds"`
	// Owner Users associated with this service
	OwnersUserIds pulumi.IntArrayOutput `pulumi:"ownersUserIds"`
	// The PagerDuty service id associated to this service
	PagerdutyId pulumi.StringOutput `pulumi:"pagerdutyId"`
	// Position of the service
	Position pulumi.IntOutput `pulumi:"position"`
	// The public description of the service
	PublicDescription pulumi.StringOutput `pulumi:"publicDescription"`
	// Services dependent on this service
	ServiceIds pulumi.StringArrayOutput `pulumi:"serviceIds"`
	// Slack Aliases associated with this service
	SlackAliases ServiceSlackAliasArrayOutput `pulumi:"slackAliases"`
	// Slack Channels associated with this service
	SlackChannels ServiceSlackChannelArrayOutput `pulumi:"slackChannels"`
	// The slug of the service
	Slug pulumi.StringOutput `pulumi:"slug"`
}

// NewService registers a new resource with the given unique name, arguments, and options.
func NewService(ctx *pulumi.Context,
	name string, args *ServiceArgs, opts ...pulumi.ResourceOption) (*Service, error) {
	if args == nil {
		args = &ServiceArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Service
	err := ctx.RegisterResource("rootly:index/service:Service", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetService gets an existing Service resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceState, opts ...pulumi.ResourceOption) (*Service, error) {
	var resource Service
	err := ctx.ReadResource("rootly:index/service:Service", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Service resources.
type serviceState struct {
	// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
	BackstageId *string `pulumi:"backstageId"`
	// The hex color of the service
	Color *string `pulumi:"color"`
	// The description of the service
	Description *string `pulumi:"description"`
	// Environments associated with this service
	EnvironmentIds []string `pulumi:"environmentIds"`
	// The GitHub repository branch associated to this service. eg: main
	GithubRepositoryBranch *string `pulumi:"githubRepositoryBranch"`
	// The GitHub repository name associated to this service. eg: rootlyhq/my-service
	GithubRepositoryName *string `pulumi:"githubRepositoryName"`
	// The Gitlab repository branch associated to this service. eg: main
	GitlabRepositoryBranch *string `pulumi:"gitlabRepositoryBranch"`
	// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
	GitlabRepositoryName *string `pulumi:"gitlabRepositoryName"`
	// The name of the service
	Name *string `pulumi:"name"`
	// Emails attached to the service
	NotifyEmails []string `pulumi:"notifyEmails"`
	// The Opsgenie service id associated to this service
	OpsgenieId *string `pulumi:"opsgenieId"`
	// Owner Teams associated with this service
	OwnersGroupIds []string `pulumi:"ownersGroupIds"`
	// Owner Users associated with this service
	OwnersUserIds []int `pulumi:"ownersUserIds"`
	// The PagerDuty service id associated to this service
	PagerdutyId *string `pulumi:"pagerdutyId"`
	// Position of the service
	Position *int `pulumi:"position"`
	// The public description of the service
	PublicDescription *string `pulumi:"publicDescription"`
	// Services dependent on this service
	ServiceIds []string `pulumi:"serviceIds"`
	// Slack Aliases associated with this service
	SlackAliases []ServiceSlackAlias `pulumi:"slackAliases"`
	// Slack Channels associated with this service
	SlackChannels []ServiceSlackChannel `pulumi:"slackChannels"`
	// The slug of the service
	Slug *string `pulumi:"slug"`
}

type ServiceState struct {
	// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
	BackstageId pulumi.StringPtrInput
	// The hex color of the service
	Color pulumi.StringPtrInput
	// The description of the service
	Description pulumi.StringPtrInput
	// Environments associated with this service
	EnvironmentIds pulumi.StringArrayInput
	// The GitHub repository branch associated to this service. eg: main
	GithubRepositoryBranch pulumi.StringPtrInput
	// The GitHub repository name associated to this service. eg: rootlyhq/my-service
	GithubRepositoryName pulumi.StringPtrInput
	// The Gitlab repository branch associated to this service. eg: main
	GitlabRepositoryBranch pulumi.StringPtrInput
	// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
	GitlabRepositoryName pulumi.StringPtrInput
	// The name of the service
	Name pulumi.StringPtrInput
	// Emails attached to the service
	NotifyEmails pulumi.StringArrayInput
	// The Opsgenie service id associated to this service
	OpsgenieId pulumi.StringPtrInput
	// Owner Teams associated with this service
	OwnersGroupIds pulumi.StringArrayInput
	// Owner Users associated with this service
	OwnersUserIds pulumi.IntArrayInput
	// The PagerDuty service id associated to this service
	PagerdutyId pulumi.StringPtrInput
	// Position of the service
	Position pulumi.IntPtrInput
	// The public description of the service
	PublicDescription pulumi.StringPtrInput
	// Services dependent on this service
	ServiceIds pulumi.StringArrayInput
	// Slack Aliases associated with this service
	SlackAliases ServiceSlackAliasArrayInput
	// Slack Channels associated with this service
	SlackChannels ServiceSlackChannelArrayInput
	// The slug of the service
	Slug pulumi.StringPtrInput
}

func (ServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceState)(nil)).Elem()
}

type serviceArgs struct {
	// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
	BackstageId *string `pulumi:"backstageId"`
	// The hex color of the service
	Color *string `pulumi:"color"`
	// The description of the service
	Description *string `pulumi:"description"`
	// Environments associated with this service
	EnvironmentIds []string `pulumi:"environmentIds"`
	// The GitHub repository branch associated to this service. eg: main
	GithubRepositoryBranch *string `pulumi:"githubRepositoryBranch"`
	// The GitHub repository name associated to this service. eg: rootlyhq/my-service
	GithubRepositoryName *string `pulumi:"githubRepositoryName"`
	// The Gitlab repository branch associated to this service. eg: main
	GitlabRepositoryBranch *string `pulumi:"gitlabRepositoryBranch"`
	// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
	GitlabRepositoryName *string `pulumi:"gitlabRepositoryName"`
	// The name of the service
	Name *string `pulumi:"name"`
	// Emails attached to the service
	NotifyEmails []string `pulumi:"notifyEmails"`
	// The Opsgenie service id associated to this service
	OpsgenieId *string `pulumi:"opsgenieId"`
	// Owner Teams associated with this service
	OwnersGroupIds []string `pulumi:"ownersGroupIds"`
	// Owner Users associated with this service
	OwnersUserIds []int `pulumi:"ownersUserIds"`
	// The PagerDuty service id associated to this service
	PagerdutyId *string `pulumi:"pagerdutyId"`
	// Position of the service
	Position *int `pulumi:"position"`
	// The public description of the service
	PublicDescription *string `pulumi:"publicDescription"`
	// Services dependent on this service
	ServiceIds []string `pulumi:"serviceIds"`
	// Slack Aliases associated with this service
	SlackAliases []ServiceSlackAlias `pulumi:"slackAliases"`
	// Slack Channels associated with this service
	SlackChannels []ServiceSlackChannel `pulumi:"slackChannels"`
	// The slug of the service
	Slug *string `pulumi:"slug"`
}

// The set of arguments for constructing a Service resource.
type ServiceArgs struct {
	// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
	BackstageId pulumi.StringPtrInput
	// The hex color of the service
	Color pulumi.StringPtrInput
	// The description of the service
	Description pulumi.StringPtrInput
	// Environments associated with this service
	EnvironmentIds pulumi.StringArrayInput
	// The GitHub repository branch associated to this service. eg: main
	GithubRepositoryBranch pulumi.StringPtrInput
	// The GitHub repository name associated to this service. eg: rootlyhq/my-service
	GithubRepositoryName pulumi.StringPtrInput
	// The Gitlab repository branch associated to this service. eg: main
	GitlabRepositoryBranch pulumi.StringPtrInput
	// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
	GitlabRepositoryName pulumi.StringPtrInput
	// The name of the service
	Name pulumi.StringPtrInput
	// Emails attached to the service
	NotifyEmails pulumi.StringArrayInput
	// The Opsgenie service id associated to this service
	OpsgenieId pulumi.StringPtrInput
	// Owner Teams associated with this service
	OwnersGroupIds pulumi.StringArrayInput
	// Owner Users associated with this service
	OwnersUserIds pulumi.IntArrayInput
	// The PagerDuty service id associated to this service
	PagerdutyId pulumi.StringPtrInput
	// Position of the service
	Position pulumi.IntPtrInput
	// The public description of the service
	PublicDescription pulumi.StringPtrInput
	// Services dependent on this service
	ServiceIds pulumi.StringArrayInput
	// Slack Aliases associated with this service
	SlackAliases ServiceSlackAliasArrayInput
	// Slack Channels associated with this service
	SlackChannels ServiceSlackChannelArrayInput
	// The slug of the service
	Slug pulumi.StringPtrInput
}

func (ServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceArgs)(nil)).Elem()
}

type ServiceInput interface {
	pulumi.Input

	ToServiceOutput() ServiceOutput
	ToServiceOutputWithContext(ctx context.Context) ServiceOutput
}

func (*Service) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (i *Service) ToServiceOutput() ServiceOutput {
	return i.ToServiceOutputWithContext(context.Background())
}

func (i *Service) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceOutput)
}

// ServiceArrayInput is an input type that accepts ServiceArray and ServiceArrayOutput values.
// You can construct a concrete instance of `ServiceArrayInput` via:
//
//	ServiceArray{ ServiceArgs{...} }
type ServiceArrayInput interface {
	pulumi.Input

	ToServiceArrayOutput() ServiceArrayOutput
	ToServiceArrayOutputWithContext(context.Context) ServiceArrayOutput
}

type ServiceArray []ServiceInput

func (ServiceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (i ServiceArray) ToServiceArrayOutput() ServiceArrayOutput {
	return i.ToServiceArrayOutputWithContext(context.Background())
}

func (i ServiceArray) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceArrayOutput)
}

// ServiceMapInput is an input type that accepts ServiceMap and ServiceMapOutput values.
// You can construct a concrete instance of `ServiceMapInput` via:
//
//	ServiceMap{ "key": ServiceArgs{...} }
type ServiceMapInput interface {
	pulumi.Input

	ToServiceMapOutput() ServiceMapOutput
	ToServiceMapOutputWithContext(context.Context) ServiceMapOutput
}

type ServiceMap map[string]ServiceInput

func (ServiceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (i ServiceMap) ToServiceMapOutput() ServiceMapOutput {
	return i.ToServiceMapOutputWithContext(context.Background())
}

func (i ServiceMap) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMapOutput)
}

type ServiceOutput struct{ *pulumi.OutputState }

func (ServiceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Service)(nil)).Elem()
}

func (o ServiceOutput) ToServiceOutput() ServiceOutput {
	return o
}

func (o ServiceOutput) ToServiceOutputWithContext(ctx context.Context) ServiceOutput {
	return o
}

// The Backstage entity id associated to this service. eg: :namespace/:kind/:entity_name
func (o ServiceOutput) BackstageId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.BackstageId }).(pulumi.StringOutput)
}

// The hex color of the service
func (o ServiceOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Color }).(pulumi.StringOutput)
}

// The description of the service
func (o ServiceOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Environments associated with this service
func (o ServiceOutput) EnvironmentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.StringArrayOutput { return v.EnvironmentIds }).(pulumi.StringArrayOutput)
}

// The GitHub repository branch associated to this service. eg: main
func (o ServiceOutput) GithubRepositoryBranch() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.GithubRepositoryBranch }).(pulumi.StringOutput)
}

// The GitHub repository name associated to this service. eg: rootlyhq/my-service
func (o ServiceOutput) GithubRepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.GithubRepositoryName }).(pulumi.StringOutput)
}

// The Gitlab repository branch associated to this service. eg: main
func (o ServiceOutput) GitlabRepositoryBranch() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.GitlabRepositoryBranch }).(pulumi.StringOutput)
}

// The Gitlab repository name associated to this service. eg: rootlyhq/my-service
func (o ServiceOutput) GitlabRepositoryName() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.GitlabRepositoryName }).(pulumi.StringOutput)
}

// The name of the service
func (o ServiceOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Emails attached to the service
func (o ServiceOutput) NotifyEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.StringArrayOutput { return v.NotifyEmails }).(pulumi.StringArrayOutput)
}

// The Opsgenie service id associated to this service
func (o ServiceOutput) OpsgenieId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.OpsgenieId }).(pulumi.StringOutput)
}

// Owner Teams associated with this service
func (o ServiceOutput) OwnersGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.StringArrayOutput { return v.OwnersGroupIds }).(pulumi.StringArrayOutput)
}

// Owner Users associated with this service
func (o ServiceOutput) OwnersUserIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.IntArrayOutput { return v.OwnersUserIds }).(pulumi.IntArrayOutput)
}

// The PagerDuty service id associated to this service
func (o ServiceOutput) PagerdutyId() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.PagerdutyId }).(pulumi.StringOutput)
}

// Position of the service
func (o ServiceOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *Service) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// The public description of the service
func (o ServiceOutput) PublicDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.PublicDescription }).(pulumi.StringOutput)
}

// Services dependent on this service
func (o ServiceOutput) ServiceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Service) pulumi.StringArrayOutput { return v.ServiceIds }).(pulumi.StringArrayOutput)
}

// Slack Aliases associated with this service
func (o ServiceOutput) SlackAliases() ServiceSlackAliasArrayOutput {
	return o.ApplyT(func(v *Service) ServiceSlackAliasArrayOutput { return v.SlackAliases }).(ServiceSlackAliasArrayOutput)
}

// Slack Channels associated with this service
func (o ServiceOutput) SlackChannels() ServiceSlackChannelArrayOutput {
	return o.ApplyT(func(v *Service) ServiceSlackChannelArrayOutput { return v.SlackChannels }).(ServiceSlackChannelArrayOutput)
}

// The slug of the service
func (o ServiceOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Service) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type ServiceArrayOutput struct{ *pulumi.OutputState }

func (ServiceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Service)(nil)).Elem()
}

func (o ServiceArrayOutput) ToServiceArrayOutput() ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) ToServiceArrayOutputWithContext(ctx context.Context) ServiceArrayOutput {
	return o
}

func (o ServiceArrayOutput) Index(i pulumi.IntInput) ServiceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Service {
		return vs[0].([]*Service)[vs[1].(int)]
	}).(ServiceOutput)
}

type ServiceMapOutput struct{ *pulumi.OutputState }

func (ServiceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Service)(nil)).Elem()
}

func (o ServiceMapOutput) ToServiceMapOutput() ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) ToServiceMapOutputWithContext(ctx context.Context) ServiceMapOutput {
	return o
}

func (o ServiceMapOutput) MapIndex(k pulumi.StringInput) ServiceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Service {
		return vs[0].(map[string]*Service)[vs[1].(string)]
	}).(ServiceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceInput)(nil)).Elem(), &Service{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceArrayInput)(nil)).Elem(), ServiceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMapInput)(nil)).Elem(), ServiceMap{})
	pulumi.RegisterOutputType(ServiceOutput{})
	pulumi.RegisterOutputType(ServiceArrayOutput{})
	pulumi.RegisterOutputType(ServiceMapOutput{})
}
