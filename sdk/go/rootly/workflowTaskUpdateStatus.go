// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow updateStatus task.
//
// ## Example Usage
type WorkflowTaskUpdateStatus struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateStatusTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskUpdateStatus registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskUpdateStatus(ctx *pulumi.Context,
	name string, args *WorkflowTaskUpdateStatusArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateStatus, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskUpdateStatus
	err := ctx.RegisterResource("rootly:index/workflowTaskUpdateStatus:WorkflowTaskUpdateStatus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskUpdateStatus gets an existing WorkflowTaskUpdateStatus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskUpdateStatus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskUpdateStatusState, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateStatus, error) {
	var resource WorkflowTaskUpdateStatus
	err := ctx.ReadResource("rootly:index/workflowTaskUpdateStatus:WorkflowTaskUpdateStatus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskUpdateStatus resources.
type workflowTaskUpdateStatusState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskUpdateStatusTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskUpdateStatusState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateStatusTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskUpdateStatusState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateStatusState)(nil)).Elem()
}

type workflowTaskUpdateStatusArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateStatusTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskUpdateStatus resource.
type WorkflowTaskUpdateStatusArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateStatusTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskUpdateStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateStatusArgs)(nil)).Elem()
}

type WorkflowTaskUpdateStatusInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateStatusOutput() WorkflowTaskUpdateStatusOutput
	ToWorkflowTaskUpdateStatusOutputWithContext(ctx context.Context) WorkflowTaskUpdateStatusOutput
}

func (*WorkflowTaskUpdateStatus) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateStatus)(nil)).Elem()
}

func (i *WorkflowTaskUpdateStatus) ToWorkflowTaskUpdateStatusOutput() WorkflowTaskUpdateStatusOutput {
	return i.ToWorkflowTaskUpdateStatusOutputWithContext(context.Background())
}

func (i *WorkflowTaskUpdateStatus) ToWorkflowTaskUpdateStatusOutputWithContext(ctx context.Context) WorkflowTaskUpdateStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateStatusOutput)
}

// WorkflowTaskUpdateStatusArrayInput is an input type that accepts WorkflowTaskUpdateStatusArray and WorkflowTaskUpdateStatusArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateStatusArrayInput` via:
//
//	WorkflowTaskUpdateStatusArray{ WorkflowTaskUpdateStatusArgs{...} }
type WorkflowTaskUpdateStatusArrayInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateStatusArrayOutput() WorkflowTaskUpdateStatusArrayOutput
	ToWorkflowTaskUpdateStatusArrayOutputWithContext(context.Context) WorkflowTaskUpdateStatusArrayOutput
}

type WorkflowTaskUpdateStatusArray []WorkflowTaskUpdateStatusInput

func (WorkflowTaskUpdateStatusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateStatus)(nil)).Elem()
}

func (i WorkflowTaskUpdateStatusArray) ToWorkflowTaskUpdateStatusArrayOutput() WorkflowTaskUpdateStatusArrayOutput {
	return i.ToWorkflowTaskUpdateStatusArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateStatusArray) ToWorkflowTaskUpdateStatusArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateStatusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateStatusArrayOutput)
}

// WorkflowTaskUpdateStatusMapInput is an input type that accepts WorkflowTaskUpdateStatusMap and WorkflowTaskUpdateStatusMapOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateStatusMapInput` via:
//
//	WorkflowTaskUpdateStatusMap{ "key": WorkflowTaskUpdateStatusArgs{...} }
type WorkflowTaskUpdateStatusMapInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateStatusMapOutput() WorkflowTaskUpdateStatusMapOutput
	ToWorkflowTaskUpdateStatusMapOutputWithContext(context.Context) WorkflowTaskUpdateStatusMapOutput
}

type WorkflowTaskUpdateStatusMap map[string]WorkflowTaskUpdateStatusInput

func (WorkflowTaskUpdateStatusMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateStatus)(nil)).Elem()
}

func (i WorkflowTaskUpdateStatusMap) ToWorkflowTaskUpdateStatusMapOutput() WorkflowTaskUpdateStatusMapOutput {
	return i.ToWorkflowTaskUpdateStatusMapOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateStatusMap) ToWorkflowTaskUpdateStatusMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateStatusMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateStatusMapOutput)
}

type WorkflowTaskUpdateStatusOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateStatus)(nil)).Elem()
}

func (o WorkflowTaskUpdateStatusOutput) ToWorkflowTaskUpdateStatusOutput() WorkflowTaskUpdateStatusOutput {
	return o
}

func (o WorkflowTaskUpdateStatusOutput) ToWorkflowTaskUpdateStatusOutputWithContext(ctx context.Context) WorkflowTaskUpdateStatusOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskUpdateStatusOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateStatus) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskUpdateStatusOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateStatus) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskUpdateStatusOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateStatus) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskUpdateStatusOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateStatus) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskUpdateStatusOutput) TaskParams() WorkflowTaskUpdateStatusTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateStatus) WorkflowTaskUpdateStatusTaskParamsOutput { return v.TaskParams }).(WorkflowTaskUpdateStatusTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskUpdateStatusOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateStatus) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskUpdateStatusArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateStatusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateStatus)(nil)).Elem()
}

func (o WorkflowTaskUpdateStatusArrayOutput) ToWorkflowTaskUpdateStatusArrayOutput() WorkflowTaskUpdateStatusArrayOutput {
	return o
}

func (o WorkflowTaskUpdateStatusArrayOutput) ToWorkflowTaskUpdateStatusArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateStatusArrayOutput {
	return o
}

func (o WorkflowTaskUpdateStatusArrayOutput) Index(i pulumi.IntInput) WorkflowTaskUpdateStatusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateStatus {
		return vs[0].([]*WorkflowTaskUpdateStatus)[vs[1].(int)]
	}).(WorkflowTaskUpdateStatusOutput)
}

type WorkflowTaskUpdateStatusMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateStatusMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateStatus)(nil)).Elem()
}

func (o WorkflowTaskUpdateStatusMapOutput) ToWorkflowTaskUpdateStatusMapOutput() WorkflowTaskUpdateStatusMapOutput {
	return o
}

func (o WorkflowTaskUpdateStatusMapOutput) ToWorkflowTaskUpdateStatusMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateStatusMapOutput {
	return o
}

func (o WorkflowTaskUpdateStatusMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskUpdateStatusOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateStatus {
		return vs[0].(map[string]*WorkflowTaskUpdateStatus)[vs[1].(string)]
	}).(WorkflowTaskUpdateStatusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateStatusInput)(nil)).Elem(), &WorkflowTaskUpdateStatus{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateStatusArrayInput)(nil)).Elem(), WorkflowTaskUpdateStatusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateStatusMapInput)(nil)).Elem(), WorkflowTaskUpdateStatusMap{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateStatusOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateStatusArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateStatusMapOutput{})
}
