// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow getGitlabCommits task.
type WorkflowTaskGetGitlabCommits struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskGetGitlabCommitsTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskGetGitlabCommits registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskGetGitlabCommits(ctx *pulumi.Context,
	name string, args *WorkflowTaskGetGitlabCommitsArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskGetGitlabCommits, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskGetGitlabCommits
	err := ctx.RegisterResource("rootly:index/workflowTaskGetGitlabCommits:WorkflowTaskGetGitlabCommits", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskGetGitlabCommits gets an existing WorkflowTaskGetGitlabCommits resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskGetGitlabCommits(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskGetGitlabCommitsState, opts ...pulumi.ResourceOption) (*WorkflowTaskGetGitlabCommits, error) {
	var resource WorkflowTaskGetGitlabCommits
	err := ctx.ReadResource("rootly:index/workflowTaskGetGitlabCommits:WorkflowTaskGetGitlabCommits", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskGetGitlabCommits resources.
type workflowTaskGetGitlabCommitsState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskGetGitlabCommitsTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskGetGitlabCommitsState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskGetGitlabCommitsTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskGetGitlabCommitsState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskGetGitlabCommitsState)(nil)).Elem()
}

type workflowTaskGetGitlabCommitsArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskGetGitlabCommitsTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskGetGitlabCommits resource.
type WorkflowTaskGetGitlabCommitsArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskGetGitlabCommitsTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskGetGitlabCommitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskGetGitlabCommitsArgs)(nil)).Elem()
}

type WorkflowTaskGetGitlabCommitsInput interface {
	pulumi.Input

	ToWorkflowTaskGetGitlabCommitsOutput() WorkflowTaskGetGitlabCommitsOutput
	ToWorkflowTaskGetGitlabCommitsOutputWithContext(ctx context.Context) WorkflowTaskGetGitlabCommitsOutput
}

func (*WorkflowTaskGetGitlabCommits) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskGetGitlabCommits)(nil)).Elem()
}

func (i *WorkflowTaskGetGitlabCommits) ToWorkflowTaskGetGitlabCommitsOutput() WorkflowTaskGetGitlabCommitsOutput {
	return i.ToWorkflowTaskGetGitlabCommitsOutputWithContext(context.Background())
}

func (i *WorkflowTaskGetGitlabCommits) ToWorkflowTaskGetGitlabCommitsOutputWithContext(ctx context.Context) WorkflowTaskGetGitlabCommitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskGetGitlabCommitsOutput)
}

// WorkflowTaskGetGitlabCommitsArrayInput is an input type that accepts WorkflowTaskGetGitlabCommitsArray and WorkflowTaskGetGitlabCommitsArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskGetGitlabCommitsArrayInput` via:
//
//	WorkflowTaskGetGitlabCommitsArray{ WorkflowTaskGetGitlabCommitsArgs{...} }
type WorkflowTaskGetGitlabCommitsArrayInput interface {
	pulumi.Input

	ToWorkflowTaskGetGitlabCommitsArrayOutput() WorkflowTaskGetGitlabCommitsArrayOutput
	ToWorkflowTaskGetGitlabCommitsArrayOutputWithContext(context.Context) WorkflowTaskGetGitlabCommitsArrayOutput
}

type WorkflowTaskGetGitlabCommitsArray []WorkflowTaskGetGitlabCommitsInput

func (WorkflowTaskGetGitlabCommitsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskGetGitlabCommits)(nil)).Elem()
}

func (i WorkflowTaskGetGitlabCommitsArray) ToWorkflowTaskGetGitlabCommitsArrayOutput() WorkflowTaskGetGitlabCommitsArrayOutput {
	return i.ToWorkflowTaskGetGitlabCommitsArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskGetGitlabCommitsArray) ToWorkflowTaskGetGitlabCommitsArrayOutputWithContext(ctx context.Context) WorkflowTaskGetGitlabCommitsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskGetGitlabCommitsArrayOutput)
}

// WorkflowTaskGetGitlabCommitsMapInput is an input type that accepts WorkflowTaskGetGitlabCommitsMap and WorkflowTaskGetGitlabCommitsMapOutput values.
// You can construct a concrete instance of `WorkflowTaskGetGitlabCommitsMapInput` via:
//
//	WorkflowTaskGetGitlabCommitsMap{ "key": WorkflowTaskGetGitlabCommitsArgs{...} }
type WorkflowTaskGetGitlabCommitsMapInput interface {
	pulumi.Input

	ToWorkflowTaskGetGitlabCommitsMapOutput() WorkflowTaskGetGitlabCommitsMapOutput
	ToWorkflowTaskGetGitlabCommitsMapOutputWithContext(context.Context) WorkflowTaskGetGitlabCommitsMapOutput
}

type WorkflowTaskGetGitlabCommitsMap map[string]WorkflowTaskGetGitlabCommitsInput

func (WorkflowTaskGetGitlabCommitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskGetGitlabCommits)(nil)).Elem()
}

func (i WorkflowTaskGetGitlabCommitsMap) ToWorkflowTaskGetGitlabCommitsMapOutput() WorkflowTaskGetGitlabCommitsMapOutput {
	return i.ToWorkflowTaskGetGitlabCommitsMapOutputWithContext(context.Background())
}

func (i WorkflowTaskGetGitlabCommitsMap) ToWorkflowTaskGetGitlabCommitsMapOutputWithContext(ctx context.Context) WorkflowTaskGetGitlabCommitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskGetGitlabCommitsMapOutput)
}

type WorkflowTaskGetGitlabCommitsOutput struct{ *pulumi.OutputState }

func (WorkflowTaskGetGitlabCommitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskGetGitlabCommits)(nil)).Elem()
}

func (o WorkflowTaskGetGitlabCommitsOutput) ToWorkflowTaskGetGitlabCommitsOutput() WorkflowTaskGetGitlabCommitsOutput {
	return o
}

func (o WorkflowTaskGetGitlabCommitsOutput) ToWorkflowTaskGetGitlabCommitsOutputWithContext(ctx context.Context) WorkflowTaskGetGitlabCommitsOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskGetGitlabCommitsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskGetGitlabCommits) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskGetGitlabCommitsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskGetGitlabCommits) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskGetGitlabCommitsOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskGetGitlabCommits) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskGetGitlabCommitsOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskGetGitlabCommits) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskGetGitlabCommitsOutput) TaskParams() WorkflowTaskGetGitlabCommitsTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskGetGitlabCommits) WorkflowTaskGetGitlabCommitsTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskGetGitlabCommitsTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskGetGitlabCommitsOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskGetGitlabCommits) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskGetGitlabCommitsArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskGetGitlabCommitsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskGetGitlabCommits)(nil)).Elem()
}

func (o WorkflowTaskGetGitlabCommitsArrayOutput) ToWorkflowTaskGetGitlabCommitsArrayOutput() WorkflowTaskGetGitlabCommitsArrayOutput {
	return o
}

func (o WorkflowTaskGetGitlabCommitsArrayOutput) ToWorkflowTaskGetGitlabCommitsArrayOutputWithContext(ctx context.Context) WorkflowTaskGetGitlabCommitsArrayOutput {
	return o
}

func (o WorkflowTaskGetGitlabCommitsArrayOutput) Index(i pulumi.IntInput) WorkflowTaskGetGitlabCommitsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskGetGitlabCommits {
		return vs[0].([]*WorkflowTaskGetGitlabCommits)[vs[1].(int)]
	}).(WorkflowTaskGetGitlabCommitsOutput)
}

type WorkflowTaskGetGitlabCommitsMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskGetGitlabCommitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskGetGitlabCommits)(nil)).Elem()
}

func (o WorkflowTaskGetGitlabCommitsMapOutput) ToWorkflowTaskGetGitlabCommitsMapOutput() WorkflowTaskGetGitlabCommitsMapOutput {
	return o
}

func (o WorkflowTaskGetGitlabCommitsMapOutput) ToWorkflowTaskGetGitlabCommitsMapOutputWithContext(ctx context.Context) WorkflowTaskGetGitlabCommitsMapOutput {
	return o
}

func (o WorkflowTaskGetGitlabCommitsMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskGetGitlabCommitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskGetGitlabCommits {
		return vs[0].(map[string]*WorkflowTaskGetGitlabCommits)[vs[1].(string)]
	}).(WorkflowTaskGetGitlabCommitsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskGetGitlabCommitsInput)(nil)).Elem(), &WorkflowTaskGetGitlabCommits{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskGetGitlabCommitsArrayInput)(nil)).Elem(), WorkflowTaskGetGitlabCommitsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskGetGitlabCommitsMapInput)(nil)).Elem(), WorkflowTaskGetGitlabCommitsMap{})
	pulumi.RegisterOutputType(WorkflowTaskGetGitlabCommitsOutput{})
	pulumi.RegisterOutputType(WorkflowTaskGetGitlabCommitsArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskGetGitlabCommitsMapOutput{})
}
