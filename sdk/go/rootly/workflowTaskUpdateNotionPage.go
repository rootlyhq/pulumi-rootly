// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow updateNotionPage task.
type WorkflowTaskUpdateNotionPage struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateNotionPageTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskUpdateNotionPage registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskUpdateNotionPage(ctx *pulumi.Context,
	name string, args *WorkflowTaskUpdateNotionPageArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateNotionPage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskUpdateNotionPage
	err := ctx.RegisterResource("rootly:index/workflowTaskUpdateNotionPage:WorkflowTaskUpdateNotionPage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskUpdateNotionPage gets an existing WorkflowTaskUpdateNotionPage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskUpdateNotionPage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskUpdateNotionPageState, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateNotionPage, error) {
	var resource WorkflowTaskUpdateNotionPage
	err := ctx.ReadResource("rootly:index/workflowTaskUpdateNotionPage:WorkflowTaskUpdateNotionPage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskUpdateNotionPage resources.
type workflowTaskUpdateNotionPageState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskUpdateNotionPageTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskUpdateNotionPageState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateNotionPageTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskUpdateNotionPageState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateNotionPageState)(nil)).Elem()
}

type workflowTaskUpdateNotionPageArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateNotionPageTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskUpdateNotionPage resource.
type WorkflowTaskUpdateNotionPageArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateNotionPageTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskUpdateNotionPageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateNotionPageArgs)(nil)).Elem()
}

type WorkflowTaskUpdateNotionPageInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateNotionPageOutput() WorkflowTaskUpdateNotionPageOutput
	ToWorkflowTaskUpdateNotionPageOutputWithContext(ctx context.Context) WorkflowTaskUpdateNotionPageOutput
}

func (*WorkflowTaskUpdateNotionPage) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateNotionPage)(nil)).Elem()
}

func (i *WorkflowTaskUpdateNotionPage) ToWorkflowTaskUpdateNotionPageOutput() WorkflowTaskUpdateNotionPageOutput {
	return i.ToWorkflowTaskUpdateNotionPageOutputWithContext(context.Background())
}

func (i *WorkflowTaskUpdateNotionPage) ToWorkflowTaskUpdateNotionPageOutputWithContext(ctx context.Context) WorkflowTaskUpdateNotionPageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateNotionPageOutput)
}

// WorkflowTaskUpdateNotionPageArrayInput is an input type that accepts WorkflowTaskUpdateNotionPageArray and WorkflowTaskUpdateNotionPageArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateNotionPageArrayInput` via:
//
//	WorkflowTaskUpdateNotionPageArray{ WorkflowTaskUpdateNotionPageArgs{...} }
type WorkflowTaskUpdateNotionPageArrayInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateNotionPageArrayOutput() WorkflowTaskUpdateNotionPageArrayOutput
	ToWorkflowTaskUpdateNotionPageArrayOutputWithContext(context.Context) WorkflowTaskUpdateNotionPageArrayOutput
}

type WorkflowTaskUpdateNotionPageArray []WorkflowTaskUpdateNotionPageInput

func (WorkflowTaskUpdateNotionPageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateNotionPage)(nil)).Elem()
}

func (i WorkflowTaskUpdateNotionPageArray) ToWorkflowTaskUpdateNotionPageArrayOutput() WorkflowTaskUpdateNotionPageArrayOutput {
	return i.ToWorkflowTaskUpdateNotionPageArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateNotionPageArray) ToWorkflowTaskUpdateNotionPageArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateNotionPageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateNotionPageArrayOutput)
}

// WorkflowTaskUpdateNotionPageMapInput is an input type that accepts WorkflowTaskUpdateNotionPageMap and WorkflowTaskUpdateNotionPageMapOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateNotionPageMapInput` via:
//
//	WorkflowTaskUpdateNotionPageMap{ "key": WorkflowTaskUpdateNotionPageArgs{...} }
type WorkflowTaskUpdateNotionPageMapInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateNotionPageMapOutput() WorkflowTaskUpdateNotionPageMapOutput
	ToWorkflowTaskUpdateNotionPageMapOutputWithContext(context.Context) WorkflowTaskUpdateNotionPageMapOutput
}

type WorkflowTaskUpdateNotionPageMap map[string]WorkflowTaskUpdateNotionPageInput

func (WorkflowTaskUpdateNotionPageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateNotionPage)(nil)).Elem()
}

func (i WorkflowTaskUpdateNotionPageMap) ToWorkflowTaskUpdateNotionPageMapOutput() WorkflowTaskUpdateNotionPageMapOutput {
	return i.ToWorkflowTaskUpdateNotionPageMapOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateNotionPageMap) ToWorkflowTaskUpdateNotionPageMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateNotionPageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateNotionPageMapOutput)
}

type WorkflowTaskUpdateNotionPageOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateNotionPageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateNotionPage)(nil)).Elem()
}

func (o WorkflowTaskUpdateNotionPageOutput) ToWorkflowTaskUpdateNotionPageOutput() WorkflowTaskUpdateNotionPageOutput {
	return o
}

func (o WorkflowTaskUpdateNotionPageOutput) ToWorkflowTaskUpdateNotionPageOutputWithContext(ctx context.Context) WorkflowTaskUpdateNotionPageOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskUpdateNotionPageOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateNotionPage) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskUpdateNotionPageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateNotionPage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskUpdateNotionPageOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateNotionPage) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskUpdateNotionPageOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateNotionPage) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskUpdateNotionPageOutput) TaskParams() WorkflowTaskUpdateNotionPageTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateNotionPage) WorkflowTaskUpdateNotionPageTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskUpdateNotionPageTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskUpdateNotionPageOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateNotionPage) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskUpdateNotionPageArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateNotionPageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateNotionPage)(nil)).Elem()
}

func (o WorkflowTaskUpdateNotionPageArrayOutput) ToWorkflowTaskUpdateNotionPageArrayOutput() WorkflowTaskUpdateNotionPageArrayOutput {
	return o
}

func (o WorkflowTaskUpdateNotionPageArrayOutput) ToWorkflowTaskUpdateNotionPageArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateNotionPageArrayOutput {
	return o
}

func (o WorkflowTaskUpdateNotionPageArrayOutput) Index(i pulumi.IntInput) WorkflowTaskUpdateNotionPageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateNotionPage {
		return vs[0].([]*WorkflowTaskUpdateNotionPage)[vs[1].(int)]
	}).(WorkflowTaskUpdateNotionPageOutput)
}

type WorkflowTaskUpdateNotionPageMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateNotionPageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateNotionPage)(nil)).Elem()
}

func (o WorkflowTaskUpdateNotionPageMapOutput) ToWorkflowTaskUpdateNotionPageMapOutput() WorkflowTaskUpdateNotionPageMapOutput {
	return o
}

func (o WorkflowTaskUpdateNotionPageMapOutput) ToWorkflowTaskUpdateNotionPageMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateNotionPageMapOutput {
	return o
}

func (o WorkflowTaskUpdateNotionPageMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskUpdateNotionPageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateNotionPage {
		return vs[0].(map[string]*WorkflowTaskUpdateNotionPage)[vs[1].(string)]
	}).(WorkflowTaskUpdateNotionPageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateNotionPageInput)(nil)).Elem(), &WorkflowTaskUpdateNotionPage{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateNotionPageArrayInput)(nil)).Elem(), WorkflowTaskUpdateNotionPageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateNotionPageMapInput)(nil)).Elem(), WorkflowTaskUpdateNotionPageMap{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateNotionPageOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateNotionPageArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateNotionPageMapOutput{})
}
