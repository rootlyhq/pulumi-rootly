// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// ## Example Usage
type Functionality struct {
	pulumi.CustomResourceState

	// The hex color of the functionality
	Color pulumi.StringOutput `pulumi:"color"`
	// The description of the functionality
	Description pulumi.StringOutput `pulumi:"description"`
	// Environments associated with this functionality
	EnvironmentIds pulumi.StringArrayOutput `pulumi:"environmentIds"`
	// The name of the functionality
	Name pulumi.StringOutput `pulumi:"name"`
	// Emails attached to the functionality
	NotifyEmails pulumi.StringArrayOutput `pulumi:"notifyEmails"`
	// Owner Teams associated with this functionality
	OwnersGroupIds pulumi.StringArrayOutput `pulumi:"ownersGroupIds"`
	// Owner Users associated with this service
	OwnersUserIds pulumi.IntArrayOutput `pulumi:"ownersUserIds"`
	// Position of the functionality
	Position pulumi.IntOutput `pulumi:"position"`
	// The public description of the functionality
	PublicDescription pulumi.StringOutput `pulumi:"publicDescription"`
	// Services associated with this functionality
	ServiceIds pulumi.StringArrayOutput `pulumi:"serviceIds"`
	// Slack Aliases associated with this service
	SlackAliases FunctionalitySlackAliasArrayOutput `pulumi:"slackAliases"`
	// Slack Channels associated with this service
	SlackChannels FunctionalitySlackChannelArrayOutput `pulumi:"slackChannels"`
	// The slug of the functionality
	Slug pulumi.StringOutput `pulumi:"slug"`
}

// NewFunctionality registers a new resource with the given unique name, arguments, and options.
func NewFunctionality(ctx *pulumi.Context,
	name string, args *FunctionalityArgs, opts ...pulumi.ResourceOption) (*Functionality, error) {
	if args == nil {
		args = &FunctionalityArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Functionality
	err := ctx.RegisterResource("rootly:index/functionality:Functionality", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunctionality gets an existing Functionality resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunctionality(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionalityState, opts ...pulumi.ResourceOption) (*Functionality, error) {
	var resource Functionality
	err := ctx.ReadResource("rootly:index/functionality:Functionality", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Functionality resources.
type functionalityState struct {
	// The hex color of the functionality
	Color *string `pulumi:"color"`
	// The description of the functionality
	Description *string `pulumi:"description"`
	// Environments associated with this functionality
	EnvironmentIds []string `pulumi:"environmentIds"`
	// The name of the functionality
	Name *string `pulumi:"name"`
	// Emails attached to the functionality
	NotifyEmails []string `pulumi:"notifyEmails"`
	// Owner Teams associated with this functionality
	OwnersGroupIds []string `pulumi:"ownersGroupIds"`
	// Owner Users associated with this service
	OwnersUserIds []int `pulumi:"ownersUserIds"`
	// Position of the functionality
	Position *int `pulumi:"position"`
	// The public description of the functionality
	PublicDescription *string `pulumi:"publicDescription"`
	// Services associated with this functionality
	ServiceIds []string `pulumi:"serviceIds"`
	// Slack Aliases associated with this service
	SlackAliases []FunctionalitySlackAlias `pulumi:"slackAliases"`
	// Slack Channels associated with this service
	SlackChannels []FunctionalitySlackChannel `pulumi:"slackChannels"`
	// The slug of the functionality
	Slug *string `pulumi:"slug"`
}

type FunctionalityState struct {
	// The hex color of the functionality
	Color pulumi.StringPtrInput
	// The description of the functionality
	Description pulumi.StringPtrInput
	// Environments associated with this functionality
	EnvironmentIds pulumi.StringArrayInput
	// The name of the functionality
	Name pulumi.StringPtrInput
	// Emails attached to the functionality
	NotifyEmails pulumi.StringArrayInput
	// Owner Teams associated with this functionality
	OwnersGroupIds pulumi.StringArrayInput
	// Owner Users associated with this service
	OwnersUserIds pulumi.IntArrayInput
	// Position of the functionality
	Position pulumi.IntPtrInput
	// The public description of the functionality
	PublicDescription pulumi.StringPtrInput
	// Services associated with this functionality
	ServiceIds pulumi.StringArrayInput
	// Slack Aliases associated with this service
	SlackAliases FunctionalitySlackAliasArrayInput
	// Slack Channels associated with this service
	SlackChannels FunctionalitySlackChannelArrayInput
	// The slug of the functionality
	Slug pulumi.StringPtrInput
}

func (FunctionalityState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionalityState)(nil)).Elem()
}

type functionalityArgs struct {
	// The hex color of the functionality
	Color *string `pulumi:"color"`
	// The description of the functionality
	Description *string `pulumi:"description"`
	// Environments associated with this functionality
	EnvironmentIds []string `pulumi:"environmentIds"`
	// The name of the functionality
	Name *string `pulumi:"name"`
	// Emails attached to the functionality
	NotifyEmails []string `pulumi:"notifyEmails"`
	// Owner Teams associated with this functionality
	OwnersGroupIds []string `pulumi:"ownersGroupIds"`
	// Owner Users associated with this service
	OwnersUserIds []int `pulumi:"ownersUserIds"`
	// Position of the functionality
	Position *int `pulumi:"position"`
	// The public description of the functionality
	PublicDescription *string `pulumi:"publicDescription"`
	// Services associated with this functionality
	ServiceIds []string `pulumi:"serviceIds"`
	// Slack Aliases associated with this service
	SlackAliases []FunctionalitySlackAlias `pulumi:"slackAliases"`
	// Slack Channels associated with this service
	SlackChannels []FunctionalitySlackChannel `pulumi:"slackChannels"`
	// The slug of the functionality
	Slug *string `pulumi:"slug"`
}

// The set of arguments for constructing a Functionality resource.
type FunctionalityArgs struct {
	// The hex color of the functionality
	Color pulumi.StringPtrInput
	// The description of the functionality
	Description pulumi.StringPtrInput
	// Environments associated with this functionality
	EnvironmentIds pulumi.StringArrayInput
	// The name of the functionality
	Name pulumi.StringPtrInput
	// Emails attached to the functionality
	NotifyEmails pulumi.StringArrayInput
	// Owner Teams associated with this functionality
	OwnersGroupIds pulumi.StringArrayInput
	// Owner Users associated with this service
	OwnersUserIds pulumi.IntArrayInput
	// Position of the functionality
	Position pulumi.IntPtrInput
	// The public description of the functionality
	PublicDescription pulumi.StringPtrInput
	// Services associated with this functionality
	ServiceIds pulumi.StringArrayInput
	// Slack Aliases associated with this service
	SlackAliases FunctionalitySlackAliasArrayInput
	// Slack Channels associated with this service
	SlackChannels FunctionalitySlackChannelArrayInput
	// The slug of the functionality
	Slug pulumi.StringPtrInput
}

func (FunctionalityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionalityArgs)(nil)).Elem()
}

type FunctionalityInput interface {
	pulumi.Input

	ToFunctionalityOutput() FunctionalityOutput
	ToFunctionalityOutputWithContext(ctx context.Context) FunctionalityOutput
}

func (*Functionality) ElementType() reflect.Type {
	return reflect.TypeOf((**Functionality)(nil)).Elem()
}

func (i *Functionality) ToFunctionalityOutput() FunctionalityOutput {
	return i.ToFunctionalityOutputWithContext(context.Background())
}

func (i *Functionality) ToFunctionalityOutputWithContext(ctx context.Context) FunctionalityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionalityOutput)
}

// FunctionalityArrayInput is an input type that accepts FunctionalityArray and FunctionalityArrayOutput values.
// You can construct a concrete instance of `FunctionalityArrayInput` via:
//
//	FunctionalityArray{ FunctionalityArgs{...} }
type FunctionalityArrayInput interface {
	pulumi.Input

	ToFunctionalityArrayOutput() FunctionalityArrayOutput
	ToFunctionalityArrayOutputWithContext(context.Context) FunctionalityArrayOutput
}

type FunctionalityArray []FunctionalityInput

func (FunctionalityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Functionality)(nil)).Elem()
}

func (i FunctionalityArray) ToFunctionalityArrayOutput() FunctionalityArrayOutput {
	return i.ToFunctionalityArrayOutputWithContext(context.Background())
}

func (i FunctionalityArray) ToFunctionalityArrayOutputWithContext(ctx context.Context) FunctionalityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionalityArrayOutput)
}

// FunctionalityMapInput is an input type that accepts FunctionalityMap and FunctionalityMapOutput values.
// You can construct a concrete instance of `FunctionalityMapInput` via:
//
//	FunctionalityMap{ "key": FunctionalityArgs{...} }
type FunctionalityMapInput interface {
	pulumi.Input

	ToFunctionalityMapOutput() FunctionalityMapOutput
	ToFunctionalityMapOutputWithContext(context.Context) FunctionalityMapOutput
}

type FunctionalityMap map[string]FunctionalityInput

func (FunctionalityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Functionality)(nil)).Elem()
}

func (i FunctionalityMap) ToFunctionalityMapOutput() FunctionalityMapOutput {
	return i.ToFunctionalityMapOutputWithContext(context.Background())
}

func (i FunctionalityMap) ToFunctionalityMapOutputWithContext(ctx context.Context) FunctionalityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionalityMapOutput)
}

type FunctionalityOutput struct{ *pulumi.OutputState }

func (FunctionalityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Functionality)(nil)).Elem()
}

func (o FunctionalityOutput) ToFunctionalityOutput() FunctionalityOutput {
	return o
}

func (o FunctionalityOutput) ToFunctionalityOutputWithContext(ctx context.Context) FunctionalityOutput {
	return o
}

// The hex color of the functionality
func (o FunctionalityOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v *Functionality) pulumi.StringOutput { return v.Color }).(pulumi.StringOutput)
}

// The description of the functionality
func (o FunctionalityOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Functionality) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Environments associated with this functionality
func (o FunctionalityOutput) EnvironmentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Functionality) pulumi.StringArrayOutput { return v.EnvironmentIds }).(pulumi.StringArrayOutput)
}

// The name of the functionality
func (o FunctionalityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Functionality) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Emails attached to the functionality
func (o FunctionalityOutput) NotifyEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Functionality) pulumi.StringArrayOutput { return v.NotifyEmails }).(pulumi.StringArrayOutput)
}

// Owner Teams associated with this functionality
func (o FunctionalityOutput) OwnersGroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Functionality) pulumi.StringArrayOutput { return v.OwnersGroupIds }).(pulumi.StringArrayOutput)
}

// Owner Users associated with this service
func (o FunctionalityOutput) OwnersUserIds() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *Functionality) pulumi.IntArrayOutput { return v.OwnersUserIds }).(pulumi.IntArrayOutput)
}

// Position of the functionality
func (o FunctionalityOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *Functionality) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// The public description of the functionality
func (o FunctionalityOutput) PublicDescription() pulumi.StringOutput {
	return o.ApplyT(func(v *Functionality) pulumi.StringOutput { return v.PublicDescription }).(pulumi.StringOutput)
}

// Services associated with this functionality
func (o FunctionalityOutput) ServiceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Functionality) pulumi.StringArrayOutput { return v.ServiceIds }).(pulumi.StringArrayOutput)
}

// Slack Aliases associated with this service
func (o FunctionalityOutput) SlackAliases() FunctionalitySlackAliasArrayOutput {
	return o.ApplyT(func(v *Functionality) FunctionalitySlackAliasArrayOutput { return v.SlackAliases }).(FunctionalitySlackAliasArrayOutput)
}

// Slack Channels associated with this service
func (o FunctionalityOutput) SlackChannels() FunctionalitySlackChannelArrayOutput {
	return o.ApplyT(func(v *Functionality) FunctionalitySlackChannelArrayOutput { return v.SlackChannels }).(FunctionalitySlackChannelArrayOutput)
}

// The slug of the functionality
func (o FunctionalityOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Functionality) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type FunctionalityArrayOutput struct{ *pulumi.OutputState }

func (FunctionalityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Functionality)(nil)).Elem()
}

func (o FunctionalityArrayOutput) ToFunctionalityArrayOutput() FunctionalityArrayOutput {
	return o
}

func (o FunctionalityArrayOutput) ToFunctionalityArrayOutputWithContext(ctx context.Context) FunctionalityArrayOutput {
	return o
}

func (o FunctionalityArrayOutput) Index(i pulumi.IntInput) FunctionalityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Functionality {
		return vs[0].([]*Functionality)[vs[1].(int)]
	}).(FunctionalityOutput)
}

type FunctionalityMapOutput struct{ *pulumi.OutputState }

func (FunctionalityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Functionality)(nil)).Elem()
}

func (o FunctionalityMapOutput) ToFunctionalityMapOutput() FunctionalityMapOutput {
	return o
}

func (o FunctionalityMapOutput) ToFunctionalityMapOutputWithContext(ctx context.Context) FunctionalityMapOutput {
	return o
}

func (o FunctionalityMapOutput) MapIndex(k pulumi.StringInput) FunctionalityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Functionality {
		return vs[0].(map[string]*Functionality)[vs[1].(string)]
	}).(FunctionalityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionalityInput)(nil)).Elem(), &Functionality{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionalityArrayInput)(nil)).Elem(), FunctionalityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionalityMapInput)(nil)).Elem(), FunctionalityMap{})
	pulumi.RegisterOutputType(FunctionalityOutput{})
	pulumi.RegisterOutputType(FunctionalityArrayOutput{})
	pulumi.RegisterOutputType(FunctionalityMapOutput{})
}
