// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages functionalities (e.g Logging In, Search, Adds items to Cart).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rootly/sdk/go/rootly"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := rootly.NewFunctionality(ctx, "foo", nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import rootly:index/functionality:Functionality foo 11111111-2222-3333-4444-555555555555
// ```
type Functionality struct {
	pulumi.CustomResourceState

	// The color of the severity
	Color pulumi.StringPtrOutput `pulumi:"color"`
	// The description of the functionality
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the functionality
	Name pulumi.StringOutput `pulumi:"name"`
	// The slug of the severity
	Slug pulumi.StringOutput `pulumi:"slug"`
}

// NewFunctionality registers a new resource with the given unique name, arguments, and options.
func NewFunctionality(ctx *pulumi.Context,
	name string, args *FunctionalityArgs, opts ...pulumi.ResourceOption) (*Functionality, error) {
	if args == nil {
		args = &FunctionalityArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Functionality
	err := ctx.RegisterResource("rootly:index/functionality:Functionality", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFunctionality gets an existing Functionality resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFunctionality(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FunctionalityState, opts ...pulumi.ResourceOption) (*Functionality, error) {
	var resource Functionality
	err := ctx.ReadResource("rootly:index/functionality:Functionality", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Functionality resources.
type functionalityState struct {
	// The color of the severity
	Color *string `pulumi:"color"`
	// The description of the functionality
	Description *string `pulumi:"description"`
	// The name of the functionality
	Name *string `pulumi:"name"`
	// The slug of the severity
	Slug *string `pulumi:"slug"`
}

type FunctionalityState struct {
	// The color of the severity
	Color pulumi.StringPtrInput
	// The description of the functionality
	Description pulumi.StringPtrInput
	// The name of the functionality
	Name pulumi.StringPtrInput
	// The slug of the severity
	Slug pulumi.StringPtrInput
}

func (FunctionalityState) ElementType() reflect.Type {
	return reflect.TypeOf((*functionalityState)(nil)).Elem()
}

type functionalityArgs struct {
	// The color of the severity
	Color *string `pulumi:"color"`
	// The description of the functionality
	Description *string `pulumi:"description"`
	// The name of the functionality
	Name *string `pulumi:"name"`
	// The slug of the severity
	Slug *string `pulumi:"slug"`
}

// The set of arguments for constructing a Functionality resource.
type FunctionalityArgs struct {
	// The color of the severity
	Color pulumi.StringPtrInput
	// The description of the functionality
	Description pulumi.StringPtrInput
	// The name of the functionality
	Name pulumi.StringPtrInput
	// The slug of the severity
	Slug pulumi.StringPtrInput
}

func (FunctionalityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*functionalityArgs)(nil)).Elem()
}

type FunctionalityInput interface {
	pulumi.Input

	ToFunctionalityOutput() FunctionalityOutput
	ToFunctionalityOutputWithContext(ctx context.Context) FunctionalityOutput
}

func (*Functionality) ElementType() reflect.Type {
	return reflect.TypeOf((**Functionality)(nil)).Elem()
}

func (i *Functionality) ToFunctionalityOutput() FunctionalityOutput {
	return i.ToFunctionalityOutputWithContext(context.Background())
}

func (i *Functionality) ToFunctionalityOutputWithContext(ctx context.Context) FunctionalityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionalityOutput)
}

// FunctionalityArrayInput is an input type that accepts FunctionalityArray and FunctionalityArrayOutput values.
// You can construct a concrete instance of `FunctionalityArrayInput` via:
//
//          FunctionalityArray{ FunctionalityArgs{...} }
type FunctionalityArrayInput interface {
	pulumi.Input

	ToFunctionalityArrayOutput() FunctionalityArrayOutput
	ToFunctionalityArrayOutputWithContext(context.Context) FunctionalityArrayOutput
}

type FunctionalityArray []FunctionalityInput

func (FunctionalityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Functionality)(nil)).Elem()
}

func (i FunctionalityArray) ToFunctionalityArrayOutput() FunctionalityArrayOutput {
	return i.ToFunctionalityArrayOutputWithContext(context.Background())
}

func (i FunctionalityArray) ToFunctionalityArrayOutputWithContext(ctx context.Context) FunctionalityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionalityArrayOutput)
}

// FunctionalityMapInput is an input type that accepts FunctionalityMap and FunctionalityMapOutput values.
// You can construct a concrete instance of `FunctionalityMapInput` via:
//
//          FunctionalityMap{ "key": FunctionalityArgs{...} }
type FunctionalityMapInput interface {
	pulumi.Input

	ToFunctionalityMapOutput() FunctionalityMapOutput
	ToFunctionalityMapOutputWithContext(context.Context) FunctionalityMapOutput
}

type FunctionalityMap map[string]FunctionalityInput

func (FunctionalityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Functionality)(nil)).Elem()
}

func (i FunctionalityMap) ToFunctionalityMapOutput() FunctionalityMapOutput {
	return i.ToFunctionalityMapOutputWithContext(context.Background())
}

func (i FunctionalityMap) ToFunctionalityMapOutputWithContext(ctx context.Context) FunctionalityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FunctionalityMapOutput)
}

type FunctionalityOutput struct{ *pulumi.OutputState }

func (FunctionalityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Functionality)(nil)).Elem()
}

func (o FunctionalityOutput) ToFunctionalityOutput() FunctionalityOutput {
	return o
}

func (o FunctionalityOutput) ToFunctionalityOutputWithContext(ctx context.Context) FunctionalityOutput {
	return o
}

type FunctionalityArrayOutput struct{ *pulumi.OutputState }

func (FunctionalityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Functionality)(nil)).Elem()
}

func (o FunctionalityArrayOutput) ToFunctionalityArrayOutput() FunctionalityArrayOutput {
	return o
}

func (o FunctionalityArrayOutput) ToFunctionalityArrayOutputWithContext(ctx context.Context) FunctionalityArrayOutput {
	return o
}

func (o FunctionalityArrayOutput) Index(i pulumi.IntInput) FunctionalityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Functionality {
		return vs[0].([]*Functionality)[vs[1].(int)]
	}).(FunctionalityOutput)
}

type FunctionalityMapOutput struct{ *pulumi.OutputState }

func (FunctionalityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Functionality)(nil)).Elem()
}

func (o FunctionalityMapOutput) ToFunctionalityMapOutput() FunctionalityMapOutput {
	return o
}

func (o FunctionalityMapOutput) ToFunctionalityMapOutputWithContext(ctx context.Context) FunctionalityMapOutput {
	return o
}

func (o FunctionalityMapOutput) MapIndex(k pulumi.StringInput) FunctionalityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Functionality {
		return vs[0].(map[string]*Functionality)[vs[1].(string)]
	}).(FunctionalityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionalityInput)(nil)).Elem(), &Functionality{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionalityArrayInput)(nil)).Elem(), FunctionalityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FunctionalityMapInput)(nil)).Elem(), FunctionalityMap{})
	pulumi.RegisterOutputType(FunctionalityOutput{})
	pulumi.RegisterOutputType(FunctionalityArrayOutput{})
	pulumi.RegisterOutputType(FunctionalityMapOutput{})
}
