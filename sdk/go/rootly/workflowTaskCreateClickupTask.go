// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createClickupTask task.
type WorkflowTaskCreateClickupTask struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateClickupTaskTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreateClickupTask registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreateClickupTask(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreateClickupTaskArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateClickupTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreateClickupTask
	err := ctx.RegisterResource("rootly:index/workflowTaskCreateClickupTask:WorkflowTaskCreateClickupTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreateClickupTask gets an existing WorkflowTaskCreateClickupTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreateClickupTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreateClickupTaskState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateClickupTask, error) {
	var resource WorkflowTaskCreateClickupTask
	err := ctx.ReadResource("rootly:index/workflowTaskCreateClickupTask:WorkflowTaskCreateClickupTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreateClickupTask resources.
type workflowTaskCreateClickupTaskState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreateClickupTaskTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreateClickupTaskState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateClickupTaskTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreateClickupTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateClickupTaskState)(nil)).Elem()
}

type workflowTaskCreateClickupTaskArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateClickupTaskTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreateClickupTask resource.
type WorkflowTaskCreateClickupTaskArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateClickupTaskTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreateClickupTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateClickupTaskArgs)(nil)).Elem()
}

type WorkflowTaskCreateClickupTaskInput interface {
	pulumi.Input

	ToWorkflowTaskCreateClickupTaskOutput() WorkflowTaskCreateClickupTaskOutput
	ToWorkflowTaskCreateClickupTaskOutputWithContext(ctx context.Context) WorkflowTaskCreateClickupTaskOutput
}

func (*WorkflowTaskCreateClickupTask) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateClickupTask)(nil)).Elem()
}

func (i *WorkflowTaskCreateClickupTask) ToWorkflowTaskCreateClickupTaskOutput() WorkflowTaskCreateClickupTaskOutput {
	return i.ToWorkflowTaskCreateClickupTaskOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreateClickupTask) ToWorkflowTaskCreateClickupTaskOutputWithContext(ctx context.Context) WorkflowTaskCreateClickupTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateClickupTaskOutput)
}

// WorkflowTaskCreateClickupTaskArrayInput is an input type that accepts WorkflowTaskCreateClickupTaskArray and WorkflowTaskCreateClickupTaskArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateClickupTaskArrayInput` via:
//
//	WorkflowTaskCreateClickupTaskArray{ WorkflowTaskCreateClickupTaskArgs{...} }
type WorkflowTaskCreateClickupTaskArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreateClickupTaskArrayOutput() WorkflowTaskCreateClickupTaskArrayOutput
	ToWorkflowTaskCreateClickupTaskArrayOutputWithContext(context.Context) WorkflowTaskCreateClickupTaskArrayOutput
}

type WorkflowTaskCreateClickupTaskArray []WorkflowTaskCreateClickupTaskInput

func (WorkflowTaskCreateClickupTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateClickupTask)(nil)).Elem()
}

func (i WorkflowTaskCreateClickupTaskArray) ToWorkflowTaskCreateClickupTaskArrayOutput() WorkflowTaskCreateClickupTaskArrayOutput {
	return i.ToWorkflowTaskCreateClickupTaskArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateClickupTaskArray) ToWorkflowTaskCreateClickupTaskArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateClickupTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateClickupTaskArrayOutput)
}

// WorkflowTaskCreateClickupTaskMapInput is an input type that accepts WorkflowTaskCreateClickupTaskMap and WorkflowTaskCreateClickupTaskMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateClickupTaskMapInput` via:
//
//	WorkflowTaskCreateClickupTaskMap{ "key": WorkflowTaskCreateClickupTaskArgs{...} }
type WorkflowTaskCreateClickupTaskMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreateClickupTaskMapOutput() WorkflowTaskCreateClickupTaskMapOutput
	ToWorkflowTaskCreateClickupTaskMapOutputWithContext(context.Context) WorkflowTaskCreateClickupTaskMapOutput
}

type WorkflowTaskCreateClickupTaskMap map[string]WorkflowTaskCreateClickupTaskInput

func (WorkflowTaskCreateClickupTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateClickupTask)(nil)).Elem()
}

func (i WorkflowTaskCreateClickupTaskMap) ToWorkflowTaskCreateClickupTaskMapOutput() WorkflowTaskCreateClickupTaskMapOutput {
	return i.ToWorkflowTaskCreateClickupTaskMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateClickupTaskMap) ToWorkflowTaskCreateClickupTaskMapOutputWithContext(ctx context.Context) WorkflowTaskCreateClickupTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateClickupTaskMapOutput)
}

type WorkflowTaskCreateClickupTaskOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateClickupTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateClickupTask)(nil)).Elem()
}

func (o WorkflowTaskCreateClickupTaskOutput) ToWorkflowTaskCreateClickupTaskOutput() WorkflowTaskCreateClickupTaskOutput {
	return o
}

func (o WorkflowTaskCreateClickupTaskOutput) ToWorkflowTaskCreateClickupTaskOutputWithContext(ctx context.Context) WorkflowTaskCreateClickupTaskOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreateClickupTaskOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateClickupTask) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreateClickupTaskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateClickupTask) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreateClickupTaskOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateClickupTask) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreateClickupTaskOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateClickupTask) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreateClickupTaskOutput) TaskParams() WorkflowTaskCreateClickupTaskTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateClickupTask) WorkflowTaskCreateClickupTaskTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskCreateClickupTaskTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreateClickupTaskOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateClickupTask) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreateClickupTaskArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateClickupTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateClickupTask)(nil)).Elem()
}

func (o WorkflowTaskCreateClickupTaskArrayOutput) ToWorkflowTaskCreateClickupTaskArrayOutput() WorkflowTaskCreateClickupTaskArrayOutput {
	return o
}

func (o WorkflowTaskCreateClickupTaskArrayOutput) ToWorkflowTaskCreateClickupTaskArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateClickupTaskArrayOutput {
	return o
}

func (o WorkflowTaskCreateClickupTaskArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreateClickupTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreateClickupTask {
		return vs[0].([]*WorkflowTaskCreateClickupTask)[vs[1].(int)]
	}).(WorkflowTaskCreateClickupTaskOutput)
}

type WorkflowTaskCreateClickupTaskMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateClickupTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateClickupTask)(nil)).Elem()
}

func (o WorkflowTaskCreateClickupTaskMapOutput) ToWorkflowTaskCreateClickupTaskMapOutput() WorkflowTaskCreateClickupTaskMapOutput {
	return o
}

func (o WorkflowTaskCreateClickupTaskMapOutput) ToWorkflowTaskCreateClickupTaskMapOutputWithContext(ctx context.Context) WorkflowTaskCreateClickupTaskMapOutput {
	return o
}

func (o WorkflowTaskCreateClickupTaskMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreateClickupTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreateClickupTask {
		return vs[0].(map[string]*WorkflowTaskCreateClickupTask)[vs[1].(string)]
	}).(WorkflowTaskCreateClickupTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateClickupTaskInput)(nil)).Elem(), &WorkflowTaskCreateClickupTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateClickupTaskArrayInput)(nil)).Elem(), WorkflowTaskCreateClickupTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateClickupTaskMapInput)(nil)).Elem(), WorkflowTaskCreateClickupTaskMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreateClickupTaskOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateClickupTaskArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateClickupTaskMapOutput{})
}
