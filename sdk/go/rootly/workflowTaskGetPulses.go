// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow getPulses task.
type WorkflowTaskGetPulses struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskGetPulsesTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskGetPulses registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskGetPulses(ctx *pulumi.Context,
	name string, args *WorkflowTaskGetPulsesArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskGetPulses, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskGetPulses
	err := ctx.RegisterResource("rootly:index/workflowTaskGetPulses:WorkflowTaskGetPulses", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskGetPulses gets an existing WorkflowTaskGetPulses resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskGetPulses(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskGetPulsesState, opts ...pulumi.ResourceOption) (*WorkflowTaskGetPulses, error) {
	var resource WorkflowTaskGetPulses
	err := ctx.ReadResource("rootly:index/workflowTaskGetPulses:WorkflowTaskGetPulses", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskGetPulses resources.
type workflowTaskGetPulsesState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskGetPulsesTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskGetPulsesState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskGetPulsesTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskGetPulsesState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskGetPulsesState)(nil)).Elem()
}

type workflowTaskGetPulsesArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskGetPulsesTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskGetPulses resource.
type WorkflowTaskGetPulsesArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskGetPulsesTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskGetPulsesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskGetPulsesArgs)(nil)).Elem()
}

type WorkflowTaskGetPulsesInput interface {
	pulumi.Input

	ToWorkflowTaskGetPulsesOutput() WorkflowTaskGetPulsesOutput
	ToWorkflowTaskGetPulsesOutputWithContext(ctx context.Context) WorkflowTaskGetPulsesOutput
}

func (*WorkflowTaskGetPulses) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskGetPulses)(nil)).Elem()
}

func (i *WorkflowTaskGetPulses) ToWorkflowTaskGetPulsesOutput() WorkflowTaskGetPulsesOutput {
	return i.ToWorkflowTaskGetPulsesOutputWithContext(context.Background())
}

func (i *WorkflowTaskGetPulses) ToWorkflowTaskGetPulsesOutputWithContext(ctx context.Context) WorkflowTaskGetPulsesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskGetPulsesOutput)
}

// WorkflowTaskGetPulsesArrayInput is an input type that accepts WorkflowTaskGetPulsesArray and WorkflowTaskGetPulsesArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskGetPulsesArrayInput` via:
//
//	WorkflowTaskGetPulsesArray{ WorkflowTaskGetPulsesArgs{...} }
type WorkflowTaskGetPulsesArrayInput interface {
	pulumi.Input

	ToWorkflowTaskGetPulsesArrayOutput() WorkflowTaskGetPulsesArrayOutput
	ToWorkflowTaskGetPulsesArrayOutputWithContext(context.Context) WorkflowTaskGetPulsesArrayOutput
}

type WorkflowTaskGetPulsesArray []WorkflowTaskGetPulsesInput

func (WorkflowTaskGetPulsesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskGetPulses)(nil)).Elem()
}

func (i WorkflowTaskGetPulsesArray) ToWorkflowTaskGetPulsesArrayOutput() WorkflowTaskGetPulsesArrayOutput {
	return i.ToWorkflowTaskGetPulsesArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskGetPulsesArray) ToWorkflowTaskGetPulsesArrayOutputWithContext(ctx context.Context) WorkflowTaskGetPulsesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskGetPulsesArrayOutput)
}

// WorkflowTaskGetPulsesMapInput is an input type that accepts WorkflowTaskGetPulsesMap and WorkflowTaskGetPulsesMapOutput values.
// You can construct a concrete instance of `WorkflowTaskGetPulsesMapInput` via:
//
//	WorkflowTaskGetPulsesMap{ "key": WorkflowTaskGetPulsesArgs{...} }
type WorkflowTaskGetPulsesMapInput interface {
	pulumi.Input

	ToWorkflowTaskGetPulsesMapOutput() WorkflowTaskGetPulsesMapOutput
	ToWorkflowTaskGetPulsesMapOutputWithContext(context.Context) WorkflowTaskGetPulsesMapOutput
}

type WorkflowTaskGetPulsesMap map[string]WorkflowTaskGetPulsesInput

func (WorkflowTaskGetPulsesMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskGetPulses)(nil)).Elem()
}

func (i WorkflowTaskGetPulsesMap) ToWorkflowTaskGetPulsesMapOutput() WorkflowTaskGetPulsesMapOutput {
	return i.ToWorkflowTaskGetPulsesMapOutputWithContext(context.Background())
}

func (i WorkflowTaskGetPulsesMap) ToWorkflowTaskGetPulsesMapOutputWithContext(ctx context.Context) WorkflowTaskGetPulsesMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskGetPulsesMapOutput)
}

type WorkflowTaskGetPulsesOutput struct{ *pulumi.OutputState }

func (WorkflowTaskGetPulsesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskGetPulses)(nil)).Elem()
}

func (o WorkflowTaskGetPulsesOutput) ToWorkflowTaskGetPulsesOutput() WorkflowTaskGetPulsesOutput {
	return o
}

func (o WorkflowTaskGetPulsesOutput) ToWorkflowTaskGetPulsesOutputWithContext(ctx context.Context) WorkflowTaskGetPulsesOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskGetPulsesOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskGetPulses) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskGetPulsesOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskGetPulses) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskGetPulsesOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskGetPulses) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskGetPulsesOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskGetPulses) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskGetPulsesOutput) TaskParams() WorkflowTaskGetPulsesTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskGetPulses) WorkflowTaskGetPulsesTaskParamsOutput { return v.TaskParams }).(WorkflowTaskGetPulsesTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskGetPulsesOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskGetPulses) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskGetPulsesArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskGetPulsesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskGetPulses)(nil)).Elem()
}

func (o WorkflowTaskGetPulsesArrayOutput) ToWorkflowTaskGetPulsesArrayOutput() WorkflowTaskGetPulsesArrayOutput {
	return o
}

func (o WorkflowTaskGetPulsesArrayOutput) ToWorkflowTaskGetPulsesArrayOutputWithContext(ctx context.Context) WorkflowTaskGetPulsesArrayOutput {
	return o
}

func (o WorkflowTaskGetPulsesArrayOutput) Index(i pulumi.IntInput) WorkflowTaskGetPulsesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskGetPulses {
		return vs[0].([]*WorkflowTaskGetPulses)[vs[1].(int)]
	}).(WorkflowTaskGetPulsesOutput)
}

type WorkflowTaskGetPulsesMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskGetPulsesMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskGetPulses)(nil)).Elem()
}

func (o WorkflowTaskGetPulsesMapOutput) ToWorkflowTaskGetPulsesMapOutput() WorkflowTaskGetPulsesMapOutput {
	return o
}

func (o WorkflowTaskGetPulsesMapOutput) ToWorkflowTaskGetPulsesMapOutputWithContext(ctx context.Context) WorkflowTaskGetPulsesMapOutput {
	return o
}

func (o WorkflowTaskGetPulsesMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskGetPulsesOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskGetPulses {
		return vs[0].(map[string]*WorkflowTaskGetPulses)[vs[1].(string)]
	}).(WorkflowTaskGetPulsesOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskGetPulsesInput)(nil)).Elem(), &WorkflowTaskGetPulses{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskGetPulsesArrayInput)(nil)).Elem(), WorkflowTaskGetPulsesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskGetPulsesMapInput)(nil)).Elem(), WorkflowTaskGetPulsesMap{})
	pulumi.RegisterOutputType(WorkflowTaskGetPulsesOutput{})
	pulumi.RegisterOutputType(WorkflowTaskGetPulsesArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskGetPulsesMapOutput{})
}
