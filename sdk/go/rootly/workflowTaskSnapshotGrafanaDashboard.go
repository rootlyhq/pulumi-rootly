// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow snapshotGrafanaDashboard task.
type WorkflowTaskSnapshotGrafanaDashboard struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSnapshotGrafanaDashboardTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskSnapshotGrafanaDashboard registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskSnapshotGrafanaDashboard(ctx *pulumi.Context,
	name string, args *WorkflowTaskSnapshotGrafanaDashboardArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskSnapshotGrafanaDashboard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskSnapshotGrafanaDashboard
	err := ctx.RegisterResource("rootly:index/workflowTaskSnapshotGrafanaDashboard:WorkflowTaskSnapshotGrafanaDashboard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskSnapshotGrafanaDashboard gets an existing WorkflowTaskSnapshotGrafanaDashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskSnapshotGrafanaDashboard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskSnapshotGrafanaDashboardState, opts ...pulumi.ResourceOption) (*WorkflowTaskSnapshotGrafanaDashboard, error) {
	var resource WorkflowTaskSnapshotGrafanaDashboard
	err := ctx.ReadResource("rootly:index/workflowTaskSnapshotGrafanaDashboard:WorkflowTaskSnapshotGrafanaDashboard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskSnapshotGrafanaDashboard resources.
type workflowTaskSnapshotGrafanaDashboardState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskSnapshotGrafanaDashboardTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskSnapshotGrafanaDashboardState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSnapshotGrafanaDashboardTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskSnapshotGrafanaDashboardState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskSnapshotGrafanaDashboardState)(nil)).Elem()
}

type workflowTaskSnapshotGrafanaDashboardArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSnapshotGrafanaDashboardTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskSnapshotGrafanaDashboard resource.
type WorkflowTaskSnapshotGrafanaDashboardArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSnapshotGrafanaDashboardTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskSnapshotGrafanaDashboardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskSnapshotGrafanaDashboardArgs)(nil)).Elem()
}

type WorkflowTaskSnapshotGrafanaDashboardInput interface {
	pulumi.Input

	ToWorkflowTaskSnapshotGrafanaDashboardOutput() WorkflowTaskSnapshotGrafanaDashboardOutput
	ToWorkflowTaskSnapshotGrafanaDashboardOutputWithContext(ctx context.Context) WorkflowTaskSnapshotGrafanaDashboardOutput
}

func (*WorkflowTaskSnapshotGrafanaDashboard) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskSnapshotGrafanaDashboard)(nil)).Elem()
}

func (i *WorkflowTaskSnapshotGrafanaDashboard) ToWorkflowTaskSnapshotGrafanaDashboardOutput() WorkflowTaskSnapshotGrafanaDashboardOutput {
	return i.ToWorkflowTaskSnapshotGrafanaDashboardOutputWithContext(context.Background())
}

func (i *WorkflowTaskSnapshotGrafanaDashboard) ToWorkflowTaskSnapshotGrafanaDashboardOutputWithContext(ctx context.Context) WorkflowTaskSnapshotGrafanaDashboardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSnapshotGrafanaDashboardOutput)
}

// WorkflowTaskSnapshotGrafanaDashboardArrayInput is an input type that accepts WorkflowTaskSnapshotGrafanaDashboardArray and WorkflowTaskSnapshotGrafanaDashboardArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskSnapshotGrafanaDashboardArrayInput` via:
//
//	WorkflowTaskSnapshotGrafanaDashboardArray{ WorkflowTaskSnapshotGrafanaDashboardArgs{...} }
type WorkflowTaskSnapshotGrafanaDashboardArrayInput interface {
	pulumi.Input

	ToWorkflowTaskSnapshotGrafanaDashboardArrayOutput() WorkflowTaskSnapshotGrafanaDashboardArrayOutput
	ToWorkflowTaskSnapshotGrafanaDashboardArrayOutputWithContext(context.Context) WorkflowTaskSnapshotGrafanaDashboardArrayOutput
}

type WorkflowTaskSnapshotGrafanaDashboardArray []WorkflowTaskSnapshotGrafanaDashboardInput

func (WorkflowTaskSnapshotGrafanaDashboardArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskSnapshotGrafanaDashboard)(nil)).Elem()
}

func (i WorkflowTaskSnapshotGrafanaDashboardArray) ToWorkflowTaskSnapshotGrafanaDashboardArrayOutput() WorkflowTaskSnapshotGrafanaDashboardArrayOutput {
	return i.ToWorkflowTaskSnapshotGrafanaDashboardArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskSnapshotGrafanaDashboardArray) ToWorkflowTaskSnapshotGrafanaDashboardArrayOutputWithContext(ctx context.Context) WorkflowTaskSnapshotGrafanaDashboardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSnapshotGrafanaDashboardArrayOutput)
}

// WorkflowTaskSnapshotGrafanaDashboardMapInput is an input type that accepts WorkflowTaskSnapshotGrafanaDashboardMap and WorkflowTaskSnapshotGrafanaDashboardMapOutput values.
// You can construct a concrete instance of `WorkflowTaskSnapshotGrafanaDashboardMapInput` via:
//
//	WorkflowTaskSnapshotGrafanaDashboardMap{ "key": WorkflowTaskSnapshotGrafanaDashboardArgs{...} }
type WorkflowTaskSnapshotGrafanaDashboardMapInput interface {
	pulumi.Input

	ToWorkflowTaskSnapshotGrafanaDashboardMapOutput() WorkflowTaskSnapshotGrafanaDashboardMapOutput
	ToWorkflowTaskSnapshotGrafanaDashboardMapOutputWithContext(context.Context) WorkflowTaskSnapshotGrafanaDashboardMapOutput
}

type WorkflowTaskSnapshotGrafanaDashboardMap map[string]WorkflowTaskSnapshotGrafanaDashboardInput

func (WorkflowTaskSnapshotGrafanaDashboardMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskSnapshotGrafanaDashboard)(nil)).Elem()
}

func (i WorkflowTaskSnapshotGrafanaDashboardMap) ToWorkflowTaskSnapshotGrafanaDashboardMapOutput() WorkflowTaskSnapshotGrafanaDashboardMapOutput {
	return i.ToWorkflowTaskSnapshotGrafanaDashboardMapOutputWithContext(context.Background())
}

func (i WorkflowTaskSnapshotGrafanaDashboardMap) ToWorkflowTaskSnapshotGrafanaDashboardMapOutputWithContext(ctx context.Context) WorkflowTaskSnapshotGrafanaDashboardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSnapshotGrafanaDashboardMapOutput)
}

type WorkflowTaskSnapshotGrafanaDashboardOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSnapshotGrafanaDashboardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskSnapshotGrafanaDashboard)(nil)).Elem()
}

func (o WorkflowTaskSnapshotGrafanaDashboardOutput) ToWorkflowTaskSnapshotGrafanaDashboardOutput() WorkflowTaskSnapshotGrafanaDashboardOutput {
	return o
}

func (o WorkflowTaskSnapshotGrafanaDashboardOutput) ToWorkflowTaskSnapshotGrafanaDashboardOutputWithContext(ctx context.Context) WorkflowTaskSnapshotGrafanaDashboardOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskSnapshotGrafanaDashboardOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskSnapshotGrafanaDashboard) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskSnapshotGrafanaDashboardOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskSnapshotGrafanaDashboard) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskSnapshotGrafanaDashboardOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskSnapshotGrafanaDashboard) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskSnapshotGrafanaDashboardOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskSnapshotGrafanaDashboard) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskSnapshotGrafanaDashboardOutput) TaskParams() WorkflowTaskSnapshotGrafanaDashboardTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskSnapshotGrafanaDashboard) WorkflowTaskSnapshotGrafanaDashboardTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskSnapshotGrafanaDashboardTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskSnapshotGrafanaDashboardOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskSnapshotGrafanaDashboard) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskSnapshotGrafanaDashboardArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSnapshotGrafanaDashboardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskSnapshotGrafanaDashboard)(nil)).Elem()
}

func (o WorkflowTaskSnapshotGrafanaDashboardArrayOutput) ToWorkflowTaskSnapshotGrafanaDashboardArrayOutput() WorkflowTaskSnapshotGrafanaDashboardArrayOutput {
	return o
}

func (o WorkflowTaskSnapshotGrafanaDashboardArrayOutput) ToWorkflowTaskSnapshotGrafanaDashboardArrayOutputWithContext(ctx context.Context) WorkflowTaskSnapshotGrafanaDashboardArrayOutput {
	return o
}

func (o WorkflowTaskSnapshotGrafanaDashboardArrayOutput) Index(i pulumi.IntInput) WorkflowTaskSnapshotGrafanaDashboardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskSnapshotGrafanaDashboard {
		return vs[0].([]*WorkflowTaskSnapshotGrafanaDashboard)[vs[1].(int)]
	}).(WorkflowTaskSnapshotGrafanaDashboardOutput)
}

type WorkflowTaskSnapshotGrafanaDashboardMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSnapshotGrafanaDashboardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskSnapshotGrafanaDashboard)(nil)).Elem()
}

func (o WorkflowTaskSnapshotGrafanaDashboardMapOutput) ToWorkflowTaskSnapshotGrafanaDashboardMapOutput() WorkflowTaskSnapshotGrafanaDashboardMapOutput {
	return o
}

func (o WorkflowTaskSnapshotGrafanaDashboardMapOutput) ToWorkflowTaskSnapshotGrafanaDashboardMapOutputWithContext(ctx context.Context) WorkflowTaskSnapshotGrafanaDashboardMapOutput {
	return o
}

func (o WorkflowTaskSnapshotGrafanaDashboardMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskSnapshotGrafanaDashboardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskSnapshotGrafanaDashboard {
		return vs[0].(map[string]*WorkflowTaskSnapshotGrafanaDashboard)[vs[1].(string)]
	}).(WorkflowTaskSnapshotGrafanaDashboardOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSnapshotGrafanaDashboardInput)(nil)).Elem(), &WorkflowTaskSnapshotGrafanaDashboard{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSnapshotGrafanaDashboardArrayInput)(nil)).Elem(), WorkflowTaskSnapshotGrafanaDashboardArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSnapshotGrafanaDashboardMapInput)(nil)).Elem(), WorkflowTaskSnapshotGrafanaDashboardMap{})
	pulumi.RegisterOutputType(WorkflowTaskSnapshotGrafanaDashboardOutput{})
	pulumi.RegisterOutputType(WorkflowTaskSnapshotGrafanaDashboardArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskSnapshotGrafanaDashboardMapOutput{})
}
