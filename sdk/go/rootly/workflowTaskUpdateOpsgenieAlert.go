// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow updateOpsgenieAlert task.
type WorkflowTaskUpdateOpsgenieAlert struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateOpsgenieAlertTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskUpdateOpsgenieAlert registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskUpdateOpsgenieAlert(ctx *pulumi.Context,
	name string, args *WorkflowTaskUpdateOpsgenieAlertArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateOpsgenieAlert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskUpdateOpsgenieAlert
	err := ctx.RegisterResource("rootly:index/workflowTaskUpdateOpsgenieAlert:WorkflowTaskUpdateOpsgenieAlert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskUpdateOpsgenieAlert gets an existing WorkflowTaskUpdateOpsgenieAlert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskUpdateOpsgenieAlert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskUpdateOpsgenieAlertState, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateOpsgenieAlert, error) {
	var resource WorkflowTaskUpdateOpsgenieAlert
	err := ctx.ReadResource("rootly:index/workflowTaskUpdateOpsgenieAlert:WorkflowTaskUpdateOpsgenieAlert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskUpdateOpsgenieAlert resources.
type workflowTaskUpdateOpsgenieAlertState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskUpdateOpsgenieAlertTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskUpdateOpsgenieAlertState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateOpsgenieAlertTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskUpdateOpsgenieAlertState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateOpsgenieAlertState)(nil)).Elem()
}

type workflowTaskUpdateOpsgenieAlertArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateOpsgenieAlertTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskUpdateOpsgenieAlert resource.
type WorkflowTaskUpdateOpsgenieAlertArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateOpsgenieAlertTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskUpdateOpsgenieAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateOpsgenieAlertArgs)(nil)).Elem()
}

type WorkflowTaskUpdateOpsgenieAlertInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateOpsgenieAlertOutput() WorkflowTaskUpdateOpsgenieAlertOutput
	ToWorkflowTaskUpdateOpsgenieAlertOutputWithContext(ctx context.Context) WorkflowTaskUpdateOpsgenieAlertOutput
}

func (*WorkflowTaskUpdateOpsgenieAlert) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateOpsgenieAlert)(nil)).Elem()
}

func (i *WorkflowTaskUpdateOpsgenieAlert) ToWorkflowTaskUpdateOpsgenieAlertOutput() WorkflowTaskUpdateOpsgenieAlertOutput {
	return i.ToWorkflowTaskUpdateOpsgenieAlertOutputWithContext(context.Background())
}

func (i *WorkflowTaskUpdateOpsgenieAlert) ToWorkflowTaskUpdateOpsgenieAlertOutputWithContext(ctx context.Context) WorkflowTaskUpdateOpsgenieAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateOpsgenieAlertOutput)
}

// WorkflowTaskUpdateOpsgenieAlertArrayInput is an input type that accepts WorkflowTaskUpdateOpsgenieAlertArray and WorkflowTaskUpdateOpsgenieAlertArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateOpsgenieAlertArrayInput` via:
//
//	WorkflowTaskUpdateOpsgenieAlertArray{ WorkflowTaskUpdateOpsgenieAlertArgs{...} }
type WorkflowTaskUpdateOpsgenieAlertArrayInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateOpsgenieAlertArrayOutput() WorkflowTaskUpdateOpsgenieAlertArrayOutput
	ToWorkflowTaskUpdateOpsgenieAlertArrayOutputWithContext(context.Context) WorkflowTaskUpdateOpsgenieAlertArrayOutput
}

type WorkflowTaskUpdateOpsgenieAlertArray []WorkflowTaskUpdateOpsgenieAlertInput

func (WorkflowTaskUpdateOpsgenieAlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateOpsgenieAlert)(nil)).Elem()
}

func (i WorkflowTaskUpdateOpsgenieAlertArray) ToWorkflowTaskUpdateOpsgenieAlertArrayOutput() WorkflowTaskUpdateOpsgenieAlertArrayOutput {
	return i.ToWorkflowTaskUpdateOpsgenieAlertArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateOpsgenieAlertArray) ToWorkflowTaskUpdateOpsgenieAlertArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateOpsgenieAlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateOpsgenieAlertArrayOutput)
}

// WorkflowTaskUpdateOpsgenieAlertMapInput is an input type that accepts WorkflowTaskUpdateOpsgenieAlertMap and WorkflowTaskUpdateOpsgenieAlertMapOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateOpsgenieAlertMapInput` via:
//
//	WorkflowTaskUpdateOpsgenieAlertMap{ "key": WorkflowTaskUpdateOpsgenieAlertArgs{...} }
type WorkflowTaskUpdateOpsgenieAlertMapInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateOpsgenieAlertMapOutput() WorkflowTaskUpdateOpsgenieAlertMapOutput
	ToWorkflowTaskUpdateOpsgenieAlertMapOutputWithContext(context.Context) WorkflowTaskUpdateOpsgenieAlertMapOutput
}

type WorkflowTaskUpdateOpsgenieAlertMap map[string]WorkflowTaskUpdateOpsgenieAlertInput

func (WorkflowTaskUpdateOpsgenieAlertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateOpsgenieAlert)(nil)).Elem()
}

func (i WorkflowTaskUpdateOpsgenieAlertMap) ToWorkflowTaskUpdateOpsgenieAlertMapOutput() WorkflowTaskUpdateOpsgenieAlertMapOutput {
	return i.ToWorkflowTaskUpdateOpsgenieAlertMapOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateOpsgenieAlertMap) ToWorkflowTaskUpdateOpsgenieAlertMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateOpsgenieAlertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateOpsgenieAlertMapOutput)
}

type WorkflowTaskUpdateOpsgenieAlertOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateOpsgenieAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateOpsgenieAlert)(nil)).Elem()
}

func (o WorkflowTaskUpdateOpsgenieAlertOutput) ToWorkflowTaskUpdateOpsgenieAlertOutput() WorkflowTaskUpdateOpsgenieAlertOutput {
	return o
}

func (o WorkflowTaskUpdateOpsgenieAlertOutput) ToWorkflowTaskUpdateOpsgenieAlertOutputWithContext(ctx context.Context) WorkflowTaskUpdateOpsgenieAlertOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskUpdateOpsgenieAlertOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateOpsgenieAlert) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskUpdateOpsgenieAlertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateOpsgenieAlert) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskUpdateOpsgenieAlertOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateOpsgenieAlert) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskUpdateOpsgenieAlertOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateOpsgenieAlert) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskUpdateOpsgenieAlertOutput) TaskParams() WorkflowTaskUpdateOpsgenieAlertTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateOpsgenieAlert) WorkflowTaskUpdateOpsgenieAlertTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskUpdateOpsgenieAlertTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskUpdateOpsgenieAlertOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateOpsgenieAlert) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskUpdateOpsgenieAlertArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateOpsgenieAlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateOpsgenieAlert)(nil)).Elem()
}

func (o WorkflowTaskUpdateOpsgenieAlertArrayOutput) ToWorkflowTaskUpdateOpsgenieAlertArrayOutput() WorkflowTaskUpdateOpsgenieAlertArrayOutput {
	return o
}

func (o WorkflowTaskUpdateOpsgenieAlertArrayOutput) ToWorkflowTaskUpdateOpsgenieAlertArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateOpsgenieAlertArrayOutput {
	return o
}

func (o WorkflowTaskUpdateOpsgenieAlertArrayOutput) Index(i pulumi.IntInput) WorkflowTaskUpdateOpsgenieAlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateOpsgenieAlert {
		return vs[0].([]*WorkflowTaskUpdateOpsgenieAlert)[vs[1].(int)]
	}).(WorkflowTaskUpdateOpsgenieAlertOutput)
}

type WorkflowTaskUpdateOpsgenieAlertMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateOpsgenieAlertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateOpsgenieAlert)(nil)).Elem()
}

func (o WorkflowTaskUpdateOpsgenieAlertMapOutput) ToWorkflowTaskUpdateOpsgenieAlertMapOutput() WorkflowTaskUpdateOpsgenieAlertMapOutput {
	return o
}

func (o WorkflowTaskUpdateOpsgenieAlertMapOutput) ToWorkflowTaskUpdateOpsgenieAlertMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateOpsgenieAlertMapOutput {
	return o
}

func (o WorkflowTaskUpdateOpsgenieAlertMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskUpdateOpsgenieAlertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateOpsgenieAlert {
		return vs[0].(map[string]*WorkflowTaskUpdateOpsgenieAlert)[vs[1].(string)]
	}).(WorkflowTaskUpdateOpsgenieAlertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateOpsgenieAlertInput)(nil)).Elem(), &WorkflowTaskUpdateOpsgenieAlert{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateOpsgenieAlertArrayInput)(nil)).Elem(), WorkflowTaskUpdateOpsgenieAlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateOpsgenieAlertMapInput)(nil)).Elem(), WorkflowTaskUpdateOpsgenieAlertMap{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateOpsgenieAlertOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateOpsgenieAlertArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateOpsgenieAlertMapOutput{})
}
