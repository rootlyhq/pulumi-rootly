// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type ScheduleRotationUser struct {
	pulumi.CustomResourceState

	// Position of the user inside rotation
	Position           pulumi.IntOutput    `pulumi:"position"`
	ScheduleRotationId pulumi.StringOutput `pulumi:"scheduleRotationId"`
	// Schedule rotation user
	UserId pulumi.IntOutput `pulumi:"userId"`
}

// NewScheduleRotationUser registers a new resource with the given unique name, arguments, and options.
func NewScheduleRotationUser(ctx *pulumi.Context,
	name string, args *ScheduleRotationUserArgs, opts ...pulumi.ResourceOption) (*ScheduleRotationUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScheduleRotationUser
	err := ctx.RegisterResource("rootly:index/scheduleRotationUser:ScheduleRotationUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScheduleRotationUser gets an existing ScheduleRotationUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScheduleRotationUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduleRotationUserState, opts ...pulumi.ResourceOption) (*ScheduleRotationUser, error) {
	var resource ScheduleRotationUser
	err := ctx.ReadResource("rootly:index/scheduleRotationUser:ScheduleRotationUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScheduleRotationUser resources.
type scheduleRotationUserState struct {
	// Position of the user inside rotation
	Position           *int    `pulumi:"position"`
	ScheduleRotationId *string `pulumi:"scheduleRotationId"`
	// Schedule rotation user
	UserId *int `pulumi:"userId"`
}

type ScheduleRotationUserState struct {
	// Position of the user inside rotation
	Position           pulumi.IntPtrInput
	ScheduleRotationId pulumi.StringPtrInput
	// Schedule rotation user
	UserId pulumi.IntPtrInput
}

func (ScheduleRotationUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleRotationUserState)(nil)).Elem()
}

type scheduleRotationUserArgs struct {
	// Position of the user inside rotation
	Position           *int    `pulumi:"position"`
	ScheduleRotationId *string `pulumi:"scheduleRotationId"`
	// Schedule rotation user
	UserId int `pulumi:"userId"`
}

// The set of arguments for constructing a ScheduleRotationUser resource.
type ScheduleRotationUserArgs struct {
	// Position of the user inside rotation
	Position           pulumi.IntPtrInput
	ScheduleRotationId pulumi.StringPtrInput
	// Schedule rotation user
	UserId pulumi.IntInput
}

func (ScheduleRotationUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleRotationUserArgs)(nil)).Elem()
}

type ScheduleRotationUserInput interface {
	pulumi.Input

	ToScheduleRotationUserOutput() ScheduleRotationUserOutput
	ToScheduleRotationUserOutputWithContext(ctx context.Context) ScheduleRotationUserOutput
}

func (*ScheduleRotationUser) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleRotationUser)(nil)).Elem()
}

func (i *ScheduleRotationUser) ToScheduleRotationUserOutput() ScheduleRotationUserOutput {
	return i.ToScheduleRotationUserOutputWithContext(context.Background())
}

func (i *ScheduleRotationUser) ToScheduleRotationUserOutputWithContext(ctx context.Context) ScheduleRotationUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationUserOutput)
}

// ScheduleRotationUserArrayInput is an input type that accepts ScheduleRotationUserArray and ScheduleRotationUserArrayOutput values.
// You can construct a concrete instance of `ScheduleRotationUserArrayInput` via:
//
//	ScheduleRotationUserArray{ ScheduleRotationUserArgs{...} }
type ScheduleRotationUserArrayInput interface {
	pulumi.Input

	ToScheduleRotationUserArrayOutput() ScheduleRotationUserArrayOutput
	ToScheduleRotationUserArrayOutputWithContext(context.Context) ScheduleRotationUserArrayOutput
}

type ScheduleRotationUserArray []ScheduleRotationUserInput

func (ScheduleRotationUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScheduleRotationUser)(nil)).Elem()
}

func (i ScheduleRotationUserArray) ToScheduleRotationUserArrayOutput() ScheduleRotationUserArrayOutput {
	return i.ToScheduleRotationUserArrayOutputWithContext(context.Background())
}

func (i ScheduleRotationUserArray) ToScheduleRotationUserArrayOutputWithContext(ctx context.Context) ScheduleRotationUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationUserArrayOutput)
}

// ScheduleRotationUserMapInput is an input type that accepts ScheduleRotationUserMap and ScheduleRotationUserMapOutput values.
// You can construct a concrete instance of `ScheduleRotationUserMapInput` via:
//
//	ScheduleRotationUserMap{ "key": ScheduleRotationUserArgs{...} }
type ScheduleRotationUserMapInput interface {
	pulumi.Input

	ToScheduleRotationUserMapOutput() ScheduleRotationUserMapOutput
	ToScheduleRotationUserMapOutputWithContext(context.Context) ScheduleRotationUserMapOutput
}

type ScheduleRotationUserMap map[string]ScheduleRotationUserInput

func (ScheduleRotationUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScheduleRotationUser)(nil)).Elem()
}

func (i ScheduleRotationUserMap) ToScheduleRotationUserMapOutput() ScheduleRotationUserMapOutput {
	return i.ToScheduleRotationUserMapOutputWithContext(context.Background())
}

func (i ScheduleRotationUserMap) ToScheduleRotationUserMapOutputWithContext(ctx context.Context) ScheduleRotationUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationUserMapOutput)
}

type ScheduleRotationUserOutput struct{ *pulumi.OutputState }

func (ScheduleRotationUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleRotationUser)(nil)).Elem()
}

func (o ScheduleRotationUserOutput) ToScheduleRotationUserOutput() ScheduleRotationUserOutput {
	return o
}

func (o ScheduleRotationUserOutput) ToScheduleRotationUserOutputWithContext(ctx context.Context) ScheduleRotationUserOutput {
	return o
}

// Position of the user inside rotation
func (o ScheduleRotationUserOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *ScheduleRotationUser) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

func (o ScheduleRotationUserOutput) ScheduleRotationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduleRotationUser) pulumi.StringOutput { return v.ScheduleRotationId }).(pulumi.StringOutput)
}

// Schedule rotation user
func (o ScheduleRotationUserOutput) UserId() pulumi.IntOutput {
	return o.ApplyT(func(v *ScheduleRotationUser) pulumi.IntOutput { return v.UserId }).(pulumi.IntOutput)
}

type ScheduleRotationUserArrayOutput struct{ *pulumi.OutputState }

func (ScheduleRotationUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScheduleRotationUser)(nil)).Elem()
}

func (o ScheduleRotationUserArrayOutput) ToScheduleRotationUserArrayOutput() ScheduleRotationUserArrayOutput {
	return o
}

func (o ScheduleRotationUserArrayOutput) ToScheduleRotationUserArrayOutputWithContext(ctx context.Context) ScheduleRotationUserArrayOutput {
	return o
}

func (o ScheduleRotationUserArrayOutput) Index(i pulumi.IntInput) ScheduleRotationUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScheduleRotationUser {
		return vs[0].([]*ScheduleRotationUser)[vs[1].(int)]
	}).(ScheduleRotationUserOutput)
}

type ScheduleRotationUserMapOutput struct{ *pulumi.OutputState }

func (ScheduleRotationUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScheduleRotationUser)(nil)).Elem()
}

func (o ScheduleRotationUserMapOutput) ToScheduleRotationUserMapOutput() ScheduleRotationUserMapOutput {
	return o
}

func (o ScheduleRotationUserMapOutput) ToScheduleRotationUserMapOutputWithContext(ctx context.Context) ScheduleRotationUserMapOutput {
	return o
}

func (o ScheduleRotationUserMapOutput) MapIndex(k pulumi.StringInput) ScheduleRotationUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScheduleRotationUser {
		return vs[0].(map[string]*ScheduleRotationUser)[vs[1].(string)]
	}).(ScheduleRotationUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationUserInput)(nil)).Elem(), &ScheduleRotationUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationUserArrayInput)(nil)).Elem(), ScheduleRotationUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationUserMapInput)(nil)).Elem(), ScheduleRotationUserMap{})
	pulumi.RegisterOutputType(ScheduleRotationUserOutput{})
	pulumi.RegisterOutputType(ScheduleRotationUserArrayOutput{})
	pulumi.RegisterOutputType(ScheduleRotationUserMapOutput{})
}
