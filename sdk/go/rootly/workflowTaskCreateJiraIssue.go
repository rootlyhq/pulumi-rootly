// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createJiraIssue task.
//
// ## Example Usage
type WorkflowTaskCreateJiraIssue struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateJiraIssueTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreateJiraIssue registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreateJiraIssue(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreateJiraIssueArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateJiraIssue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreateJiraIssue
	err := ctx.RegisterResource("rootly:index/workflowTaskCreateJiraIssue:WorkflowTaskCreateJiraIssue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreateJiraIssue gets an existing WorkflowTaskCreateJiraIssue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreateJiraIssue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreateJiraIssueState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateJiraIssue, error) {
	var resource WorkflowTaskCreateJiraIssue
	err := ctx.ReadResource("rootly:index/workflowTaskCreateJiraIssue:WorkflowTaskCreateJiraIssue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreateJiraIssue resources.
type workflowTaskCreateJiraIssueState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreateJiraIssueTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreateJiraIssueState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateJiraIssueTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreateJiraIssueState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateJiraIssueState)(nil)).Elem()
}

type workflowTaskCreateJiraIssueArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateJiraIssueTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreateJiraIssue resource.
type WorkflowTaskCreateJiraIssueArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateJiraIssueTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreateJiraIssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateJiraIssueArgs)(nil)).Elem()
}

type WorkflowTaskCreateJiraIssueInput interface {
	pulumi.Input

	ToWorkflowTaskCreateJiraIssueOutput() WorkflowTaskCreateJiraIssueOutput
	ToWorkflowTaskCreateJiraIssueOutputWithContext(ctx context.Context) WorkflowTaskCreateJiraIssueOutput
}

func (*WorkflowTaskCreateJiraIssue) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateJiraIssue)(nil)).Elem()
}

func (i *WorkflowTaskCreateJiraIssue) ToWorkflowTaskCreateJiraIssueOutput() WorkflowTaskCreateJiraIssueOutput {
	return i.ToWorkflowTaskCreateJiraIssueOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreateJiraIssue) ToWorkflowTaskCreateJiraIssueOutputWithContext(ctx context.Context) WorkflowTaskCreateJiraIssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateJiraIssueOutput)
}

// WorkflowTaskCreateJiraIssueArrayInput is an input type that accepts WorkflowTaskCreateJiraIssueArray and WorkflowTaskCreateJiraIssueArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateJiraIssueArrayInput` via:
//
//	WorkflowTaskCreateJiraIssueArray{ WorkflowTaskCreateJiraIssueArgs{...} }
type WorkflowTaskCreateJiraIssueArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreateJiraIssueArrayOutput() WorkflowTaskCreateJiraIssueArrayOutput
	ToWorkflowTaskCreateJiraIssueArrayOutputWithContext(context.Context) WorkflowTaskCreateJiraIssueArrayOutput
}

type WorkflowTaskCreateJiraIssueArray []WorkflowTaskCreateJiraIssueInput

func (WorkflowTaskCreateJiraIssueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateJiraIssue)(nil)).Elem()
}

func (i WorkflowTaskCreateJiraIssueArray) ToWorkflowTaskCreateJiraIssueArrayOutput() WorkflowTaskCreateJiraIssueArrayOutput {
	return i.ToWorkflowTaskCreateJiraIssueArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateJiraIssueArray) ToWorkflowTaskCreateJiraIssueArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateJiraIssueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateJiraIssueArrayOutput)
}

// WorkflowTaskCreateJiraIssueMapInput is an input type that accepts WorkflowTaskCreateJiraIssueMap and WorkflowTaskCreateJiraIssueMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateJiraIssueMapInput` via:
//
//	WorkflowTaskCreateJiraIssueMap{ "key": WorkflowTaskCreateJiraIssueArgs{...} }
type WorkflowTaskCreateJiraIssueMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreateJiraIssueMapOutput() WorkflowTaskCreateJiraIssueMapOutput
	ToWorkflowTaskCreateJiraIssueMapOutputWithContext(context.Context) WorkflowTaskCreateJiraIssueMapOutput
}

type WorkflowTaskCreateJiraIssueMap map[string]WorkflowTaskCreateJiraIssueInput

func (WorkflowTaskCreateJiraIssueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateJiraIssue)(nil)).Elem()
}

func (i WorkflowTaskCreateJiraIssueMap) ToWorkflowTaskCreateJiraIssueMapOutput() WorkflowTaskCreateJiraIssueMapOutput {
	return i.ToWorkflowTaskCreateJiraIssueMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateJiraIssueMap) ToWorkflowTaskCreateJiraIssueMapOutputWithContext(ctx context.Context) WorkflowTaskCreateJiraIssueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateJiraIssueMapOutput)
}

type WorkflowTaskCreateJiraIssueOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateJiraIssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateJiraIssue)(nil)).Elem()
}

func (o WorkflowTaskCreateJiraIssueOutput) ToWorkflowTaskCreateJiraIssueOutput() WorkflowTaskCreateJiraIssueOutput {
	return o
}

func (o WorkflowTaskCreateJiraIssueOutput) ToWorkflowTaskCreateJiraIssueOutputWithContext(ctx context.Context) WorkflowTaskCreateJiraIssueOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreateJiraIssueOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateJiraIssue) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreateJiraIssueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateJiraIssue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreateJiraIssueOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateJiraIssue) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreateJiraIssueOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateJiraIssue) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreateJiraIssueOutput) TaskParams() WorkflowTaskCreateJiraIssueTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateJiraIssue) WorkflowTaskCreateJiraIssueTaskParamsOutput { return v.TaskParams }).(WorkflowTaskCreateJiraIssueTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreateJiraIssueOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateJiraIssue) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreateJiraIssueArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateJiraIssueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateJiraIssue)(nil)).Elem()
}

func (o WorkflowTaskCreateJiraIssueArrayOutput) ToWorkflowTaskCreateJiraIssueArrayOutput() WorkflowTaskCreateJiraIssueArrayOutput {
	return o
}

func (o WorkflowTaskCreateJiraIssueArrayOutput) ToWorkflowTaskCreateJiraIssueArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateJiraIssueArrayOutput {
	return o
}

func (o WorkflowTaskCreateJiraIssueArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreateJiraIssueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreateJiraIssue {
		return vs[0].([]*WorkflowTaskCreateJiraIssue)[vs[1].(int)]
	}).(WorkflowTaskCreateJiraIssueOutput)
}

type WorkflowTaskCreateJiraIssueMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateJiraIssueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateJiraIssue)(nil)).Elem()
}

func (o WorkflowTaskCreateJiraIssueMapOutput) ToWorkflowTaskCreateJiraIssueMapOutput() WorkflowTaskCreateJiraIssueMapOutput {
	return o
}

func (o WorkflowTaskCreateJiraIssueMapOutput) ToWorkflowTaskCreateJiraIssueMapOutputWithContext(ctx context.Context) WorkflowTaskCreateJiraIssueMapOutput {
	return o
}

func (o WorkflowTaskCreateJiraIssueMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreateJiraIssueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreateJiraIssue {
		return vs[0].(map[string]*WorkflowTaskCreateJiraIssue)[vs[1].(string)]
	}).(WorkflowTaskCreateJiraIssueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateJiraIssueInput)(nil)).Elem(), &WorkflowTaskCreateJiraIssue{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateJiraIssueArrayInput)(nil)).Elem(), WorkflowTaskCreateJiraIssueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateJiraIssueMapInput)(nil)).Elem(), WorkflowTaskCreateJiraIssueMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreateJiraIssueOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateJiraIssueArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateJiraIssueMapOutput{})
}
