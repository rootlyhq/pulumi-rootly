// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createWebexMeeting task.
type WorkflowTaskCreateWebexMeeting struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateWebexMeetingTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreateWebexMeeting registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreateWebexMeeting(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreateWebexMeetingArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateWebexMeeting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreateWebexMeeting
	err := ctx.RegisterResource("rootly:index/workflowTaskCreateWebexMeeting:WorkflowTaskCreateWebexMeeting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreateWebexMeeting gets an existing WorkflowTaskCreateWebexMeeting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreateWebexMeeting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreateWebexMeetingState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateWebexMeeting, error) {
	var resource WorkflowTaskCreateWebexMeeting
	err := ctx.ReadResource("rootly:index/workflowTaskCreateWebexMeeting:WorkflowTaskCreateWebexMeeting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreateWebexMeeting resources.
type workflowTaskCreateWebexMeetingState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreateWebexMeetingTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreateWebexMeetingState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateWebexMeetingTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreateWebexMeetingState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateWebexMeetingState)(nil)).Elem()
}

type workflowTaskCreateWebexMeetingArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateWebexMeetingTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreateWebexMeeting resource.
type WorkflowTaskCreateWebexMeetingArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateWebexMeetingTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreateWebexMeetingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateWebexMeetingArgs)(nil)).Elem()
}

type WorkflowTaskCreateWebexMeetingInput interface {
	pulumi.Input

	ToWorkflowTaskCreateWebexMeetingOutput() WorkflowTaskCreateWebexMeetingOutput
	ToWorkflowTaskCreateWebexMeetingOutputWithContext(ctx context.Context) WorkflowTaskCreateWebexMeetingOutput
}

func (*WorkflowTaskCreateWebexMeeting) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateWebexMeeting)(nil)).Elem()
}

func (i *WorkflowTaskCreateWebexMeeting) ToWorkflowTaskCreateWebexMeetingOutput() WorkflowTaskCreateWebexMeetingOutput {
	return i.ToWorkflowTaskCreateWebexMeetingOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreateWebexMeeting) ToWorkflowTaskCreateWebexMeetingOutputWithContext(ctx context.Context) WorkflowTaskCreateWebexMeetingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateWebexMeetingOutput)
}

// WorkflowTaskCreateWebexMeetingArrayInput is an input type that accepts WorkflowTaskCreateWebexMeetingArray and WorkflowTaskCreateWebexMeetingArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateWebexMeetingArrayInput` via:
//
//	WorkflowTaskCreateWebexMeetingArray{ WorkflowTaskCreateWebexMeetingArgs{...} }
type WorkflowTaskCreateWebexMeetingArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreateWebexMeetingArrayOutput() WorkflowTaskCreateWebexMeetingArrayOutput
	ToWorkflowTaskCreateWebexMeetingArrayOutputWithContext(context.Context) WorkflowTaskCreateWebexMeetingArrayOutput
}

type WorkflowTaskCreateWebexMeetingArray []WorkflowTaskCreateWebexMeetingInput

func (WorkflowTaskCreateWebexMeetingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateWebexMeeting)(nil)).Elem()
}

func (i WorkflowTaskCreateWebexMeetingArray) ToWorkflowTaskCreateWebexMeetingArrayOutput() WorkflowTaskCreateWebexMeetingArrayOutput {
	return i.ToWorkflowTaskCreateWebexMeetingArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateWebexMeetingArray) ToWorkflowTaskCreateWebexMeetingArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateWebexMeetingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateWebexMeetingArrayOutput)
}

// WorkflowTaskCreateWebexMeetingMapInput is an input type that accepts WorkflowTaskCreateWebexMeetingMap and WorkflowTaskCreateWebexMeetingMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateWebexMeetingMapInput` via:
//
//	WorkflowTaskCreateWebexMeetingMap{ "key": WorkflowTaskCreateWebexMeetingArgs{...} }
type WorkflowTaskCreateWebexMeetingMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreateWebexMeetingMapOutput() WorkflowTaskCreateWebexMeetingMapOutput
	ToWorkflowTaskCreateWebexMeetingMapOutputWithContext(context.Context) WorkflowTaskCreateWebexMeetingMapOutput
}

type WorkflowTaskCreateWebexMeetingMap map[string]WorkflowTaskCreateWebexMeetingInput

func (WorkflowTaskCreateWebexMeetingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateWebexMeeting)(nil)).Elem()
}

func (i WorkflowTaskCreateWebexMeetingMap) ToWorkflowTaskCreateWebexMeetingMapOutput() WorkflowTaskCreateWebexMeetingMapOutput {
	return i.ToWorkflowTaskCreateWebexMeetingMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateWebexMeetingMap) ToWorkflowTaskCreateWebexMeetingMapOutputWithContext(ctx context.Context) WorkflowTaskCreateWebexMeetingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateWebexMeetingMapOutput)
}

type WorkflowTaskCreateWebexMeetingOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateWebexMeetingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateWebexMeeting)(nil)).Elem()
}

func (o WorkflowTaskCreateWebexMeetingOutput) ToWorkflowTaskCreateWebexMeetingOutput() WorkflowTaskCreateWebexMeetingOutput {
	return o
}

func (o WorkflowTaskCreateWebexMeetingOutput) ToWorkflowTaskCreateWebexMeetingOutputWithContext(ctx context.Context) WorkflowTaskCreateWebexMeetingOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreateWebexMeetingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateWebexMeeting) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreateWebexMeetingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateWebexMeeting) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreateWebexMeetingOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateWebexMeeting) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreateWebexMeetingOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateWebexMeeting) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreateWebexMeetingOutput) TaskParams() WorkflowTaskCreateWebexMeetingTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateWebexMeeting) WorkflowTaskCreateWebexMeetingTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskCreateWebexMeetingTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreateWebexMeetingOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateWebexMeeting) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreateWebexMeetingArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateWebexMeetingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateWebexMeeting)(nil)).Elem()
}

func (o WorkflowTaskCreateWebexMeetingArrayOutput) ToWorkflowTaskCreateWebexMeetingArrayOutput() WorkflowTaskCreateWebexMeetingArrayOutput {
	return o
}

func (o WorkflowTaskCreateWebexMeetingArrayOutput) ToWorkflowTaskCreateWebexMeetingArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateWebexMeetingArrayOutput {
	return o
}

func (o WorkflowTaskCreateWebexMeetingArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreateWebexMeetingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreateWebexMeeting {
		return vs[0].([]*WorkflowTaskCreateWebexMeeting)[vs[1].(int)]
	}).(WorkflowTaskCreateWebexMeetingOutput)
}

type WorkflowTaskCreateWebexMeetingMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateWebexMeetingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateWebexMeeting)(nil)).Elem()
}

func (o WorkflowTaskCreateWebexMeetingMapOutput) ToWorkflowTaskCreateWebexMeetingMapOutput() WorkflowTaskCreateWebexMeetingMapOutput {
	return o
}

func (o WorkflowTaskCreateWebexMeetingMapOutput) ToWorkflowTaskCreateWebexMeetingMapOutputWithContext(ctx context.Context) WorkflowTaskCreateWebexMeetingMapOutput {
	return o
}

func (o WorkflowTaskCreateWebexMeetingMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreateWebexMeetingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreateWebexMeeting {
		return vs[0].(map[string]*WorkflowTaskCreateWebexMeeting)[vs[1].(string)]
	}).(WorkflowTaskCreateWebexMeetingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateWebexMeetingInput)(nil)).Elem(), &WorkflowTaskCreateWebexMeeting{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateWebexMeetingArrayInput)(nil)).Elem(), WorkflowTaskCreateWebexMeetingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateWebexMeetingMapInput)(nil)).Elem(), WorkflowTaskCreateWebexMeetingMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreateWebexMeetingOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateWebexMeetingArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateWebexMeetingMapOutput{})
}
