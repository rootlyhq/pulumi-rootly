// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// ## Example Usage
type Severity struct {
	pulumi.CustomResourceState

	// The hex color of the severity
	Color pulumi.StringOutput `pulumi:"color"`
	// The description of the severity
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the severity
	Name pulumi.StringOutput `pulumi:"name"`
	// Emails to attach to the severity
	NotifyEmails pulumi.StringArrayOutput `pulumi:"notifyEmails"`
	// Position of the severity
	Position pulumi.IntOutput `pulumi:"position"`
	// The severity of the severity. Value must be one of `critical`, `high`, `medium`, `low`.
	Severity pulumi.StringPtrOutput `pulumi:"severity"`
	// Slack Aliases associated with this severity
	SlackAliases SeveritySlackAliasArrayOutput `pulumi:"slackAliases"`
	// Slack Channels associated with this severity
	SlackChannels SeveritySlackChannelArrayOutput `pulumi:"slackChannels"`
	// The slug of the severity
	Slug pulumi.StringOutput `pulumi:"slug"`
}

// NewSeverity registers a new resource with the given unique name, arguments, and options.
func NewSeverity(ctx *pulumi.Context,
	name string, args *SeverityArgs, opts ...pulumi.ResourceOption) (*Severity, error) {
	if args == nil {
		args = &SeverityArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Severity
	err := ctx.RegisterResource("rootly:index/severity:Severity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSeverity gets an existing Severity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSeverity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SeverityState, opts ...pulumi.ResourceOption) (*Severity, error) {
	var resource Severity
	err := ctx.ReadResource("rootly:index/severity:Severity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Severity resources.
type severityState struct {
	// The hex color of the severity
	Color *string `pulumi:"color"`
	// The description of the severity
	Description *string `pulumi:"description"`
	// The name of the severity
	Name *string `pulumi:"name"`
	// Emails to attach to the severity
	NotifyEmails []string `pulumi:"notifyEmails"`
	// Position of the severity
	Position *int `pulumi:"position"`
	// The severity of the severity. Value must be one of `critical`, `high`, `medium`, `low`.
	Severity *string `pulumi:"severity"`
	// Slack Aliases associated with this severity
	SlackAliases []SeveritySlackAlias `pulumi:"slackAliases"`
	// Slack Channels associated with this severity
	SlackChannels []SeveritySlackChannel `pulumi:"slackChannels"`
	// The slug of the severity
	Slug *string `pulumi:"slug"`
}

type SeverityState struct {
	// The hex color of the severity
	Color pulumi.StringPtrInput
	// The description of the severity
	Description pulumi.StringPtrInput
	// The name of the severity
	Name pulumi.StringPtrInput
	// Emails to attach to the severity
	NotifyEmails pulumi.StringArrayInput
	// Position of the severity
	Position pulumi.IntPtrInput
	// The severity of the severity. Value must be one of `critical`, `high`, `medium`, `low`.
	Severity pulumi.StringPtrInput
	// Slack Aliases associated with this severity
	SlackAliases SeveritySlackAliasArrayInput
	// Slack Channels associated with this severity
	SlackChannels SeveritySlackChannelArrayInput
	// The slug of the severity
	Slug pulumi.StringPtrInput
}

func (SeverityState) ElementType() reflect.Type {
	return reflect.TypeOf((*severityState)(nil)).Elem()
}

type severityArgs struct {
	// The hex color of the severity
	Color *string `pulumi:"color"`
	// The description of the severity
	Description *string `pulumi:"description"`
	// The name of the severity
	Name *string `pulumi:"name"`
	// Emails to attach to the severity
	NotifyEmails []string `pulumi:"notifyEmails"`
	// Position of the severity
	Position *int `pulumi:"position"`
	// The severity of the severity. Value must be one of `critical`, `high`, `medium`, `low`.
	Severity *string `pulumi:"severity"`
	// Slack Aliases associated with this severity
	SlackAliases []SeveritySlackAlias `pulumi:"slackAliases"`
	// Slack Channels associated with this severity
	SlackChannels []SeveritySlackChannel `pulumi:"slackChannels"`
	// The slug of the severity
	Slug *string `pulumi:"slug"`
}

// The set of arguments for constructing a Severity resource.
type SeverityArgs struct {
	// The hex color of the severity
	Color pulumi.StringPtrInput
	// The description of the severity
	Description pulumi.StringPtrInput
	// The name of the severity
	Name pulumi.StringPtrInput
	// Emails to attach to the severity
	NotifyEmails pulumi.StringArrayInput
	// Position of the severity
	Position pulumi.IntPtrInput
	// The severity of the severity. Value must be one of `critical`, `high`, `medium`, `low`.
	Severity pulumi.StringPtrInput
	// Slack Aliases associated with this severity
	SlackAliases SeveritySlackAliasArrayInput
	// Slack Channels associated with this severity
	SlackChannels SeveritySlackChannelArrayInput
	// The slug of the severity
	Slug pulumi.StringPtrInput
}

func (SeverityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*severityArgs)(nil)).Elem()
}

type SeverityInput interface {
	pulumi.Input

	ToSeverityOutput() SeverityOutput
	ToSeverityOutputWithContext(ctx context.Context) SeverityOutput
}

func (*Severity) ElementType() reflect.Type {
	return reflect.TypeOf((**Severity)(nil)).Elem()
}

func (i *Severity) ToSeverityOutput() SeverityOutput {
	return i.ToSeverityOutputWithContext(context.Background())
}

func (i *Severity) ToSeverityOutputWithContext(ctx context.Context) SeverityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SeverityOutput)
}

// SeverityArrayInput is an input type that accepts SeverityArray and SeverityArrayOutput values.
// You can construct a concrete instance of `SeverityArrayInput` via:
//
//	SeverityArray{ SeverityArgs{...} }
type SeverityArrayInput interface {
	pulumi.Input

	ToSeverityArrayOutput() SeverityArrayOutput
	ToSeverityArrayOutputWithContext(context.Context) SeverityArrayOutput
}

type SeverityArray []SeverityInput

func (SeverityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Severity)(nil)).Elem()
}

func (i SeverityArray) ToSeverityArrayOutput() SeverityArrayOutput {
	return i.ToSeverityArrayOutputWithContext(context.Background())
}

func (i SeverityArray) ToSeverityArrayOutputWithContext(ctx context.Context) SeverityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SeverityArrayOutput)
}

// SeverityMapInput is an input type that accepts SeverityMap and SeverityMapOutput values.
// You can construct a concrete instance of `SeverityMapInput` via:
//
//	SeverityMap{ "key": SeverityArgs{...} }
type SeverityMapInput interface {
	pulumi.Input

	ToSeverityMapOutput() SeverityMapOutput
	ToSeverityMapOutputWithContext(context.Context) SeverityMapOutput
}

type SeverityMap map[string]SeverityInput

func (SeverityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Severity)(nil)).Elem()
}

func (i SeverityMap) ToSeverityMapOutput() SeverityMapOutput {
	return i.ToSeverityMapOutputWithContext(context.Background())
}

func (i SeverityMap) ToSeverityMapOutputWithContext(ctx context.Context) SeverityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SeverityMapOutput)
}

type SeverityOutput struct{ *pulumi.OutputState }

func (SeverityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Severity)(nil)).Elem()
}

func (o SeverityOutput) ToSeverityOutput() SeverityOutput {
	return o
}

func (o SeverityOutput) ToSeverityOutputWithContext(ctx context.Context) SeverityOutput {
	return o
}

// The hex color of the severity
func (o SeverityOutput) Color() pulumi.StringOutput {
	return o.ApplyT(func(v *Severity) pulumi.StringOutput { return v.Color }).(pulumi.StringOutput)
}

// The description of the severity
func (o SeverityOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Severity) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the severity
func (o SeverityOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Severity) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Emails to attach to the severity
func (o SeverityOutput) NotifyEmails() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *Severity) pulumi.StringArrayOutput { return v.NotifyEmails }).(pulumi.StringArrayOutput)
}

// Position of the severity
func (o SeverityOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *Severity) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// The severity of the severity. Value must be one of `critical`, `high`, `medium`, `low`.
func (o SeverityOutput) Severity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Severity) pulumi.StringPtrOutput { return v.Severity }).(pulumi.StringPtrOutput)
}

// Slack Aliases associated with this severity
func (o SeverityOutput) SlackAliases() SeveritySlackAliasArrayOutput {
	return o.ApplyT(func(v *Severity) SeveritySlackAliasArrayOutput { return v.SlackAliases }).(SeveritySlackAliasArrayOutput)
}

// Slack Channels associated with this severity
func (o SeverityOutput) SlackChannels() SeveritySlackChannelArrayOutput {
	return o.ApplyT(func(v *Severity) SeveritySlackChannelArrayOutput { return v.SlackChannels }).(SeveritySlackChannelArrayOutput)
}

// The slug of the severity
func (o SeverityOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Severity) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type SeverityArrayOutput struct{ *pulumi.OutputState }

func (SeverityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Severity)(nil)).Elem()
}

func (o SeverityArrayOutput) ToSeverityArrayOutput() SeverityArrayOutput {
	return o
}

func (o SeverityArrayOutput) ToSeverityArrayOutputWithContext(ctx context.Context) SeverityArrayOutput {
	return o
}

func (o SeverityArrayOutput) Index(i pulumi.IntInput) SeverityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Severity {
		return vs[0].([]*Severity)[vs[1].(int)]
	}).(SeverityOutput)
}

type SeverityMapOutput struct{ *pulumi.OutputState }

func (SeverityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Severity)(nil)).Elem()
}

func (o SeverityMapOutput) ToSeverityMapOutput() SeverityMapOutput {
	return o
}

func (o SeverityMapOutput) ToSeverityMapOutputWithContext(ctx context.Context) SeverityMapOutput {
	return o
}

func (o SeverityMapOutput) MapIndex(k pulumi.StringInput) SeverityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Severity {
		return vs[0].(map[string]*Severity)[vs[1].(string)]
	}).(SeverityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SeverityInput)(nil)).Elem(), &Severity{})
	pulumi.RegisterInputType(reflect.TypeOf((*SeverityArrayInput)(nil)).Elem(), SeverityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SeverityMapInput)(nil)).Elem(), SeverityMap{})
	pulumi.RegisterOutputType(SeverityOutput{})
	pulumi.RegisterOutputType(SeverityArrayOutput{})
	pulumi.RegisterOutputType(SeverityMapOutput{})
}
