// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages Severities (e.g SEV0, SEV1, SEV2, SEV3).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rootly/sdk/go/rootly"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := rootly.NewSeverity(ctx, "foo", nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import rootly:index/severity:Severity foo 11111111-2222-3333-4444-555555555555
// ```
type Severity struct {
	pulumi.CustomResourceState

	// The color of the severity
	Color pulumi.StringPtrOutput `pulumi:"color"`
	// The description of the severity
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the severity
	Name pulumi.StringOutput `pulumi:"name"`
	// The description of the severity
	Severity pulumi.StringPtrOutput `pulumi:"severity"`
	// The slug of the severity
	Slug pulumi.StringOutput `pulumi:"slug"`
}

// NewSeverity registers a new resource with the given unique name, arguments, and options.
func NewSeverity(ctx *pulumi.Context,
	name string, args *SeverityArgs, opts ...pulumi.ResourceOption) (*Severity, error) {
	if args == nil {
		args = &SeverityArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource Severity
	err := ctx.RegisterResource("rootly:index/severity:Severity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSeverity gets an existing Severity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSeverity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SeverityState, opts ...pulumi.ResourceOption) (*Severity, error) {
	var resource Severity
	err := ctx.ReadResource("rootly:index/severity:Severity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Severity resources.
type severityState struct {
	// The color of the severity
	Color *string `pulumi:"color"`
	// The description of the severity
	Description *string `pulumi:"description"`
	// The name of the severity
	Name *string `pulumi:"name"`
	// The description of the severity
	Severity *string `pulumi:"severity"`
	// The slug of the severity
	Slug *string `pulumi:"slug"`
}

type SeverityState struct {
	// The color of the severity
	Color pulumi.StringPtrInput
	// The description of the severity
	Description pulumi.StringPtrInput
	// The name of the severity
	Name pulumi.StringPtrInput
	// The description of the severity
	Severity pulumi.StringPtrInput
	// The slug of the severity
	Slug pulumi.StringPtrInput
}

func (SeverityState) ElementType() reflect.Type {
	return reflect.TypeOf((*severityState)(nil)).Elem()
}

type severityArgs struct {
	// The color of the severity
	Color *string `pulumi:"color"`
	// The description of the severity
	Description *string `pulumi:"description"`
	// The name of the severity
	Name *string `pulumi:"name"`
	// The description of the severity
	Severity *string `pulumi:"severity"`
	// The slug of the severity
	Slug *string `pulumi:"slug"`
}

// The set of arguments for constructing a Severity resource.
type SeverityArgs struct {
	// The color of the severity
	Color pulumi.StringPtrInput
	// The description of the severity
	Description pulumi.StringPtrInput
	// The name of the severity
	Name pulumi.StringPtrInput
	// The description of the severity
	Severity pulumi.StringPtrInput
	// The slug of the severity
	Slug pulumi.StringPtrInput
}

func (SeverityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*severityArgs)(nil)).Elem()
}

type SeverityInput interface {
	pulumi.Input

	ToSeverityOutput() SeverityOutput
	ToSeverityOutputWithContext(ctx context.Context) SeverityOutput
}

func (*Severity) ElementType() reflect.Type {
	return reflect.TypeOf((**Severity)(nil)).Elem()
}

func (i *Severity) ToSeverityOutput() SeverityOutput {
	return i.ToSeverityOutputWithContext(context.Background())
}

func (i *Severity) ToSeverityOutputWithContext(ctx context.Context) SeverityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SeverityOutput)
}

// SeverityArrayInput is an input type that accepts SeverityArray and SeverityArrayOutput values.
// You can construct a concrete instance of `SeverityArrayInput` via:
//
//          SeverityArray{ SeverityArgs{...} }
type SeverityArrayInput interface {
	pulumi.Input

	ToSeverityArrayOutput() SeverityArrayOutput
	ToSeverityArrayOutputWithContext(context.Context) SeverityArrayOutput
}

type SeverityArray []SeverityInput

func (SeverityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Severity)(nil)).Elem()
}

func (i SeverityArray) ToSeverityArrayOutput() SeverityArrayOutput {
	return i.ToSeverityArrayOutputWithContext(context.Background())
}

func (i SeverityArray) ToSeverityArrayOutputWithContext(ctx context.Context) SeverityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SeverityArrayOutput)
}

// SeverityMapInput is an input type that accepts SeverityMap and SeverityMapOutput values.
// You can construct a concrete instance of `SeverityMapInput` via:
//
//          SeverityMap{ "key": SeverityArgs{...} }
type SeverityMapInput interface {
	pulumi.Input

	ToSeverityMapOutput() SeverityMapOutput
	ToSeverityMapOutputWithContext(context.Context) SeverityMapOutput
}

type SeverityMap map[string]SeverityInput

func (SeverityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Severity)(nil)).Elem()
}

func (i SeverityMap) ToSeverityMapOutput() SeverityMapOutput {
	return i.ToSeverityMapOutputWithContext(context.Background())
}

func (i SeverityMap) ToSeverityMapOutputWithContext(ctx context.Context) SeverityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SeverityMapOutput)
}

type SeverityOutput struct{ *pulumi.OutputState }

func (SeverityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Severity)(nil)).Elem()
}

func (o SeverityOutput) ToSeverityOutput() SeverityOutput {
	return o
}

func (o SeverityOutput) ToSeverityOutputWithContext(ctx context.Context) SeverityOutput {
	return o
}

type SeverityArrayOutput struct{ *pulumi.OutputState }

func (SeverityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Severity)(nil)).Elem()
}

func (o SeverityArrayOutput) ToSeverityArrayOutput() SeverityArrayOutput {
	return o
}

func (o SeverityArrayOutput) ToSeverityArrayOutputWithContext(ctx context.Context) SeverityArrayOutput {
	return o
}

func (o SeverityArrayOutput) Index(i pulumi.IntInput) SeverityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Severity {
		return vs[0].([]*Severity)[vs[1].(int)]
	}).(SeverityOutput)
}

type SeverityMapOutput struct{ *pulumi.OutputState }

func (SeverityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Severity)(nil)).Elem()
}

func (o SeverityMapOutput) ToSeverityMapOutput() SeverityMapOutput {
	return o
}

func (o SeverityMapOutput) ToSeverityMapOutputWithContext(ctx context.Context) SeverityMapOutput {
	return o
}

func (o SeverityMapOutput) MapIndex(k pulumi.StringInput) SeverityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Severity {
		return vs[0].(map[string]*Severity)[vs[1].(string)]
	}).(SeverityOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*SeverityInput)(nil)).Elem(), &Severity{})
	pulumi.RegisterInputType(reflect.TypeOf((*SeverityArrayInput)(nil)).Elem(), SeverityArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SeverityMapInput)(nil)).Elem(), SeverityMap{})
	pulumi.RegisterOutputType(SeverityOutput{})
	pulumi.RegisterOutputType(SeverityArrayOutput{})
	pulumi.RegisterOutputType(SeverityMapOutput{})
}
