// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow inviteToSlackChannelRootly task.
type WorkflowTaskInviteToSlackChannelRootly struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskInviteToSlackChannelRootlyTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskInviteToSlackChannelRootly registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskInviteToSlackChannelRootly(ctx *pulumi.Context,
	name string, args *WorkflowTaskInviteToSlackChannelRootlyArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskInviteToSlackChannelRootly, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskInviteToSlackChannelRootly
	err := ctx.RegisterResource("rootly:index/workflowTaskInviteToSlackChannelRootly:WorkflowTaskInviteToSlackChannelRootly", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskInviteToSlackChannelRootly gets an existing WorkflowTaskInviteToSlackChannelRootly resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskInviteToSlackChannelRootly(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskInviteToSlackChannelRootlyState, opts ...pulumi.ResourceOption) (*WorkflowTaskInviteToSlackChannelRootly, error) {
	var resource WorkflowTaskInviteToSlackChannelRootly
	err := ctx.ReadResource("rootly:index/workflowTaskInviteToSlackChannelRootly:WorkflowTaskInviteToSlackChannelRootly", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskInviteToSlackChannelRootly resources.
type workflowTaskInviteToSlackChannelRootlyState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskInviteToSlackChannelRootlyTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskInviteToSlackChannelRootlyState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskInviteToSlackChannelRootlyTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskInviteToSlackChannelRootlyState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskInviteToSlackChannelRootlyState)(nil)).Elem()
}

type workflowTaskInviteToSlackChannelRootlyArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskInviteToSlackChannelRootlyTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskInviteToSlackChannelRootly resource.
type WorkflowTaskInviteToSlackChannelRootlyArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskInviteToSlackChannelRootlyTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskInviteToSlackChannelRootlyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskInviteToSlackChannelRootlyArgs)(nil)).Elem()
}

type WorkflowTaskInviteToSlackChannelRootlyInput interface {
	pulumi.Input

	ToWorkflowTaskInviteToSlackChannelRootlyOutput() WorkflowTaskInviteToSlackChannelRootlyOutput
	ToWorkflowTaskInviteToSlackChannelRootlyOutputWithContext(ctx context.Context) WorkflowTaskInviteToSlackChannelRootlyOutput
}

func (*WorkflowTaskInviteToSlackChannelRootly) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskInviteToSlackChannelRootly)(nil)).Elem()
}

func (i *WorkflowTaskInviteToSlackChannelRootly) ToWorkflowTaskInviteToSlackChannelRootlyOutput() WorkflowTaskInviteToSlackChannelRootlyOutput {
	return i.ToWorkflowTaskInviteToSlackChannelRootlyOutputWithContext(context.Background())
}

func (i *WorkflowTaskInviteToSlackChannelRootly) ToWorkflowTaskInviteToSlackChannelRootlyOutputWithContext(ctx context.Context) WorkflowTaskInviteToSlackChannelRootlyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskInviteToSlackChannelRootlyOutput)
}

// WorkflowTaskInviteToSlackChannelRootlyArrayInput is an input type that accepts WorkflowTaskInviteToSlackChannelRootlyArray and WorkflowTaskInviteToSlackChannelRootlyArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskInviteToSlackChannelRootlyArrayInput` via:
//
//	WorkflowTaskInviteToSlackChannelRootlyArray{ WorkflowTaskInviteToSlackChannelRootlyArgs{...} }
type WorkflowTaskInviteToSlackChannelRootlyArrayInput interface {
	pulumi.Input

	ToWorkflowTaskInviteToSlackChannelRootlyArrayOutput() WorkflowTaskInviteToSlackChannelRootlyArrayOutput
	ToWorkflowTaskInviteToSlackChannelRootlyArrayOutputWithContext(context.Context) WorkflowTaskInviteToSlackChannelRootlyArrayOutput
}

type WorkflowTaskInviteToSlackChannelRootlyArray []WorkflowTaskInviteToSlackChannelRootlyInput

func (WorkflowTaskInviteToSlackChannelRootlyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskInviteToSlackChannelRootly)(nil)).Elem()
}

func (i WorkflowTaskInviteToSlackChannelRootlyArray) ToWorkflowTaskInviteToSlackChannelRootlyArrayOutput() WorkflowTaskInviteToSlackChannelRootlyArrayOutput {
	return i.ToWorkflowTaskInviteToSlackChannelRootlyArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskInviteToSlackChannelRootlyArray) ToWorkflowTaskInviteToSlackChannelRootlyArrayOutputWithContext(ctx context.Context) WorkflowTaskInviteToSlackChannelRootlyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskInviteToSlackChannelRootlyArrayOutput)
}

// WorkflowTaskInviteToSlackChannelRootlyMapInput is an input type that accepts WorkflowTaskInviteToSlackChannelRootlyMap and WorkflowTaskInviteToSlackChannelRootlyMapOutput values.
// You can construct a concrete instance of `WorkflowTaskInviteToSlackChannelRootlyMapInput` via:
//
//	WorkflowTaskInviteToSlackChannelRootlyMap{ "key": WorkflowTaskInviteToSlackChannelRootlyArgs{...} }
type WorkflowTaskInviteToSlackChannelRootlyMapInput interface {
	pulumi.Input

	ToWorkflowTaskInviteToSlackChannelRootlyMapOutput() WorkflowTaskInviteToSlackChannelRootlyMapOutput
	ToWorkflowTaskInviteToSlackChannelRootlyMapOutputWithContext(context.Context) WorkflowTaskInviteToSlackChannelRootlyMapOutput
}

type WorkflowTaskInviteToSlackChannelRootlyMap map[string]WorkflowTaskInviteToSlackChannelRootlyInput

func (WorkflowTaskInviteToSlackChannelRootlyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskInviteToSlackChannelRootly)(nil)).Elem()
}

func (i WorkflowTaskInviteToSlackChannelRootlyMap) ToWorkflowTaskInviteToSlackChannelRootlyMapOutput() WorkflowTaskInviteToSlackChannelRootlyMapOutput {
	return i.ToWorkflowTaskInviteToSlackChannelRootlyMapOutputWithContext(context.Background())
}

func (i WorkflowTaskInviteToSlackChannelRootlyMap) ToWorkflowTaskInviteToSlackChannelRootlyMapOutputWithContext(ctx context.Context) WorkflowTaskInviteToSlackChannelRootlyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskInviteToSlackChannelRootlyMapOutput)
}

type WorkflowTaskInviteToSlackChannelRootlyOutput struct{ *pulumi.OutputState }

func (WorkflowTaskInviteToSlackChannelRootlyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskInviteToSlackChannelRootly)(nil)).Elem()
}

func (o WorkflowTaskInviteToSlackChannelRootlyOutput) ToWorkflowTaskInviteToSlackChannelRootlyOutput() WorkflowTaskInviteToSlackChannelRootlyOutput {
	return o
}

func (o WorkflowTaskInviteToSlackChannelRootlyOutput) ToWorkflowTaskInviteToSlackChannelRootlyOutputWithContext(ctx context.Context) WorkflowTaskInviteToSlackChannelRootlyOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskInviteToSlackChannelRootlyOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskInviteToSlackChannelRootly) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskInviteToSlackChannelRootlyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskInviteToSlackChannelRootly) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskInviteToSlackChannelRootlyOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskInviteToSlackChannelRootly) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskInviteToSlackChannelRootlyOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskInviteToSlackChannelRootly) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskInviteToSlackChannelRootlyOutput) TaskParams() WorkflowTaskInviteToSlackChannelRootlyTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskInviteToSlackChannelRootly) WorkflowTaskInviteToSlackChannelRootlyTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskInviteToSlackChannelRootlyTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskInviteToSlackChannelRootlyOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskInviteToSlackChannelRootly) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskInviteToSlackChannelRootlyArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskInviteToSlackChannelRootlyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskInviteToSlackChannelRootly)(nil)).Elem()
}

func (o WorkflowTaskInviteToSlackChannelRootlyArrayOutput) ToWorkflowTaskInviteToSlackChannelRootlyArrayOutput() WorkflowTaskInviteToSlackChannelRootlyArrayOutput {
	return o
}

func (o WorkflowTaskInviteToSlackChannelRootlyArrayOutput) ToWorkflowTaskInviteToSlackChannelRootlyArrayOutputWithContext(ctx context.Context) WorkflowTaskInviteToSlackChannelRootlyArrayOutput {
	return o
}

func (o WorkflowTaskInviteToSlackChannelRootlyArrayOutput) Index(i pulumi.IntInput) WorkflowTaskInviteToSlackChannelRootlyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskInviteToSlackChannelRootly {
		return vs[0].([]*WorkflowTaskInviteToSlackChannelRootly)[vs[1].(int)]
	}).(WorkflowTaskInviteToSlackChannelRootlyOutput)
}

type WorkflowTaskInviteToSlackChannelRootlyMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskInviteToSlackChannelRootlyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskInviteToSlackChannelRootly)(nil)).Elem()
}

func (o WorkflowTaskInviteToSlackChannelRootlyMapOutput) ToWorkflowTaskInviteToSlackChannelRootlyMapOutput() WorkflowTaskInviteToSlackChannelRootlyMapOutput {
	return o
}

func (o WorkflowTaskInviteToSlackChannelRootlyMapOutput) ToWorkflowTaskInviteToSlackChannelRootlyMapOutputWithContext(ctx context.Context) WorkflowTaskInviteToSlackChannelRootlyMapOutput {
	return o
}

func (o WorkflowTaskInviteToSlackChannelRootlyMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskInviteToSlackChannelRootlyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskInviteToSlackChannelRootly {
		return vs[0].(map[string]*WorkflowTaskInviteToSlackChannelRootly)[vs[1].(string)]
	}).(WorkflowTaskInviteToSlackChannelRootlyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskInviteToSlackChannelRootlyInput)(nil)).Elem(), &WorkflowTaskInviteToSlackChannelRootly{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskInviteToSlackChannelRootlyArrayInput)(nil)).Elem(), WorkflowTaskInviteToSlackChannelRootlyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskInviteToSlackChannelRootlyMapInput)(nil)).Elem(), WorkflowTaskInviteToSlackChannelRootlyMap{})
	pulumi.RegisterOutputType(WorkflowTaskInviteToSlackChannelRootlyOutput{})
	pulumi.RegisterOutputType(WorkflowTaskInviteToSlackChannelRootlyArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskInviteToSlackChannelRootlyMapOutput{})
}
