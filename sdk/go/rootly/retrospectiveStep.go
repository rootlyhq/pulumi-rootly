// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type RetrospectiveStep struct {
	pulumi.CustomResourceState

	// The description of the step
	Description pulumi.StringOutput `pulumi:"description"`
	// Due date in days
	DueAfterDays pulumi.IntOutput `pulumi:"dueAfterDays"`
	// Users assigned to the selected incident role will be the default owners for this step
	IncidentRoleId pulumi.StringOutput `pulumi:"incidentRoleId"`
	// Position of the step
	Position               pulumi.IntOutput    `pulumi:"position"`
	RetrospectiveProcessId pulumi.StringOutput `pulumi:"retrospectiveProcessId"`
	// Is the step skippable?. Value must be one of true or false
	Skippable pulumi.BoolOutput `pulumi:"skippable"`
	// The slug of the step
	Slug pulumi.StringOutput `pulumi:"slug"`
	// The name of the step
	Title pulumi.StringOutput `pulumi:"title"`
}

// NewRetrospectiveStep registers a new resource with the given unique name, arguments, and options.
func NewRetrospectiveStep(ctx *pulumi.Context,
	name string, args *RetrospectiveStepArgs, opts ...pulumi.ResourceOption) (*RetrospectiveStep, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RetrospectiveStep
	err := ctx.RegisterResource("rootly:index/retrospectiveStep:RetrospectiveStep", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRetrospectiveStep gets an existing RetrospectiveStep resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRetrospectiveStep(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RetrospectiveStepState, opts ...pulumi.ResourceOption) (*RetrospectiveStep, error) {
	var resource RetrospectiveStep
	err := ctx.ReadResource("rootly:index/retrospectiveStep:RetrospectiveStep", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RetrospectiveStep resources.
type retrospectiveStepState struct {
	// The description of the step
	Description *string `pulumi:"description"`
	// Due date in days
	DueAfterDays *int `pulumi:"dueAfterDays"`
	// Users assigned to the selected incident role will be the default owners for this step
	IncidentRoleId *string `pulumi:"incidentRoleId"`
	// Position of the step
	Position               *int    `pulumi:"position"`
	RetrospectiveProcessId *string `pulumi:"retrospectiveProcessId"`
	// Is the step skippable?. Value must be one of true or false
	Skippable *bool `pulumi:"skippable"`
	// The slug of the step
	Slug *string `pulumi:"slug"`
	// The name of the step
	Title *string `pulumi:"title"`
}

type RetrospectiveStepState struct {
	// The description of the step
	Description pulumi.StringPtrInput
	// Due date in days
	DueAfterDays pulumi.IntPtrInput
	// Users assigned to the selected incident role will be the default owners for this step
	IncidentRoleId pulumi.StringPtrInput
	// Position of the step
	Position               pulumi.IntPtrInput
	RetrospectiveProcessId pulumi.StringPtrInput
	// Is the step skippable?. Value must be one of true or false
	Skippable pulumi.BoolPtrInput
	// The slug of the step
	Slug pulumi.StringPtrInput
	// The name of the step
	Title pulumi.StringPtrInput
}

func (RetrospectiveStepState) ElementType() reflect.Type {
	return reflect.TypeOf((*retrospectiveStepState)(nil)).Elem()
}

type retrospectiveStepArgs struct {
	// The description of the step
	Description *string `pulumi:"description"`
	// Due date in days
	DueAfterDays *int `pulumi:"dueAfterDays"`
	// Users assigned to the selected incident role will be the default owners for this step
	IncidentRoleId *string `pulumi:"incidentRoleId"`
	// Position of the step
	Position               *int    `pulumi:"position"`
	RetrospectiveProcessId *string `pulumi:"retrospectiveProcessId"`
	// Is the step skippable?. Value must be one of true or false
	Skippable *bool `pulumi:"skippable"`
	// The slug of the step
	Slug *string `pulumi:"slug"`
	// The name of the step
	Title string `pulumi:"title"`
}

// The set of arguments for constructing a RetrospectiveStep resource.
type RetrospectiveStepArgs struct {
	// The description of the step
	Description pulumi.StringPtrInput
	// Due date in days
	DueAfterDays pulumi.IntPtrInput
	// Users assigned to the selected incident role will be the default owners for this step
	IncidentRoleId pulumi.StringPtrInput
	// Position of the step
	Position               pulumi.IntPtrInput
	RetrospectiveProcessId pulumi.StringPtrInput
	// Is the step skippable?. Value must be one of true or false
	Skippable pulumi.BoolPtrInput
	// The slug of the step
	Slug pulumi.StringPtrInput
	// The name of the step
	Title pulumi.StringInput
}

func (RetrospectiveStepArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*retrospectiveStepArgs)(nil)).Elem()
}

type RetrospectiveStepInput interface {
	pulumi.Input

	ToRetrospectiveStepOutput() RetrospectiveStepOutput
	ToRetrospectiveStepOutputWithContext(ctx context.Context) RetrospectiveStepOutput
}

func (*RetrospectiveStep) ElementType() reflect.Type {
	return reflect.TypeOf((**RetrospectiveStep)(nil)).Elem()
}

func (i *RetrospectiveStep) ToRetrospectiveStepOutput() RetrospectiveStepOutput {
	return i.ToRetrospectiveStepOutputWithContext(context.Background())
}

func (i *RetrospectiveStep) ToRetrospectiveStepOutputWithContext(ctx context.Context) RetrospectiveStepOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetrospectiveStepOutput)
}

// RetrospectiveStepArrayInput is an input type that accepts RetrospectiveStepArray and RetrospectiveStepArrayOutput values.
// You can construct a concrete instance of `RetrospectiveStepArrayInput` via:
//
//	RetrospectiveStepArray{ RetrospectiveStepArgs{...} }
type RetrospectiveStepArrayInput interface {
	pulumi.Input

	ToRetrospectiveStepArrayOutput() RetrospectiveStepArrayOutput
	ToRetrospectiveStepArrayOutputWithContext(context.Context) RetrospectiveStepArrayOutput
}

type RetrospectiveStepArray []RetrospectiveStepInput

func (RetrospectiveStepArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RetrospectiveStep)(nil)).Elem()
}

func (i RetrospectiveStepArray) ToRetrospectiveStepArrayOutput() RetrospectiveStepArrayOutput {
	return i.ToRetrospectiveStepArrayOutputWithContext(context.Background())
}

func (i RetrospectiveStepArray) ToRetrospectiveStepArrayOutputWithContext(ctx context.Context) RetrospectiveStepArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetrospectiveStepArrayOutput)
}

// RetrospectiveStepMapInput is an input type that accepts RetrospectiveStepMap and RetrospectiveStepMapOutput values.
// You can construct a concrete instance of `RetrospectiveStepMapInput` via:
//
//	RetrospectiveStepMap{ "key": RetrospectiveStepArgs{...} }
type RetrospectiveStepMapInput interface {
	pulumi.Input

	ToRetrospectiveStepMapOutput() RetrospectiveStepMapOutput
	ToRetrospectiveStepMapOutputWithContext(context.Context) RetrospectiveStepMapOutput
}

type RetrospectiveStepMap map[string]RetrospectiveStepInput

func (RetrospectiveStepMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RetrospectiveStep)(nil)).Elem()
}

func (i RetrospectiveStepMap) ToRetrospectiveStepMapOutput() RetrospectiveStepMapOutput {
	return i.ToRetrospectiveStepMapOutputWithContext(context.Background())
}

func (i RetrospectiveStepMap) ToRetrospectiveStepMapOutputWithContext(ctx context.Context) RetrospectiveStepMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetrospectiveStepMapOutput)
}

type RetrospectiveStepOutput struct{ *pulumi.OutputState }

func (RetrospectiveStepOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetrospectiveStep)(nil)).Elem()
}

func (o RetrospectiveStepOutput) ToRetrospectiveStepOutput() RetrospectiveStepOutput {
	return o
}

func (o RetrospectiveStepOutput) ToRetrospectiveStepOutputWithContext(ctx context.Context) RetrospectiveStepOutput {
	return o
}

// The description of the step
func (o RetrospectiveStepOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RetrospectiveStep) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Due date in days
func (o RetrospectiveStepOutput) DueAfterDays() pulumi.IntOutput {
	return o.ApplyT(func(v *RetrospectiveStep) pulumi.IntOutput { return v.DueAfterDays }).(pulumi.IntOutput)
}

// Users assigned to the selected incident role will be the default owners for this step
func (o RetrospectiveStepOutput) IncidentRoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *RetrospectiveStep) pulumi.StringOutput { return v.IncidentRoleId }).(pulumi.StringOutput)
}

// Position of the step
func (o RetrospectiveStepOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *RetrospectiveStep) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

func (o RetrospectiveStepOutput) RetrospectiveProcessId() pulumi.StringOutput {
	return o.ApplyT(func(v *RetrospectiveStep) pulumi.StringOutput { return v.RetrospectiveProcessId }).(pulumi.StringOutput)
}

// Is the step skippable?. Value must be one of true or false
func (o RetrospectiveStepOutput) Skippable() pulumi.BoolOutput {
	return o.ApplyT(func(v *RetrospectiveStep) pulumi.BoolOutput { return v.Skippable }).(pulumi.BoolOutput)
}

// The slug of the step
func (o RetrospectiveStepOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *RetrospectiveStep) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// The name of the step
func (o RetrospectiveStepOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *RetrospectiveStep) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

type RetrospectiveStepArrayOutput struct{ *pulumi.OutputState }

func (RetrospectiveStepArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RetrospectiveStep)(nil)).Elem()
}

func (o RetrospectiveStepArrayOutput) ToRetrospectiveStepArrayOutput() RetrospectiveStepArrayOutput {
	return o
}

func (o RetrospectiveStepArrayOutput) ToRetrospectiveStepArrayOutputWithContext(ctx context.Context) RetrospectiveStepArrayOutput {
	return o
}

func (o RetrospectiveStepArrayOutput) Index(i pulumi.IntInput) RetrospectiveStepOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RetrospectiveStep {
		return vs[0].([]*RetrospectiveStep)[vs[1].(int)]
	}).(RetrospectiveStepOutput)
}

type RetrospectiveStepMapOutput struct{ *pulumi.OutputState }

func (RetrospectiveStepMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RetrospectiveStep)(nil)).Elem()
}

func (o RetrospectiveStepMapOutput) ToRetrospectiveStepMapOutput() RetrospectiveStepMapOutput {
	return o
}

func (o RetrospectiveStepMapOutput) ToRetrospectiveStepMapOutputWithContext(ctx context.Context) RetrospectiveStepMapOutput {
	return o
}

func (o RetrospectiveStepMapOutput) MapIndex(k pulumi.StringInput) RetrospectiveStepOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RetrospectiveStep {
		return vs[0].(map[string]*RetrospectiveStep)[vs[1].(string)]
	}).(RetrospectiveStepOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RetrospectiveStepInput)(nil)).Elem(), &RetrospectiveStep{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetrospectiveStepArrayInput)(nil)).Elem(), RetrospectiveStepArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetrospectiveStepMapInput)(nil)).Elem(), RetrospectiveStepMap{})
	pulumi.RegisterOutputType(RetrospectiveStepOutput{})
	pulumi.RegisterOutputType(RetrospectiveStepArrayOutput{})
	pulumi.RegisterOutputType(RetrospectiveStepMapOutput{})
}
