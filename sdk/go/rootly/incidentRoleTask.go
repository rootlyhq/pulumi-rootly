// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type IncidentRoleTask struct {
	pulumi.CustomResourceState

	// The description of incident task
	Description    pulumi.StringOutput `pulumi:"description"`
	IncidentRoleId pulumi.StringOutput `pulumi:"incidentRoleId"`
	// The priority of the incident task. Value must be one of `high`, `medium`, `low`.
	Priority pulumi.StringPtrOutput `pulumi:"priority"`
	// The task of the incident task
	Task pulumi.StringOutput `pulumi:"task"`
}

// NewIncidentRoleTask registers a new resource with the given unique name, arguments, and options.
func NewIncidentRoleTask(ctx *pulumi.Context,
	name string, args *IncidentRoleTaskArgs, opts ...pulumi.ResourceOption) (*IncidentRoleTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Task == nil {
		return nil, errors.New("invalid value for required argument 'Task'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource IncidentRoleTask
	err := ctx.RegisterResource("rootly:index/incidentRoleTask:IncidentRoleTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIncidentRoleTask gets an existing IncidentRoleTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIncidentRoleTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IncidentRoleTaskState, opts ...pulumi.ResourceOption) (*IncidentRoleTask, error) {
	var resource IncidentRoleTask
	err := ctx.ReadResource("rootly:index/incidentRoleTask:IncidentRoleTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IncidentRoleTask resources.
type incidentRoleTaskState struct {
	// The description of incident task
	Description    *string `pulumi:"description"`
	IncidentRoleId *string `pulumi:"incidentRoleId"`
	// The priority of the incident task. Value must be one of `high`, `medium`, `low`.
	Priority *string `pulumi:"priority"`
	// The task of the incident task
	Task *string `pulumi:"task"`
}

type IncidentRoleTaskState struct {
	// The description of incident task
	Description    pulumi.StringPtrInput
	IncidentRoleId pulumi.StringPtrInput
	// The priority of the incident task. Value must be one of `high`, `medium`, `low`.
	Priority pulumi.StringPtrInput
	// The task of the incident task
	Task pulumi.StringPtrInput
}

func (IncidentRoleTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*incidentRoleTaskState)(nil)).Elem()
}

type incidentRoleTaskArgs struct {
	// The description of incident task
	Description    *string `pulumi:"description"`
	IncidentRoleId *string `pulumi:"incidentRoleId"`
	// The priority of the incident task. Value must be one of `high`, `medium`, `low`.
	Priority *string `pulumi:"priority"`
	// The task of the incident task
	Task string `pulumi:"task"`
}

// The set of arguments for constructing a IncidentRoleTask resource.
type IncidentRoleTaskArgs struct {
	// The description of incident task
	Description    pulumi.StringPtrInput
	IncidentRoleId pulumi.StringPtrInput
	// The priority of the incident task. Value must be one of `high`, `medium`, `low`.
	Priority pulumi.StringPtrInput
	// The task of the incident task
	Task pulumi.StringInput
}

func (IncidentRoleTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*incidentRoleTaskArgs)(nil)).Elem()
}

type IncidentRoleTaskInput interface {
	pulumi.Input

	ToIncidentRoleTaskOutput() IncidentRoleTaskOutput
	ToIncidentRoleTaskOutputWithContext(ctx context.Context) IncidentRoleTaskOutput
}

func (*IncidentRoleTask) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentRoleTask)(nil)).Elem()
}

func (i *IncidentRoleTask) ToIncidentRoleTaskOutput() IncidentRoleTaskOutput {
	return i.ToIncidentRoleTaskOutputWithContext(context.Background())
}

func (i *IncidentRoleTask) ToIncidentRoleTaskOutputWithContext(ctx context.Context) IncidentRoleTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentRoleTaskOutput)
}

// IncidentRoleTaskArrayInput is an input type that accepts IncidentRoleTaskArray and IncidentRoleTaskArrayOutput values.
// You can construct a concrete instance of `IncidentRoleTaskArrayInput` via:
//
//	IncidentRoleTaskArray{ IncidentRoleTaskArgs{...} }
type IncidentRoleTaskArrayInput interface {
	pulumi.Input

	ToIncidentRoleTaskArrayOutput() IncidentRoleTaskArrayOutput
	ToIncidentRoleTaskArrayOutputWithContext(context.Context) IncidentRoleTaskArrayOutput
}

type IncidentRoleTaskArray []IncidentRoleTaskInput

func (IncidentRoleTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IncidentRoleTask)(nil)).Elem()
}

func (i IncidentRoleTaskArray) ToIncidentRoleTaskArrayOutput() IncidentRoleTaskArrayOutput {
	return i.ToIncidentRoleTaskArrayOutputWithContext(context.Background())
}

func (i IncidentRoleTaskArray) ToIncidentRoleTaskArrayOutputWithContext(ctx context.Context) IncidentRoleTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentRoleTaskArrayOutput)
}

// IncidentRoleTaskMapInput is an input type that accepts IncidentRoleTaskMap and IncidentRoleTaskMapOutput values.
// You can construct a concrete instance of `IncidentRoleTaskMapInput` via:
//
//	IncidentRoleTaskMap{ "key": IncidentRoleTaskArgs{...} }
type IncidentRoleTaskMapInput interface {
	pulumi.Input

	ToIncidentRoleTaskMapOutput() IncidentRoleTaskMapOutput
	ToIncidentRoleTaskMapOutputWithContext(context.Context) IncidentRoleTaskMapOutput
}

type IncidentRoleTaskMap map[string]IncidentRoleTaskInput

func (IncidentRoleTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IncidentRoleTask)(nil)).Elem()
}

func (i IncidentRoleTaskMap) ToIncidentRoleTaskMapOutput() IncidentRoleTaskMapOutput {
	return i.ToIncidentRoleTaskMapOutputWithContext(context.Background())
}

func (i IncidentRoleTaskMap) ToIncidentRoleTaskMapOutputWithContext(ctx context.Context) IncidentRoleTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentRoleTaskMapOutput)
}

type IncidentRoleTaskOutput struct{ *pulumi.OutputState }

func (IncidentRoleTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentRoleTask)(nil)).Elem()
}

func (o IncidentRoleTaskOutput) ToIncidentRoleTaskOutput() IncidentRoleTaskOutput {
	return o
}

func (o IncidentRoleTaskOutput) ToIncidentRoleTaskOutputWithContext(ctx context.Context) IncidentRoleTaskOutput {
	return o
}

// The description of incident task
func (o IncidentRoleTaskOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentRoleTask) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o IncidentRoleTaskOutput) IncidentRoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentRoleTask) pulumi.StringOutput { return v.IncidentRoleId }).(pulumi.StringOutput)
}

// The priority of the incident task. Value must be one of `high`, `medium`, `low`.
func (o IncidentRoleTaskOutput) Priority() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *IncidentRoleTask) pulumi.StringPtrOutput { return v.Priority }).(pulumi.StringPtrOutput)
}

// The task of the incident task
func (o IncidentRoleTaskOutput) Task() pulumi.StringOutput {
	return o.ApplyT(func(v *IncidentRoleTask) pulumi.StringOutput { return v.Task }).(pulumi.StringOutput)
}

type IncidentRoleTaskArrayOutput struct{ *pulumi.OutputState }

func (IncidentRoleTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IncidentRoleTask)(nil)).Elem()
}

func (o IncidentRoleTaskArrayOutput) ToIncidentRoleTaskArrayOutput() IncidentRoleTaskArrayOutput {
	return o
}

func (o IncidentRoleTaskArrayOutput) ToIncidentRoleTaskArrayOutputWithContext(ctx context.Context) IncidentRoleTaskArrayOutput {
	return o
}

func (o IncidentRoleTaskArrayOutput) Index(i pulumi.IntInput) IncidentRoleTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IncidentRoleTask {
		return vs[0].([]*IncidentRoleTask)[vs[1].(int)]
	}).(IncidentRoleTaskOutput)
}

type IncidentRoleTaskMapOutput struct{ *pulumi.OutputState }

func (IncidentRoleTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IncidentRoleTask)(nil)).Elem()
}

func (o IncidentRoleTaskMapOutput) ToIncidentRoleTaskMapOutput() IncidentRoleTaskMapOutput {
	return o
}

func (o IncidentRoleTaskMapOutput) ToIncidentRoleTaskMapOutputWithContext(ctx context.Context) IncidentRoleTaskMapOutput {
	return o
}

func (o IncidentRoleTaskMapOutput) MapIndex(k pulumi.StringInput) IncidentRoleTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IncidentRoleTask {
		return vs[0].(map[string]*IncidentRoleTask)[vs[1].(string)]
	}).(IncidentRoleTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentRoleTaskInput)(nil)).Elem(), &IncidentRoleTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentRoleTaskArrayInput)(nil)).Elem(), IncidentRoleTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentRoleTaskMapInput)(nil)).Elem(), IncidentRoleTaskMap{})
	pulumi.RegisterOutputType(IncidentRoleTaskOutput{})
	pulumi.RegisterOutputType(IncidentRoleTaskArrayOutput{})
	pulumi.RegisterOutputType(IncidentRoleTaskMapOutput{})
}
