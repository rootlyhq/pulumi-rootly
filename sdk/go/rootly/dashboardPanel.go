// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages dashboard_panels.
//
// ## Example Usage
type DashboardPanel struct {
	pulumi.CustomResourceState

	// The id of the parent dashboard
	DashboardId pulumi.StringOutput `pulumi:"dashboardId"`
	// The name of the dashboard_panel
	Name pulumi.StringOutput `pulumi:"name"`
	// The params JSON of the dashboard_panel. See rootly API docs for schema.
	Params   DashboardPanelParamsOutput      `pulumi:"params"`
	Position DashboardPanelPositionPtrOutput `pulumi:"position"`
}

// NewDashboardPanel registers a new resource with the given unique name, arguments, and options.
func NewDashboardPanel(ctx *pulumi.Context,
	name string, args *DashboardPanelArgs, opts ...pulumi.ResourceOption) (*DashboardPanel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DashboardId == nil {
		return nil, errors.New("invalid value for required argument 'DashboardId'")
	}
	if args.Params == nil {
		return nil, errors.New("invalid value for required argument 'Params'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DashboardPanel
	err := ctx.RegisterResource("rootly:index/dashboardPanel:DashboardPanel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDashboardPanel gets an existing DashboardPanel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboardPanel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DashboardPanelState, opts ...pulumi.ResourceOption) (*DashboardPanel, error) {
	var resource DashboardPanel
	err := ctx.ReadResource("rootly:index/dashboardPanel:DashboardPanel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DashboardPanel resources.
type dashboardPanelState struct {
	// The id of the parent dashboard
	DashboardId *string `pulumi:"dashboardId"`
	// The name of the dashboard_panel
	Name *string `pulumi:"name"`
	// The params JSON of the dashboard_panel. See rootly API docs for schema.
	Params   *DashboardPanelParams   `pulumi:"params"`
	Position *DashboardPanelPosition `pulumi:"position"`
}

type DashboardPanelState struct {
	// The id of the parent dashboard
	DashboardId pulumi.StringPtrInput
	// The name of the dashboard_panel
	Name pulumi.StringPtrInput
	// The params JSON of the dashboard_panel. See rootly API docs for schema.
	Params   DashboardPanelParamsPtrInput
	Position DashboardPanelPositionPtrInput
}

func (DashboardPanelState) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardPanelState)(nil)).Elem()
}

type dashboardPanelArgs struct {
	// The id of the parent dashboard
	DashboardId string `pulumi:"dashboardId"`
	// The name of the dashboard_panel
	Name *string `pulumi:"name"`
	// The params JSON of the dashboard_panel. See rootly API docs for schema.
	Params   DashboardPanelParams    `pulumi:"params"`
	Position *DashboardPanelPosition `pulumi:"position"`
}

// The set of arguments for constructing a DashboardPanel resource.
type DashboardPanelArgs struct {
	// The id of the parent dashboard
	DashboardId pulumi.StringInput
	// The name of the dashboard_panel
	Name pulumi.StringPtrInput
	// The params JSON of the dashboard_panel. See rootly API docs for schema.
	Params   DashboardPanelParamsInput
	Position DashboardPanelPositionPtrInput
}

func (DashboardPanelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dashboardPanelArgs)(nil)).Elem()
}

type DashboardPanelInput interface {
	pulumi.Input

	ToDashboardPanelOutput() DashboardPanelOutput
	ToDashboardPanelOutputWithContext(ctx context.Context) DashboardPanelOutput
}

func (*DashboardPanel) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardPanel)(nil)).Elem()
}

func (i *DashboardPanel) ToDashboardPanelOutput() DashboardPanelOutput {
	return i.ToDashboardPanelOutputWithContext(context.Background())
}

func (i *DashboardPanel) ToDashboardPanelOutputWithContext(ctx context.Context) DashboardPanelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPanelOutput)
}

// DashboardPanelArrayInput is an input type that accepts DashboardPanelArray and DashboardPanelArrayOutput values.
// You can construct a concrete instance of `DashboardPanelArrayInput` via:
//
//	DashboardPanelArray{ DashboardPanelArgs{...} }
type DashboardPanelArrayInput interface {
	pulumi.Input

	ToDashboardPanelArrayOutput() DashboardPanelArrayOutput
	ToDashboardPanelArrayOutputWithContext(context.Context) DashboardPanelArrayOutput
}

type DashboardPanelArray []DashboardPanelInput

func (DashboardPanelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardPanel)(nil)).Elem()
}

func (i DashboardPanelArray) ToDashboardPanelArrayOutput() DashboardPanelArrayOutput {
	return i.ToDashboardPanelArrayOutputWithContext(context.Background())
}

func (i DashboardPanelArray) ToDashboardPanelArrayOutputWithContext(ctx context.Context) DashboardPanelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPanelArrayOutput)
}

// DashboardPanelMapInput is an input type that accepts DashboardPanelMap and DashboardPanelMapOutput values.
// You can construct a concrete instance of `DashboardPanelMapInput` via:
//
//	DashboardPanelMap{ "key": DashboardPanelArgs{...} }
type DashboardPanelMapInput interface {
	pulumi.Input

	ToDashboardPanelMapOutput() DashboardPanelMapOutput
	ToDashboardPanelMapOutputWithContext(context.Context) DashboardPanelMapOutput
}

type DashboardPanelMap map[string]DashboardPanelInput

func (DashboardPanelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardPanel)(nil)).Elem()
}

func (i DashboardPanelMap) ToDashboardPanelMapOutput() DashboardPanelMapOutput {
	return i.ToDashboardPanelMapOutputWithContext(context.Background())
}

func (i DashboardPanelMap) ToDashboardPanelMapOutputWithContext(ctx context.Context) DashboardPanelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DashboardPanelMapOutput)
}

type DashboardPanelOutput struct{ *pulumi.OutputState }

func (DashboardPanelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DashboardPanel)(nil)).Elem()
}

func (o DashboardPanelOutput) ToDashboardPanelOutput() DashboardPanelOutput {
	return o
}

func (o DashboardPanelOutput) ToDashboardPanelOutputWithContext(ctx context.Context) DashboardPanelOutput {
	return o
}

// The id of the parent dashboard
func (o DashboardPanelOutput) DashboardId() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardPanel) pulumi.StringOutput { return v.DashboardId }).(pulumi.StringOutput)
}

// The name of the dashboard_panel
func (o DashboardPanelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DashboardPanel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The params JSON of the dashboard_panel. See rootly API docs for schema.
func (o DashboardPanelOutput) Params() DashboardPanelParamsOutput {
	return o.ApplyT(func(v *DashboardPanel) DashboardPanelParamsOutput { return v.Params }).(DashboardPanelParamsOutput)
}

func (o DashboardPanelOutput) Position() DashboardPanelPositionPtrOutput {
	return o.ApplyT(func(v *DashboardPanel) DashboardPanelPositionPtrOutput { return v.Position }).(DashboardPanelPositionPtrOutput)
}

type DashboardPanelArrayOutput struct{ *pulumi.OutputState }

func (DashboardPanelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DashboardPanel)(nil)).Elem()
}

func (o DashboardPanelArrayOutput) ToDashboardPanelArrayOutput() DashboardPanelArrayOutput {
	return o
}

func (o DashboardPanelArrayOutput) ToDashboardPanelArrayOutputWithContext(ctx context.Context) DashboardPanelArrayOutput {
	return o
}

func (o DashboardPanelArrayOutput) Index(i pulumi.IntInput) DashboardPanelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DashboardPanel {
		return vs[0].([]*DashboardPanel)[vs[1].(int)]
	}).(DashboardPanelOutput)
}

type DashboardPanelMapOutput struct{ *pulumi.OutputState }

func (DashboardPanelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DashboardPanel)(nil)).Elem()
}

func (o DashboardPanelMapOutput) ToDashboardPanelMapOutput() DashboardPanelMapOutput {
	return o
}

func (o DashboardPanelMapOutput) ToDashboardPanelMapOutputWithContext(ctx context.Context) DashboardPanelMapOutput {
	return o
}

func (o DashboardPanelMapOutput) MapIndex(k pulumi.StringInput) DashboardPanelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DashboardPanel {
		return vs[0].(map[string]*DashboardPanel)[vs[1].(string)]
	}).(DashboardPanelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardPanelInput)(nil)).Elem(), &DashboardPanel{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardPanelArrayInput)(nil)).Elem(), DashboardPanelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DashboardPanelMapInput)(nil)).Elem(), DashboardPanelMap{})
	pulumi.RegisterOutputType(DashboardPanelOutput{})
	pulumi.RegisterOutputType(DashboardPanelArrayOutput{})
	pulumi.RegisterOutputType(DashboardPanelMapOutput{})
}
