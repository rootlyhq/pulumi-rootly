// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createAsanaSubtask task.
type WorkflowTaskCreateAsanaSubtask struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateAsanaSubtaskTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreateAsanaSubtask registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreateAsanaSubtask(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreateAsanaSubtaskArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateAsanaSubtask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreateAsanaSubtask
	err := ctx.RegisterResource("rootly:index/workflowTaskCreateAsanaSubtask:WorkflowTaskCreateAsanaSubtask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreateAsanaSubtask gets an existing WorkflowTaskCreateAsanaSubtask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreateAsanaSubtask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreateAsanaSubtaskState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateAsanaSubtask, error) {
	var resource WorkflowTaskCreateAsanaSubtask
	err := ctx.ReadResource("rootly:index/workflowTaskCreateAsanaSubtask:WorkflowTaskCreateAsanaSubtask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreateAsanaSubtask resources.
type workflowTaskCreateAsanaSubtaskState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreateAsanaSubtaskTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreateAsanaSubtaskState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateAsanaSubtaskTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreateAsanaSubtaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateAsanaSubtaskState)(nil)).Elem()
}

type workflowTaskCreateAsanaSubtaskArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateAsanaSubtaskTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreateAsanaSubtask resource.
type WorkflowTaskCreateAsanaSubtaskArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateAsanaSubtaskTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreateAsanaSubtaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateAsanaSubtaskArgs)(nil)).Elem()
}

type WorkflowTaskCreateAsanaSubtaskInput interface {
	pulumi.Input

	ToWorkflowTaskCreateAsanaSubtaskOutput() WorkflowTaskCreateAsanaSubtaskOutput
	ToWorkflowTaskCreateAsanaSubtaskOutputWithContext(ctx context.Context) WorkflowTaskCreateAsanaSubtaskOutput
}

func (*WorkflowTaskCreateAsanaSubtask) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateAsanaSubtask)(nil)).Elem()
}

func (i *WorkflowTaskCreateAsanaSubtask) ToWorkflowTaskCreateAsanaSubtaskOutput() WorkflowTaskCreateAsanaSubtaskOutput {
	return i.ToWorkflowTaskCreateAsanaSubtaskOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreateAsanaSubtask) ToWorkflowTaskCreateAsanaSubtaskOutputWithContext(ctx context.Context) WorkflowTaskCreateAsanaSubtaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateAsanaSubtaskOutput)
}

// WorkflowTaskCreateAsanaSubtaskArrayInput is an input type that accepts WorkflowTaskCreateAsanaSubtaskArray and WorkflowTaskCreateAsanaSubtaskArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateAsanaSubtaskArrayInput` via:
//
//	WorkflowTaskCreateAsanaSubtaskArray{ WorkflowTaskCreateAsanaSubtaskArgs{...} }
type WorkflowTaskCreateAsanaSubtaskArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreateAsanaSubtaskArrayOutput() WorkflowTaskCreateAsanaSubtaskArrayOutput
	ToWorkflowTaskCreateAsanaSubtaskArrayOutputWithContext(context.Context) WorkflowTaskCreateAsanaSubtaskArrayOutput
}

type WorkflowTaskCreateAsanaSubtaskArray []WorkflowTaskCreateAsanaSubtaskInput

func (WorkflowTaskCreateAsanaSubtaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateAsanaSubtask)(nil)).Elem()
}

func (i WorkflowTaskCreateAsanaSubtaskArray) ToWorkflowTaskCreateAsanaSubtaskArrayOutput() WorkflowTaskCreateAsanaSubtaskArrayOutput {
	return i.ToWorkflowTaskCreateAsanaSubtaskArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateAsanaSubtaskArray) ToWorkflowTaskCreateAsanaSubtaskArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateAsanaSubtaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateAsanaSubtaskArrayOutput)
}

// WorkflowTaskCreateAsanaSubtaskMapInput is an input type that accepts WorkflowTaskCreateAsanaSubtaskMap and WorkflowTaskCreateAsanaSubtaskMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateAsanaSubtaskMapInput` via:
//
//	WorkflowTaskCreateAsanaSubtaskMap{ "key": WorkflowTaskCreateAsanaSubtaskArgs{...} }
type WorkflowTaskCreateAsanaSubtaskMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreateAsanaSubtaskMapOutput() WorkflowTaskCreateAsanaSubtaskMapOutput
	ToWorkflowTaskCreateAsanaSubtaskMapOutputWithContext(context.Context) WorkflowTaskCreateAsanaSubtaskMapOutput
}

type WorkflowTaskCreateAsanaSubtaskMap map[string]WorkflowTaskCreateAsanaSubtaskInput

func (WorkflowTaskCreateAsanaSubtaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateAsanaSubtask)(nil)).Elem()
}

func (i WorkflowTaskCreateAsanaSubtaskMap) ToWorkflowTaskCreateAsanaSubtaskMapOutput() WorkflowTaskCreateAsanaSubtaskMapOutput {
	return i.ToWorkflowTaskCreateAsanaSubtaskMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateAsanaSubtaskMap) ToWorkflowTaskCreateAsanaSubtaskMapOutputWithContext(ctx context.Context) WorkflowTaskCreateAsanaSubtaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateAsanaSubtaskMapOutput)
}

type WorkflowTaskCreateAsanaSubtaskOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateAsanaSubtaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateAsanaSubtask)(nil)).Elem()
}

func (o WorkflowTaskCreateAsanaSubtaskOutput) ToWorkflowTaskCreateAsanaSubtaskOutput() WorkflowTaskCreateAsanaSubtaskOutput {
	return o
}

func (o WorkflowTaskCreateAsanaSubtaskOutput) ToWorkflowTaskCreateAsanaSubtaskOutputWithContext(ctx context.Context) WorkflowTaskCreateAsanaSubtaskOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreateAsanaSubtaskOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateAsanaSubtask) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreateAsanaSubtaskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateAsanaSubtask) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreateAsanaSubtaskOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateAsanaSubtask) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreateAsanaSubtaskOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateAsanaSubtask) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreateAsanaSubtaskOutput) TaskParams() WorkflowTaskCreateAsanaSubtaskTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateAsanaSubtask) WorkflowTaskCreateAsanaSubtaskTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskCreateAsanaSubtaskTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreateAsanaSubtaskOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateAsanaSubtask) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreateAsanaSubtaskArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateAsanaSubtaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateAsanaSubtask)(nil)).Elem()
}

func (o WorkflowTaskCreateAsanaSubtaskArrayOutput) ToWorkflowTaskCreateAsanaSubtaskArrayOutput() WorkflowTaskCreateAsanaSubtaskArrayOutput {
	return o
}

func (o WorkflowTaskCreateAsanaSubtaskArrayOutput) ToWorkflowTaskCreateAsanaSubtaskArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateAsanaSubtaskArrayOutput {
	return o
}

func (o WorkflowTaskCreateAsanaSubtaskArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreateAsanaSubtaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreateAsanaSubtask {
		return vs[0].([]*WorkflowTaskCreateAsanaSubtask)[vs[1].(int)]
	}).(WorkflowTaskCreateAsanaSubtaskOutput)
}

type WorkflowTaskCreateAsanaSubtaskMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateAsanaSubtaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateAsanaSubtask)(nil)).Elem()
}

func (o WorkflowTaskCreateAsanaSubtaskMapOutput) ToWorkflowTaskCreateAsanaSubtaskMapOutput() WorkflowTaskCreateAsanaSubtaskMapOutput {
	return o
}

func (o WorkflowTaskCreateAsanaSubtaskMapOutput) ToWorkflowTaskCreateAsanaSubtaskMapOutputWithContext(ctx context.Context) WorkflowTaskCreateAsanaSubtaskMapOutput {
	return o
}

func (o WorkflowTaskCreateAsanaSubtaskMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreateAsanaSubtaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreateAsanaSubtask {
		return vs[0].(map[string]*WorkflowTaskCreateAsanaSubtask)[vs[1].(string)]
	}).(WorkflowTaskCreateAsanaSubtaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateAsanaSubtaskInput)(nil)).Elem(), &WorkflowTaskCreateAsanaSubtask{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateAsanaSubtaskArrayInput)(nil)).Elem(), WorkflowTaskCreateAsanaSubtaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateAsanaSubtaskMapInput)(nil)).Elem(), WorkflowTaskCreateAsanaSubtaskMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreateAsanaSubtaskOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateAsanaSubtaskArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateAsanaSubtaskMapOutput{})
}
