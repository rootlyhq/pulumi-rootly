// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// ## Example Usage
type FormField struct {
	pulumi.CustomResourceState

	DefaultValues pulumi.StringArrayOutput `pulumi:"defaultValues"`
	// The description of the form field
	Description pulumi.StringOutput  `pulumi:"description"`
	Enabled     pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multiSelect`, `date`, `datetime`, `number`, `checkbox`, `tags`, `richText`.
	InputKind pulumi.StringPtrOutput `pulumi:"inputKind"`
	// The kind of the form field. Value must be one of `custom`, `title`, `summary`, `mitigationMessage`, `resolutionMessage`, `severity`, `environments`, `types`, `services`, `causes`, `functionalities`, `teams`, `visibility`, `markAsTest`, `markAsBackfilled`, `labels`, `notifyEmails`, `triggerManualWorkflows`, `showOngoingIncidents`, `attachAlerts`, `markAsInTriage`, `inTriageAt`, `startedAt`, `detectedAt`, `acknowledgedAt`, `mitigatedAt`, `resolvedAt`, `manualStartingDatetimeField`.
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// The name of the form field
	Name      pulumi.StringOutput      `pulumi:"name"`
	Requireds pulumi.StringArrayOutput `pulumi:"requireds"`
	// Whether the form field is shown on the incident details panel. Value must be one of true or false
	ShowOnIncidentDetails pulumi.BoolOutput        `pulumi:"showOnIncidentDetails"`
	Showns                pulumi.StringArrayOutput `pulumi:"showns"`
	// The slug of the form field
	Slug pulumi.StringOutput `pulumi:"slug"`
	// The value kind of the form field. Value must be one of `inherit`, `group`, `service`, `functionality`, `user`.
	ValueKind pulumi.StringPtrOutput `pulumi:"valueKind"`
}

// NewFormField registers a new resource with the given unique name, arguments, and options.
func NewFormField(ctx *pulumi.Context,
	name string, args *FormFieldArgs, opts ...pulumi.ResourceOption) (*FormField, error) {
	if args == nil {
		args = &FormFieldArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FormField
	err := ctx.RegisterResource("rootly:index/formField:FormField", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFormField gets an existing FormField resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFormField(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FormFieldState, opts ...pulumi.ResourceOption) (*FormField, error) {
	var resource FormField
	err := ctx.ReadResource("rootly:index/formField:FormField", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FormField resources.
type formFieldState struct {
	DefaultValues []string `pulumi:"defaultValues"`
	// The description of the form field
	Description *string `pulumi:"description"`
	Enabled     *bool   `pulumi:"enabled"`
	// The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multiSelect`, `date`, `datetime`, `number`, `checkbox`, `tags`, `richText`.
	InputKind *string `pulumi:"inputKind"`
	// The kind of the form field. Value must be one of `custom`, `title`, `summary`, `mitigationMessage`, `resolutionMessage`, `severity`, `environments`, `types`, `services`, `causes`, `functionalities`, `teams`, `visibility`, `markAsTest`, `markAsBackfilled`, `labels`, `notifyEmails`, `triggerManualWorkflows`, `showOngoingIncidents`, `attachAlerts`, `markAsInTriage`, `inTriageAt`, `startedAt`, `detectedAt`, `acknowledgedAt`, `mitigatedAt`, `resolvedAt`, `manualStartingDatetimeField`.
	Kind *string `pulumi:"kind"`
	// The name of the form field
	Name      *string  `pulumi:"name"`
	Requireds []string `pulumi:"requireds"`
	// Whether the form field is shown on the incident details panel. Value must be one of true or false
	ShowOnIncidentDetails *bool    `pulumi:"showOnIncidentDetails"`
	Showns                []string `pulumi:"showns"`
	// The slug of the form field
	Slug *string `pulumi:"slug"`
	// The value kind of the form field. Value must be one of `inherit`, `group`, `service`, `functionality`, `user`.
	ValueKind *string `pulumi:"valueKind"`
}

type FormFieldState struct {
	DefaultValues pulumi.StringArrayInput
	// The description of the form field
	Description pulumi.StringPtrInput
	Enabled     pulumi.BoolPtrInput
	// The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multiSelect`, `date`, `datetime`, `number`, `checkbox`, `tags`, `richText`.
	InputKind pulumi.StringPtrInput
	// The kind of the form field. Value must be one of `custom`, `title`, `summary`, `mitigationMessage`, `resolutionMessage`, `severity`, `environments`, `types`, `services`, `causes`, `functionalities`, `teams`, `visibility`, `markAsTest`, `markAsBackfilled`, `labels`, `notifyEmails`, `triggerManualWorkflows`, `showOngoingIncidents`, `attachAlerts`, `markAsInTriage`, `inTriageAt`, `startedAt`, `detectedAt`, `acknowledgedAt`, `mitigatedAt`, `resolvedAt`, `manualStartingDatetimeField`.
	Kind pulumi.StringPtrInput
	// The name of the form field
	Name      pulumi.StringPtrInput
	Requireds pulumi.StringArrayInput
	// Whether the form field is shown on the incident details panel. Value must be one of true or false
	ShowOnIncidentDetails pulumi.BoolPtrInput
	Showns                pulumi.StringArrayInput
	// The slug of the form field
	Slug pulumi.StringPtrInput
	// The value kind of the form field. Value must be one of `inherit`, `group`, `service`, `functionality`, `user`.
	ValueKind pulumi.StringPtrInput
}

func (FormFieldState) ElementType() reflect.Type {
	return reflect.TypeOf((*formFieldState)(nil)).Elem()
}

type formFieldArgs struct {
	DefaultValues []string `pulumi:"defaultValues"`
	// The description of the form field
	Description *string `pulumi:"description"`
	Enabled     *bool   `pulumi:"enabled"`
	// The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multiSelect`, `date`, `datetime`, `number`, `checkbox`, `tags`, `richText`.
	InputKind *string `pulumi:"inputKind"`
	// The kind of the form field. Value must be one of `custom`, `title`, `summary`, `mitigationMessage`, `resolutionMessage`, `severity`, `environments`, `types`, `services`, `causes`, `functionalities`, `teams`, `visibility`, `markAsTest`, `markAsBackfilled`, `labels`, `notifyEmails`, `triggerManualWorkflows`, `showOngoingIncidents`, `attachAlerts`, `markAsInTriage`, `inTriageAt`, `startedAt`, `detectedAt`, `acknowledgedAt`, `mitigatedAt`, `resolvedAt`, `manualStartingDatetimeField`.
	Kind *string `pulumi:"kind"`
	// The name of the form field
	Name      *string  `pulumi:"name"`
	Requireds []string `pulumi:"requireds"`
	// Whether the form field is shown on the incident details panel. Value must be one of true or false
	ShowOnIncidentDetails *bool    `pulumi:"showOnIncidentDetails"`
	Showns                []string `pulumi:"showns"`
	// The slug of the form field
	Slug *string `pulumi:"slug"`
	// The value kind of the form field. Value must be one of `inherit`, `group`, `service`, `functionality`, `user`.
	ValueKind *string `pulumi:"valueKind"`
}

// The set of arguments for constructing a FormField resource.
type FormFieldArgs struct {
	DefaultValues pulumi.StringArrayInput
	// The description of the form field
	Description pulumi.StringPtrInput
	Enabled     pulumi.BoolPtrInput
	// The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multiSelect`, `date`, `datetime`, `number`, `checkbox`, `tags`, `richText`.
	InputKind pulumi.StringPtrInput
	// The kind of the form field. Value must be one of `custom`, `title`, `summary`, `mitigationMessage`, `resolutionMessage`, `severity`, `environments`, `types`, `services`, `causes`, `functionalities`, `teams`, `visibility`, `markAsTest`, `markAsBackfilled`, `labels`, `notifyEmails`, `triggerManualWorkflows`, `showOngoingIncidents`, `attachAlerts`, `markAsInTriage`, `inTriageAt`, `startedAt`, `detectedAt`, `acknowledgedAt`, `mitigatedAt`, `resolvedAt`, `manualStartingDatetimeField`.
	Kind pulumi.StringPtrInput
	// The name of the form field
	Name      pulumi.StringPtrInput
	Requireds pulumi.StringArrayInput
	// Whether the form field is shown on the incident details panel. Value must be one of true or false
	ShowOnIncidentDetails pulumi.BoolPtrInput
	Showns                pulumi.StringArrayInput
	// The slug of the form field
	Slug pulumi.StringPtrInput
	// The value kind of the form field. Value must be one of `inherit`, `group`, `service`, `functionality`, `user`.
	ValueKind pulumi.StringPtrInput
}

func (FormFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*formFieldArgs)(nil)).Elem()
}

type FormFieldInput interface {
	pulumi.Input

	ToFormFieldOutput() FormFieldOutput
	ToFormFieldOutputWithContext(ctx context.Context) FormFieldOutput
}

func (*FormField) ElementType() reflect.Type {
	return reflect.TypeOf((**FormField)(nil)).Elem()
}

func (i *FormField) ToFormFieldOutput() FormFieldOutput {
	return i.ToFormFieldOutputWithContext(context.Background())
}

func (i *FormField) ToFormFieldOutputWithContext(ctx context.Context) FormFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldOutput)
}

// FormFieldArrayInput is an input type that accepts FormFieldArray and FormFieldArrayOutput values.
// You can construct a concrete instance of `FormFieldArrayInput` via:
//
//	FormFieldArray{ FormFieldArgs{...} }
type FormFieldArrayInput interface {
	pulumi.Input

	ToFormFieldArrayOutput() FormFieldArrayOutput
	ToFormFieldArrayOutputWithContext(context.Context) FormFieldArrayOutput
}

type FormFieldArray []FormFieldInput

func (FormFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FormField)(nil)).Elem()
}

func (i FormFieldArray) ToFormFieldArrayOutput() FormFieldArrayOutput {
	return i.ToFormFieldArrayOutputWithContext(context.Background())
}

func (i FormFieldArray) ToFormFieldArrayOutputWithContext(ctx context.Context) FormFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldArrayOutput)
}

// FormFieldMapInput is an input type that accepts FormFieldMap and FormFieldMapOutput values.
// You can construct a concrete instance of `FormFieldMapInput` via:
//
//	FormFieldMap{ "key": FormFieldArgs{...} }
type FormFieldMapInput interface {
	pulumi.Input

	ToFormFieldMapOutput() FormFieldMapOutput
	ToFormFieldMapOutputWithContext(context.Context) FormFieldMapOutput
}

type FormFieldMap map[string]FormFieldInput

func (FormFieldMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FormField)(nil)).Elem()
}

func (i FormFieldMap) ToFormFieldMapOutput() FormFieldMapOutput {
	return i.ToFormFieldMapOutputWithContext(context.Background())
}

func (i FormFieldMap) ToFormFieldMapOutputWithContext(ctx context.Context) FormFieldMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FormFieldMapOutput)
}

type FormFieldOutput struct{ *pulumi.OutputState }

func (FormFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FormField)(nil)).Elem()
}

func (o FormFieldOutput) ToFormFieldOutput() FormFieldOutput {
	return o
}

func (o FormFieldOutput) ToFormFieldOutputWithContext(ctx context.Context) FormFieldOutput {
	return o
}

func (o FormFieldOutput) DefaultValues() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FormField) pulumi.StringArrayOutput { return v.DefaultValues }).(pulumi.StringArrayOutput)
}

// The description of the form field
func (o FormFieldOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *FormField) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o FormFieldOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *FormField) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The input kind of the form field. Value must be one of `text`, `textarea`, `select`, `multiSelect`, `date`, `datetime`, `number`, `checkbox`, `tags`, `richText`.
func (o FormFieldOutput) InputKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormField) pulumi.StringPtrOutput { return v.InputKind }).(pulumi.StringPtrOutput)
}

// The kind of the form field. Value must be one of `custom`, `title`, `summary`, `mitigationMessage`, `resolutionMessage`, `severity`, `environments`, `types`, `services`, `causes`, `functionalities`, `teams`, `visibility`, `markAsTest`, `markAsBackfilled`, `labels`, `notifyEmails`, `triggerManualWorkflows`, `showOngoingIncidents`, `attachAlerts`, `markAsInTriage`, `inTriageAt`, `startedAt`, `detectedAt`, `acknowledgedAt`, `mitigatedAt`, `resolvedAt`, `manualStartingDatetimeField`.
func (o FormFieldOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormField) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// The name of the form field
func (o FormFieldOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FormField) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o FormFieldOutput) Requireds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FormField) pulumi.StringArrayOutput { return v.Requireds }).(pulumi.StringArrayOutput)
}

// Whether the form field is shown on the incident details panel. Value must be one of true or false
func (o FormFieldOutput) ShowOnIncidentDetails() pulumi.BoolOutput {
	return o.ApplyT(func(v *FormField) pulumi.BoolOutput { return v.ShowOnIncidentDetails }).(pulumi.BoolOutput)
}

func (o FormFieldOutput) Showns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FormField) pulumi.StringArrayOutput { return v.Showns }).(pulumi.StringArrayOutput)
}

// The slug of the form field
func (o FormFieldOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *FormField) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

// The value kind of the form field. Value must be one of `inherit`, `group`, `service`, `functionality`, `user`.
func (o FormFieldOutput) ValueKind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FormField) pulumi.StringPtrOutput { return v.ValueKind }).(pulumi.StringPtrOutput)
}

type FormFieldArrayOutput struct{ *pulumi.OutputState }

func (FormFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FormField)(nil)).Elem()
}

func (o FormFieldArrayOutput) ToFormFieldArrayOutput() FormFieldArrayOutput {
	return o
}

func (o FormFieldArrayOutput) ToFormFieldArrayOutputWithContext(ctx context.Context) FormFieldArrayOutput {
	return o
}

func (o FormFieldArrayOutput) Index(i pulumi.IntInput) FormFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FormField {
		return vs[0].([]*FormField)[vs[1].(int)]
	}).(FormFieldOutput)
}

type FormFieldMapOutput struct{ *pulumi.OutputState }

func (FormFieldMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FormField)(nil)).Elem()
}

func (o FormFieldMapOutput) ToFormFieldMapOutput() FormFieldMapOutput {
	return o
}

func (o FormFieldMapOutput) ToFormFieldMapOutputWithContext(ctx context.Context) FormFieldMapOutput {
	return o
}

func (o FormFieldMapOutput) MapIndex(k pulumi.StringInput) FormFieldOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FormField {
		return vs[0].(map[string]*FormField)[vs[1].(string)]
	}).(FormFieldOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldInput)(nil)).Elem(), &FormField{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldArrayInput)(nil)).Elem(), FormFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FormFieldMapInput)(nil)).Elem(), FormFieldMap{})
	pulumi.RegisterOutputType(FormFieldOutput{})
	pulumi.RegisterOutputType(FormFieldArrayOutput{})
	pulumi.RegisterOutputType(FormFieldMapOutput{})
}
