// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow updateAttachedAlerts task.
type WorkflowTaskUpdateAttachedAlerts struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateAttachedAlertsTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskUpdateAttachedAlerts registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskUpdateAttachedAlerts(ctx *pulumi.Context,
	name string, args *WorkflowTaskUpdateAttachedAlertsArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateAttachedAlerts, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskUpdateAttachedAlerts
	err := ctx.RegisterResource("rootly:index/workflowTaskUpdateAttachedAlerts:WorkflowTaskUpdateAttachedAlerts", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskUpdateAttachedAlerts gets an existing WorkflowTaskUpdateAttachedAlerts resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskUpdateAttachedAlerts(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskUpdateAttachedAlertsState, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateAttachedAlerts, error) {
	var resource WorkflowTaskUpdateAttachedAlerts
	err := ctx.ReadResource("rootly:index/workflowTaskUpdateAttachedAlerts:WorkflowTaskUpdateAttachedAlerts", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskUpdateAttachedAlerts resources.
type workflowTaskUpdateAttachedAlertsState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskUpdateAttachedAlertsTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskUpdateAttachedAlertsState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateAttachedAlertsTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskUpdateAttachedAlertsState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateAttachedAlertsState)(nil)).Elem()
}

type workflowTaskUpdateAttachedAlertsArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateAttachedAlertsTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskUpdateAttachedAlerts resource.
type WorkflowTaskUpdateAttachedAlertsArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateAttachedAlertsTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskUpdateAttachedAlertsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateAttachedAlertsArgs)(nil)).Elem()
}

type WorkflowTaskUpdateAttachedAlertsInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateAttachedAlertsOutput() WorkflowTaskUpdateAttachedAlertsOutput
	ToWorkflowTaskUpdateAttachedAlertsOutputWithContext(ctx context.Context) WorkflowTaskUpdateAttachedAlertsOutput
}

func (*WorkflowTaskUpdateAttachedAlerts) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateAttachedAlerts)(nil)).Elem()
}

func (i *WorkflowTaskUpdateAttachedAlerts) ToWorkflowTaskUpdateAttachedAlertsOutput() WorkflowTaskUpdateAttachedAlertsOutput {
	return i.ToWorkflowTaskUpdateAttachedAlertsOutputWithContext(context.Background())
}

func (i *WorkflowTaskUpdateAttachedAlerts) ToWorkflowTaskUpdateAttachedAlertsOutputWithContext(ctx context.Context) WorkflowTaskUpdateAttachedAlertsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateAttachedAlertsOutput)
}

// WorkflowTaskUpdateAttachedAlertsArrayInput is an input type that accepts WorkflowTaskUpdateAttachedAlertsArray and WorkflowTaskUpdateAttachedAlertsArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateAttachedAlertsArrayInput` via:
//
//	WorkflowTaskUpdateAttachedAlertsArray{ WorkflowTaskUpdateAttachedAlertsArgs{...} }
type WorkflowTaskUpdateAttachedAlertsArrayInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateAttachedAlertsArrayOutput() WorkflowTaskUpdateAttachedAlertsArrayOutput
	ToWorkflowTaskUpdateAttachedAlertsArrayOutputWithContext(context.Context) WorkflowTaskUpdateAttachedAlertsArrayOutput
}

type WorkflowTaskUpdateAttachedAlertsArray []WorkflowTaskUpdateAttachedAlertsInput

func (WorkflowTaskUpdateAttachedAlertsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateAttachedAlerts)(nil)).Elem()
}

func (i WorkflowTaskUpdateAttachedAlertsArray) ToWorkflowTaskUpdateAttachedAlertsArrayOutput() WorkflowTaskUpdateAttachedAlertsArrayOutput {
	return i.ToWorkflowTaskUpdateAttachedAlertsArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateAttachedAlertsArray) ToWorkflowTaskUpdateAttachedAlertsArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateAttachedAlertsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateAttachedAlertsArrayOutput)
}

// WorkflowTaskUpdateAttachedAlertsMapInput is an input type that accepts WorkflowTaskUpdateAttachedAlertsMap and WorkflowTaskUpdateAttachedAlertsMapOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateAttachedAlertsMapInput` via:
//
//	WorkflowTaskUpdateAttachedAlertsMap{ "key": WorkflowTaskUpdateAttachedAlertsArgs{...} }
type WorkflowTaskUpdateAttachedAlertsMapInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateAttachedAlertsMapOutput() WorkflowTaskUpdateAttachedAlertsMapOutput
	ToWorkflowTaskUpdateAttachedAlertsMapOutputWithContext(context.Context) WorkflowTaskUpdateAttachedAlertsMapOutput
}

type WorkflowTaskUpdateAttachedAlertsMap map[string]WorkflowTaskUpdateAttachedAlertsInput

func (WorkflowTaskUpdateAttachedAlertsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateAttachedAlerts)(nil)).Elem()
}

func (i WorkflowTaskUpdateAttachedAlertsMap) ToWorkflowTaskUpdateAttachedAlertsMapOutput() WorkflowTaskUpdateAttachedAlertsMapOutput {
	return i.ToWorkflowTaskUpdateAttachedAlertsMapOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateAttachedAlertsMap) ToWorkflowTaskUpdateAttachedAlertsMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateAttachedAlertsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateAttachedAlertsMapOutput)
}

type WorkflowTaskUpdateAttachedAlertsOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateAttachedAlertsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateAttachedAlerts)(nil)).Elem()
}

func (o WorkflowTaskUpdateAttachedAlertsOutput) ToWorkflowTaskUpdateAttachedAlertsOutput() WorkflowTaskUpdateAttachedAlertsOutput {
	return o
}

func (o WorkflowTaskUpdateAttachedAlertsOutput) ToWorkflowTaskUpdateAttachedAlertsOutputWithContext(ctx context.Context) WorkflowTaskUpdateAttachedAlertsOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskUpdateAttachedAlertsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateAttachedAlerts) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskUpdateAttachedAlertsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateAttachedAlerts) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskUpdateAttachedAlertsOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateAttachedAlerts) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskUpdateAttachedAlertsOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateAttachedAlerts) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskUpdateAttachedAlertsOutput) TaskParams() WorkflowTaskUpdateAttachedAlertsTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateAttachedAlerts) WorkflowTaskUpdateAttachedAlertsTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskUpdateAttachedAlertsTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskUpdateAttachedAlertsOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateAttachedAlerts) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskUpdateAttachedAlertsArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateAttachedAlertsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateAttachedAlerts)(nil)).Elem()
}

func (o WorkflowTaskUpdateAttachedAlertsArrayOutput) ToWorkflowTaskUpdateAttachedAlertsArrayOutput() WorkflowTaskUpdateAttachedAlertsArrayOutput {
	return o
}

func (o WorkflowTaskUpdateAttachedAlertsArrayOutput) ToWorkflowTaskUpdateAttachedAlertsArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateAttachedAlertsArrayOutput {
	return o
}

func (o WorkflowTaskUpdateAttachedAlertsArrayOutput) Index(i pulumi.IntInput) WorkflowTaskUpdateAttachedAlertsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateAttachedAlerts {
		return vs[0].([]*WorkflowTaskUpdateAttachedAlerts)[vs[1].(int)]
	}).(WorkflowTaskUpdateAttachedAlertsOutput)
}

type WorkflowTaskUpdateAttachedAlertsMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateAttachedAlertsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateAttachedAlerts)(nil)).Elem()
}

func (o WorkflowTaskUpdateAttachedAlertsMapOutput) ToWorkflowTaskUpdateAttachedAlertsMapOutput() WorkflowTaskUpdateAttachedAlertsMapOutput {
	return o
}

func (o WorkflowTaskUpdateAttachedAlertsMapOutput) ToWorkflowTaskUpdateAttachedAlertsMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateAttachedAlertsMapOutput {
	return o
}

func (o WorkflowTaskUpdateAttachedAlertsMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskUpdateAttachedAlertsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateAttachedAlerts {
		return vs[0].(map[string]*WorkflowTaskUpdateAttachedAlerts)[vs[1].(string)]
	}).(WorkflowTaskUpdateAttachedAlertsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateAttachedAlertsInput)(nil)).Elem(), &WorkflowTaskUpdateAttachedAlerts{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateAttachedAlertsArrayInput)(nil)).Elem(), WorkflowTaskUpdateAttachedAlertsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateAttachedAlertsMapInput)(nil)).Elem(), WorkflowTaskUpdateAttachedAlertsMap{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateAttachedAlertsOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateAttachedAlertsArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateAttachedAlertsMapOutput{})
}
