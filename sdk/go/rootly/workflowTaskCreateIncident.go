// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createIncident task.
type WorkflowTaskCreateIncident struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateIncidentTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreateIncident registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreateIncident(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreateIncidentArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateIncident, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreateIncident
	err := ctx.RegisterResource("rootly:index/workflowTaskCreateIncident:WorkflowTaskCreateIncident", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreateIncident gets an existing WorkflowTaskCreateIncident resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreateIncident(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreateIncidentState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateIncident, error) {
	var resource WorkflowTaskCreateIncident
	err := ctx.ReadResource("rootly:index/workflowTaskCreateIncident:WorkflowTaskCreateIncident", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreateIncident resources.
type workflowTaskCreateIncidentState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreateIncidentTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreateIncidentState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateIncidentTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreateIncidentState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateIncidentState)(nil)).Elem()
}

type workflowTaskCreateIncidentArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateIncidentTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreateIncident resource.
type WorkflowTaskCreateIncidentArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateIncidentTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreateIncidentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateIncidentArgs)(nil)).Elem()
}

type WorkflowTaskCreateIncidentInput interface {
	pulumi.Input

	ToWorkflowTaskCreateIncidentOutput() WorkflowTaskCreateIncidentOutput
	ToWorkflowTaskCreateIncidentOutputWithContext(ctx context.Context) WorkflowTaskCreateIncidentOutput
}

func (*WorkflowTaskCreateIncident) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateIncident)(nil)).Elem()
}

func (i *WorkflowTaskCreateIncident) ToWorkflowTaskCreateIncidentOutput() WorkflowTaskCreateIncidentOutput {
	return i.ToWorkflowTaskCreateIncidentOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreateIncident) ToWorkflowTaskCreateIncidentOutputWithContext(ctx context.Context) WorkflowTaskCreateIncidentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateIncidentOutput)
}

// WorkflowTaskCreateIncidentArrayInput is an input type that accepts WorkflowTaskCreateIncidentArray and WorkflowTaskCreateIncidentArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateIncidentArrayInput` via:
//
//	WorkflowTaskCreateIncidentArray{ WorkflowTaskCreateIncidentArgs{...} }
type WorkflowTaskCreateIncidentArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreateIncidentArrayOutput() WorkflowTaskCreateIncidentArrayOutput
	ToWorkflowTaskCreateIncidentArrayOutputWithContext(context.Context) WorkflowTaskCreateIncidentArrayOutput
}

type WorkflowTaskCreateIncidentArray []WorkflowTaskCreateIncidentInput

func (WorkflowTaskCreateIncidentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateIncident)(nil)).Elem()
}

func (i WorkflowTaskCreateIncidentArray) ToWorkflowTaskCreateIncidentArrayOutput() WorkflowTaskCreateIncidentArrayOutput {
	return i.ToWorkflowTaskCreateIncidentArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateIncidentArray) ToWorkflowTaskCreateIncidentArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateIncidentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateIncidentArrayOutput)
}

// WorkflowTaskCreateIncidentMapInput is an input type that accepts WorkflowTaskCreateIncidentMap and WorkflowTaskCreateIncidentMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateIncidentMapInput` via:
//
//	WorkflowTaskCreateIncidentMap{ "key": WorkflowTaskCreateIncidentArgs{...} }
type WorkflowTaskCreateIncidentMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreateIncidentMapOutput() WorkflowTaskCreateIncidentMapOutput
	ToWorkflowTaskCreateIncidentMapOutputWithContext(context.Context) WorkflowTaskCreateIncidentMapOutput
}

type WorkflowTaskCreateIncidentMap map[string]WorkflowTaskCreateIncidentInput

func (WorkflowTaskCreateIncidentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateIncident)(nil)).Elem()
}

func (i WorkflowTaskCreateIncidentMap) ToWorkflowTaskCreateIncidentMapOutput() WorkflowTaskCreateIncidentMapOutput {
	return i.ToWorkflowTaskCreateIncidentMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateIncidentMap) ToWorkflowTaskCreateIncidentMapOutputWithContext(ctx context.Context) WorkflowTaskCreateIncidentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateIncidentMapOutput)
}

type WorkflowTaskCreateIncidentOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateIncidentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateIncident)(nil)).Elem()
}

func (o WorkflowTaskCreateIncidentOutput) ToWorkflowTaskCreateIncidentOutput() WorkflowTaskCreateIncidentOutput {
	return o
}

func (o WorkflowTaskCreateIncidentOutput) ToWorkflowTaskCreateIncidentOutputWithContext(ctx context.Context) WorkflowTaskCreateIncidentOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreateIncidentOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateIncident) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreateIncidentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateIncident) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreateIncidentOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateIncident) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreateIncidentOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateIncident) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreateIncidentOutput) TaskParams() WorkflowTaskCreateIncidentTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateIncident) WorkflowTaskCreateIncidentTaskParamsOutput { return v.TaskParams }).(WorkflowTaskCreateIncidentTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreateIncidentOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateIncident) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreateIncidentArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateIncidentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateIncident)(nil)).Elem()
}

func (o WorkflowTaskCreateIncidentArrayOutput) ToWorkflowTaskCreateIncidentArrayOutput() WorkflowTaskCreateIncidentArrayOutput {
	return o
}

func (o WorkflowTaskCreateIncidentArrayOutput) ToWorkflowTaskCreateIncidentArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateIncidentArrayOutput {
	return o
}

func (o WorkflowTaskCreateIncidentArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreateIncidentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreateIncident {
		return vs[0].([]*WorkflowTaskCreateIncident)[vs[1].(int)]
	}).(WorkflowTaskCreateIncidentOutput)
}

type WorkflowTaskCreateIncidentMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateIncidentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateIncident)(nil)).Elem()
}

func (o WorkflowTaskCreateIncidentMapOutput) ToWorkflowTaskCreateIncidentMapOutput() WorkflowTaskCreateIncidentMapOutput {
	return o
}

func (o WorkflowTaskCreateIncidentMapOutput) ToWorkflowTaskCreateIncidentMapOutputWithContext(ctx context.Context) WorkflowTaskCreateIncidentMapOutput {
	return o
}

func (o WorkflowTaskCreateIncidentMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreateIncidentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreateIncident {
		return vs[0].(map[string]*WorkflowTaskCreateIncident)[vs[1].(string)]
	}).(WorkflowTaskCreateIncidentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateIncidentInput)(nil)).Elem(), &WorkflowTaskCreateIncident{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateIncidentArrayInput)(nil)).Elem(), WorkflowTaskCreateIncidentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateIncidentMapInput)(nil)).Elem(), WorkflowTaskCreateIncidentMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreateIncidentOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateIncidentArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateIncidentMapOutput{})
}
