// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow addActionItem task.
type WorkflowTaskAddActionItem struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAddActionItemTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskAddActionItem registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskAddActionItem(ctx *pulumi.Context,
	name string, args *WorkflowTaskAddActionItemArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskAddActionItem, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskAddActionItem
	err := ctx.RegisterResource("rootly:index/workflowTaskAddActionItem:WorkflowTaskAddActionItem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskAddActionItem gets an existing WorkflowTaskAddActionItem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskAddActionItem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskAddActionItemState, opts ...pulumi.ResourceOption) (*WorkflowTaskAddActionItem, error) {
	var resource WorkflowTaskAddActionItem
	err := ctx.ReadResource("rootly:index/workflowTaskAddActionItem:WorkflowTaskAddActionItem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskAddActionItem resources.
type workflowTaskAddActionItemState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskAddActionItemTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskAddActionItemState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAddActionItemTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskAddActionItemState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskAddActionItemState)(nil)).Elem()
}

type workflowTaskAddActionItemArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAddActionItemTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskAddActionItem resource.
type WorkflowTaskAddActionItemArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAddActionItemTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskAddActionItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskAddActionItemArgs)(nil)).Elem()
}

type WorkflowTaskAddActionItemInput interface {
	pulumi.Input

	ToWorkflowTaskAddActionItemOutput() WorkflowTaskAddActionItemOutput
	ToWorkflowTaskAddActionItemOutputWithContext(ctx context.Context) WorkflowTaskAddActionItemOutput
}

func (*WorkflowTaskAddActionItem) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskAddActionItem)(nil)).Elem()
}

func (i *WorkflowTaskAddActionItem) ToWorkflowTaskAddActionItemOutput() WorkflowTaskAddActionItemOutput {
	return i.ToWorkflowTaskAddActionItemOutputWithContext(context.Background())
}

func (i *WorkflowTaskAddActionItem) ToWorkflowTaskAddActionItemOutputWithContext(ctx context.Context) WorkflowTaskAddActionItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskAddActionItemOutput)
}

// WorkflowTaskAddActionItemArrayInput is an input type that accepts WorkflowTaskAddActionItemArray and WorkflowTaskAddActionItemArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskAddActionItemArrayInput` via:
//
//	WorkflowTaskAddActionItemArray{ WorkflowTaskAddActionItemArgs{...} }
type WorkflowTaskAddActionItemArrayInput interface {
	pulumi.Input

	ToWorkflowTaskAddActionItemArrayOutput() WorkflowTaskAddActionItemArrayOutput
	ToWorkflowTaskAddActionItemArrayOutputWithContext(context.Context) WorkflowTaskAddActionItemArrayOutput
}

type WorkflowTaskAddActionItemArray []WorkflowTaskAddActionItemInput

func (WorkflowTaskAddActionItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskAddActionItem)(nil)).Elem()
}

func (i WorkflowTaskAddActionItemArray) ToWorkflowTaskAddActionItemArrayOutput() WorkflowTaskAddActionItemArrayOutput {
	return i.ToWorkflowTaskAddActionItemArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskAddActionItemArray) ToWorkflowTaskAddActionItemArrayOutputWithContext(ctx context.Context) WorkflowTaskAddActionItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskAddActionItemArrayOutput)
}

// WorkflowTaskAddActionItemMapInput is an input type that accepts WorkflowTaskAddActionItemMap and WorkflowTaskAddActionItemMapOutput values.
// You can construct a concrete instance of `WorkflowTaskAddActionItemMapInput` via:
//
//	WorkflowTaskAddActionItemMap{ "key": WorkflowTaskAddActionItemArgs{...} }
type WorkflowTaskAddActionItemMapInput interface {
	pulumi.Input

	ToWorkflowTaskAddActionItemMapOutput() WorkflowTaskAddActionItemMapOutput
	ToWorkflowTaskAddActionItemMapOutputWithContext(context.Context) WorkflowTaskAddActionItemMapOutput
}

type WorkflowTaskAddActionItemMap map[string]WorkflowTaskAddActionItemInput

func (WorkflowTaskAddActionItemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskAddActionItem)(nil)).Elem()
}

func (i WorkflowTaskAddActionItemMap) ToWorkflowTaskAddActionItemMapOutput() WorkflowTaskAddActionItemMapOutput {
	return i.ToWorkflowTaskAddActionItemMapOutputWithContext(context.Background())
}

func (i WorkflowTaskAddActionItemMap) ToWorkflowTaskAddActionItemMapOutputWithContext(ctx context.Context) WorkflowTaskAddActionItemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskAddActionItemMapOutput)
}

type WorkflowTaskAddActionItemOutput struct{ *pulumi.OutputState }

func (WorkflowTaskAddActionItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskAddActionItem)(nil)).Elem()
}

func (o WorkflowTaskAddActionItemOutput) ToWorkflowTaskAddActionItemOutput() WorkflowTaskAddActionItemOutput {
	return o
}

func (o WorkflowTaskAddActionItemOutput) ToWorkflowTaskAddActionItemOutputWithContext(ctx context.Context) WorkflowTaskAddActionItemOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskAddActionItemOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskAddActionItem) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskAddActionItemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskAddActionItem) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskAddActionItemOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskAddActionItem) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskAddActionItemOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskAddActionItem) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskAddActionItemOutput) TaskParams() WorkflowTaskAddActionItemTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskAddActionItem) WorkflowTaskAddActionItemTaskParamsOutput { return v.TaskParams }).(WorkflowTaskAddActionItemTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskAddActionItemOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskAddActionItem) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskAddActionItemArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskAddActionItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskAddActionItem)(nil)).Elem()
}

func (o WorkflowTaskAddActionItemArrayOutput) ToWorkflowTaskAddActionItemArrayOutput() WorkflowTaskAddActionItemArrayOutput {
	return o
}

func (o WorkflowTaskAddActionItemArrayOutput) ToWorkflowTaskAddActionItemArrayOutputWithContext(ctx context.Context) WorkflowTaskAddActionItemArrayOutput {
	return o
}

func (o WorkflowTaskAddActionItemArrayOutput) Index(i pulumi.IntInput) WorkflowTaskAddActionItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskAddActionItem {
		return vs[0].([]*WorkflowTaskAddActionItem)[vs[1].(int)]
	}).(WorkflowTaskAddActionItemOutput)
}

type WorkflowTaskAddActionItemMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskAddActionItemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskAddActionItem)(nil)).Elem()
}

func (o WorkflowTaskAddActionItemMapOutput) ToWorkflowTaskAddActionItemMapOutput() WorkflowTaskAddActionItemMapOutput {
	return o
}

func (o WorkflowTaskAddActionItemMapOutput) ToWorkflowTaskAddActionItemMapOutputWithContext(ctx context.Context) WorkflowTaskAddActionItemMapOutput {
	return o
}

func (o WorkflowTaskAddActionItemMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskAddActionItemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskAddActionItem {
		return vs[0].(map[string]*WorkflowTaskAddActionItem)[vs[1].(string)]
	}).(WorkflowTaskAddActionItemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskAddActionItemInput)(nil)).Elem(), &WorkflowTaskAddActionItem{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskAddActionItemArrayInput)(nil)).Elem(), WorkflowTaskAddActionItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskAddActionItemMapInput)(nil)).Elem(), WorkflowTaskAddActionItemMap{})
	pulumi.RegisterOutputType(WorkflowTaskAddActionItemOutput{})
	pulumi.RegisterOutputType(WorkflowTaskAddActionItemArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskAddActionItemMapOutput{})
}
