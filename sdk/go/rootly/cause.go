// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type Cause struct {
	pulumi.CustomResourceState

	// The description of the cause
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the cause
	Name pulumi.StringOutput `pulumi:"name"`
	// Position of the cause
	Position pulumi.IntOutput `pulumi:"position"`
	// The slug of the cause
	Slug pulumi.StringOutput `pulumi:"slug"`
}

// NewCause registers a new resource with the given unique name, arguments, and options.
func NewCause(ctx *pulumi.Context,
	name string, args *CauseArgs, opts ...pulumi.ResourceOption) (*Cause, error) {
	if args == nil {
		args = &CauseArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Cause
	err := ctx.RegisterResource("rootly:index/cause:Cause", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCause gets an existing Cause resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCause(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CauseState, opts ...pulumi.ResourceOption) (*Cause, error) {
	var resource Cause
	err := ctx.ReadResource("rootly:index/cause:Cause", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cause resources.
type causeState struct {
	// The description of the cause
	Description *string `pulumi:"description"`
	// The name of the cause
	Name *string `pulumi:"name"`
	// Position of the cause
	Position *int `pulumi:"position"`
	// The slug of the cause
	Slug *string `pulumi:"slug"`
}

type CauseState struct {
	// The description of the cause
	Description pulumi.StringPtrInput
	// The name of the cause
	Name pulumi.StringPtrInput
	// Position of the cause
	Position pulumi.IntPtrInput
	// The slug of the cause
	Slug pulumi.StringPtrInput
}

func (CauseState) ElementType() reflect.Type {
	return reflect.TypeOf((*causeState)(nil)).Elem()
}

type causeArgs struct {
	// The description of the cause
	Description *string `pulumi:"description"`
	// The name of the cause
	Name *string `pulumi:"name"`
	// Position of the cause
	Position *int `pulumi:"position"`
	// The slug of the cause
	Slug *string `pulumi:"slug"`
}

// The set of arguments for constructing a Cause resource.
type CauseArgs struct {
	// The description of the cause
	Description pulumi.StringPtrInput
	// The name of the cause
	Name pulumi.StringPtrInput
	// Position of the cause
	Position pulumi.IntPtrInput
	// The slug of the cause
	Slug pulumi.StringPtrInput
}

func (CauseArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*causeArgs)(nil)).Elem()
}

type CauseInput interface {
	pulumi.Input

	ToCauseOutput() CauseOutput
	ToCauseOutputWithContext(ctx context.Context) CauseOutput
}

func (*Cause) ElementType() reflect.Type {
	return reflect.TypeOf((**Cause)(nil)).Elem()
}

func (i *Cause) ToCauseOutput() CauseOutput {
	return i.ToCauseOutputWithContext(context.Background())
}

func (i *Cause) ToCauseOutputWithContext(ctx context.Context) CauseOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CauseOutput)
}

// CauseArrayInput is an input type that accepts CauseArray and CauseArrayOutput values.
// You can construct a concrete instance of `CauseArrayInput` via:
//
//	CauseArray{ CauseArgs{...} }
type CauseArrayInput interface {
	pulumi.Input

	ToCauseArrayOutput() CauseArrayOutput
	ToCauseArrayOutputWithContext(context.Context) CauseArrayOutput
}

type CauseArray []CauseInput

func (CauseArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cause)(nil)).Elem()
}

func (i CauseArray) ToCauseArrayOutput() CauseArrayOutput {
	return i.ToCauseArrayOutputWithContext(context.Background())
}

func (i CauseArray) ToCauseArrayOutputWithContext(ctx context.Context) CauseArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CauseArrayOutput)
}

// CauseMapInput is an input type that accepts CauseMap and CauseMapOutput values.
// You can construct a concrete instance of `CauseMapInput` via:
//
//	CauseMap{ "key": CauseArgs{...} }
type CauseMapInput interface {
	pulumi.Input

	ToCauseMapOutput() CauseMapOutput
	ToCauseMapOutputWithContext(context.Context) CauseMapOutput
}

type CauseMap map[string]CauseInput

func (CauseMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cause)(nil)).Elem()
}

func (i CauseMap) ToCauseMapOutput() CauseMapOutput {
	return i.ToCauseMapOutputWithContext(context.Background())
}

func (i CauseMap) ToCauseMapOutputWithContext(ctx context.Context) CauseMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CauseMapOutput)
}

type CauseOutput struct{ *pulumi.OutputState }

func (CauseOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Cause)(nil)).Elem()
}

func (o CauseOutput) ToCauseOutput() CauseOutput {
	return o
}

func (o CauseOutput) ToCauseOutputWithContext(ctx context.Context) CauseOutput {
	return o
}

// The description of the cause
func (o CauseOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Cause) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// The name of the cause
func (o CauseOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Cause) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Position of the cause
func (o CauseOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *Cause) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// The slug of the cause
func (o CauseOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *Cause) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

type CauseArrayOutput struct{ *pulumi.OutputState }

func (CauseArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Cause)(nil)).Elem()
}

func (o CauseArrayOutput) ToCauseArrayOutput() CauseArrayOutput {
	return o
}

func (o CauseArrayOutput) ToCauseArrayOutputWithContext(ctx context.Context) CauseArrayOutput {
	return o
}

func (o CauseArrayOutput) Index(i pulumi.IntInput) CauseOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Cause {
		return vs[0].([]*Cause)[vs[1].(int)]
	}).(CauseOutput)
}

type CauseMapOutput struct{ *pulumi.OutputState }

func (CauseMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Cause)(nil)).Elem()
}

func (o CauseMapOutput) ToCauseMapOutput() CauseMapOutput {
	return o
}

func (o CauseMapOutput) ToCauseMapOutputWithContext(ctx context.Context) CauseMapOutput {
	return o
}

func (o CauseMapOutput) MapIndex(k pulumi.StringInput) CauseOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Cause {
		return vs[0].(map[string]*Cause)[vs[1].(string)]
	}).(CauseOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CauseInput)(nil)).Elem(), &Cause{})
	pulumi.RegisterInputType(reflect.TypeOf((*CauseArrayInput)(nil)).Elem(), CauseArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CauseMapInput)(nil)).Elem(), CauseMap{})
	pulumi.RegisterOutputType(CauseOutput{})
	pulumi.RegisterOutputType(CauseArrayOutput{})
	pulumi.RegisterOutputType(CauseMapOutput{})
}
