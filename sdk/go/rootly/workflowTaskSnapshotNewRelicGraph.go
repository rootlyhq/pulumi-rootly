// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow snapshotNewRelicGraph task.
type WorkflowTaskSnapshotNewRelicGraph struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSnapshotNewRelicGraphTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskSnapshotNewRelicGraph registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskSnapshotNewRelicGraph(ctx *pulumi.Context,
	name string, args *WorkflowTaskSnapshotNewRelicGraphArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskSnapshotNewRelicGraph, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskSnapshotNewRelicGraph
	err := ctx.RegisterResource("rootly:index/workflowTaskSnapshotNewRelicGraph:WorkflowTaskSnapshotNewRelicGraph", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskSnapshotNewRelicGraph gets an existing WorkflowTaskSnapshotNewRelicGraph resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskSnapshotNewRelicGraph(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskSnapshotNewRelicGraphState, opts ...pulumi.ResourceOption) (*WorkflowTaskSnapshotNewRelicGraph, error) {
	var resource WorkflowTaskSnapshotNewRelicGraph
	err := ctx.ReadResource("rootly:index/workflowTaskSnapshotNewRelicGraph:WorkflowTaskSnapshotNewRelicGraph", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskSnapshotNewRelicGraph resources.
type workflowTaskSnapshotNewRelicGraphState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskSnapshotNewRelicGraphTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskSnapshotNewRelicGraphState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSnapshotNewRelicGraphTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskSnapshotNewRelicGraphState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskSnapshotNewRelicGraphState)(nil)).Elem()
}

type workflowTaskSnapshotNewRelicGraphArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSnapshotNewRelicGraphTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskSnapshotNewRelicGraph resource.
type WorkflowTaskSnapshotNewRelicGraphArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSnapshotNewRelicGraphTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskSnapshotNewRelicGraphArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskSnapshotNewRelicGraphArgs)(nil)).Elem()
}

type WorkflowTaskSnapshotNewRelicGraphInput interface {
	pulumi.Input

	ToWorkflowTaskSnapshotNewRelicGraphOutput() WorkflowTaskSnapshotNewRelicGraphOutput
	ToWorkflowTaskSnapshotNewRelicGraphOutputWithContext(ctx context.Context) WorkflowTaskSnapshotNewRelicGraphOutput
}

func (*WorkflowTaskSnapshotNewRelicGraph) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskSnapshotNewRelicGraph)(nil)).Elem()
}

func (i *WorkflowTaskSnapshotNewRelicGraph) ToWorkflowTaskSnapshotNewRelicGraphOutput() WorkflowTaskSnapshotNewRelicGraphOutput {
	return i.ToWorkflowTaskSnapshotNewRelicGraphOutputWithContext(context.Background())
}

func (i *WorkflowTaskSnapshotNewRelicGraph) ToWorkflowTaskSnapshotNewRelicGraphOutputWithContext(ctx context.Context) WorkflowTaskSnapshotNewRelicGraphOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSnapshotNewRelicGraphOutput)
}

// WorkflowTaskSnapshotNewRelicGraphArrayInput is an input type that accepts WorkflowTaskSnapshotNewRelicGraphArray and WorkflowTaskSnapshotNewRelicGraphArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskSnapshotNewRelicGraphArrayInput` via:
//
//	WorkflowTaskSnapshotNewRelicGraphArray{ WorkflowTaskSnapshotNewRelicGraphArgs{...} }
type WorkflowTaskSnapshotNewRelicGraphArrayInput interface {
	pulumi.Input

	ToWorkflowTaskSnapshotNewRelicGraphArrayOutput() WorkflowTaskSnapshotNewRelicGraphArrayOutput
	ToWorkflowTaskSnapshotNewRelicGraphArrayOutputWithContext(context.Context) WorkflowTaskSnapshotNewRelicGraphArrayOutput
}

type WorkflowTaskSnapshotNewRelicGraphArray []WorkflowTaskSnapshotNewRelicGraphInput

func (WorkflowTaskSnapshotNewRelicGraphArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskSnapshotNewRelicGraph)(nil)).Elem()
}

func (i WorkflowTaskSnapshotNewRelicGraphArray) ToWorkflowTaskSnapshotNewRelicGraphArrayOutput() WorkflowTaskSnapshotNewRelicGraphArrayOutput {
	return i.ToWorkflowTaskSnapshotNewRelicGraphArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskSnapshotNewRelicGraphArray) ToWorkflowTaskSnapshotNewRelicGraphArrayOutputWithContext(ctx context.Context) WorkflowTaskSnapshotNewRelicGraphArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSnapshotNewRelicGraphArrayOutput)
}

// WorkflowTaskSnapshotNewRelicGraphMapInput is an input type that accepts WorkflowTaskSnapshotNewRelicGraphMap and WorkflowTaskSnapshotNewRelicGraphMapOutput values.
// You can construct a concrete instance of `WorkflowTaskSnapshotNewRelicGraphMapInput` via:
//
//	WorkflowTaskSnapshotNewRelicGraphMap{ "key": WorkflowTaskSnapshotNewRelicGraphArgs{...} }
type WorkflowTaskSnapshotNewRelicGraphMapInput interface {
	pulumi.Input

	ToWorkflowTaskSnapshotNewRelicGraphMapOutput() WorkflowTaskSnapshotNewRelicGraphMapOutput
	ToWorkflowTaskSnapshotNewRelicGraphMapOutputWithContext(context.Context) WorkflowTaskSnapshotNewRelicGraphMapOutput
}

type WorkflowTaskSnapshotNewRelicGraphMap map[string]WorkflowTaskSnapshotNewRelicGraphInput

func (WorkflowTaskSnapshotNewRelicGraphMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskSnapshotNewRelicGraph)(nil)).Elem()
}

func (i WorkflowTaskSnapshotNewRelicGraphMap) ToWorkflowTaskSnapshotNewRelicGraphMapOutput() WorkflowTaskSnapshotNewRelicGraphMapOutput {
	return i.ToWorkflowTaskSnapshotNewRelicGraphMapOutputWithContext(context.Background())
}

func (i WorkflowTaskSnapshotNewRelicGraphMap) ToWorkflowTaskSnapshotNewRelicGraphMapOutputWithContext(ctx context.Context) WorkflowTaskSnapshotNewRelicGraphMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSnapshotNewRelicGraphMapOutput)
}

type WorkflowTaskSnapshotNewRelicGraphOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSnapshotNewRelicGraphOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskSnapshotNewRelicGraph)(nil)).Elem()
}

func (o WorkflowTaskSnapshotNewRelicGraphOutput) ToWorkflowTaskSnapshotNewRelicGraphOutput() WorkflowTaskSnapshotNewRelicGraphOutput {
	return o
}

func (o WorkflowTaskSnapshotNewRelicGraphOutput) ToWorkflowTaskSnapshotNewRelicGraphOutputWithContext(ctx context.Context) WorkflowTaskSnapshotNewRelicGraphOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskSnapshotNewRelicGraphOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskSnapshotNewRelicGraph) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskSnapshotNewRelicGraphOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskSnapshotNewRelicGraph) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskSnapshotNewRelicGraphOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskSnapshotNewRelicGraph) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskSnapshotNewRelicGraphOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskSnapshotNewRelicGraph) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskSnapshotNewRelicGraphOutput) TaskParams() WorkflowTaskSnapshotNewRelicGraphTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskSnapshotNewRelicGraph) WorkflowTaskSnapshotNewRelicGraphTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskSnapshotNewRelicGraphTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskSnapshotNewRelicGraphOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskSnapshotNewRelicGraph) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskSnapshotNewRelicGraphArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSnapshotNewRelicGraphArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskSnapshotNewRelicGraph)(nil)).Elem()
}

func (o WorkflowTaskSnapshotNewRelicGraphArrayOutput) ToWorkflowTaskSnapshotNewRelicGraphArrayOutput() WorkflowTaskSnapshotNewRelicGraphArrayOutput {
	return o
}

func (o WorkflowTaskSnapshotNewRelicGraphArrayOutput) ToWorkflowTaskSnapshotNewRelicGraphArrayOutputWithContext(ctx context.Context) WorkflowTaskSnapshotNewRelicGraphArrayOutput {
	return o
}

func (o WorkflowTaskSnapshotNewRelicGraphArrayOutput) Index(i pulumi.IntInput) WorkflowTaskSnapshotNewRelicGraphOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskSnapshotNewRelicGraph {
		return vs[0].([]*WorkflowTaskSnapshotNewRelicGraph)[vs[1].(int)]
	}).(WorkflowTaskSnapshotNewRelicGraphOutput)
}

type WorkflowTaskSnapshotNewRelicGraphMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSnapshotNewRelicGraphMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskSnapshotNewRelicGraph)(nil)).Elem()
}

func (o WorkflowTaskSnapshotNewRelicGraphMapOutput) ToWorkflowTaskSnapshotNewRelicGraphMapOutput() WorkflowTaskSnapshotNewRelicGraphMapOutput {
	return o
}

func (o WorkflowTaskSnapshotNewRelicGraphMapOutput) ToWorkflowTaskSnapshotNewRelicGraphMapOutputWithContext(ctx context.Context) WorkflowTaskSnapshotNewRelicGraphMapOutput {
	return o
}

func (o WorkflowTaskSnapshotNewRelicGraphMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskSnapshotNewRelicGraphOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskSnapshotNewRelicGraph {
		return vs[0].(map[string]*WorkflowTaskSnapshotNewRelicGraph)[vs[1].(string)]
	}).(WorkflowTaskSnapshotNewRelicGraphOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSnapshotNewRelicGraphInput)(nil)).Elem(), &WorkflowTaskSnapshotNewRelicGraph{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSnapshotNewRelicGraphArrayInput)(nil)).Elem(), WorkflowTaskSnapshotNewRelicGraphArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSnapshotNewRelicGraphMapInput)(nil)).Elem(), WorkflowTaskSnapshotNewRelicGraphMap{})
	pulumi.RegisterOutputType(WorkflowTaskSnapshotNewRelicGraphOutput{})
	pulumi.RegisterOutputType(WorkflowTaskSnapshotNewRelicGraphArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskSnapshotNewRelicGraphMapOutput{})
}
