// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// ## Example Usage
func LookupCause(ctx *pulumi.Context, args *LookupCauseArgs, opts ...pulumi.InvokeOption) (*LookupCauseResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCauseResult
	err := ctx.Invoke("rootly:index/getCause:getCause", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCause.
type LookupCauseArgs struct {
	// Filter by date range using 'lt' and 'gt'.
	CreatedAt map[string]string `pulumi:"createdAt"`
	Name      *string           `pulumi:"name"`
	Slug      *string           `pulumi:"slug"`
}

// A collection of values returned by getCause.
type LookupCauseResult struct {
	// Filter by date range using 'lt' and 'gt'.
	CreatedAt map[string]string `pulumi:"createdAt"`
	// The ID of this resource.
	Id   string `pulumi:"id"`
	Name string `pulumi:"name"`
	Slug string `pulumi:"slug"`
}

func LookupCauseOutput(ctx *pulumi.Context, args LookupCauseOutputArgs, opts ...pulumi.InvokeOption) LookupCauseResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCauseResult, error) {
			args := v.(LookupCauseArgs)
			r, err := LookupCause(ctx, &args, opts...)
			var s LookupCauseResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCauseResultOutput)
}

// A collection of arguments for invoking getCause.
type LookupCauseOutputArgs struct {
	// Filter by date range using 'lt' and 'gt'.
	CreatedAt pulumi.StringMapInput `pulumi:"createdAt"`
	Name      pulumi.StringPtrInput `pulumi:"name"`
	Slug      pulumi.StringPtrInput `pulumi:"slug"`
}

func (LookupCauseOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCauseArgs)(nil)).Elem()
}

// A collection of values returned by getCause.
type LookupCauseResultOutput struct{ *pulumi.OutputState }

func (LookupCauseResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCauseResult)(nil)).Elem()
}

func (o LookupCauseResultOutput) ToLookupCauseResultOutput() LookupCauseResultOutput {
	return o
}

func (o LookupCauseResultOutput) ToLookupCauseResultOutputWithContext(ctx context.Context) LookupCauseResultOutput {
	return o
}

// Filter by date range using 'lt' and 'gt'.
func (o LookupCauseResultOutput) CreatedAt() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCauseResult) map[string]string { return v.CreatedAt }).(pulumi.StringMapOutput)
}

// The ID of this resource.
func (o LookupCauseResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCauseResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupCauseResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCauseResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupCauseResultOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCauseResult) string { return v.Slug }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCauseResultOutput{})
}
