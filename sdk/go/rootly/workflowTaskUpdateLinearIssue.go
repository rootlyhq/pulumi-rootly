// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow updateLinearIssue task.
type WorkflowTaskUpdateLinearIssue struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateLinearIssueTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskUpdateLinearIssue registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskUpdateLinearIssue(ctx *pulumi.Context,
	name string, args *WorkflowTaskUpdateLinearIssueArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateLinearIssue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskUpdateLinearIssue
	err := ctx.RegisterResource("rootly:index/workflowTaskUpdateLinearIssue:WorkflowTaskUpdateLinearIssue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskUpdateLinearIssue gets an existing WorkflowTaskUpdateLinearIssue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskUpdateLinearIssue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskUpdateLinearIssueState, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateLinearIssue, error) {
	var resource WorkflowTaskUpdateLinearIssue
	err := ctx.ReadResource("rootly:index/workflowTaskUpdateLinearIssue:WorkflowTaskUpdateLinearIssue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskUpdateLinearIssue resources.
type workflowTaskUpdateLinearIssueState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskUpdateLinearIssueTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskUpdateLinearIssueState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateLinearIssueTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskUpdateLinearIssueState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateLinearIssueState)(nil)).Elem()
}

type workflowTaskUpdateLinearIssueArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateLinearIssueTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskUpdateLinearIssue resource.
type WorkflowTaskUpdateLinearIssueArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateLinearIssueTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskUpdateLinearIssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateLinearIssueArgs)(nil)).Elem()
}

type WorkflowTaskUpdateLinearIssueInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateLinearIssueOutput() WorkflowTaskUpdateLinearIssueOutput
	ToWorkflowTaskUpdateLinearIssueOutputWithContext(ctx context.Context) WorkflowTaskUpdateLinearIssueOutput
}

func (*WorkflowTaskUpdateLinearIssue) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateLinearIssue)(nil)).Elem()
}

func (i *WorkflowTaskUpdateLinearIssue) ToWorkflowTaskUpdateLinearIssueOutput() WorkflowTaskUpdateLinearIssueOutput {
	return i.ToWorkflowTaskUpdateLinearIssueOutputWithContext(context.Background())
}

func (i *WorkflowTaskUpdateLinearIssue) ToWorkflowTaskUpdateLinearIssueOutputWithContext(ctx context.Context) WorkflowTaskUpdateLinearIssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateLinearIssueOutput)
}

// WorkflowTaskUpdateLinearIssueArrayInput is an input type that accepts WorkflowTaskUpdateLinearIssueArray and WorkflowTaskUpdateLinearIssueArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateLinearIssueArrayInput` via:
//
//	WorkflowTaskUpdateLinearIssueArray{ WorkflowTaskUpdateLinearIssueArgs{...} }
type WorkflowTaskUpdateLinearIssueArrayInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateLinearIssueArrayOutput() WorkflowTaskUpdateLinearIssueArrayOutput
	ToWorkflowTaskUpdateLinearIssueArrayOutputWithContext(context.Context) WorkflowTaskUpdateLinearIssueArrayOutput
}

type WorkflowTaskUpdateLinearIssueArray []WorkflowTaskUpdateLinearIssueInput

func (WorkflowTaskUpdateLinearIssueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateLinearIssue)(nil)).Elem()
}

func (i WorkflowTaskUpdateLinearIssueArray) ToWorkflowTaskUpdateLinearIssueArrayOutput() WorkflowTaskUpdateLinearIssueArrayOutput {
	return i.ToWorkflowTaskUpdateLinearIssueArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateLinearIssueArray) ToWorkflowTaskUpdateLinearIssueArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateLinearIssueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateLinearIssueArrayOutput)
}

// WorkflowTaskUpdateLinearIssueMapInput is an input type that accepts WorkflowTaskUpdateLinearIssueMap and WorkflowTaskUpdateLinearIssueMapOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateLinearIssueMapInput` via:
//
//	WorkflowTaskUpdateLinearIssueMap{ "key": WorkflowTaskUpdateLinearIssueArgs{...} }
type WorkflowTaskUpdateLinearIssueMapInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateLinearIssueMapOutput() WorkflowTaskUpdateLinearIssueMapOutput
	ToWorkflowTaskUpdateLinearIssueMapOutputWithContext(context.Context) WorkflowTaskUpdateLinearIssueMapOutput
}

type WorkflowTaskUpdateLinearIssueMap map[string]WorkflowTaskUpdateLinearIssueInput

func (WorkflowTaskUpdateLinearIssueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateLinearIssue)(nil)).Elem()
}

func (i WorkflowTaskUpdateLinearIssueMap) ToWorkflowTaskUpdateLinearIssueMapOutput() WorkflowTaskUpdateLinearIssueMapOutput {
	return i.ToWorkflowTaskUpdateLinearIssueMapOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateLinearIssueMap) ToWorkflowTaskUpdateLinearIssueMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateLinearIssueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateLinearIssueMapOutput)
}

type WorkflowTaskUpdateLinearIssueOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateLinearIssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateLinearIssue)(nil)).Elem()
}

func (o WorkflowTaskUpdateLinearIssueOutput) ToWorkflowTaskUpdateLinearIssueOutput() WorkflowTaskUpdateLinearIssueOutput {
	return o
}

func (o WorkflowTaskUpdateLinearIssueOutput) ToWorkflowTaskUpdateLinearIssueOutputWithContext(ctx context.Context) WorkflowTaskUpdateLinearIssueOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskUpdateLinearIssueOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateLinearIssue) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskUpdateLinearIssueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateLinearIssue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskUpdateLinearIssueOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateLinearIssue) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskUpdateLinearIssueOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateLinearIssue) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskUpdateLinearIssueOutput) TaskParams() WorkflowTaskUpdateLinearIssueTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateLinearIssue) WorkflowTaskUpdateLinearIssueTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskUpdateLinearIssueTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskUpdateLinearIssueOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateLinearIssue) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskUpdateLinearIssueArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateLinearIssueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateLinearIssue)(nil)).Elem()
}

func (o WorkflowTaskUpdateLinearIssueArrayOutput) ToWorkflowTaskUpdateLinearIssueArrayOutput() WorkflowTaskUpdateLinearIssueArrayOutput {
	return o
}

func (o WorkflowTaskUpdateLinearIssueArrayOutput) ToWorkflowTaskUpdateLinearIssueArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateLinearIssueArrayOutput {
	return o
}

func (o WorkflowTaskUpdateLinearIssueArrayOutput) Index(i pulumi.IntInput) WorkflowTaskUpdateLinearIssueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateLinearIssue {
		return vs[0].([]*WorkflowTaskUpdateLinearIssue)[vs[1].(int)]
	}).(WorkflowTaskUpdateLinearIssueOutput)
}

type WorkflowTaskUpdateLinearIssueMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateLinearIssueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateLinearIssue)(nil)).Elem()
}

func (o WorkflowTaskUpdateLinearIssueMapOutput) ToWorkflowTaskUpdateLinearIssueMapOutput() WorkflowTaskUpdateLinearIssueMapOutput {
	return o
}

func (o WorkflowTaskUpdateLinearIssueMapOutput) ToWorkflowTaskUpdateLinearIssueMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateLinearIssueMapOutput {
	return o
}

func (o WorkflowTaskUpdateLinearIssueMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskUpdateLinearIssueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateLinearIssue {
		return vs[0].(map[string]*WorkflowTaskUpdateLinearIssue)[vs[1].(string)]
	}).(WorkflowTaskUpdateLinearIssueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateLinearIssueInput)(nil)).Elem(), &WorkflowTaskUpdateLinearIssue{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateLinearIssueArrayInput)(nil)).Elem(), WorkflowTaskUpdateLinearIssueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateLinearIssueMapInput)(nil)).Elem(), WorkflowTaskUpdateLinearIssueMap{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateLinearIssueOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateLinearIssueArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateLinearIssueMapOutput{})
}
