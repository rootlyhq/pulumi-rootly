// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type StatusPageTemplate struct {
	pulumi.CustomResourceState

	// Description of the event the template will populate
	Body    pulumi.StringOutput  `pulumi:"body"`
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// The kind of the status page template. Value must be one of `normal`, `scheduled`.
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Position of the workflow task
	Position pulumi.IntOutput `pulumi:"position"`
	// Controls if incident subscribers should be notified. Value must be one of true or false
	ShouldNotifySubscribers pulumi.BoolOutput   `pulumi:"shouldNotifySubscribers"`
	StatusPageId            pulumi.StringOutput `pulumi:"statusPageId"`
	// Title of the template
	Title pulumi.StringOutput `pulumi:"title"`
	// Status of the event the template will populate
	UpdateStatus pulumi.StringOutput `pulumi:"updateStatus"`
}

// NewStatusPageTemplate registers a new resource with the given unique name, arguments, and options.
func NewStatusPageTemplate(ctx *pulumi.Context,
	name string, args *StatusPageTemplateArgs, opts ...pulumi.ResourceOption) (*StatusPageTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Body == nil {
		return nil, errors.New("invalid value for required argument 'Body'")
	}
	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StatusPageTemplate
	err := ctx.RegisterResource("rootly:index/statusPageTemplate:StatusPageTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStatusPageTemplate gets an existing StatusPageTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStatusPageTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StatusPageTemplateState, opts ...pulumi.ResourceOption) (*StatusPageTemplate, error) {
	var resource StatusPageTemplate
	err := ctx.ReadResource("rootly:index/statusPageTemplate:StatusPageTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StatusPageTemplate resources.
type statusPageTemplateState struct {
	// Description of the event the template will populate
	Body    *string `pulumi:"body"`
	Enabled *bool   `pulumi:"enabled"`
	// The kind of the status page template. Value must be one of `normal`, `scheduled`.
	Kind *string `pulumi:"kind"`
	// Position of the workflow task
	Position *int `pulumi:"position"`
	// Controls if incident subscribers should be notified. Value must be one of true or false
	ShouldNotifySubscribers *bool   `pulumi:"shouldNotifySubscribers"`
	StatusPageId            *string `pulumi:"statusPageId"`
	// Title of the template
	Title *string `pulumi:"title"`
	// Status of the event the template will populate
	UpdateStatus *string `pulumi:"updateStatus"`
}

type StatusPageTemplateState struct {
	// Description of the event the template will populate
	Body    pulumi.StringPtrInput
	Enabled pulumi.BoolPtrInput
	// The kind of the status page template. Value must be one of `normal`, `scheduled`.
	Kind pulumi.StringPtrInput
	// Position of the workflow task
	Position pulumi.IntPtrInput
	// Controls if incident subscribers should be notified. Value must be one of true or false
	ShouldNotifySubscribers pulumi.BoolPtrInput
	StatusPageId            pulumi.StringPtrInput
	// Title of the template
	Title pulumi.StringPtrInput
	// Status of the event the template will populate
	UpdateStatus pulumi.StringPtrInput
}

func (StatusPageTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*statusPageTemplateState)(nil)).Elem()
}

type statusPageTemplateArgs struct {
	// Description of the event the template will populate
	Body    string `pulumi:"body"`
	Enabled *bool  `pulumi:"enabled"`
	// The kind of the status page template. Value must be one of `normal`, `scheduled`.
	Kind *string `pulumi:"kind"`
	// Position of the workflow task
	Position *int `pulumi:"position"`
	// Controls if incident subscribers should be notified. Value must be one of true or false
	ShouldNotifySubscribers *bool   `pulumi:"shouldNotifySubscribers"`
	StatusPageId            *string `pulumi:"statusPageId"`
	// Title of the template
	Title string `pulumi:"title"`
	// Status of the event the template will populate
	UpdateStatus *string `pulumi:"updateStatus"`
}

// The set of arguments for constructing a StatusPageTemplate resource.
type StatusPageTemplateArgs struct {
	// Description of the event the template will populate
	Body    pulumi.StringInput
	Enabled pulumi.BoolPtrInput
	// The kind of the status page template. Value must be one of `normal`, `scheduled`.
	Kind pulumi.StringPtrInput
	// Position of the workflow task
	Position pulumi.IntPtrInput
	// Controls if incident subscribers should be notified. Value must be one of true or false
	ShouldNotifySubscribers pulumi.BoolPtrInput
	StatusPageId            pulumi.StringPtrInput
	// Title of the template
	Title pulumi.StringInput
	// Status of the event the template will populate
	UpdateStatus pulumi.StringPtrInput
}

func (StatusPageTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*statusPageTemplateArgs)(nil)).Elem()
}

type StatusPageTemplateInput interface {
	pulumi.Input

	ToStatusPageTemplateOutput() StatusPageTemplateOutput
	ToStatusPageTemplateOutputWithContext(ctx context.Context) StatusPageTemplateOutput
}

func (*StatusPageTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusPageTemplate)(nil)).Elem()
}

func (i *StatusPageTemplate) ToStatusPageTemplateOutput() StatusPageTemplateOutput {
	return i.ToStatusPageTemplateOutputWithContext(context.Background())
}

func (i *StatusPageTemplate) ToStatusPageTemplateOutputWithContext(ctx context.Context) StatusPageTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPageTemplateOutput)
}

// StatusPageTemplateArrayInput is an input type that accepts StatusPageTemplateArray and StatusPageTemplateArrayOutput values.
// You can construct a concrete instance of `StatusPageTemplateArrayInput` via:
//
//	StatusPageTemplateArray{ StatusPageTemplateArgs{...} }
type StatusPageTemplateArrayInput interface {
	pulumi.Input

	ToStatusPageTemplateArrayOutput() StatusPageTemplateArrayOutput
	ToStatusPageTemplateArrayOutputWithContext(context.Context) StatusPageTemplateArrayOutput
}

type StatusPageTemplateArray []StatusPageTemplateInput

func (StatusPageTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StatusPageTemplate)(nil)).Elem()
}

func (i StatusPageTemplateArray) ToStatusPageTemplateArrayOutput() StatusPageTemplateArrayOutput {
	return i.ToStatusPageTemplateArrayOutputWithContext(context.Background())
}

func (i StatusPageTemplateArray) ToStatusPageTemplateArrayOutputWithContext(ctx context.Context) StatusPageTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPageTemplateArrayOutput)
}

// StatusPageTemplateMapInput is an input type that accepts StatusPageTemplateMap and StatusPageTemplateMapOutput values.
// You can construct a concrete instance of `StatusPageTemplateMapInput` via:
//
//	StatusPageTemplateMap{ "key": StatusPageTemplateArgs{...} }
type StatusPageTemplateMapInput interface {
	pulumi.Input

	ToStatusPageTemplateMapOutput() StatusPageTemplateMapOutput
	ToStatusPageTemplateMapOutputWithContext(context.Context) StatusPageTemplateMapOutput
}

type StatusPageTemplateMap map[string]StatusPageTemplateInput

func (StatusPageTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StatusPageTemplate)(nil)).Elem()
}

func (i StatusPageTemplateMap) ToStatusPageTemplateMapOutput() StatusPageTemplateMapOutput {
	return i.ToStatusPageTemplateMapOutputWithContext(context.Background())
}

func (i StatusPageTemplateMap) ToStatusPageTemplateMapOutputWithContext(ctx context.Context) StatusPageTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StatusPageTemplateMapOutput)
}

type StatusPageTemplateOutput struct{ *pulumi.OutputState }

func (StatusPageTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StatusPageTemplate)(nil)).Elem()
}

func (o StatusPageTemplateOutput) ToStatusPageTemplateOutput() StatusPageTemplateOutput {
	return o
}

func (o StatusPageTemplateOutput) ToStatusPageTemplateOutputWithContext(ctx context.Context) StatusPageTemplateOutput {
	return o
}

// Description of the event the template will populate
func (o StatusPageTemplateOutput) Body() pulumi.StringOutput {
	return o.ApplyT(func(v *StatusPageTemplate) pulumi.StringOutput { return v.Body }).(pulumi.StringOutput)
}

func (o StatusPageTemplateOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *StatusPageTemplate) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// The kind of the status page template. Value must be one of `normal`, `scheduled`.
func (o StatusPageTemplateOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StatusPageTemplate) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Position of the workflow task
func (o StatusPageTemplateOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *StatusPageTemplate) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Controls if incident subscribers should be notified. Value must be one of true or false
func (o StatusPageTemplateOutput) ShouldNotifySubscribers() pulumi.BoolOutput {
	return o.ApplyT(func(v *StatusPageTemplate) pulumi.BoolOutput { return v.ShouldNotifySubscribers }).(pulumi.BoolOutput)
}

func (o StatusPageTemplateOutput) StatusPageId() pulumi.StringOutput {
	return o.ApplyT(func(v *StatusPageTemplate) pulumi.StringOutput { return v.StatusPageId }).(pulumi.StringOutput)
}

// Title of the template
func (o StatusPageTemplateOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v *StatusPageTemplate) pulumi.StringOutput { return v.Title }).(pulumi.StringOutput)
}

// Status of the event the template will populate
func (o StatusPageTemplateOutput) UpdateStatus() pulumi.StringOutput {
	return o.ApplyT(func(v *StatusPageTemplate) pulumi.StringOutput { return v.UpdateStatus }).(pulumi.StringOutput)
}

type StatusPageTemplateArrayOutput struct{ *pulumi.OutputState }

func (StatusPageTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StatusPageTemplate)(nil)).Elem()
}

func (o StatusPageTemplateArrayOutput) ToStatusPageTemplateArrayOutput() StatusPageTemplateArrayOutput {
	return o
}

func (o StatusPageTemplateArrayOutput) ToStatusPageTemplateArrayOutputWithContext(ctx context.Context) StatusPageTemplateArrayOutput {
	return o
}

func (o StatusPageTemplateArrayOutput) Index(i pulumi.IntInput) StatusPageTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StatusPageTemplate {
		return vs[0].([]*StatusPageTemplate)[vs[1].(int)]
	}).(StatusPageTemplateOutput)
}

type StatusPageTemplateMapOutput struct{ *pulumi.OutputState }

func (StatusPageTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StatusPageTemplate)(nil)).Elem()
}

func (o StatusPageTemplateMapOutput) ToStatusPageTemplateMapOutput() StatusPageTemplateMapOutput {
	return o
}

func (o StatusPageTemplateMapOutput) ToStatusPageTemplateMapOutputWithContext(ctx context.Context) StatusPageTemplateMapOutput {
	return o
}

func (o StatusPageTemplateMapOutput) MapIndex(k pulumi.StringInput) StatusPageTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StatusPageTemplate {
		return vs[0].(map[string]*StatusPageTemplate)[vs[1].(string)]
	}).(StatusPageTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StatusPageTemplateInput)(nil)).Elem(), &StatusPageTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusPageTemplateArrayInput)(nil)).Elem(), StatusPageTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StatusPageTemplateMapInput)(nil)).Elem(), StatusPageTemplateMap{})
	pulumi.RegisterOutputType(StatusPageTemplateOutput{})
	pulumi.RegisterOutputType(StatusPageTemplateArrayOutput{})
	pulumi.RegisterOutputType(StatusPageTemplateMapOutput{})
}
