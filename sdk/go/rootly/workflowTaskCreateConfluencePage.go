// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createConfluencePage task.
type WorkflowTaskCreateConfluencePage struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateConfluencePageTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreateConfluencePage registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreateConfluencePage(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreateConfluencePageArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateConfluencePage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreateConfluencePage
	err := ctx.RegisterResource("rootly:index/workflowTaskCreateConfluencePage:WorkflowTaskCreateConfluencePage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreateConfluencePage gets an existing WorkflowTaskCreateConfluencePage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreateConfluencePage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreateConfluencePageState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateConfluencePage, error) {
	var resource WorkflowTaskCreateConfluencePage
	err := ctx.ReadResource("rootly:index/workflowTaskCreateConfluencePage:WorkflowTaskCreateConfluencePage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreateConfluencePage resources.
type workflowTaskCreateConfluencePageState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreateConfluencePageTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreateConfluencePageState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateConfluencePageTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreateConfluencePageState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateConfluencePageState)(nil)).Elem()
}

type workflowTaskCreateConfluencePageArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateConfluencePageTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreateConfluencePage resource.
type WorkflowTaskCreateConfluencePageArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateConfluencePageTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreateConfluencePageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateConfluencePageArgs)(nil)).Elem()
}

type WorkflowTaskCreateConfluencePageInput interface {
	pulumi.Input

	ToWorkflowTaskCreateConfluencePageOutput() WorkflowTaskCreateConfluencePageOutput
	ToWorkflowTaskCreateConfluencePageOutputWithContext(ctx context.Context) WorkflowTaskCreateConfluencePageOutput
}

func (*WorkflowTaskCreateConfluencePage) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateConfluencePage)(nil)).Elem()
}

func (i *WorkflowTaskCreateConfluencePage) ToWorkflowTaskCreateConfluencePageOutput() WorkflowTaskCreateConfluencePageOutput {
	return i.ToWorkflowTaskCreateConfluencePageOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreateConfluencePage) ToWorkflowTaskCreateConfluencePageOutputWithContext(ctx context.Context) WorkflowTaskCreateConfluencePageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateConfluencePageOutput)
}

// WorkflowTaskCreateConfluencePageArrayInput is an input type that accepts WorkflowTaskCreateConfluencePageArray and WorkflowTaskCreateConfluencePageArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateConfluencePageArrayInput` via:
//
//	WorkflowTaskCreateConfluencePageArray{ WorkflowTaskCreateConfluencePageArgs{...} }
type WorkflowTaskCreateConfluencePageArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreateConfluencePageArrayOutput() WorkflowTaskCreateConfluencePageArrayOutput
	ToWorkflowTaskCreateConfluencePageArrayOutputWithContext(context.Context) WorkflowTaskCreateConfluencePageArrayOutput
}

type WorkflowTaskCreateConfluencePageArray []WorkflowTaskCreateConfluencePageInput

func (WorkflowTaskCreateConfluencePageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateConfluencePage)(nil)).Elem()
}

func (i WorkflowTaskCreateConfluencePageArray) ToWorkflowTaskCreateConfluencePageArrayOutput() WorkflowTaskCreateConfluencePageArrayOutput {
	return i.ToWorkflowTaskCreateConfluencePageArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateConfluencePageArray) ToWorkflowTaskCreateConfluencePageArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateConfluencePageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateConfluencePageArrayOutput)
}

// WorkflowTaskCreateConfluencePageMapInput is an input type that accepts WorkflowTaskCreateConfluencePageMap and WorkflowTaskCreateConfluencePageMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateConfluencePageMapInput` via:
//
//	WorkflowTaskCreateConfluencePageMap{ "key": WorkflowTaskCreateConfluencePageArgs{...} }
type WorkflowTaskCreateConfluencePageMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreateConfluencePageMapOutput() WorkflowTaskCreateConfluencePageMapOutput
	ToWorkflowTaskCreateConfluencePageMapOutputWithContext(context.Context) WorkflowTaskCreateConfluencePageMapOutput
}

type WorkflowTaskCreateConfluencePageMap map[string]WorkflowTaskCreateConfluencePageInput

func (WorkflowTaskCreateConfluencePageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateConfluencePage)(nil)).Elem()
}

func (i WorkflowTaskCreateConfluencePageMap) ToWorkflowTaskCreateConfluencePageMapOutput() WorkflowTaskCreateConfluencePageMapOutput {
	return i.ToWorkflowTaskCreateConfluencePageMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateConfluencePageMap) ToWorkflowTaskCreateConfluencePageMapOutputWithContext(ctx context.Context) WorkflowTaskCreateConfluencePageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateConfluencePageMapOutput)
}

type WorkflowTaskCreateConfluencePageOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateConfluencePageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateConfluencePage)(nil)).Elem()
}

func (o WorkflowTaskCreateConfluencePageOutput) ToWorkflowTaskCreateConfluencePageOutput() WorkflowTaskCreateConfluencePageOutput {
	return o
}

func (o WorkflowTaskCreateConfluencePageOutput) ToWorkflowTaskCreateConfluencePageOutputWithContext(ctx context.Context) WorkflowTaskCreateConfluencePageOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreateConfluencePageOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateConfluencePage) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreateConfluencePageOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateConfluencePage) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreateConfluencePageOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateConfluencePage) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreateConfluencePageOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateConfluencePage) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreateConfluencePageOutput) TaskParams() WorkflowTaskCreateConfluencePageTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateConfluencePage) WorkflowTaskCreateConfluencePageTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskCreateConfluencePageTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreateConfluencePageOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateConfluencePage) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreateConfluencePageArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateConfluencePageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateConfluencePage)(nil)).Elem()
}

func (o WorkflowTaskCreateConfluencePageArrayOutput) ToWorkflowTaskCreateConfluencePageArrayOutput() WorkflowTaskCreateConfluencePageArrayOutput {
	return o
}

func (o WorkflowTaskCreateConfluencePageArrayOutput) ToWorkflowTaskCreateConfluencePageArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateConfluencePageArrayOutput {
	return o
}

func (o WorkflowTaskCreateConfluencePageArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreateConfluencePageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreateConfluencePage {
		return vs[0].([]*WorkflowTaskCreateConfluencePage)[vs[1].(int)]
	}).(WorkflowTaskCreateConfluencePageOutput)
}

type WorkflowTaskCreateConfluencePageMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateConfluencePageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateConfluencePage)(nil)).Elem()
}

func (o WorkflowTaskCreateConfluencePageMapOutput) ToWorkflowTaskCreateConfluencePageMapOutput() WorkflowTaskCreateConfluencePageMapOutput {
	return o
}

func (o WorkflowTaskCreateConfluencePageMapOutput) ToWorkflowTaskCreateConfluencePageMapOutputWithContext(ctx context.Context) WorkflowTaskCreateConfluencePageMapOutput {
	return o
}

func (o WorkflowTaskCreateConfluencePageMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreateConfluencePageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreateConfluencePage {
		return vs[0].(map[string]*WorkflowTaskCreateConfluencePage)[vs[1].(string)]
	}).(WorkflowTaskCreateConfluencePageOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateConfluencePageInput)(nil)).Elem(), &WorkflowTaskCreateConfluencePage{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateConfluencePageArrayInput)(nil)).Elem(), WorkflowTaskCreateConfluencePageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateConfluencePageMapInput)(nil)).Elem(), WorkflowTaskCreateConfluencePageMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreateConfluencePageOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateConfluencePageArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateConfluencePageMapOutput{})
}
