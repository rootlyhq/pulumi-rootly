// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow autoAssignRoleVictorOps task.
type WorkflowTaskAutoAssignRoleVictorOps struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAutoAssignRoleVictorOpsTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskAutoAssignRoleVictorOps registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskAutoAssignRoleVictorOps(ctx *pulumi.Context,
	name string, args *WorkflowTaskAutoAssignRoleVictorOpsArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskAutoAssignRoleVictorOps, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskAutoAssignRoleVictorOps
	err := ctx.RegisterResource("rootly:index/workflowTaskAutoAssignRoleVictorOps:WorkflowTaskAutoAssignRoleVictorOps", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskAutoAssignRoleVictorOps gets an existing WorkflowTaskAutoAssignRoleVictorOps resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskAutoAssignRoleVictorOps(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskAutoAssignRoleVictorOpsState, opts ...pulumi.ResourceOption) (*WorkflowTaskAutoAssignRoleVictorOps, error) {
	var resource WorkflowTaskAutoAssignRoleVictorOps
	err := ctx.ReadResource("rootly:index/workflowTaskAutoAssignRoleVictorOps:WorkflowTaskAutoAssignRoleVictorOps", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskAutoAssignRoleVictorOps resources.
type workflowTaskAutoAssignRoleVictorOpsState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskAutoAssignRoleVictorOpsTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskAutoAssignRoleVictorOpsState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAutoAssignRoleVictorOpsTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskAutoAssignRoleVictorOpsState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskAutoAssignRoleVictorOpsState)(nil)).Elem()
}

type workflowTaskAutoAssignRoleVictorOpsArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAutoAssignRoleVictorOpsTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskAutoAssignRoleVictorOps resource.
type WorkflowTaskAutoAssignRoleVictorOpsArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAutoAssignRoleVictorOpsTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskAutoAssignRoleVictorOpsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskAutoAssignRoleVictorOpsArgs)(nil)).Elem()
}

type WorkflowTaskAutoAssignRoleVictorOpsInput interface {
	pulumi.Input

	ToWorkflowTaskAutoAssignRoleVictorOpsOutput() WorkflowTaskAutoAssignRoleVictorOpsOutput
	ToWorkflowTaskAutoAssignRoleVictorOpsOutputWithContext(ctx context.Context) WorkflowTaskAutoAssignRoleVictorOpsOutput
}

func (*WorkflowTaskAutoAssignRoleVictorOps) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskAutoAssignRoleVictorOps)(nil)).Elem()
}

func (i *WorkflowTaskAutoAssignRoleVictorOps) ToWorkflowTaskAutoAssignRoleVictorOpsOutput() WorkflowTaskAutoAssignRoleVictorOpsOutput {
	return i.ToWorkflowTaskAutoAssignRoleVictorOpsOutputWithContext(context.Background())
}

func (i *WorkflowTaskAutoAssignRoleVictorOps) ToWorkflowTaskAutoAssignRoleVictorOpsOutputWithContext(ctx context.Context) WorkflowTaskAutoAssignRoleVictorOpsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskAutoAssignRoleVictorOpsOutput)
}

// WorkflowTaskAutoAssignRoleVictorOpsArrayInput is an input type that accepts WorkflowTaskAutoAssignRoleVictorOpsArray and WorkflowTaskAutoAssignRoleVictorOpsArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskAutoAssignRoleVictorOpsArrayInput` via:
//
//	WorkflowTaskAutoAssignRoleVictorOpsArray{ WorkflowTaskAutoAssignRoleVictorOpsArgs{...} }
type WorkflowTaskAutoAssignRoleVictorOpsArrayInput interface {
	pulumi.Input

	ToWorkflowTaskAutoAssignRoleVictorOpsArrayOutput() WorkflowTaskAutoAssignRoleVictorOpsArrayOutput
	ToWorkflowTaskAutoAssignRoleVictorOpsArrayOutputWithContext(context.Context) WorkflowTaskAutoAssignRoleVictorOpsArrayOutput
}

type WorkflowTaskAutoAssignRoleVictorOpsArray []WorkflowTaskAutoAssignRoleVictorOpsInput

func (WorkflowTaskAutoAssignRoleVictorOpsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskAutoAssignRoleVictorOps)(nil)).Elem()
}

func (i WorkflowTaskAutoAssignRoleVictorOpsArray) ToWorkflowTaskAutoAssignRoleVictorOpsArrayOutput() WorkflowTaskAutoAssignRoleVictorOpsArrayOutput {
	return i.ToWorkflowTaskAutoAssignRoleVictorOpsArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskAutoAssignRoleVictorOpsArray) ToWorkflowTaskAutoAssignRoleVictorOpsArrayOutputWithContext(ctx context.Context) WorkflowTaskAutoAssignRoleVictorOpsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskAutoAssignRoleVictorOpsArrayOutput)
}

// WorkflowTaskAutoAssignRoleVictorOpsMapInput is an input type that accepts WorkflowTaskAutoAssignRoleVictorOpsMap and WorkflowTaskAutoAssignRoleVictorOpsMapOutput values.
// You can construct a concrete instance of `WorkflowTaskAutoAssignRoleVictorOpsMapInput` via:
//
//	WorkflowTaskAutoAssignRoleVictorOpsMap{ "key": WorkflowTaskAutoAssignRoleVictorOpsArgs{...} }
type WorkflowTaskAutoAssignRoleVictorOpsMapInput interface {
	pulumi.Input

	ToWorkflowTaskAutoAssignRoleVictorOpsMapOutput() WorkflowTaskAutoAssignRoleVictorOpsMapOutput
	ToWorkflowTaskAutoAssignRoleVictorOpsMapOutputWithContext(context.Context) WorkflowTaskAutoAssignRoleVictorOpsMapOutput
}

type WorkflowTaskAutoAssignRoleVictorOpsMap map[string]WorkflowTaskAutoAssignRoleVictorOpsInput

func (WorkflowTaskAutoAssignRoleVictorOpsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskAutoAssignRoleVictorOps)(nil)).Elem()
}

func (i WorkflowTaskAutoAssignRoleVictorOpsMap) ToWorkflowTaskAutoAssignRoleVictorOpsMapOutput() WorkflowTaskAutoAssignRoleVictorOpsMapOutput {
	return i.ToWorkflowTaskAutoAssignRoleVictorOpsMapOutputWithContext(context.Background())
}

func (i WorkflowTaskAutoAssignRoleVictorOpsMap) ToWorkflowTaskAutoAssignRoleVictorOpsMapOutputWithContext(ctx context.Context) WorkflowTaskAutoAssignRoleVictorOpsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskAutoAssignRoleVictorOpsMapOutput)
}

type WorkflowTaskAutoAssignRoleVictorOpsOutput struct{ *pulumi.OutputState }

func (WorkflowTaskAutoAssignRoleVictorOpsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskAutoAssignRoleVictorOps)(nil)).Elem()
}

func (o WorkflowTaskAutoAssignRoleVictorOpsOutput) ToWorkflowTaskAutoAssignRoleVictorOpsOutput() WorkflowTaskAutoAssignRoleVictorOpsOutput {
	return o
}

func (o WorkflowTaskAutoAssignRoleVictorOpsOutput) ToWorkflowTaskAutoAssignRoleVictorOpsOutputWithContext(ctx context.Context) WorkflowTaskAutoAssignRoleVictorOpsOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskAutoAssignRoleVictorOpsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskAutoAssignRoleVictorOps) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskAutoAssignRoleVictorOpsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskAutoAssignRoleVictorOps) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskAutoAssignRoleVictorOpsOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskAutoAssignRoleVictorOps) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskAutoAssignRoleVictorOpsOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskAutoAssignRoleVictorOps) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskAutoAssignRoleVictorOpsOutput) TaskParams() WorkflowTaskAutoAssignRoleVictorOpsTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskAutoAssignRoleVictorOps) WorkflowTaskAutoAssignRoleVictorOpsTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskAutoAssignRoleVictorOpsTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskAutoAssignRoleVictorOpsOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskAutoAssignRoleVictorOps) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskAutoAssignRoleVictorOpsArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskAutoAssignRoleVictorOpsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskAutoAssignRoleVictorOps)(nil)).Elem()
}

func (o WorkflowTaskAutoAssignRoleVictorOpsArrayOutput) ToWorkflowTaskAutoAssignRoleVictorOpsArrayOutput() WorkflowTaskAutoAssignRoleVictorOpsArrayOutput {
	return o
}

func (o WorkflowTaskAutoAssignRoleVictorOpsArrayOutput) ToWorkflowTaskAutoAssignRoleVictorOpsArrayOutputWithContext(ctx context.Context) WorkflowTaskAutoAssignRoleVictorOpsArrayOutput {
	return o
}

func (o WorkflowTaskAutoAssignRoleVictorOpsArrayOutput) Index(i pulumi.IntInput) WorkflowTaskAutoAssignRoleVictorOpsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskAutoAssignRoleVictorOps {
		return vs[0].([]*WorkflowTaskAutoAssignRoleVictorOps)[vs[1].(int)]
	}).(WorkflowTaskAutoAssignRoleVictorOpsOutput)
}

type WorkflowTaskAutoAssignRoleVictorOpsMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskAutoAssignRoleVictorOpsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskAutoAssignRoleVictorOps)(nil)).Elem()
}

func (o WorkflowTaskAutoAssignRoleVictorOpsMapOutput) ToWorkflowTaskAutoAssignRoleVictorOpsMapOutput() WorkflowTaskAutoAssignRoleVictorOpsMapOutput {
	return o
}

func (o WorkflowTaskAutoAssignRoleVictorOpsMapOutput) ToWorkflowTaskAutoAssignRoleVictorOpsMapOutputWithContext(ctx context.Context) WorkflowTaskAutoAssignRoleVictorOpsMapOutput {
	return o
}

func (o WorkflowTaskAutoAssignRoleVictorOpsMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskAutoAssignRoleVictorOpsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskAutoAssignRoleVictorOps {
		return vs[0].(map[string]*WorkflowTaskAutoAssignRoleVictorOps)[vs[1].(string)]
	}).(WorkflowTaskAutoAssignRoleVictorOpsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskAutoAssignRoleVictorOpsInput)(nil)).Elem(), &WorkflowTaskAutoAssignRoleVictorOps{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskAutoAssignRoleVictorOpsArrayInput)(nil)).Elem(), WorkflowTaskAutoAssignRoleVictorOpsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskAutoAssignRoleVictorOpsMapInput)(nil)).Elem(), WorkflowTaskAutoAssignRoleVictorOpsMap{})
	pulumi.RegisterOutputType(WorkflowTaskAutoAssignRoleVictorOpsOutput{})
	pulumi.RegisterOutputType(WorkflowTaskAutoAssignRoleVictorOpsArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskAutoAssignRoleVictorOpsMapOutput{})
}
