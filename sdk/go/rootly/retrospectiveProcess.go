// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type RetrospectiveProcess struct {
	pulumi.CustomResourceState

	// Retrospective process ID from which retrospective steps have to be copied. To use starter template for retrospective steps provide value: 'starter_template'
	CopyFrom pulumi.StringPtrOutput `pulumi:"copyFrom"`
	// The description of the retrospective process
	Description pulumi.StringOutput `pulumi:"description"`
	// Is the retrospective process default?. Value must be one of true or false
	IsDefault pulumi.BoolOutput `pulumi:"isDefault"`
	// The name of the retrospective process
	Name                                 pulumi.StringOutput                                            `pulumi:"name"`
	RetrospectiveProcessMatchingCriteria RetrospectiveProcessRetrospectiveProcessMatchingCriteriaOutput `pulumi:"retrospectiveProcessMatchingCriteria"`
}

// NewRetrospectiveProcess registers a new resource with the given unique name, arguments, and options.
func NewRetrospectiveProcess(ctx *pulumi.Context,
	name string, args *RetrospectiveProcessArgs, opts ...pulumi.ResourceOption) (*RetrospectiveProcess, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RetrospectiveProcessMatchingCriteria == nil {
		return nil, errors.New("invalid value for required argument 'RetrospectiveProcessMatchingCriteria'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource RetrospectiveProcess
	err := ctx.RegisterResource("rootly:index/retrospectiveProcess:RetrospectiveProcess", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetRetrospectiveProcess gets an existing RetrospectiveProcess resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRetrospectiveProcess(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *RetrospectiveProcessState, opts ...pulumi.ResourceOption) (*RetrospectiveProcess, error) {
	var resource RetrospectiveProcess
	err := ctx.ReadResource("rootly:index/retrospectiveProcess:RetrospectiveProcess", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering RetrospectiveProcess resources.
type retrospectiveProcessState struct {
	// Retrospective process ID from which retrospective steps have to be copied. To use starter template for retrospective steps provide value: 'starter_template'
	CopyFrom *string `pulumi:"copyFrom"`
	// The description of the retrospective process
	Description *string `pulumi:"description"`
	// Is the retrospective process default?. Value must be one of true or false
	IsDefault *bool `pulumi:"isDefault"`
	// The name of the retrospective process
	Name                                 *string                                                   `pulumi:"name"`
	RetrospectiveProcessMatchingCriteria *RetrospectiveProcessRetrospectiveProcessMatchingCriteria `pulumi:"retrospectiveProcessMatchingCriteria"`
}

type RetrospectiveProcessState struct {
	// Retrospective process ID from which retrospective steps have to be copied. To use starter template for retrospective steps provide value: 'starter_template'
	CopyFrom pulumi.StringPtrInput
	// The description of the retrospective process
	Description pulumi.StringPtrInput
	// Is the retrospective process default?. Value must be one of true or false
	IsDefault pulumi.BoolPtrInput
	// The name of the retrospective process
	Name                                 pulumi.StringPtrInput
	RetrospectiveProcessMatchingCriteria RetrospectiveProcessRetrospectiveProcessMatchingCriteriaPtrInput
}

func (RetrospectiveProcessState) ElementType() reflect.Type {
	return reflect.TypeOf((*retrospectiveProcessState)(nil)).Elem()
}

type retrospectiveProcessArgs struct {
	// Retrospective process ID from which retrospective steps have to be copied. To use starter template for retrospective steps provide value: 'starter_template'
	CopyFrom *string `pulumi:"copyFrom"`
	// The description of the retrospective process
	Description *string `pulumi:"description"`
	// Is the retrospective process default?. Value must be one of true or false
	IsDefault *bool `pulumi:"isDefault"`
	// The name of the retrospective process
	Name                                 *string                                                  `pulumi:"name"`
	RetrospectiveProcessMatchingCriteria RetrospectiveProcessRetrospectiveProcessMatchingCriteria `pulumi:"retrospectiveProcessMatchingCriteria"`
}

// The set of arguments for constructing a RetrospectiveProcess resource.
type RetrospectiveProcessArgs struct {
	// Retrospective process ID from which retrospective steps have to be copied. To use starter template for retrospective steps provide value: 'starter_template'
	CopyFrom pulumi.StringPtrInput
	// The description of the retrospective process
	Description pulumi.StringPtrInput
	// Is the retrospective process default?. Value must be one of true or false
	IsDefault pulumi.BoolPtrInput
	// The name of the retrospective process
	Name                                 pulumi.StringPtrInput
	RetrospectiveProcessMatchingCriteria RetrospectiveProcessRetrospectiveProcessMatchingCriteriaInput
}

func (RetrospectiveProcessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*retrospectiveProcessArgs)(nil)).Elem()
}

type RetrospectiveProcessInput interface {
	pulumi.Input

	ToRetrospectiveProcessOutput() RetrospectiveProcessOutput
	ToRetrospectiveProcessOutputWithContext(ctx context.Context) RetrospectiveProcessOutput
}

func (*RetrospectiveProcess) ElementType() reflect.Type {
	return reflect.TypeOf((**RetrospectiveProcess)(nil)).Elem()
}

func (i *RetrospectiveProcess) ToRetrospectiveProcessOutput() RetrospectiveProcessOutput {
	return i.ToRetrospectiveProcessOutputWithContext(context.Background())
}

func (i *RetrospectiveProcess) ToRetrospectiveProcessOutputWithContext(ctx context.Context) RetrospectiveProcessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetrospectiveProcessOutput)
}

// RetrospectiveProcessArrayInput is an input type that accepts RetrospectiveProcessArray and RetrospectiveProcessArrayOutput values.
// You can construct a concrete instance of `RetrospectiveProcessArrayInput` via:
//
//	RetrospectiveProcessArray{ RetrospectiveProcessArgs{...} }
type RetrospectiveProcessArrayInput interface {
	pulumi.Input

	ToRetrospectiveProcessArrayOutput() RetrospectiveProcessArrayOutput
	ToRetrospectiveProcessArrayOutputWithContext(context.Context) RetrospectiveProcessArrayOutput
}

type RetrospectiveProcessArray []RetrospectiveProcessInput

func (RetrospectiveProcessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RetrospectiveProcess)(nil)).Elem()
}

func (i RetrospectiveProcessArray) ToRetrospectiveProcessArrayOutput() RetrospectiveProcessArrayOutput {
	return i.ToRetrospectiveProcessArrayOutputWithContext(context.Background())
}

func (i RetrospectiveProcessArray) ToRetrospectiveProcessArrayOutputWithContext(ctx context.Context) RetrospectiveProcessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetrospectiveProcessArrayOutput)
}

// RetrospectiveProcessMapInput is an input type that accepts RetrospectiveProcessMap and RetrospectiveProcessMapOutput values.
// You can construct a concrete instance of `RetrospectiveProcessMapInput` via:
//
//	RetrospectiveProcessMap{ "key": RetrospectiveProcessArgs{...} }
type RetrospectiveProcessMapInput interface {
	pulumi.Input

	ToRetrospectiveProcessMapOutput() RetrospectiveProcessMapOutput
	ToRetrospectiveProcessMapOutputWithContext(context.Context) RetrospectiveProcessMapOutput
}

type RetrospectiveProcessMap map[string]RetrospectiveProcessInput

func (RetrospectiveProcessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RetrospectiveProcess)(nil)).Elem()
}

func (i RetrospectiveProcessMap) ToRetrospectiveProcessMapOutput() RetrospectiveProcessMapOutput {
	return i.ToRetrospectiveProcessMapOutputWithContext(context.Background())
}

func (i RetrospectiveProcessMap) ToRetrospectiveProcessMapOutputWithContext(ctx context.Context) RetrospectiveProcessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RetrospectiveProcessMapOutput)
}

type RetrospectiveProcessOutput struct{ *pulumi.OutputState }

func (RetrospectiveProcessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**RetrospectiveProcess)(nil)).Elem()
}

func (o RetrospectiveProcessOutput) ToRetrospectiveProcessOutput() RetrospectiveProcessOutput {
	return o
}

func (o RetrospectiveProcessOutput) ToRetrospectiveProcessOutputWithContext(ctx context.Context) RetrospectiveProcessOutput {
	return o
}

// Retrospective process ID from which retrospective steps have to be copied. To use starter template for retrospective steps provide value: 'starter_template'
func (o RetrospectiveProcessOutput) CopyFrom() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *RetrospectiveProcess) pulumi.StringPtrOutput { return v.CopyFrom }).(pulumi.StringPtrOutput)
}

// The description of the retrospective process
func (o RetrospectiveProcessOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *RetrospectiveProcess) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Is the retrospective process default?. Value must be one of true or false
func (o RetrospectiveProcessOutput) IsDefault() pulumi.BoolOutput {
	return o.ApplyT(func(v *RetrospectiveProcess) pulumi.BoolOutput { return v.IsDefault }).(pulumi.BoolOutput)
}

// The name of the retrospective process
func (o RetrospectiveProcessOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *RetrospectiveProcess) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o RetrospectiveProcessOutput) RetrospectiveProcessMatchingCriteria() RetrospectiveProcessRetrospectiveProcessMatchingCriteriaOutput {
	return o.ApplyT(func(v *RetrospectiveProcess) RetrospectiveProcessRetrospectiveProcessMatchingCriteriaOutput {
		return v.RetrospectiveProcessMatchingCriteria
	}).(RetrospectiveProcessRetrospectiveProcessMatchingCriteriaOutput)
}

type RetrospectiveProcessArrayOutput struct{ *pulumi.OutputState }

func (RetrospectiveProcessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*RetrospectiveProcess)(nil)).Elem()
}

func (o RetrospectiveProcessArrayOutput) ToRetrospectiveProcessArrayOutput() RetrospectiveProcessArrayOutput {
	return o
}

func (o RetrospectiveProcessArrayOutput) ToRetrospectiveProcessArrayOutputWithContext(ctx context.Context) RetrospectiveProcessArrayOutput {
	return o
}

func (o RetrospectiveProcessArrayOutput) Index(i pulumi.IntInput) RetrospectiveProcessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *RetrospectiveProcess {
		return vs[0].([]*RetrospectiveProcess)[vs[1].(int)]
	}).(RetrospectiveProcessOutput)
}

type RetrospectiveProcessMapOutput struct{ *pulumi.OutputState }

func (RetrospectiveProcessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*RetrospectiveProcess)(nil)).Elem()
}

func (o RetrospectiveProcessMapOutput) ToRetrospectiveProcessMapOutput() RetrospectiveProcessMapOutput {
	return o
}

func (o RetrospectiveProcessMapOutput) ToRetrospectiveProcessMapOutputWithContext(ctx context.Context) RetrospectiveProcessMapOutput {
	return o
}

func (o RetrospectiveProcessMapOutput) MapIndex(k pulumi.StringInput) RetrospectiveProcessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *RetrospectiveProcess {
		return vs[0].(map[string]*RetrospectiveProcess)[vs[1].(string)]
	}).(RetrospectiveProcessOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*RetrospectiveProcessInput)(nil)).Elem(), &RetrospectiveProcess{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetrospectiveProcessArrayInput)(nil)).Elem(), RetrospectiveProcessArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RetrospectiveProcessMapInput)(nil)).Elem(), RetrospectiveProcessMap{})
	pulumi.RegisterOutputType(RetrospectiveProcessOutput{})
	pulumi.RegisterOutputType(RetrospectiveProcessArrayOutput{})
	pulumi.RegisterOutputType(RetrospectiveProcessMapOutput{})
}
