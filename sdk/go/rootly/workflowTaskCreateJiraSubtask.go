// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createJiraSubtask task.
type WorkflowTaskCreateJiraSubtask struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateJiraSubtaskTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreateJiraSubtask registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreateJiraSubtask(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreateJiraSubtaskArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateJiraSubtask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreateJiraSubtask
	err := ctx.RegisterResource("rootly:index/workflowTaskCreateJiraSubtask:WorkflowTaskCreateJiraSubtask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreateJiraSubtask gets an existing WorkflowTaskCreateJiraSubtask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreateJiraSubtask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreateJiraSubtaskState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateJiraSubtask, error) {
	var resource WorkflowTaskCreateJiraSubtask
	err := ctx.ReadResource("rootly:index/workflowTaskCreateJiraSubtask:WorkflowTaskCreateJiraSubtask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreateJiraSubtask resources.
type workflowTaskCreateJiraSubtaskState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreateJiraSubtaskTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreateJiraSubtaskState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateJiraSubtaskTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreateJiraSubtaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateJiraSubtaskState)(nil)).Elem()
}

type workflowTaskCreateJiraSubtaskArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateJiraSubtaskTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreateJiraSubtask resource.
type WorkflowTaskCreateJiraSubtaskArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateJiraSubtaskTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreateJiraSubtaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateJiraSubtaskArgs)(nil)).Elem()
}

type WorkflowTaskCreateJiraSubtaskInput interface {
	pulumi.Input

	ToWorkflowTaskCreateJiraSubtaskOutput() WorkflowTaskCreateJiraSubtaskOutput
	ToWorkflowTaskCreateJiraSubtaskOutputWithContext(ctx context.Context) WorkflowTaskCreateJiraSubtaskOutput
}

func (*WorkflowTaskCreateJiraSubtask) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateJiraSubtask)(nil)).Elem()
}

func (i *WorkflowTaskCreateJiraSubtask) ToWorkflowTaskCreateJiraSubtaskOutput() WorkflowTaskCreateJiraSubtaskOutput {
	return i.ToWorkflowTaskCreateJiraSubtaskOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreateJiraSubtask) ToWorkflowTaskCreateJiraSubtaskOutputWithContext(ctx context.Context) WorkflowTaskCreateJiraSubtaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateJiraSubtaskOutput)
}

// WorkflowTaskCreateJiraSubtaskArrayInput is an input type that accepts WorkflowTaskCreateJiraSubtaskArray and WorkflowTaskCreateJiraSubtaskArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateJiraSubtaskArrayInput` via:
//
//	WorkflowTaskCreateJiraSubtaskArray{ WorkflowTaskCreateJiraSubtaskArgs{...} }
type WorkflowTaskCreateJiraSubtaskArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreateJiraSubtaskArrayOutput() WorkflowTaskCreateJiraSubtaskArrayOutput
	ToWorkflowTaskCreateJiraSubtaskArrayOutputWithContext(context.Context) WorkflowTaskCreateJiraSubtaskArrayOutput
}

type WorkflowTaskCreateJiraSubtaskArray []WorkflowTaskCreateJiraSubtaskInput

func (WorkflowTaskCreateJiraSubtaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateJiraSubtask)(nil)).Elem()
}

func (i WorkflowTaskCreateJiraSubtaskArray) ToWorkflowTaskCreateJiraSubtaskArrayOutput() WorkflowTaskCreateJiraSubtaskArrayOutput {
	return i.ToWorkflowTaskCreateJiraSubtaskArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateJiraSubtaskArray) ToWorkflowTaskCreateJiraSubtaskArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateJiraSubtaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateJiraSubtaskArrayOutput)
}

// WorkflowTaskCreateJiraSubtaskMapInput is an input type that accepts WorkflowTaskCreateJiraSubtaskMap and WorkflowTaskCreateJiraSubtaskMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateJiraSubtaskMapInput` via:
//
//	WorkflowTaskCreateJiraSubtaskMap{ "key": WorkflowTaskCreateJiraSubtaskArgs{...} }
type WorkflowTaskCreateJiraSubtaskMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreateJiraSubtaskMapOutput() WorkflowTaskCreateJiraSubtaskMapOutput
	ToWorkflowTaskCreateJiraSubtaskMapOutputWithContext(context.Context) WorkflowTaskCreateJiraSubtaskMapOutput
}

type WorkflowTaskCreateJiraSubtaskMap map[string]WorkflowTaskCreateJiraSubtaskInput

func (WorkflowTaskCreateJiraSubtaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateJiraSubtask)(nil)).Elem()
}

func (i WorkflowTaskCreateJiraSubtaskMap) ToWorkflowTaskCreateJiraSubtaskMapOutput() WorkflowTaskCreateJiraSubtaskMapOutput {
	return i.ToWorkflowTaskCreateJiraSubtaskMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateJiraSubtaskMap) ToWorkflowTaskCreateJiraSubtaskMapOutputWithContext(ctx context.Context) WorkflowTaskCreateJiraSubtaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateJiraSubtaskMapOutput)
}

type WorkflowTaskCreateJiraSubtaskOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateJiraSubtaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateJiraSubtask)(nil)).Elem()
}

func (o WorkflowTaskCreateJiraSubtaskOutput) ToWorkflowTaskCreateJiraSubtaskOutput() WorkflowTaskCreateJiraSubtaskOutput {
	return o
}

func (o WorkflowTaskCreateJiraSubtaskOutput) ToWorkflowTaskCreateJiraSubtaskOutputWithContext(ctx context.Context) WorkflowTaskCreateJiraSubtaskOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreateJiraSubtaskOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateJiraSubtask) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreateJiraSubtaskOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateJiraSubtask) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreateJiraSubtaskOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateJiraSubtask) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreateJiraSubtaskOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateJiraSubtask) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreateJiraSubtaskOutput) TaskParams() WorkflowTaskCreateJiraSubtaskTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateJiraSubtask) WorkflowTaskCreateJiraSubtaskTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskCreateJiraSubtaskTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreateJiraSubtaskOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateJiraSubtask) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreateJiraSubtaskArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateJiraSubtaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateJiraSubtask)(nil)).Elem()
}

func (o WorkflowTaskCreateJiraSubtaskArrayOutput) ToWorkflowTaskCreateJiraSubtaskArrayOutput() WorkflowTaskCreateJiraSubtaskArrayOutput {
	return o
}

func (o WorkflowTaskCreateJiraSubtaskArrayOutput) ToWorkflowTaskCreateJiraSubtaskArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateJiraSubtaskArrayOutput {
	return o
}

func (o WorkflowTaskCreateJiraSubtaskArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreateJiraSubtaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreateJiraSubtask {
		return vs[0].([]*WorkflowTaskCreateJiraSubtask)[vs[1].(int)]
	}).(WorkflowTaskCreateJiraSubtaskOutput)
}

type WorkflowTaskCreateJiraSubtaskMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateJiraSubtaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateJiraSubtask)(nil)).Elem()
}

func (o WorkflowTaskCreateJiraSubtaskMapOutput) ToWorkflowTaskCreateJiraSubtaskMapOutput() WorkflowTaskCreateJiraSubtaskMapOutput {
	return o
}

func (o WorkflowTaskCreateJiraSubtaskMapOutput) ToWorkflowTaskCreateJiraSubtaskMapOutputWithContext(ctx context.Context) WorkflowTaskCreateJiraSubtaskMapOutput {
	return o
}

func (o WorkflowTaskCreateJiraSubtaskMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreateJiraSubtaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreateJiraSubtask {
		return vs[0].(map[string]*WorkflowTaskCreateJiraSubtask)[vs[1].(string)]
	}).(WorkflowTaskCreateJiraSubtaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateJiraSubtaskInput)(nil)).Elem(), &WorkflowTaskCreateJiraSubtask{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateJiraSubtaskArrayInput)(nil)).Elem(), WorkflowTaskCreateJiraSubtaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateJiraSubtaskMapInput)(nil)).Elem(), WorkflowTaskCreateJiraSubtaskMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreateJiraSubtaskOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateJiraSubtaskArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateJiraSubtaskMapOutput{})
}
