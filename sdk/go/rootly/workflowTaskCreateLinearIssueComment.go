// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createLinearIssueComment task.
type WorkflowTaskCreateLinearIssueComment struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateLinearIssueCommentTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreateLinearIssueComment registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreateLinearIssueComment(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreateLinearIssueCommentArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateLinearIssueComment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreateLinearIssueComment
	err := ctx.RegisterResource("rootly:index/workflowTaskCreateLinearIssueComment:WorkflowTaskCreateLinearIssueComment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreateLinearIssueComment gets an existing WorkflowTaskCreateLinearIssueComment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreateLinearIssueComment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreateLinearIssueCommentState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateLinearIssueComment, error) {
	var resource WorkflowTaskCreateLinearIssueComment
	err := ctx.ReadResource("rootly:index/workflowTaskCreateLinearIssueComment:WorkflowTaskCreateLinearIssueComment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreateLinearIssueComment resources.
type workflowTaskCreateLinearIssueCommentState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreateLinearIssueCommentTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreateLinearIssueCommentState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateLinearIssueCommentTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreateLinearIssueCommentState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateLinearIssueCommentState)(nil)).Elem()
}

type workflowTaskCreateLinearIssueCommentArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateLinearIssueCommentTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreateLinearIssueComment resource.
type WorkflowTaskCreateLinearIssueCommentArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateLinearIssueCommentTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreateLinearIssueCommentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateLinearIssueCommentArgs)(nil)).Elem()
}

type WorkflowTaskCreateLinearIssueCommentInput interface {
	pulumi.Input

	ToWorkflowTaskCreateLinearIssueCommentOutput() WorkflowTaskCreateLinearIssueCommentOutput
	ToWorkflowTaskCreateLinearIssueCommentOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearIssueCommentOutput
}

func (*WorkflowTaskCreateLinearIssueComment) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateLinearIssueComment)(nil)).Elem()
}

func (i *WorkflowTaskCreateLinearIssueComment) ToWorkflowTaskCreateLinearIssueCommentOutput() WorkflowTaskCreateLinearIssueCommentOutput {
	return i.ToWorkflowTaskCreateLinearIssueCommentOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreateLinearIssueComment) ToWorkflowTaskCreateLinearIssueCommentOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearIssueCommentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateLinearIssueCommentOutput)
}

// WorkflowTaskCreateLinearIssueCommentArrayInput is an input type that accepts WorkflowTaskCreateLinearIssueCommentArray and WorkflowTaskCreateLinearIssueCommentArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateLinearIssueCommentArrayInput` via:
//
//	WorkflowTaskCreateLinearIssueCommentArray{ WorkflowTaskCreateLinearIssueCommentArgs{...} }
type WorkflowTaskCreateLinearIssueCommentArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreateLinearIssueCommentArrayOutput() WorkflowTaskCreateLinearIssueCommentArrayOutput
	ToWorkflowTaskCreateLinearIssueCommentArrayOutputWithContext(context.Context) WorkflowTaskCreateLinearIssueCommentArrayOutput
}

type WorkflowTaskCreateLinearIssueCommentArray []WorkflowTaskCreateLinearIssueCommentInput

func (WorkflowTaskCreateLinearIssueCommentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateLinearIssueComment)(nil)).Elem()
}

func (i WorkflowTaskCreateLinearIssueCommentArray) ToWorkflowTaskCreateLinearIssueCommentArrayOutput() WorkflowTaskCreateLinearIssueCommentArrayOutput {
	return i.ToWorkflowTaskCreateLinearIssueCommentArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateLinearIssueCommentArray) ToWorkflowTaskCreateLinearIssueCommentArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearIssueCommentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateLinearIssueCommentArrayOutput)
}

// WorkflowTaskCreateLinearIssueCommentMapInput is an input type that accepts WorkflowTaskCreateLinearIssueCommentMap and WorkflowTaskCreateLinearIssueCommentMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateLinearIssueCommentMapInput` via:
//
//	WorkflowTaskCreateLinearIssueCommentMap{ "key": WorkflowTaskCreateLinearIssueCommentArgs{...} }
type WorkflowTaskCreateLinearIssueCommentMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreateLinearIssueCommentMapOutput() WorkflowTaskCreateLinearIssueCommentMapOutput
	ToWorkflowTaskCreateLinearIssueCommentMapOutputWithContext(context.Context) WorkflowTaskCreateLinearIssueCommentMapOutput
}

type WorkflowTaskCreateLinearIssueCommentMap map[string]WorkflowTaskCreateLinearIssueCommentInput

func (WorkflowTaskCreateLinearIssueCommentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateLinearIssueComment)(nil)).Elem()
}

func (i WorkflowTaskCreateLinearIssueCommentMap) ToWorkflowTaskCreateLinearIssueCommentMapOutput() WorkflowTaskCreateLinearIssueCommentMapOutput {
	return i.ToWorkflowTaskCreateLinearIssueCommentMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateLinearIssueCommentMap) ToWorkflowTaskCreateLinearIssueCommentMapOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearIssueCommentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateLinearIssueCommentMapOutput)
}

type WorkflowTaskCreateLinearIssueCommentOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateLinearIssueCommentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateLinearIssueComment)(nil)).Elem()
}

func (o WorkflowTaskCreateLinearIssueCommentOutput) ToWorkflowTaskCreateLinearIssueCommentOutput() WorkflowTaskCreateLinearIssueCommentOutput {
	return o
}

func (o WorkflowTaskCreateLinearIssueCommentOutput) ToWorkflowTaskCreateLinearIssueCommentOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearIssueCommentOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreateLinearIssueCommentOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateLinearIssueComment) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreateLinearIssueCommentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateLinearIssueComment) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreateLinearIssueCommentOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateLinearIssueComment) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreateLinearIssueCommentOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateLinearIssueComment) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreateLinearIssueCommentOutput) TaskParams() WorkflowTaskCreateLinearIssueCommentTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateLinearIssueComment) WorkflowTaskCreateLinearIssueCommentTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskCreateLinearIssueCommentTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreateLinearIssueCommentOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateLinearIssueComment) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreateLinearIssueCommentArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateLinearIssueCommentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateLinearIssueComment)(nil)).Elem()
}

func (o WorkflowTaskCreateLinearIssueCommentArrayOutput) ToWorkflowTaskCreateLinearIssueCommentArrayOutput() WorkflowTaskCreateLinearIssueCommentArrayOutput {
	return o
}

func (o WorkflowTaskCreateLinearIssueCommentArrayOutput) ToWorkflowTaskCreateLinearIssueCommentArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearIssueCommentArrayOutput {
	return o
}

func (o WorkflowTaskCreateLinearIssueCommentArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreateLinearIssueCommentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreateLinearIssueComment {
		return vs[0].([]*WorkflowTaskCreateLinearIssueComment)[vs[1].(int)]
	}).(WorkflowTaskCreateLinearIssueCommentOutput)
}

type WorkflowTaskCreateLinearIssueCommentMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateLinearIssueCommentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateLinearIssueComment)(nil)).Elem()
}

func (o WorkflowTaskCreateLinearIssueCommentMapOutput) ToWorkflowTaskCreateLinearIssueCommentMapOutput() WorkflowTaskCreateLinearIssueCommentMapOutput {
	return o
}

func (o WorkflowTaskCreateLinearIssueCommentMapOutput) ToWorkflowTaskCreateLinearIssueCommentMapOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearIssueCommentMapOutput {
	return o
}

func (o WorkflowTaskCreateLinearIssueCommentMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreateLinearIssueCommentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreateLinearIssueComment {
		return vs[0].(map[string]*WorkflowTaskCreateLinearIssueComment)[vs[1].(string)]
	}).(WorkflowTaskCreateLinearIssueCommentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateLinearIssueCommentInput)(nil)).Elem(), &WorkflowTaskCreateLinearIssueComment{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateLinearIssueCommentArrayInput)(nil)).Elem(), WorkflowTaskCreateLinearIssueCommentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateLinearIssueCommentMapInput)(nil)).Elem(), WorkflowTaskCreateLinearIssueCommentMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreateLinearIssueCommentOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateLinearIssueCommentArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateLinearIssueCommentMapOutput{})
}
