// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow updatePagertreeAlert task.
type WorkflowTaskUpdatePagertreeAlert struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdatePagertreeAlertTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskUpdatePagertreeAlert registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskUpdatePagertreeAlert(ctx *pulumi.Context,
	name string, args *WorkflowTaskUpdatePagertreeAlertArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdatePagertreeAlert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskUpdatePagertreeAlert
	err := ctx.RegisterResource("rootly:index/workflowTaskUpdatePagertreeAlert:WorkflowTaskUpdatePagertreeAlert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskUpdatePagertreeAlert gets an existing WorkflowTaskUpdatePagertreeAlert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskUpdatePagertreeAlert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskUpdatePagertreeAlertState, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdatePagertreeAlert, error) {
	var resource WorkflowTaskUpdatePagertreeAlert
	err := ctx.ReadResource("rootly:index/workflowTaskUpdatePagertreeAlert:WorkflowTaskUpdatePagertreeAlert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskUpdatePagertreeAlert resources.
type workflowTaskUpdatePagertreeAlertState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskUpdatePagertreeAlertTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskUpdatePagertreeAlertState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdatePagertreeAlertTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskUpdatePagertreeAlertState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdatePagertreeAlertState)(nil)).Elem()
}

type workflowTaskUpdatePagertreeAlertArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdatePagertreeAlertTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskUpdatePagertreeAlert resource.
type WorkflowTaskUpdatePagertreeAlertArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdatePagertreeAlertTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskUpdatePagertreeAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdatePagertreeAlertArgs)(nil)).Elem()
}

type WorkflowTaskUpdatePagertreeAlertInput interface {
	pulumi.Input

	ToWorkflowTaskUpdatePagertreeAlertOutput() WorkflowTaskUpdatePagertreeAlertOutput
	ToWorkflowTaskUpdatePagertreeAlertOutputWithContext(ctx context.Context) WorkflowTaskUpdatePagertreeAlertOutput
}

func (*WorkflowTaskUpdatePagertreeAlert) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdatePagertreeAlert)(nil)).Elem()
}

func (i *WorkflowTaskUpdatePagertreeAlert) ToWorkflowTaskUpdatePagertreeAlertOutput() WorkflowTaskUpdatePagertreeAlertOutput {
	return i.ToWorkflowTaskUpdatePagertreeAlertOutputWithContext(context.Background())
}

func (i *WorkflowTaskUpdatePagertreeAlert) ToWorkflowTaskUpdatePagertreeAlertOutputWithContext(ctx context.Context) WorkflowTaskUpdatePagertreeAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdatePagertreeAlertOutput)
}

// WorkflowTaskUpdatePagertreeAlertArrayInput is an input type that accepts WorkflowTaskUpdatePagertreeAlertArray and WorkflowTaskUpdatePagertreeAlertArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdatePagertreeAlertArrayInput` via:
//
//	WorkflowTaskUpdatePagertreeAlertArray{ WorkflowTaskUpdatePagertreeAlertArgs{...} }
type WorkflowTaskUpdatePagertreeAlertArrayInput interface {
	pulumi.Input

	ToWorkflowTaskUpdatePagertreeAlertArrayOutput() WorkflowTaskUpdatePagertreeAlertArrayOutput
	ToWorkflowTaskUpdatePagertreeAlertArrayOutputWithContext(context.Context) WorkflowTaskUpdatePagertreeAlertArrayOutput
}

type WorkflowTaskUpdatePagertreeAlertArray []WorkflowTaskUpdatePagertreeAlertInput

func (WorkflowTaskUpdatePagertreeAlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdatePagertreeAlert)(nil)).Elem()
}

func (i WorkflowTaskUpdatePagertreeAlertArray) ToWorkflowTaskUpdatePagertreeAlertArrayOutput() WorkflowTaskUpdatePagertreeAlertArrayOutput {
	return i.ToWorkflowTaskUpdatePagertreeAlertArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdatePagertreeAlertArray) ToWorkflowTaskUpdatePagertreeAlertArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdatePagertreeAlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdatePagertreeAlertArrayOutput)
}

// WorkflowTaskUpdatePagertreeAlertMapInput is an input type that accepts WorkflowTaskUpdatePagertreeAlertMap and WorkflowTaskUpdatePagertreeAlertMapOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdatePagertreeAlertMapInput` via:
//
//	WorkflowTaskUpdatePagertreeAlertMap{ "key": WorkflowTaskUpdatePagertreeAlertArgs{...} }
type WorkflowTaskUpdatePagertreeAlertMapInput interface {
	pulumi.Input

	ToWorkflowTaskUpdatePagertreeAlertMapOutput() WorkflowTaskUpdatePagertreeAlertMapOutput
	ToWorkflowTaskUpdatePagertreeAlertMapOutputWithContext(context.Context) WorkflowTaskUpdatePagertreeAlertMapOutput
}

type WorkflowTaskUpdatePagertreeAlertMap map[string]WorkflowTaskUpdatePagertreeAlertInput

func (WorkflowTaskUpdatePagertreeAlertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdatePagertreeAlert)(nil)).Elem()
}

func (i WorkflowTaskUpdatePagertreeAlertMap) ToWorkflowTaskUpdatePagertreeAlertMapOutput() WorkflowTaskUpdatePagertreeAlertMapOutput {
	return i.ToWorkflowTaskUpdatePagertreeAlertMapOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdatePagertreeAlertMap) ToWorkflowTaskUpdatePagertreeAlertMapOutputWithContext(ctx context.Context) WorkflowTaskUpdatePagertreeAlertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdatePagertreeAlertMapOutput)
}

type WorkflowTaskUpdatePagertreeAlertOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdatePagertreeAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdatePagertreeAlert)(nil)).Elem()
}

func (o WorkflowTaskUpdatePagertreeAlertOutput) ToWorkflowTaskUpdatePagertreeAlertOutput() WorkflowTaskUpdatePagertreeAlertOutput {
	return o
}

func (o WorkflowTaskUpdatePagertreeAlertOutput) ToWorkflowTaskUpdatePagertreeAlertOutputWithContext(ctx context.Context) WorkflowTaskUpdatePagertreeAlertOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskUpdatePagertreeAlertOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdatePagertreeAlert) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskUpdatePagertreeAlertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdatePagertreeAlert) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskUpdatePagertreeAlertOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdatePagertreeAlert) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskUpdatePagertreeAlertOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdatePagertreeAlert) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskUpdatePagertreeAlertOutput) TaskParams() WorkflowTaskUpdatePagertreeAlertTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdatePagertreeAlert) WorkflowTaskUpdatePagertreeAlertTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskUpdatePagertreeAlertTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskUpdatePagertreeAlertOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdatePagertreeAlert) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskUpdatePagertreeAlertArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdatePagertreeAlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdatePagertreeAlert)(nil)).Elem()
}

func (o WorkflowTaskUpdatePagertreeAlertArrayOutput) ToWorkflowTaskUpdatePagertreeAlertArrayOutput() WorkflowTaskUpdatePagertreeAlertArrayOutput {
	return o
}

func (o WorkflowTaskUpdatePagertreeAlertArrayOutput) ToWorkflowTaskUpdatePagertreeAlertArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdatePagertreeAlertArrayOutput {
	return o
}

func (o WorkflowTaskUpdatePagertreeAlertArrayOutput) Index(i pulumi.IntInput) WorkflowTaskUpdatePagertreeAlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskUpdatePagertreeAlert {
		return vs[0].([]*WorkflowTaskUpdatePagertreeAlert)[vs[1].(int)]
	}).(WorkflowTaskUpdatePagertreeAlertOutput)
}

type WorkflowTaskUpdatePagertreeAlertMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdatePagertreeAlertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdatePagertreeAlert)(nil)).Elem()
}

func (o WorkflowTaskUpdatePagertreeAlertMapOutput) ToWorkflowTaskUpdatePagertreeAlertMapOutput() WorkflowTaskUpdatePagertreeAlertMapOutput {
	return o
}

func (o WorkflowTaskUpdatePagertreeAlertMapOutput) ToWorkflowTaskUpdatePagertreeAlertMapOutputWithContext(ctx context.Context) WorkflowTaskUpdatePagertreeAlertMapOutput {
	return o
}

func (o WorkflowTaskUpdatePagertreeAlertMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskUpdatePagertreeAlertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskUpdatePagertreeAlert {
		return vs[0].(map[string]*WorkflowTaskUpdatePagertreeAlert)[vs[1].(string)]
	}).(WorkflowTaskUpdatePagertreeAlertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdatePagertreeAlertInput)(nil)).Elem(), &WorkflowTaskUpdatePagertreeAlert{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdatePagertreeAlertArrayInput)(nil)).Elem(), WorkflowTaskUpdatePagertreeAlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdatePagertreeAlertMapInput)(nil)).Elem(), WorkflowTaskUpdatePagertreeAlertMap{})
	pulumi.RegisterOutputType(WorkflowTaskUpdatePagertreeAlertOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdatePagertreeAlertArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdatePagertreeAlertMapOutput{})
}
