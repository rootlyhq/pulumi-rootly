// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow getGithubCommits task.
type WorkflowTaskGetGithubCommits struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskGetGithubCommitsTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskGetGithubCommits registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskGetGithubCommits(ctx *pulumi.Context,
	name string, args *WorkflowTaskGetGithubCommitsArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskGetGithubCommits, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskGetGithubCommits
	err := ctx.RegisterResource("rootly:index/workflowTaskGetGithubCommits:WorkflowTaskGetGithubCommits", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskGetGithubCommits gets an existing WorkflowTaskGetGithubCommits resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskGetGithubCommits(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskGetGithubCommitsState, opts ...pulumi.ResourceOption) (*WorkflowTaskGetGithubCommits, error) {
	var resource WorkflowTaskGetGithubCommits
	err := ctx.ReadResource("rootly:index/workflowTaskGetGithubCommits:WorkflowTaskGetGithubCommits", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskGetGithubCommits resources.
type workflowTaskGetGithubCommitsState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskGetGithubCommitsTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskGetGithubCommitsState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskGetGithubCommitsTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskGetGithubCommitsState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskGetGithubCommitsState)(nil)).Elem()
}

type workflowTaskGetGithubCommitsArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskGetGithubCommitsTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskGetGithubCommits resource.
type WorkflowTaskGetGithubCommitsArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskGetGithubCommitsTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskGetGithubCommitsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskGetGithubCommitsArgs)(nil)).Elem()
}

type WorkflowTaskGetGithubCommitsInput interface {
	pulumi.Input

	ToWorkflowTaskGetGithubCommitsOutput() WorkflowTaskGetGithubCommitsOutput
	ToWorkflowTaskGetGithubCommitsOutputWithContext(ctx context.Context) WorkflowTaskGetGithubCommitsOutput
}

func (*WorkflowTaskGetGithubCommits) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskGetGithubCommits)(nil)).Elem()
}

func (i *WorkflowTaskGetGithubCommits) ToWorkflowTaskGetGithubCommitsOutput() WorkflowTaskGetGithubCommitsOutput {
	return i.ToWorkflowTaskGetGithubCommitsOutputWithContext(context.Background())
}

func (i *WorkflowTaskGetGithubCommits) ToWorkflowTaskGetGithubCommitsOutputWithContext(ctx context.Context) WorkflowTaskGetGithubCommitsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskGetGithubCommitsOutput)
}

// WorkflowTaskGetGithubCommitsArrayInput is an input type that accepts WorkflowTaskGetGithubCommitsArray and WorkflowTaskGetGithubCommitsArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskGetGithubCommitsArrayInput` via:
//
//	WorkflowTaskGetGithubCommitsArray{ WorkflowTaskGetGithubCommitsArgs{...} }
type WorkflowTaskGetGithubCommitsArrayInput interface {
	pulumi.Input

	ToWorkflowTaskGetGithubCommitsArrayOutput() WorkflowTaskGetGithubCommitsArrayOutput
	ToWorkflowTaskGetGithubCommitsArrayOutputWithContext(context.Context) WorkflowTaskGetGithubCommitsArrayOutput
}

type WorkflowTaskGetGithubCommitsArray []WorkflowTaskGetGithubCommitsInput

func (WorkflowTaskGetGithubCommitsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskGetGithubCommits)(nil)).Elem()
}

func (i WorkflowTaskGetGithubCommitsArray) ToWorkflowTaskGetGithubCommitsArrayOutput() WorkflowTaskGetGithubCommitsArrayOutput {
	return i.ToWorkflowTaskGetGithubCommitsArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskGetGithubCommitsArray) ToWorkflowTaskGetGithubCommitsArrayOutputWithContext(ctx context.Context) WorkflowTaskGetGithubCommitsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskGetGithubCommitsArrayOutput)
}

// WorkflowTaskGetGithubCommitsMapInput is an input type that accepts WorkflowTaskGetGithubCommitsMap and WorkflowTaskGetGithubCommitsMapOutput values.
// You can construct a concrete instance of `WorkflowTaskGetGithubCommitsMapInput` via:
//
//	WorkflowTaskGetGithubCommitsMap{ "key": WorkflowTaskGetGithubCommitsArgs{...} }
type WorkflowTaskGetGithubCommitsMapInput interface {
	pulumi.Input

	ToWorkflowTaskGetGithubCommitsMapOutput() WorkflowTaskGetGithubCommitsMapOutput
	ToWorkflowTaskGetGithubCommitsMapOutputWithContext(context.Context) WorkflowTaskGetGithubCommitsMapOutput
}

type WorkflowTaskGetGithubCommitsMap map[string]WorkflowTaskGetGithubCommitsInput

func (WorkflowTaskGetGithubCommitsMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskGetGithubCommits)(nil)).Elem()
}

func (i WorkflowTaskGetGithubCommitsMap) ToWorkflowTaskGetGithubCommitsMapOutput() WorkflowTaskGetGithubCommitsMapOutput {
	return i.ToWorkflowTaskGetGithubCommitsMapOutputWithContext(context.Background())
}

func (i WorkflowTaskGetGithubCommitsMap) ToWorkflowTaskGetGithubCommitsMapOutputWithContext(ctx context.Context) WorkflowTaskGetGithubCommitsMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskGetGithubCommitsMapOutput)
}

type WorkflowTaskGetGithubCommitsOutput struct{ *pulumi.OutputState }

func (WorkflowTaskGetGithubCommitsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskGetGithubCommits)(nil)).Elem()
}

func (o WorkflowTaskGetGithubCommitsOutput) ToWorkflowTaskGetGithubCommitsOutput() WorkflowTaskGetGithubCommitsOutput {
	return o
}

func (o WorkflowTaskGetGithubCommitsOutput) ToWorkflowTaskGetGithubCommitsOutputWithContext(ctx context.Context) WorkflowTaskGetGithubCommitsOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskGetGithubCommitsOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskGetGithubCommits) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskGetGithubCommitsOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskGetGithubCommits) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskGetGithubCommitsOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskGetGithubCommits) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskGetGithubCommitsOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskGetGithubCommits) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskGetGithubCommitsOutput) TaskParams() WorkflowTaskGetGithubCommitsTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskGetGithubCommits) WorkflowTaskGetGithubCommitsTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskGetGithubCommitsTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskGetGithubCommitsOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskGetGithubCommits) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskGetGithubCommitsArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskGetGithubCommitsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskGetGithubCommits)(nil)).Elem()
}

func (o WorkflowTaskGetGithubCommitsArrayOutput) ToWorkflowTaskGetGithubCommitsArrayOutput() WorkflowTaskGetGithubCommitsArrayOutput {
	return o
}

func (o WorkflowTaskGetGithubCommitsArrayOutput) ToWorkflowTaskGetGithubCommitsArrayOutputWithContext(ctx context.Context) WorkflowTaskGetGithubCommitsArrayOutput {
	return o
}

func (o WorkflowTaskGetGithubCommitsArrayOutput) Index(i pulumi.IntInput) WorkflowTaskGetGithubCommitsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskGetGithubCommits {
		return vs[0].([]*WorkflowTaskGetGithubCommits)[vs[1].(int)]
	}).(WorkflowTaskGetGithubCommitsOutput)
}

type WorkflowTaskGetGithubCommitsMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskGetGithubCommitsMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskGetGithubCommits)(nil)).Elem()
}

func (o WorkflowTaskGetGithubCommitsMapOutput) ToWorkflowTaskGetGithubCommitsMapOutput() WorkflowTaskGetGithubCommitsMapOutput {
	return o
}

func (o WorkflowTaskGetGithubCommitsMapOutput) ToWorkflowTaskGetGithubCommitsMapOutputWithContext(ctx context.Context) WorkflowTaskGetGithubCommitsMapOutput {
	return o
}

func (o WorkflowTaskGetGithubCommitsMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskGetGithubCommitsOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskGetGithubCommits {
		return vs[0].(map[string]*WorkflowTaskGetGithubCommits)[vs[1].(string)]
	}).(WorkflowTaskGetGithubCommitsOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskGetGithubCommitsInput)(nil)).Elem(), &WorkflowTaskGetGithubCommits{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskGetGithubCommitsArrayInput)(nil)).Elem(), WorkflowTaskGetGithubCommitsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskGetGithubCommitsMapInput)(nil)).Elem(), WorkflowTaskGetGithubCommitsMap{})
	pulumi.RegisterOutputType(WorkflowTaskGetGithubCommitsOutput{})
	pulumi.RegisterOutputType(WorkflowTaskGetGithubCommitsArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskGetGithubCommitsMapOutput{})
}
