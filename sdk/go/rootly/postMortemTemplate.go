// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type PostMortemTemplate struct {
	pulumi.CustomResourceState

	// The postmortem template. Liquid syntax and markdown are supported
	Content pulumi.StringOutput `pulumi:"content"`
	// Default selected template when editing a postmortem. Value must be one of true or false
	Default pulumi.BoolOutput `pulumi:"default"`
	// The format of the input. Value must be one of `html`, `markdown`.
	Format pulumi.StringPtrOutput `pulumi:"format"`
	// The name of the postmortem template
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewPostMortemTemplate registers a new resource with the given unique name, arguments, and options.
func NewPostMortemTemplate(ctx *pulumi.Context,
	name string, args *PostMortemTemplateArgs, opts ...pulumi.ResourceOption) (*PostMortemTemplate, error) {
	if args == nil {
		args = &PostMortemTemplateArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PostMortemTemplate
	err := ctx.RegisterResource("rootly:index/postMortemTemplate:PostMortemTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPostMortemTemplate gets an existing PostMortemTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPostMortemTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PostMortemTemplateState, opts ...pulumi.ResourceOption) (*PostMortemTemplate, error) {
	var resource PostMortemTemplate
	err := ctx.ReadResource("rootly:index/postMortemTemplate:PostMortemTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PostMortemTemplate resources.
type postMortemTemplateState struct {
	// The postmortem template. Liquid syntax and markdown are supported
	Content *string `pulumi:"content"`
	// Default selected template when editing a postmortem. Value must be one of true or false
	Default *bool `pulumi:"default"`
	// The format of the input. Value must be one of `html`, `markdown`.
	Format *string `pulumi:"format"`
	// The name of the postmortem template
	Name *string `pulumi:"name"`
}

type PostMortemTemplateState struct {
	// The postmortem template. Liquid syntax and markdown are supported
	Content pulumi.StringPtrInput
	// Default selected template when editing a postmortem. Value must be one of true or false
	Default pulumi.BoolPtrInput
	// The format of the input. Value must be one of `html`, `markdown`.
	Format pulumi.StringPtrInput
	// The name of the postmortem template
	Name pulumi.StringPtrInput
}

func (PostMortemTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*postMortemTemplateState)(nil)).Elem()
}

type postMortemTemplateArgs struct {
	// The postmortem template. Liquid syntax and markdown are supported
	Content *string `pulumi:"content"`
	// Default selected template when editing a postmortem. Value must be one of true or false
	Default *bool `pulumi:"default"`
	// The format of the input. Value must be one of `html`, `markdown`.
	Format *string `pulumi:"format"`
	// The name of the postmortem template
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a PostMortemTemplate resource.
type PostMortemTemplateArgs struct {
	// The postmortem template. Liquid syntax and markdown are supported
	Content pulumi.StringPtrInput
	// Default selected template when editing a postmortem. Value must be one of true or false
	Default pulumi.BoolPtrInput
	// The format of the input. Value must be one of `html`, `markdown`.
	Format pulumi.StringPtrInput
	// The name of the postmortem template
	Name pulumi.StringPtrInput
}

func (PostMortemTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*postMortemTemplateArgs)(nil)).Elem()
}

type PostMortemTemplateInput interface {
	pulumi.Input

	ToPostMortemTemplateOutput() PostMortemTemplateOutput
	ToPostMortemTemplateOutputWithContext(ctx context.Context) PostMortemTemplateOutput
}

func (*PostMortemTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((**PostMortemTemplate)(nil)).Elem()
}

func (i *PostMortemTemplate) ToPostMortemTemplateOutput() PostMortemTemplateOutput {
	return i.ToPostMortemTemplateOutputWithContext(context.Background())
}

func (i *PostMortemTemplate) ToPostMortemTemplateOutputWithContext(ctx context.Context) PostMortemTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostMortemTemplateOutput)
}

// PostMortemTemplateArrayInput is an input type that accepts PostMortemTemplateArray and PostMortemTemplateArrayOutput values.
// You can construct a concrete instance of `PostMortemTemplateArrayInput` via:
//
//	PostMortemTemplateArray{ PostMortemTemplateArgs{...} }
type PostMortemTemplateArrayInput interface {
	pulumi.Input

	ToPostMortemTemplateArrayOutput() PostMortemTemplateArrayOutput
	ToPostMortemTemplateArrayOutputWithContext(context.Context) PostMortemTemplateArrayOutput
}

type PostMortemTemplateArray []PostMortemTemplateInput

func (PostMortemTemplateArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostMortemTemplate)(nil)).Elem()
}

func (i PostMortemTemplateArray) ToPostMortemTemplateArrayOutput() PostMortemTemplateArrayOutput {
	return i.ToPostMortemTemplateArrayOutputWithContext(context.Background())
}

func (i PostMortemTemplateArray) ToPostMortemTemplateArrayOutputWithContext(ctx context.Context) PostMortemTemplateArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostMortemTemplateArrayOutput)
}

// PostMortemTemplateMapInput is an input type that accepts PostMortemTemplateMap and PostMortemTemplateMapOutput values.
// You can construct a concrete instance of `PostMortemTemplateMapInput` via:
//
//	PostMortemTemplateMap{ "key": PostMortemTemplateArgs{...} }
type PostMortemTemplateMapInput interface {
	pulumi.Input

	ToPostMortemTemplateMapOutput() PostMortemTemplateMapOutput
	ToPostMortemTemplateMapOutputWithContext(context.Context) PostMortemTemplateMapOutput
}

type PostMortemTemplateMap map[string]PostMortemTemplateInput

func (PostMortemTemplateMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostMortemTemplate)(nil)).Elem()
}

func (i PostMortemTemplateMap) ToPostMortemTemplateMapOutput() PostMortemTemplateMapOutput {
	return i.ToPostMortemTemplateMapOutputWithContext(context.Background())
}

func (i PostMortemTemplateMap) ToPostMortemTemplateMapOutputWithContext(ctx context.Context) PostMortemTemplateMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PostMortemTemplateMapOutput)
}

type PostMortemTemplateOutput struct{ *pulumi.OutputState }

func (PostMortemTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PostMortemTemplate)(nil)).Elem()
}

func (o PostMortemTemplateOutput) ToPostMortemTemplateOutput() PostMortemTemplateOutput {
	return o
}

func (o PostMortemTemplateOutput) ToPostMortemTemplateOutputWithContext(ctx context.Context) PostMortemTemplateOutput {
	return o
}

// The postmortem template. Liquid syntax and markdown are supported
func (o PostMortemTemplateOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func(v *PostMortemTemplate) pulumi.StringOutput { return v.Content }).(pulumi.StringOutput)
}

// Default selected template when editing a postmortem. Value must be one of true or false
func (o PostMortemTemplateOutput) Default() pulumi.BoolOutput {
	return o.ApplyT(func(v *PostMortemTemplate) pulumi.BoolOutput { return v.Default }).(pulumi.BoolOutput)
}

// The format of the input. Value must be one of `html`, `markdown`.
func (o PostMortemTemplateOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PostMortemTemplate) pulumi.StringPtrOutput { return v.Format }).(pulumi.StringPtrOutput)
}

// The name of the postmortem template
func (o PostMortemTemplateOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *PostMortemTemplate) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

type PostMortemTemplateArrayOutput struct{ *pulumi.OutputState }

func (PostMortemTemplateArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PostMortemTemplate)(nil)).Elem()
}

func (o PostMortemTemplateArrayOutput) ToPostMortemTemplateArrayOutput() PostMortemTemplateArrayOutput {
	return o
}

func (o PostMortemTemplateArrayOutput) ToPostMortemTemplateArrayOutputWithContext(ctx context.Context) PostMortemTemplateArrayOutput {
	return o
}

func (o PostMortemTemplateArrayOutput) Index(i pulumi.IntInput) PostMortemTemplateOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PostMortemTemplate {
		return vs[0].([]*PostMortemTemplate)[vs[1].(int)]
	}).(PostMortemTemplateOutput)
}

type PostMortemTemplateMapOutput struct{ *pulumi.OutputState }

func (PostMortemTemplateMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PostMortemTemplate)(nil)).Elem()
}

func (o PostMortemTemplateMapOutput) ToPostMortemTemplateMapOutput() PostMortemTemplateMapOutput {
	return o
}

func (o PostMortemTemplateMapOutput) ToPostMortemTemplateMapOutputWithContext(ctx context.Context) PostMortemTemplateMapOutput {
	return o
}

func (o PostMortemTemplateMapOutput) MapIndex(k pulumi.StringInput) PostMortemTemplateOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PostMortemTemplate {
		return vs[0].(map[string]*PostMortemTemplate)[vs[1].(string)]
	}).(PostMortemTemplateOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PostMortemTemplateInput)(nil)).Elem(), &PostMortemTemplate{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostMortemTemplateArrayInput)(nil)).Elem(), PostMortemTemplateArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PostMortemTemplateMapInput)(nil)).Elem(), PostMortemTemplateMap{})
	pulumi.RegisterOutputType(PostMortemTemplateOutput{})
	pulumi.RegisterOutputType(PostMortemTemplateArrayOutput{})
	pulumi.RegisterOutputType(PostMortemTemplateMapOutput{})
}
