// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type OverrideShift struct {
	pulumi.CustomResourceState

	// End datetime of shift
	EndsAt pulumi.StringOutput `pulumi:"endsAt"`
	// Denotes shift is an override shift. Value must be one of true or false
	IsOverride pulumi.BoolOutput `pulumi:"isOverride"`
	// ID of rotation
	RotationId pulumi.StringOutput `pulumi:"rotationId"`
	// ID of schedule
	ScheduleId pulumi.StringOutput `pulumi:"scheduleId"`
	// Override metadata
	ShiftOverride pulumi.StringMapOutput `pulumi:"shiftOverride"`
	// Start datetime of shift
	StartsAt pulumi.StringOutput `pulumi:"startsAt"`
	// User metadata
	User pulumi.StringMapOutput `pulumi:"user"`
}

// NewOverrideShift registers a new resource with the given unique name, arguments, and options.
func NewOverrideShift(ctx *pulumi.Context,
	name string, args *OverrideShiftArgs, opts ...pulumi.ResourceOption) (*OverrideShift, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EndsAt == nil {
		return nil, errors.New("invalid value for required argument 'EndsAt'")
	}
	if args.StartsAt == nil {
		return nil, errors.New("invalid value for required argument 'StartsAt'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource OverrideShift
	err := ctx.RegisterResource("rootly:index/overrideShift:OverrideShift", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOverrideShift gets an existing OverrideShift resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOverrideShift(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OverrideShiftState, opts ...pulumi.ResourceOption) (*OverrideShift, error) {
	var resource OverrideShift
	err := ctx.ReadResource("rootly:index/overrideShift:OverrideShift", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OverrideShift resources.
type overrideShiftState struct {
	// End datetime of shift
	EndsAt *string `pulumi:"endsAt"`
	// Denotes shift is an override shift. Value must be one of true or false
	IsOverride *bool `pulumi:"isOverride"`
	// ID of rotation
	RotationId *string `pulumi:"rotationId"`
	// ID of schedule
	ScheduleId *string `pulumi:"scheduleId"`
	// Override metadata
	ShiftOverride map[string]string `pulumi:"shiftOverride"`
	// Start datetime of shift
	StartsAt *string `pulumi:"startsAt"`
	// User metadata
	User map[string]string `pulumi:"user"`
}

type OverrideShiftState struct {
	// End datetime of shift
	EndsAt pulumi.StringPtrInput
	// Denotes shift is an override shift. Value must be one of true or false
	IsOverride pulumi.BoolPtrInput
	// ID of rotation
	RotationId pulumi.StringPtrInput
	// ID of schedule
	ScheduleId pulumi.StringPtrInput
	// Override metadata
	ShiftOverride pulumi.StringMapInput
	// Start datetime of shift
	StartsAt pulumi.StringPtrInput
	// User metadata
	User pulumi.StringMapInput
}

func (OverrideShiftState) ElementType() reflect.Type {
	return reflect.TypeOf((*overrideShiftState)(nil)).Elem()
}

type overrideShiftArgs struct {
	// End datetime of shift
	EndsAt string `pulumi:"endsAt"`
	// Denotes shift is an override shift. Value must be one of true or false
	IsOverride *bool `pulumi:"isOverride"`
	// ID of rotation
	RotationId *string `pulumi:"rotationId"`
	// ID of schedule
	ScheduleId *string `pulumi:"scheduleId"`
	// Override metadata
	ShiftOverride map[string]string `pulumi:"shiftOverride"`
	// Start datetime of shift
	StartsAt string `pulumi:"startsAt"`
	// User metadata
	User map[string]string `pulumi:"user"`
}

// The set of arguments for constructing a OverrideShift resource.
type OverrideShiftArgs struct {
	// End datetime of shift
	EndsAt pulumi.StringInput
	// Denotes shift is an override shift. Value must be one of true or false
	IsOverride pulumi.BoolPtrInput
	// ID of rotation
	RotationId pulumi.StringPtrInput
	// ID of schedule
	ScheduleId pulumi.StringPtrInput
	// Override metadata
	ShiftOverride pulumi.StringMapInput
	// Start datetime of shift
	StartsAt pulumi.StringInput
	// User metadata
	User pulumi.StringMapInput
}

func (OverrideShiftArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*overrideShiftArgs)(nil)).Elem()
}

type OverrideShiftInput interface {
	pulumi.Input

	ToOverrideShiftOutput() OverrideShiftOutput
	ToOverrideShiftOutputWithContext(ctx context.Context) OverrideShiftOutput
}

func (*OverrideShift) ElementType() reflect.Type {
	return reflect.TypeOf((**OverrideShift)(nil)).Elem()
}

func (i *OverrideShift) ToOverrideShiftOutput() OverrideShiftOutput {
	return i.ToOverrideShiftOutputWithContext(context.Background())
}

func (i *OverrideShift) ToOverrideShiftOutputWithContext(ctx context.Context) OverrideShiftOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverrideShiftOutput)
}

// OverrideShiftArrayInput is an input type that accepts OverrideShiftArray and OverrideShiftArrayOutput values.
// You can construct a concrete instance of `OverrideShiftArrayInput` via:
//
//	OverrideShiftArray{ OverrideShiftArgs{...} }
type OverrideShiftArrayInput interface {
	pulumi.Input

	ToOverrideShiftArrayOutput() OverrideShiftArrayOutput
	ToOverrideShiftArrayOutputWithContext(context.Context) OverrideShiftArrayOutput
}

type OverrideShiftArray []OverrideShiftInput

func (OverrideShiftArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OverrideShift)(nil)).Elem()
}

func (i OverrideShiftArray) ToOverrideShiftArrayOutput() OverrideShiftArrayOutput {
	return i.ToOverrideShiftArrayOutputWithContext(context.Background())
}

func (i OverrideShiftArray) ToOverrideShiftArrayOutputWithContext(ctx context.Context) OverrideShiftArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverrideShiftArrayOutput)
}

// OverrideShiftMapInput is an input type that accepts OverrideShiftMap and OverrideShiftMapOutput values.
// You can construct a concrete instance of `OverrideShiftMapInput` via:
//
//	OverrideShiftMap{ "key": OverrideShiftArgs{...} }
type OverrideShiftMapInput interface {
	pulumi.Input

	ToOverrideShiftMapOutput() OverrideShiftMapOutput
	ToOverrideShiftMapOutputWithContext(context.Context) OverrideShiftMapOutput
}

type OverrideShiftMap map[string]OverrideShiftInput

func (OverrideShiftMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OverrideShift)(nil)).Elem()
}

func (i OverrideShiftMap) ToOverrideShiftMapOutput() OverrideShiftMapOutput {
	return i.ToOverrideShiftMapOutputWithContext(context.Background())
}

func (i OverrideShiftMap) ToOverrideShiftMapOutputWithContext(ctx context.Context) OverrideShiftMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OverrideShiftMapOutput)
}

type OverrideShiftOutput struct{ *pulumi.OutputState }

func (OverrideShiftOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OverrideShift)(nil)).Elem()
}

func (o OverrideShiftOutput) ToOverrideShiftOutput() OverrideShiftOutput {
	return o
}

func (o OverrideShiftOutput) ToOverrideShiftOutputWithContext(ctx context.Context) OverrideShiftOutput {
	return o
}

// End datetime of shift
func (o OverrideShiftOutput) EndsAt() pulumi.StringOutput {
	return o.ApplyT(func(v *OverrideShift) pulumi.StringOutput { return v.EndsAt }).(pulumi.StringOutput)
}

// Denotes shift is an override shift. Value must be one of true or false
func (o OverrideShiftOutput) IsOverride() pulumi.BoolOutput {
	return o.ApplyT(func(v *OverrideShift) pulumi.BoolOutput { return v.IsOverride }).(pulumi.BoolOutput)
}

// ID of rotation
func (o OverrideShiftOutput) RotationId() pulumi.StringOutput {
	return o.ApplyT(func(v *OverrideShift) pulumi.StringOutput { return v.RotationId }).(pulumi.StringOutput)
}

// ID of schedule
func (o OverrideShiftOutput) ScheduleId() pulumi.StringOutput {
	return o.ApplyT(func(v *OverrideShift) pulumi.StringOutput { return v.ScheduleId }).(pulumi.StringOutput)
}

// Override metadata
func (o OverrideShiftOutput) ShiftOverride() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OverrideShift) pulumi.StringMapOutput { return v.ShiftOverride }).(pulumi.StringMapOutput)
}

// Start datetime of shift
func (o OverrideShiftOutput) StartsAt() pulumi.StringOutput {
	return o.ApplyT(func(v *OverrideShift) pulumi.StringOutput { return v.StartsAt }).(pulumi.StringOutput)
}

// User metadata
func (o OverrideShiftOutput) User() pulumi.StringMapOutput {
	return o.ApplyT(func(v *OverrideShift) pulumi.StringMapOutput { return v.User }).(pulumi.StringMapOutput)
}

type OverrideShiftArrayOutput struct{ *pulumi.OutputState }

func (OverrideShiftArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OverrideShift)(nil)).Elem()
}

func (o OverrideShiftArrayOutput) ToOverrideShiftArrayOutput() OverrideShiftArrayOutput {
	return o
}

func (o OverrideShiftArrayOutput) ToOverrideShiftArrayOutputWithContext(ctx context.Context) OverrideShiftArrayOutput {
	return o
}

func (o OverrideShiftArrayOutput) Index(i pulumi.IntInput) OverrideShiftOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *OverrideShift {
		return vs[0].([]*OverrideShift)[vs[1].(int)]
	}).(OverrideShiftOutput)
}

type OverrideShiftMapOutput struct{ *pulumi.OutputState }

func (OverrideShiftMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OverrideShift)(nil)).Elem()
}

func (o OverrideShiftMapOutput) ToOverrideShiftMapOutput() OverrideShiftMapOutput {
	return o
}

func (o OverrideShiftMapOutput) ToOverrideShiftMapOutputWithContext(ctx context.Context) OverrideShiftMapOutput {
	return o
}

func (o OverrideShiftMapOutput) MapIndex(k pulumi.StringInput) OverrideShiftOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *OverrideShift {
		return vs[0].(map[string]*OverrideShift)[vs[1].(string)]
	}).(OverrideShiftOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*OverrideShiftInput)(nil)).Elem(), &OverrideShift{})
	pulumi.RegisterInputType(reflect.TypeOf((*OverrideShiftArrayInput)(nil)).Elem(), OverrideShiftArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*OverrideShiftMapInput)(nil)).Elem(), OverrideShiftMap{})
	pulumi.RegisterOutputType(OverrideShiftOutput{})
	pulumi.RegisterOutputType(OverrideShiftArrayOutput{})
	pulumi.RegisterOutputType(OverrideShiftMapOutput{})
}
