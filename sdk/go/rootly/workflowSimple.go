// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type WorkflowSimple struct {
	pulumi.CustomResourceState

	CauseIds pulumi.StringArrayOutput `pulumi:"causeIds"`
	// Workflow command
	Command pulumi.StringOutput `pulumi:"command"`
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled pulumi.BoolOutput `pulumi:"commandFeedbackEnabled"`
	// The description of the workflow
	Description      pulumi.StringOutput      `pulumi:"description"`
	Enabled          pulumi.BoolPtrOutput     `pulumi:"enabled"`
	EnvironmentIds   pulumi.StringArrayOutput `pulumi:"environmentIds"`
	FunctionalityIds pulumi.StringArrayOutput `pulumi:"functionalityIds"`
	GroupIds         pulumi.StringArrayOutput `pulumi:"groupIds"`
	IncidentRoleIds  pulumi.StringArrayOutput `pulumi:"incidentRoleIds"`
	IncidentTypeIds  pulumi.StringArrayOutput `pulumi:"incidentTypeIds"`
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked pulumi.BoolOutput `pulumi:"locked"`
	// The title of the workflow
	Name pulumi.StringOutput `pulumi:"name"`
	// The order which the workflow should run with other workflows.
	Position pulumi.IntOutput `pulumi:"position"`
	// Repeat workflow every duration
	RepeatEveryDuration pulumi.StringOutput `pulumi:"repeatEveryDuration"`
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   pulumi.StringArrayOutput `pulumi:"repeatOns"`
	ServiceIds  pulumi.StringArrayOutput `pulumi:"serviceIds"`
	SeverityIds pulumi.StringArrayOutput `pulumi:"severityIds"`
	// The slug of the workflow
	Slug          pulumi.StringOutput               `pulumi:"slug"`
	TriggerParams WorkflowSimpleTriggerParamsOutput `pulumi:"triggerParams"`
	// Wait this duration before executing
	Wait pulumi.StringOutput `pulumi:"wait"`
	// The group this workflow belongs to.
	WorkflowGroupId pulumi.StringOutput `pulumi:"workflowGroupId"`
}

// NewWorkflowSimple registers a new resource with the given unique name, arguments, and options.
func NewWorkflowSimple(ctx *pulumi.Context,
	name string, args *WorkflowSimpleArgs, opts ...pulumi.ResourceOption) (*WorkflowSimple, error) {
	if args == nil {
		args = &WorkflowSimpleArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowSimple
	err := ctx.RegisterResource("rootly:index/workflowSimple:WorkflowSimple", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowSimple gets an existing WorkflowSimple resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowSimple(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowSimpleState, opts ...pulumi.ResourceOption) (*WorkflowSimple, error) {
	var resource WorkflowSimple
	err := ctx.ReadResource("rootly:index/workflowSimple:WorkflowSimple", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowSimple resources.
type workflowSimpleState struct {
	CauseIds []string `pulumi:"causeIds"`
	// Workflow command
	Command *string `pulumi:"command"`
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled *bool `pulumi:"commandFeedbackEnabled"`
	// The description of the workflow
	Description      *string  `pulumi:"description"`
	Enabled          *bool    `pulumi:"enabled"`
	EnvironmentIds   []string `pulumi:"environmentIds"`
	FunctionalityIds []string `pulumi:"functionalityIds"`
	GroupIds         []string `pulumi:"groupIds"`
	IncidentRoleIds  []string `pulumi:"incidentRoleIds"`
	IncidentTypeIds  []string `pulumi:"incidentTypeIds"`
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked *bool `pulumi:"locked"`
	// The title of the workflow
	Name *string `pulumi:"name"`
	// The order which the workflow should run with other workflows.
	Position *int `pulumi:"position"`
	// Repeat workflow every duration
	RepeatEveryDuration *string `pulumi:"repeatEveryDuration"`
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   []string `pulumi:"repeatOns"`
	ServiceIds  []string `pulumi:"serviceIds"`
	SeverityIds []string `pulumi:"severityIds"`
	// The slug of the workflow
	Slug          *string                      `pulumi:"slug"`
	TriggerParams *WorkflowSimpleTriggerParams `pulumi:"triggerParams"`
	// Wait this duration before executing
	Wait *string `pulumi:"wait"`
	// The group this workflow belongs to.
	WorkflowGroupId *string `pulumi:"workflowGroupId"`
}

type WorkflowSimpleState struct {
	CauseIds pulumi.StringArrayInput
	// Workflow command
	Command pulumi.StringPtrInput
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled pulumi.BoolPtrInput
	// The description of the workflow
	Description      pulumi.StringPtrInput
	Enabled          pulumi.BoolPtrInput
	EnvironmentIds   pulumi.StringArrayInput
	FunctionalityIds pulumi.StringArrayInput
	GroupIds         pulumi.StringArrayInput
	IncidentRoleIds  pulumi.StringArrayInput
	IncidentTypeIds  pulumi.StringArrayInput
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked pulumi.BoolPtrInput
	// The title of the workflow
	Name pulumi.StringPtrInput
	// The order which the workflow should run with other workflows.
	Position pulumi.IntPtrInput
	// Repeat workflow every duration
	RepeatEveryDuration pulumi.StringPtrInput
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   pulumi.StringArrayInput
	ServiceIds  pulumi.StringArrayInput
	SeverityIds pulumi.StringArrayInput
	// The slug of the workflow
	Slug          pulumi.StringPtrInput
	TriggerParams WorkflowSimpleTriggerParamsPtrInput
	// Wait this duration before executing
	Wait pulumi.StringPtrInput
	// The group this workflow belongs to.
	WorkflowGroupId pulumi.StringPtrInput
}

func (WorkflowSimpleState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowSimpleState)(nil)).Elem()
}

type workflowSimpleArgs struct {
	CauseIds []string `pulumi:"causeIds"`
	// Workflow command
	Command *string `pulumi:"command"`
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled *bool `pulumi:"commandFeedbackEnabled"`
	// The description of the workflow
	Description      *string  `pulumi:"description"`
	Enabled          *bool    `pulumi:"enabled"`
	EnvironmentIds   []string `pulumi:"environmentIds"`
	FunctionalityIds []string `pulumi:"functionalityIds"`
	GroupIds         []string `pulumi:"groupIds"`
	IncidentRoleIds  []string `pulumi:"incidentRoleIds"`
	IncidentTypeIds  []string `pulumi:"incidentTypeIds"`
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked *bool `pulumi:"locked"`
	// The title of the workflow
	Name *string `pulumi:"name"`
	// The order which the workflow should run with other workflows.
	Position *int `pulumi:"position"`
	// Repeat workflow every duration
	RepeatEveryDuration *string `pulumi:"repeatEveryDuration"`
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   []string `pulumi:"repeatOns"`
	ServiceIds  []string `pulumi:"serviceIds"`
	SeverityIds []string `pulumi:"severityIds"`
	// The slug of the workflow
	Slug          *string                      `pulumi:"slug"`
	TriggerParams *WorkflowSimpleTriggerParams `pulumi:"triggerParams"`
	// Wait this duration before executing
	Wait *string `pulumi:"wait"`
	// The group this workflow belongs to.
	WorkflowGroupId *string `pulumi:"workflowGroupId"`
}

// The set of arguments for constructing a WorkflowSimple resource.
type WorkflowSimpleArgs struct {
	CauseIds pulumi.StringArrayInput
	// Workflow command
	Command pulumi.StringPtrInput
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled pulumi.BoolPtrInput
	// The description of the workflow
	Description      pulumi.StringPtrInput
	Enabled          pulumi.BoolPtrInput
	EnvironmentIds   pulumi.StringArrayInput
	FunctionalityIds pulumi.StringArrayInput
	GroupIds         pulumi.StringArrayInput
	IncidentRoleIds  pulumi.StringArrayInput
	IncidentTypeIds  pulumi.StringArrayInput
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked pulumi.BoolPtrInput
	// The title of the workflow
	Name pulumi.StringPtrInput
	// The order which the workflow should run with other workflows.
	Position pulumi.IntPtrInput
	// Repeat workflow every duration
	RepeatEveryDuration pulumi.StringPtrInput
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   pulumi.StringArrayInput
	ServiceIds  pulumi.StringArrayInput
	SeverityIds pulumi.StringArrayInput
	// The slug of the workflow
	Slug          pulumi.StringPtrInput
	TriggerParams WorkflowSimpleTriggerParamsPtrInput
	// Wait this duration before executing
	Wait pulumi.StringPtrInput
	// The group this workflow belongs to.
	WorkflowGroupId pulumi.StringPtrInput
}

func (WorkflowSimpleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowSimpleArgs)(nil)).Elem()
}

type WorkflowSimpleInput interface {
	pulumi.Input

	ToWorkflowSimpleOutput() WorkflowSimpleOutput
	ToWorkflowSimpleOutputWithContext(ctx context.Context) WorkflowSimpleOutput
}

func (*WorkflowSimple) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowSimple)(nil)).Elem()
}

func (i *WorkflowSimple) ToWorkflowSimpleOutput() WorkflowSimpleOutput {
	return i.ToWorkflowSimpleOutputWithContext(context.Background())
}

func (i *WorkflowSimple) ToWorkflowSimpleOutputWithContext(ctx context.Context) WorkflowSimpleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowSimpleOutput)
}

// WorkflowSimpleArrayInput is an input type that accepts WorkflowSimpleArray and WorkflowSimpleArrayOutput values.
// You can construct a concrete instance of `WorkflowSimpleArrayInput` via:
//
//	WorkflowSimpleArray{ WorkflowSimpleArgs{...} }
type WorkflowSimpleArrayInput interface {
	pulumi.Input

	ToWorkflowSimpleArrayOutput() WorkflowSimpleArrayOutput
	ToWorkflowSimpleArrayOutputWithContext(context.Context) WorkflowSimpleArrayOutput
}

type WorkflowSimpleArray []WorkflowSimpleInput

func (WorkflowSimpleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowSimple)(nil)).Elem()
}

func (i WorkflowSimpleArray) ToWorkflowSimpleArrayOutput() WorkflowSimpleArrayOutput {
	return i.ToWorkflowSimpleArrayOutputWithContext(context.Background())
}

func (i WorkflowSimpleArray) ToWorkflowSimpleArrayOutputWithContext(ctx context.Context) WorkflowSimpleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowSimpleArrayOutput)
}

// WorkflowSimpleMapInput is an input type that accepts WorkflowSimpleMap and WorkflowSimpleMapOutput values.
// You can construct a concrete instance of `WorkflowSimpleMapInput` via:
//
//	WorkflowSimpleMap{ "key": WorkflowSimpleArgs{...} }
type WorkflowSimpleMapInput interface {
	pulumi.Input

	ToWorkflowSimpleMapOutput() WorkflowSimpleMapOutput
	ToWorkflowSimpleMapOutputWithContext(context.Context) WorkflowSimpleMapOutput
}

type WorkflowSimpleMap map[string]WorkflowSimpleInput

func (WorkflowSimpleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowSimple)(nil)).Elem()
}

func (i WorkflowSimpleMap) ToWorkflowSimpleMapOutput() WorkflowSimpleMapOutput {
	return i.ToWorkflowSimpleMapOutputWithContext(context.Background())
}

func (i WorkflowSimpleMap) ToWorkflowSimpleMapOutputWithContext(ctx context.Context) WorkflowSimpleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowSimpleMapOutput)
}

type WorkflowSimpleOutput struct{ *pulumi.OutputState }

func (WorkflowSimpleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowSimple)(nil)).Elem()
}

func (o WorkflowSimpleOutput) ToWorkflowSimpleOutput() WorkflowSimpleOutput {
	return o
}

func (o WorkflowSimpleOutput) ToWorkflowSimpleOutputWithContext(ctx context.Context) WorkflowSimpleOutput {
	return o
}

func (o WorkflowSimpleOutput) CauseIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.StringArrayOutput { return v.CauseIds }).(pulumi.StringArrayOutput)
}

// Workflow command
func (o WorkflowSimpleOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.StringOutput { return v.Command }).(pulumi.StringOutput)
}

// This will notify you back when the workflow is starting. Value must be one of true or false
func (o WorkflowSimpleOutput) CommandFeedbackEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.BoolOutput { return v.CommandFeedbackEnabled }).(pulumi.BoolOutput)
}

// The description of the workflow
func (o WorkflowSimpleOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o WorkflowSimpleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o WorkflowSimpleOutput) EnvironmentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.StringArrayOutput { return v.EnvironmentIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowSimpleOutput) FunctionalityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.StringArrayOutput { return v.FunctionalityIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowSimpleOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.StringArrayOutput { return v.GroupIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowSimpleOutput) IncidentRoleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.StringArrayOutput { return v.IncidentRoleIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowSimpleOutput) IncidentTypeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.StringArrayOutput { return v.IncidentTypeIds }).(pulumi.StringArrayOutput)
}

// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
func (o WorkflowSimpleOutput) Locked() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.BoolOutput { return v.Locked }).(pulumi.BoolOutput)
}

// The title of the workflow
func (o WorkflowSimpleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The order which the workflow should run with other workflows.
func (o WorkflowSimpleOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Repeat workflow every duration
func (o WorkflowSimpleOutput) RepeatEveryDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.StringOutput { return v.RepeatEveryDuration }).(pulumi.StringOutput)
}

// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
func (o WorkflowSimpleOutput) RepeatOns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.StringArrayOutput { return v.RepeatOns }).(pulumi.StringArrayOutput)
}

func (o WorkflowSimpleOutput) ServiceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.StringArrayOutput { return v.ServiceIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowSimpleOutput) SeverityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.StringArrayOutput { return v.SeverityIds }).(pulumi.StringArrayOutput)
}

// The slug of the workflow
func (o WorkflowSimpleOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o WorkflowSimpleOutput) TriggerParams() WorkflowSimpleTriggerParamsOutput {
	return o.ApplyT(func(v *WorkflowSimple) WorkflowSimpleTriggerParamsOutput { return v.TriggerParams }).(WorkflowSimpleTriggerParamsOutput)
}

// Wait this duration before executing
func (o WorkflowSimpleOutput) Wait() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.StringOutput { return v.Wait }).(pulumi.StringOutput)
}

// The group this workflow belongs to.
func (o WorkflowSimpleOutput) WorkflowGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowSimple) pulumi.StringOutput { return v.WorkflowGroupId }).(pulumi.StringOutput)
}

type WorkflowSimpleArrayOutput struct{ *pulumi.OutputState }

func (WorkflowSimpleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowSimple)(nil)).Elem()
}

func (o WorkflowSimpleArrayOutput) ToWorkflowSimpleArrayOutput() WorkflowSimpleArrayOutput {
	return o
}

func (o WorkflowSimpleArrayOutput) ToWorkflowSimpleArrayOutputWithContext(ctx context.Context) WorkflowSimpleArrayOutput {
	return o
}

func (o WorkflowSimpleArrayOutput) Index(i pulumi.IntInput) WorkflowSimpleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowSimple {
		return vs[0].([]*WorkflowSimple)[vs[1].(int)]
	}).(WorkflowSimpleOutput)
}

type WorkflowSimpleMapOutput struct{ *pulumi.OutputState }

func (WorkflowSimpleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowSimple)(nil)).Elem()
}

func (o WorkflowSimpleMapOutput) ToWorkflowSimpleMapOutput() WorkflowSimpleMapOutput {
	return o
}

func (o WorkflowSimpleMapOutput) ToWorkflowSimpleMapOutputWithContext(ctx context.Context) WorkflowSimpleMapOutput {
	return o
}

func (o WorkflowSimpleMapOutput) MapIndex(k pulumi.StringInput) WorkflowSimpleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowSimple {
		return vs[0].(map[string]*WorkflowSimple)[vs[1].(string)]
	}).(WorkflowSimpleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowSimpleInput)(nil)).Elem(), &WorkflowSimple{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowSimpleArrayInput)(nil)).Elem(), WorkflowSimpleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowSimpleMapInput)(nil)).Elem(), WorkflowSimpleMap{})
	pulumi.RegisterOutputType(WorkflowSimpleOutput{})
	pulumi.RegisterOutputType(WorkflowSimpleArrayOutput{})
	pulumi.RegisterOutputType(WorkflowSimpleMapOutput{})
}
