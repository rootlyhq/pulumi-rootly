// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createGitlabIssue task.
type WorkflowTaskCreateGitlabIssue struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateGitlabIssueTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreateGitlabIssue registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreateGitlabIssue(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreateGitlabIssueArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateGitlabIssue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreateGitlabIssue
	err := ctx.RegisterResource("rootly:index/workflowTaskCreateGitlabIssue:WorkflowTaskCreateGitlabIssue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreateGitlabIssue gets an existing WorkflowTaskCreateGitlabIssue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreateGitlabIssue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreateGitlabIssueState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateGitlabIssue, error) {
	var resource WorkflowTaskCreateGitlabIssue
	err := ctx.ReadResource("rootly:index/workflowTaskCreateGitlabIssue:WorkflowTaskCreateGitlabIssue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreateGitlabIssue resources.
type workflowTaskCreateGitlabIssueState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreateGitlabIssueTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreateGitlabIssueState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateGitlabIssueTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreateGitlabIssueState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateGitlabIssueState)(nil)).Elem()
}

type workflowTaskCreateGitlabIssueArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateGitlabIssueTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreateGitlabIssue resource.
type WorkflowTaskCreateGitlabIssueArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateGitlabIssueTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreateGitlabIssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateGitlabIssueArgs)(nil)).Elem()
}

type WorkflowTaskCreateGitlabIssueInput interface {
	pulumi.Input

	ToWorkflowTaskCreateGitlabIssueOutput() WorkflowTaskCreateGitlabIssueOutput
	ToWorkflowTaskCreateGitlabIssueOutputWithContext(ctx context.Context) WorkflowTaskCreateGitlabIssueOutput
}

func (*WorkflowTaskCreateGitlabIssue) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateGitlabIssue)(nil)).Elem()
}

func (i *WorkflowTaskCreateGitlabIssue) ToWorkflowTaskCreateGitlabIssueOutput() WorkflowTaskCreateGitlabIssueOutput {
	return i.ToWorkflowTaskCreateGitlabIssueOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreateGitlabIssue) ToWorkflowTaskCreateGitlabIssueOutputWithContext(ctx context.Context) WorkflowTaskCreateGitlabIssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateGitlabIssueOutput)
}

// WorkflowTaskCreateGitlabIssueArrayInput is an input type that accepts WorkflowTaskCreateGitlabIssueArray and WorkflowTaskCreateGitlabIssueArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateGitlabIssueArrayInput` via:
//
//	WorkflowTaskCreateGitlabIssueArray{ WorkflowTaskCreateGitlabIssueArgs{...} }
type WorkflowTaskCreateGitlabIssueArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreateGitlabIssueArrayOutput() WorkflowTaskCreateGitlabIssueArrayOutput
	ToWorkflowTaskCreateGitlabIssueArrayOutputWithContext(context.Context) WorkflowTaskCreateGitlabIssueArrayOutput
}

type WorkflowTaskCreateGitlabIssueArray []WorkflowTaskCreateGitlabIssueInput

func (WorkflowTaskCreateGitlabIssueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateGitlabIssue)(nil)).Elem()
}

func (i WorkflowTaskCreateGitlabIssueArray) ToWorkflowTaskCreateGitlabIssueArrayOutput() WorkflowTaskCreateGitlabIssueArrayOutput {
	return i.ToWorkflowTaskCreateGitlabIssueArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateGitlabIssueArray) ToWorkflowTaskCreateGitlabIssueArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateGitlabIssueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateGitlabIssueArrayOutput)
}

// WorkflowTaskCreateGitlabIssueMapInput is an input type that accepts WorkflowTaskCreateGitlabIssueMap and WorkflowTaskCreateGitlabIssueMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateGitlabIssueMapInput` via:
//
//	WorkflowTaskCreateGitlabIssueMap{ "key": WorkflowTaskCreateGitlabIssueArgs{...} }
type WorkflowTaskCreateGitlabIssueMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreateGitlabIssueMapOutput() WorkflowTaskCreateGitlabIssueMapOutput
	ToWorkflowTaskCreateGitlabIssueMapOutputWithContext(context.Context) WorkflowTaskCreateGitlabIssueMapOutput
}

type WorkflowTaskCreateGitlabIssueMap map[string]WorkflowTaskCreateGitlabIssueInput

func (WorkflowTaskCreateGitlabIssueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateGitlabIssue)(nil)).Elem()
}

func (i WorkflowTaskCreateGitlabIssueMap) ToWorkflowTaskCreateGitlabIssueMapOutput() WorkflowTaskCreateGitlabIssueMapOutput {
	return i.ToWorkflowTaskCreateGitlabIssueMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateGitlabIssueMap) ToWorkflowTaskCreateGitlabIssueMapOutputWithContext(ctx context.Context) WorkflowTaskCreateGitlabIssueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateGitlabIssueMapOutput)
}

type WorkflowTaskCreateGitlabIssueOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateGitlabIssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateGitlabIssue)(nil)).Elem()
}

func (o WorkflowTaskCreateGitlabIssueOutput) ToWorkflowTaskCreateGitlabIssueOutput() WorkflowTaskCreateGitlabIssueOutput {
	return o
}

func (o WorkflowTaskCreateGitlabIssueOutput) ToWorkflowTaskCreateGitlabIssueOutputWithContext(ctx context.Context) WorkflowTaskCreateGitlabIssueOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreateGitlabIssueOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateGitlabIssue) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreateGitlabIssueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateGitlabIssue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreateGitlabIssueOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateGitlabIssue) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreateGitlabIssueOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateGitlabIssue) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreateGitlabIssueOutput) TaskParams() WorkflowTaskCreateGitlabIssueTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateGitlabIssue) WorkflowTaskCreateGitlabIssueTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskCreateGitlabIssueTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreateGitlabIssueOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateGitlabIssue) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreateGitlabIssueArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateGitlabIssueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateGitlabIssue)(nil)).Elem()
}

func (o WorkflowTaskCreateGitlabIssueArrayOutput) ToWorkflowTaskCreateGitlabIssueArrayOutput() WorkflowTaskCreateGitlabIssueArrayOutput {
	return o
}

func (o WorkflowTaskCreateGitlabIssueArrayOutput) ToWorkflowTaskCreateGitlabIssueArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateGitlabIssueArrayOutput {
	return o
}

func (o WorkflowTaskCreateGitlabIssueArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreateGitlabIssueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreateGitlabIssue {
		return vs[0].([]*WorkflowTaskCreateGitlabIssue)[vs[1].(int)]
	}).(WorkflowTaskCreateGitlabIssueOutput)
}

type WorkflowTaskCreateGitlabIssueMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateGitlabIssueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateGitlabIssue)(nil)).Elem()
}

func (o WorkflowTaskCreateGitlabIssueMapOutput) ToWorkflowTaskCreateGitlabIssueMapOutput() WorkflowTaskCreateGitlabIssueMapOutput {
	return o
}

func (o WorkflowTaskCreateGitlabIssueMapOutput) ToWorkflowTaskCreateGitlabIssueMapOutputWithContext(ctx context.Context) WorkflowTaskCreateGitlabIssueMapOutput {
	return o
}

func (o WorkflowTaskCreateGitlabIssueMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreateGitlabIssueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreateGitlabIssue {
		return vs[0].(map[string]*WorkflowTaskCreateGitlabIssue)[vs[1].(string)]
	}).(WorkflowTaskCreateGitlabIssueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateGitlabIssueInput)(nil)).Elem(), &WorkflowTaskCreateGitlabIssue{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateGitlabIssueArrayInput)(nil)).Elem(), WorkflowTaskCreateGitlabIssueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateGitlabIssueMapInput)(nil)).Elem(), WorkflowTaskCreateGitlabIssueMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreateGitlabIssueOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateGitlabIssueArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateGitlabIssueMapOutput{})
}
