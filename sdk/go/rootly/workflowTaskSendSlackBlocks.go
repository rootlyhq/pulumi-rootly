// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow sendSlackBlocks task.
//
// ## Example Usage
type WorkflowTaskSendSlackBlocks struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSendSlackBlocksTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskSendSlackBlocks registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskSendSlackBlocks(ctx *pulumi.Context,
	name string, args *WorkflowTaskSendSlackBlocksArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskSendSlackBlocks, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskSendSlackBlocks
	err := ctx.RegisterResource("rootly:index/workflowTaskSendSlackBlocks:WorkflowTaskSendSlackBlocks", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskSendSlackBlocks gets an existing WorkflowTaskSendSlackBlocks resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskSendSlackBlocks(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskSendSlackBlocksState, opts ...pulumi.ResourceOption) (*WorkflowTaskSendSlackBlocks, error) {
	var resource WorkflowTaskSendSlackBlocks
	err := ctx.ReadResource("rootly:index/workflowTaskSendSlackBlocks:WorkflowTaskSendSlackBlocks", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskSendSlackBlocks resources.
type workflowTaskSendSlackBlocksState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskSendSlackBlocksTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskSendSlackBlocksState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSendSlackBlocksTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskSendSlackBlocksState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskSendSlackBlocksState)(nil)).Elem()
}

type workflowTaskSendSlackBlocksArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSendSlackBlocksTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskSendSlackBlocks resource.
type WorkflowTaskSendSlackBlocksArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSendSlackBlocksTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskSendSlackBlocksArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskSendSlackBlocksArgs)(nil)).Elem()
}

type WorkflowTaskSendSlackBlocksInput interface {
	pulumi.Input

	ToWorkflowTaskSendSlackBlocksOutput() WorkflowTaskSendSlackBlocksOutput
	ToWorkflowTaskSendSlackBlocksOutputWithContext(ctx context.Context) WorkflowTaskSendSlackBlocksOutput
}

func (*WorkflowTaskSendSlackBlocks) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskSendSlackBlocks)(nil)).Elem()
}

func (i *WorkflowTaskSendSlackBlocks) ToWorkflowTaskSendSlackBlocksOutput() WorkflowTaskSendSlackBlocksOutput {
	return i.ToWorkflowTaskSendSlackBlocksOutputWithContext(context.Background())
}

func (i *WorkflowTaskSendSlackBlocks) ToWorkflowTaskSendSlackBlocksOutputWithContext(ctx context.Context) WorkflowTaskSendSlackBlocksOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSendSlackBlocksOutput)
}

// WorkflowTaskSendSlackBlocksArrayInput is an input type that accepts WorkflowTaskSendSlackBlocksArray and WorkflowTaskSendSlackBlocksArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskSendSlackBlocksArrayInput` via:
//
//	WorkflowTaskSendSlackBlocksArray{ WorkflowTaskSendSlackBlocksArgs{...} }
type WorkflowTaskSendSlackBlocksArrayInput interface {
	pulumi.Input

	ToWorkflowTaskSendSlackBlocksArrayOutput() WorkflowTaskSendSlackBlocksArrayOutput
	ToWorkflowTaskSendSlackBlocksArrayOutputWithContext(context.Context) WorkflowTaskSendSlackBlocksArrayOutput
}

type WorkflowTaskSendSlackBlocksArray []WorkflowTaskSendSlackBlocksInput

func (WorkflowTaskSendSlackBlocksArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskSendSlackBlocks)(nil)).Elem()
}

func (i WorkflowTaskSendSlackBlocksArray) ToWorkflowTaskSendSlackBlocksArrayOutput() WorkflowTaskSendSlackBlocksArrayOutput {
	return i.ToWorkflowTaskSendSlackBlocksArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskSendSlackBlocksArray) ToWorkflowTaskSendSlackBlocksArrayOutputWithContext(ctx context.Context) WorkflowTaskSendSlackBlocksArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSendSlackBlocksArrayOutput)
}

// WorkflowTaskSendSlackBlocksMapInput is an input type that accepts WorkflowTaskSendSlackBlocksMap and WorkflowTaskSendSlackBlocksMapOutput values.
// You can construct a concrete instance of `WorkflowTaskSendSlackBlocksMapInput` via:
//
//	WorkflowTaskSendSlackBlocksMap{ "key": WorkflowTaskSendSlackBlocksArgs{...} }
type WorkflowTaskSendSlackBlocksMapInput interface {
	pulumi.Input

	ToWorkflowTaskSendSlackBlocksMapOutput() WorkflowTaskSendSlackBlocksMapOutput
	ToWorkflowTaskSendSlackBlocksMapOutputWithContext(context.Context) WorkflowTaskSendSlackBlocksMapOutput
}

type WorkflowTaskSendSlackBlocksMap map[string]WorkflowTaskSendSlackBlocksInput

func (WorkflowTaskSendSlackBlocksMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskSendSlackBlocks)(nil)).Elem()
}

func (i WorkflowTaskSendSlackBlocksMap) ToWorkflowTaskSendSlackBlocksMapOutput() WorkflowTaskSendSlackBlocksMapOutput {
	return i.ToWorkflowTaskSendSlackBlocksMapOutputWithContext(context.Background())
}

func (i WorkflowTaskSendSlackBlocksMap) ToWorkflowTaskSendSlackBlocksMapOutputWithContext(ctx context.Context) WorkflowTaskSendSlackBlocksMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSendSlackBlocksMapOutput)
}

type WorkflowTaskSendSlackBlocksOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSendSlackBlocksOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskSendSlackBlocks)(nil)).Elem()
}

func (o WorkflowTaskSendSlackBlocksOutput) ToWorkflowTaskSendSlackBlocksOutput() WorkflowTaskSendSlackBlocksOutput {
	return o
}

func (o WorkflowTaskSendSlackBlocksOutput) ToWorkflowTaskSendSlackBlocksOutputWithContext(ctx context.Context) WorkflowTaskSendSlackBlocksOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskSendSlackBlocksOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskSendSlackBlocks) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskSendSlackBlocksOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskSendSlackBlocks) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskSendSlackBlocksOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskSendSlackBlocks) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskSendSlackBlocksOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskSendSlackBlocks) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskSendSlackBlocksOutput) TaskParams() WorkflowTaskSendSlackBlocksTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskSendSlackBlocks) WorkflowTaskSendSlackBlocksTaskParamsOutput { return v.TaskParams }).(WorkflowTaskSendSlackBlocksTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskSendSlackBlocksOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskSendSlackBlocks) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskSendSlackBlocksArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSendSlackBlocksArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskSendSlackBlocks)(nil)).Elem()
}

func (o WorkflowTaskSendSlackBlocksArrayOutput) ToWorkflowTaskSendSlackBlocksArrayOutput() WorkflowTaskSendSlackBlocksArrayOutput {
	return o
}

func (o WorkflowTaskSendSlackBlocksArrayOutput) ToWorkflowTaskSendSlackBlocksArrayOutputWithContext(ctx context.Context) WorkflowTaskSendSlackBlocksArrayOutput {
	return o
}

func (o WorkflowTaskSendSlackBlocksArrayOutput) Index(i pulumi.IntInput) WorkflowTaskSendSlackBlocksOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskSendSlackBlocks {
		return vs[0].([]*WorkflowTaskSendSlackBlocks)[vs[1].(int)]
	}).(WorkflowTaskSendSlackBlocksOutput)
}

type WorkflowTaskSendSlackBlocksMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSendSlackBlocksMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskSendSlackBlocks)(nil)).Elem()
}

func (o WorkflowTaskSendSlackBlocksMapOutput) ToWorkflowTaskSendSlackBlocksMapOutput() WorkflowTaskSendSlackBlocksMapOutput {
	return o
}

func (o WorkflowTaskSendSlackBlocksMapOutput) ToWorkflowTaskSendSlackBlocksMapOutputWithContext(ctx context.Context) WorkflowTaskSendSlackBlocksMapOutput {
	return o
}

func (o WorkflowTaskSendSlackBlocksMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskSendSlackBlocksOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskSendSlackBlocks {
		return vs[0].(map[string]*WorkflowTaskSendSlackBlocks)[vs[1].(string)]
	}).(WorkflowTaskSendSlackBlocksOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSendSlackBlocksInput)(nil)).Elem(), &WorkflowTaskSendSlackBlocks{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSendSlackBlocksArrayInput)(nil)).Elem(), WorkflowTaskSendSlackBlocksArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSendSlackBlocksMapInput)(nil)).Elem(), WorkflowTaskSendSlackBlocksMap{})
	pulumi.RegisterOutputType(WorkflowTaskSendSlackBlocksOutput{})
	pulumi.RegisterOutputType(WorkflowTaskSendSlackBlocksArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskSendSlackBlocksMapOutput{})
}
