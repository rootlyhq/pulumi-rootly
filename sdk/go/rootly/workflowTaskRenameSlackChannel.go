// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow renameSlackChannel task.
//
// ## Example Usage
type WorkflowTaskRenameSlackChannel struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskRenameSlackChannelTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskRenameSlackChannel registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskRenameSlackChannel(ctx *pulumi.Context,
	name string, args *WorkflowTaskRenameSlackChannelArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskRenameSlackChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskRenameSlackChannel
	err := ctx.RegisterResource("rootly:index/workflowTaskRenameSlackChannel:WorkflowTaskRenameSlackChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskRenameSlackChannel gets an existing WorkflowTaskRenameSlackChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskRenameSlackChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskRenameSlackChannelState, opts ...pulumi.ResourceOption) (*WorkflowTaskRenameSlackChannel, error) {
	var resource WorkflowTaskRenameSlackChannel
	err := ctx.ReadResource("rootly:index/workflowTaskRenameSlackChannel:WorkflowTaskRenameSlackChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskRenameSlackChannel resources.
type workflowTaskRenameSlackChannelState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskRenameSlackChannelTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskRenameSlackChannelState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskRenameSlackChannelTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskRenameSlackChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskRenameSlackChannelState)(nil)).Elem()
}

type workflowTaskRenameSlackChannelArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskRenameSlackChannelTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskRenameSlackChannel resource.
type WorkflowTaskRenameSlackChannelArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskRenameSlackChannelTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskRenameSlackChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskRenameSlackChannelArgs)(nil)).Elem()
}

type WorkflowTaskRenameSlackChannelInput interface {
	pulumi.Input

	ToWorkflowTaskRenameSlackChannelOutput() WorkflowTaskRenameSlackChannelOutput
	ToWorkflowTaskRenameSlackChannelOutputWithContext(ctx context.Context) WorkflowTaskRenameSlackChannelOutput
}

func (*WorkflowTaskRenameSlackChannel) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskRenameSlackChannel)(nil)).Elem()
}

func (i *WorkflowTaskRenameSlackChannel) ToWorkflowTaskRenameSlackChannelOutput() WorkflowTaskRenameSlackChannelOutput {
	return i.ToWorkflowTaskRenameSlackChannelOutputWithContext(context.Background())
}

func (i *WorkflowTaskRenameSlackChannel) ToWorkflowTaskRenameSlackChannelOutputWithContext(ctx context.Context) WorkflowTaskRenameSlackChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskRenameSlackChannelOutput)
}

// WorkflowTaskRenameSlackChannelArrayInput is an input type that accepts WorkflowTaskRenameSlackChannelArray and WorkflowTaskRenameSlackChannelArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskRenameSlackChannelArrayInput` via:
//
//	WorkflowTaskRenameSlackChannelArray{ WorkflowTaskRenameSlackChannelArgs{...} }
type WorkflowTaskRenameSlackChannelArrayInput interface {
	pulumi.Input

	ToWorkflowTaskRenameSlackChannelArrayOutput() WorkflowTaskRenameSlackChannelArrayOutput
	ToWorkflowTaskRenameSlackChannelArrayOutputWithContext(context.Context) WorkflowTaskRenameSlackChannelArrayOutput
}

type WorkflowTaskRenameSlackChannelArray []WorkflowTaskRenameSlackChannelInput

func (WorkflowTaskRenameSlackChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskRenameSlackChannel)(nil)).Elem()
}

func (i WorkflowTaskRenameSlackChannelArray) ToWorkflowTaskRenameSlackChannelArrayOutput() WorkflowTaskRenameSlackChannelArrayOutput {
	return i.ToWorkflowTaskRenameSlackChannelArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskRenameSlackChannelArray) ToWorkflowTaskRenameSlackChannelArrayOutputWithContext(ctx context.Context) WorkflowTaskRenameSlackChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskRenameSlackChannelArrayOutput)
}

// WorkflowTaskRenameSlackChannelMapInput is an input type that accepts WorkflowTaskRenameSlackChannelMap and WorkflowTaskRenameSlackChannelMapOutput values.
// You can construct a concrete instance of `WorkflowTaskRenameSlackChannelMapInput` via:
//
//	WorkflowTaskRenameSlackChannelMap{ "key": WorkflowTaskRenameSlackChannelArgs{...} }
type WorkflowTaskRenameSlackChannelMapInput interface {
	pulumi.Input

	ToWorkflowTaskRenameSlackChannelMapOutput() WorkflowTaskRenameSlackChannelMapOutput
	ToWorkflowTaskRenameSlackChannelMapOutputWithContext(context.Context) WorkflowTaskRenameSlackChannelMapOutput
}

type WorkflowTaskRenameSlackChannelMap map[string]WorkflowTaskRenameSlackChannelInput

func (WorkflowTaskRenameSlackChannelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskRenameSlackChannel)(nil)).Elem()
}

func (i WorkflowTaskRenameSlackChannelMap) ToWorkflowTaskRenameSlackChannelMapOutput() WorkflowTaskRenameSlackChannelMapOutput {
	return i.ToWorkflowTaskRenameSlackChannelMapOutputWithContext(context.Background())
}

func (i WorkflowTaskRenameSlackChannelMap) ToWorkflowTaskRenameSlackChannelMapOutputWithContext(ctx context.Context) WorkflowTaskRenameSlackChannelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskRenameSlackChannelMapOutput)
}

type WorkflowTaskRenameSlackChannelOutput struct{ *pulumi.OutputState }

func (WorkflowTaskRenameSlackChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskRenameSlackChannel)(nil)).Elem()
}

func (o WorkflowTaskRenameSlackChannelOutput) ToWorkflowTaskRenameSlackChannelOutput() WorkflowTaskRenameSlackChannelOutput {
	return o
}

func (o WorkflowTaskRenameSlackChannelOutput) ToWorkflowTaskRenameSlackChannelOutputWithContext(ctx context.Context) WorkflowTaskRenameSlackChannelOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskRenameSlackChannelOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskRenameSlackChannel) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskRenameSlackChannelOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskRenameSlackChannel) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskRenameSlackChannelOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskRenameSlackChannel) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskRenameSlackChannelOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskRenameSlackChannel) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskRenameSlackChannelOutput) TaskParams() WorkflowTaskRenameSlackChannelTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskRenameSlackChannel) WorkflowTaskRenameSlackChannelTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskRenameSlackChannelTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskRenameSlackChannelOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskRenameSlackChannel) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskRenameSlackChannelArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskRenameSlackChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskRenameSlackChannel)(nil)).Elem()
}

func (o WorkflowTaskRenameSlackChannelArrayOutput) ToWorkflowTaskRenameSlackChannelArrayOutput() WorkflowTaskRenameSlackChannelArrayOutput {
	return o
}

func (o WorkflowTaskRenameSlackChannelArrayOutput) ToWorkflowTaskRenameSlackChannelArrayOutputWithContext(ctx context.Context) WorkflowTaskRenameSlackChannelArrayOutput {
	return o
}

func (o WorkflowTaskRenameSlackChannelArrayOutput) Index(i pulumi.IntInput) WorkflowTaskRenameSlackChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskRenameSlackChannel {
		return vs[0].([]*WorkflowTaskRenameSlackChannel)[vs[1].(int)]
	}).(WorkflowTaskRenameSlackChannelOutput)
}

type WorkflowTaskRenameSlackChannelMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskRenameSlackChannelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskRenameSlackChannel)(nil)).Elem()
}

func (o WorkflowTaskRenameSlackChannelMapOutput) ToWorkflowTaskRenameSlackChannelMapOutput() WorkflowTaskRenameSlackChannelMapOutput {
	return o
}

func (o WorkflowTaskRenameSlackChannelMapOutput) ToWorkflowTaskRenameSlackChannelMapOutputWithContext(ctx context.Context) WorkflowTaskRenameSlackChannelMapOutput {
	return o
}

func (o WorkflowTaskRenameSlackChannelMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskRenameSlackChannelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskRenameSlackChannel {
		return vs[0].(map[string]*WorkflowTaskRenameSlackChannel)[vs[1].(string)]
	}).(WorkflowTaskRenameSlackChannelOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskRenameSlackChannelInput)(nil)).Elem(), &WorkflowTaskRenameSlackChannel{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskRenameSlackChannelArrayInput)(nil)).Elem(), WorkflowTaskRenameSlackChannelArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskRenameSlackChannelMapInput)(nil)).Elem(), WorkflowTaskRenameSlackChannelMap{})
	pulumi.RegisterOutputType(WorkflowTaskRenameSlackChannelOutput{})
	pulumi.RegisterOutputType(WorkflowTaskRenameSlackChannelArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskRenameSlackChannelMapOutput{})
}
