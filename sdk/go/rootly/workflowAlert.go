// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// ## Example Usage
type WorkflowAlert struct {
	pulumi.CustomResourceState

	CauseIds pulumi.StringArrayOutput `pulumi:"causeIds"`
	// Workflow command
	Command pulumi.StringOutput `pulumi:"command"`
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled pulumi.BoolOutput `pulumi:"commandFeedbackEnabled"`
	// The description of the workflow
	Description      pulumi.StringOutput      `pulumi:"description"`
	Enabled          pulumi.BoolPtrOutput     `pulumi:"enabled"`
	EnvironmentIds   pulumi.StringArrayOutput `pulumi:"environmentIds"`
	FunctionalityIds pulumi.StringArrayOutput `pulumi:"functionalityIds"`
	GroupIds         pulumi.StringArrayOutput `pulumi:"groupIds"`
	IncidentRoleIds  pulumi.StringArrayOutput `pulumi:"incidentRoleIds"`
	IncidentTypeIds  pulumi.StringArrayOutput `pulumi:"incidentTypeIds"`
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked pulumi.BoolOutput `pulumi:"locked"`
	// The title of the workflow
	Name pulumi.StringOutput `pulumi:"name"`
	// The order which the workflow should run with other workflows.
	Position pulumi.IntOutput `pulumi:"position"`
	// Repeat workflow every duration
	RepeatEveryDuration pulumi.StringOutput `pulumi:"repeatEveryDuration"`
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   pulumi.StringArrayOutput `pulumi:"repeatOns"`
	ServiceIds  pulumi.StringArrayOutput `pulumi:"serviceIds"`
	SeverityIds pulumi.StringArrayOutput `pulumi:"severityIds"`
	// The slug of the workflow
	Slug          pulumi.StringOutput              `pulumi:"slug"`
	TriggerParams WorkflowAlertTriggerParamsOutput `pulumi:"triggerParams"`
	// Wait this duration before executing
	Wait pulumi.StringOutput `pulumi:"wait"`
	// The group this workflow belongs to.
	WorkflowGroupId pulumi.StringOutput `pulumi:"workflowGroupId"`
}

// NewWorkflowAlert registers a new resource with the given unique name, arguments, and options.
func NewWorkflowAlert(ctx *pulumi.Context,
	name string, args *WorkflowAlertArgs, opts ...pulumi.ResourceOption) (*WorkflowAlert, error) {
	if args == nil {
		args = &WorkflowAlertArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowAlert
	err := ctx.RegisterResource("rootly:index/workflowAlert:WorkflowAlert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowAlert gets an existing WorkflowAlert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowAlert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowAlertState, opts ...pulumi.ResourceOption) (*WorkflowAlert, error) {
	var resource WorkflowAlert
	err := ctx.ReadResource("rootly:index/workflowAlert:WorkflowAlert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowAlert resources.
type workflowAlertState struct {
	CauseIds []string `pulumi:"causeIds"`
	// Workflow command
	Command *string `pulumi:"command"`
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled *bool `pulumi:"commandFeedbackEnabled"`
	// The description of the workflow
	Description      *string  `pulumi:"description"`
	Enabled          *bool    `pulumi:"enabled"`
	EnvironmentIds   []string `pulumi:"environmentIds"`
	FunctionalityIds []string `pulumi:"functionalityIds"`
	GroupIds         []string `pulumi:"groupIds"`
	IncidentRoleIds  []string `pulumi:"incidentRoleIds"`
	IncidentTypeIds  []string `pulumi:"incidentTypeIds"`
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked *bool `pulumi:"locked"`
	// The title of the workflow
	Name *string `pulumi:"name"`
	// The order which the workflow should run with other workflows.
	Position *int `pulumi:"position"`
	// Repeat workflow every duration
	RepeatEveryDuration *string `pulumi:"repeatEveryDuration"`
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   []string `pulumi:"repeatOns"`
	ServiceIds  []string `pulumi:"serviceIds"`
	SeverityIds []string `pulumi:"severityIds"`
	// The slug of the workflow
	Slug          *string                     `pulumi:"slug"`
	TriggerParams *WorkflowAlertTriggerParams `pulumi:"triggerParams"`
	// Wait this duration before executing
	Wait *string `pulumi:"wait"`
	// The group this workflow belongs to.
	WorkflowGroupId *string `pulumi:"workflowGroupId"`
}

type WorkflowAlertState struct {
	CauseIds pulumi.StringArrayInput
	// Workflow command
	Command pulumi.StringPtrInput
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled pulumi.BoolPtrInput
	// The description of the workflow
	Description      pulumi.StringPtrInput
	Enabled          pulumi.BoolPtrInput
	EnvironmentIds   pulumi.StringArrayInput
	FunctionalityIds pulumi.StringArrayInput
	GroupIds         pulumi.StringArrayInput
	IncidentRoleIds  pulumi.StringArrayInput
	IncidentTypeIds  pulumi.StringArrayInput
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked pulumi.BoolPtrInput
	// The title of the workflow
	Name pulumi.StringPtrInput
	// The order which the workflow should run with other workflows.
	Position pulumi.IntPtrInput
	// Repeat workflow every duration
	RepeatEveryDuration pulumi.StringPtrInput
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   pulumi.StringArrayInput
	ServiceIds  pulumi.StringArrayInput
	SeverityIds pulumi.StringArrayInput
	// The slug of the workflow
	Slug          pulumi.StringPtrInput
	TriggerParams WorkflowAlertTriggerParamsPtrInput
	// Wait this duration before executing
	Wait pulumi.StringPtrInput
	// The group this workflow belongs to.
	WorkflowGroupId pulumi.StringPtrInput
}

func (WorkflowAlertState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowAlertState)(nil)).Elem()
}

type workflowAlertArgs struct {
	CauseIds []string `pulumi:"causeIds"`
	// Workflow command
	Command *string `pulumi:"command"`
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled *bool `pulumi:"commandFeedbackEnabled"`
	// The description of the workflow
	Description      *string  `pulumi:"description"`
	Enabled          *bool    `pulumi:"enabled"`
	EnvironmentIds   []string `pulumi:"environmentIds"`
	FunctionalityIds []string `pulumi:"functionalityIds"`
	GroupIds         []string `pulumi:"groupIds"`
	IncidentRoleIds  []string `pulumi:"incidentRoleIds"`
	IncidentTypeIds  []string `pulumi:"incidentTypeIds"`
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked *bool `pulumi:"locked"`
	// The title of the workflow
	Name *string `pulumi:"name"`
	// The order which the workflow should run with other workflows.
	Position *int `pulumi:"position"`
	// Repeat workflow every duration
	RepeatEveryDuration *string `pulumi:"repeatEveryDuration"`
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   []string `pulumi:"repeatOns"`
	ServiceIds  []string `pulumi:"serviceIds"`
	SeverityIds []string `pulumi:"severityIds"`
	// The slug of the workflow
	Slug          *string                     `pulumi:"slug"`
	TriggerParams *WorkflowAlertTriggerParams `pulumi:"triggerParams"`
	// Wait this duration before executing
	Wait *string `pulumi:"wait"`
	// The group this workflow belongs to.
	WorkflowGroupId *string `pulumi:"workflowGroupId"`
}

// The set of arguments for constructing a WorkflowAlert resource.
type WorkflowAlertArgs struct {
	CauseIds pulumi.StringArrayInput
	// Workflow command
	Command pulumi.StringPtrInput
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled pulumi.BoolPtrInput
	// The description of the workflow
	Description      pulumi.StringPtrInput
	Enabled          pulumi.BoolPtrInput
	EnvironmentIds   pulumi.StringArrayInput
	FunctionalityIds pulumi.StringArrayInput
	GroupIds         pulumi.StringArrayInput
	IncidentRoleIds  pulumi.StringArrayInput
	IncidentTypeIds  pulumi.StringArrayInput
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked pulumi.BoolPtrInput
	// The title of the workflow
	Name pulumi.StringPtrInput
	// The order which the workflow should run with other workflows.
	Position pulumi.IntPtrInput
	// Repeat workflow every duration
	RepeatEveryDuration pulumi.StringPtrInput
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   pulumi.StringArrayInput
	ServiceIds  pulumi.StringArrayInput
	SeverityIds pulumi.StringArrayInput
	// The slug of the workflow
	Slug          pulumi.StringPtrInput
	TriggerParams WorkflowAlertTriggerParamsPtrInput
	// Wait this duration before executing
	Wait pulumi.StringPtrInput
	// The group this workflow belongs to.
	WorkflowGroupId pulumi.StringPtrInput
}

func (WorkflowAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowAlertArgs)(nil)).Elem()
}

type WorkflowAlertInput interface {
	pulumi.Input

	ToWorkflowAlertOutput() WorkflowAlertOutput
	ToWorkflowAlertOutputWithContext(ctx context.Context) WorkflowAlertOutput
}

func (*WorkflowAlert) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowAlert)(nil)).Elem()
}

func (i *WorkflowAlert) ToWorkflowAlertOutput() WorkflowAlertOutput {
	return i.ToWorkflowAlertOutputWithContext(context.Background())
}

func (i *WorkflowAlert) ToWorkflowAlertOutputWithContext(ctx context.Context) WorkflowAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowAlertOutput)
}

// WorkflowAlertArrayInput is an input type that accepts WorkflowAlertArray and WorkflowAlertArrayOutput values.
// You can construct a concrete instance of `WorkflowAlertArrayInput` via:
//
//	WorkflowAlertArray{ WorkflowAlertArgs{...} }
type WorkflowAlertArrayInput interface {
	pulumi.Input

	ToWorkflowAlertArrayOutput() WorkflowAlertArrayOutput
	ToWorkflowAlertArrayOutputWithContext(context.Context) WorkflowAlertArrayOutput
}

type WorkflowAlertArray []WorkflowAlertInput

func (WorkflowAlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowAlert)(nil)).Elem()
}

func (i WorkflowAlertArray) ToWorkflowAlertArrayOutput() WorkflowAlertArrayOutput {
	return i.ToWorkflowAlertArrayOutputWithContext(context.Background())
}

func (i WorkflowAlertArray) ToWorkflowAlertArrayOutputWithContext(ctx context.Context) WorkflowAlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowAlertArrayOutput)
}

// WorkflowAlertMapInput is an input type that accepts WorkflowAlertMap and WorkflowAlertMapOutput values.
// You can construct a concrete instance of `WorkflowAlertMapInput` via:
//
//	WorkflowAlertMap{ "key": WorkflowAlertArgs{...} }
type WorkflowAlertMapInput interface {
	pulumi.Input

	ToWorkflowAlertMapOutput() WorkflowAlertMapOutput
	ToWorkflowAlertMapOutputWithContext(context.Context) WorkflowAlertMapOutput
}

type WorkflowAlertMap map[string]WorkflowAlertInput

func (WorkflowAlertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowAlert)(nil)).Elem()
}

func (i WorkflowAlertMap) ToWorkflowAlertMapOutput() WorkflowAlertMapOutput {
	return i.ToWorkflowAlertMapOutputWithContext(context.Background())
}

func (i WorkflowAlertMap) ToWorkflowAlertMapOutputWithContext(ctx context.Context) WorkflowAlertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowAlertMapOutput)
}

type WorkflowAlertOutput struct{ *pulumi.OutputState }

func (WorkflowAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowAlert)(nil)).Elem()
}

func (o WorkflowAlertOutput) ToWorkflowAlertOutput() WorkflowAlertOutput {
	return o
}

func (o WorkflowAlertOutput) ToWorkflowAlertOutputWithContext(ctx context.Context) WorkflowAlertOutput {
	return o
}

func (o WorkflowAlertOutput) CauseIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.StringArrayOutput { return v.CauseIds }).(pulumi.StringArrayOutput)
}

// Workflow command
func (o WorkflowAlertOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.StringOutput { return v.Command }).(pulumi.StringOutput)
}

// This will notify you back when the workflow is starting. Value must be one of true or false
func (o WorkflowAlertOutput) CommandFeedbackEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.BoolOutput { return v.CommandFeedbackEnabled }).(pulumi.BoolOutput)
}

// The description of the workflow
func (o WorkflowAlertOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o WorkflowAlertOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o WorkflowAlertOutput) EnvironmentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.StringArrayOutput { return v.EnvironmentIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowAlertOutput) FunctionalityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.StringArrayOutput { return v.FunctionalityIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowAlertOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.StringArrayOutput { return v.GroupIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowAlertOutput) IncidentRoleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.StringArrayOutput { return v.IncidentRoleIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowAlertOutput) IncidentTypeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.StringArrayOutput { return v.IncidentTypeIds }).(pulumi.StringArrayOutput)
}

// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
func (o WorkflowAlertOutput) Locked() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.BoolOutput { return v.Locked }).(pulumi.BoolOutput)
}

// The title of the workflow
func (o WorkflowAlertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The order which the workflow should run with other workflows.
func (o WorkflowAlertOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Repeat workflow every duration
func (o WorkflowAlertOutput) RepeatEveryDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.StringOutput { return v.RepeatEveryDuration }).(pulumi.StringOutput)
}

// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
func (o WorkflowAlertOutput) RepeatOns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.StringArrayOutput { return v.RepeatOns }).(pulumi.StringArrayOutput)
}

func (o WorkflowAlertOutput) ServiceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.StringArrayOutput { return v.ServiceIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowAlertOutput) SeverityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.StringArrayOutput { return v.SeverityIds }).(pulumi.StringArrayOutput)
}

// The slug of the workflow
func (o WorkflowAlertOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o WorkflowAlertOutput) TriggerParams() WorkflowAlertTriggerParamsOutput {
	return o.ApplyT(func(v *WorkflowAlert) WorkflowAlertTriggerParamsOutput { return v.TriggerParams }).(WorkflowAlertTriggerParamsOutput)
}

// Wait this duration before executing
func (o WorkflowAlertOutput) Wait() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.StringOutput { return v.Wait }).(pulumi.StringOutput)
}

// The group this workflow belongs to.
func (o WorkflowAlertOutput) WorkflowGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowAlert) pulumi.StringOutput { return v.WorkflowGroupId }).(pulumi.StringOutput)
}

type WorkflowAlertArrayOutput struct{ *pulumi.OutputState }

func (WorkflowAlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowAlert)(nil)).Elem()
}

func (o WorkflowAlertArrayOutput) ToWorkflowAlertArrayOutput() WorkflowAlertArrayOutput {
	return o
}

func (o WorkflowAlertArrayOutput) ToWorkflowAlertArrayOutputWithContext(ctx context.Context) WorkflowAlertArrayOutput {
	return o
}

func (o WorkflowAlertArrayOutput) Index(i pulumi.IntInput) WorkflowAlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowAlert {
		return vs[0].([]*WorkflowAlert)[vs[1].(int)]
	}).(WorkflowAlertOutput)
}

type WorkflowAlertMapOutput struct{ *pulumi.OutputState }

func (WorkflowAlertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowAlert)(nil)).Elem()
}

func (o WorkflowAlertMapOutput) ToWorkflowAlertMapOutput() WorkflowAlertMapOutput {
	return o
}

func (o WorkflowAlertMapOutput) ToWorkflowAlertMapOutputWithContext(ctx context.Context) WorkflowAlertMapOutput {
	return o
}

func (o WorkflowAlertMapOutput) MapIndex(k pulumi.StringInput) WorkflowAlertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowAlert {
		return vs[0].(map[string]*WorkflowAlert)[vs[1].(string)]
	}).(WorkflowAlertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowAlertInput)(nil)).Elem(), &WorkflowAlert{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowAlertArrayInput)(nil)).Elem(), WorkflowAlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowAlertMapInput)(nil)).Elem(), WorkflowAlertMap{})
	pulumi.RegisterOutputType(WorkflowAlertOutput{})
	pulumi.RegisterOutputType(WorkflowAlertArrayOutput{})
	pulumi.RegisterOutputType(WorkflowAlertMapOutput{})
}
