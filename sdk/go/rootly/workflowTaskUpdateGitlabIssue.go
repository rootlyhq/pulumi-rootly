// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow updateGitlabIssue task.
type WorkflowTaskUpdateGitlabIssue struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateGitlabIssueTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskUpdateGitlabIssue registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskUpdateGitlabIssue(ctx *pulumi.Context,
	name string, args *WorkflowTaskUpdateGitlabIssueArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateGitlabIssue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskUpdateGitlabIssue
	err := ctx.RegisterResource("rootly:index/workflowTaskUpdateGitlabIssue:WorkflowTaskUpdateGitlabIssue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskUpdateGitlabIssue gets an existing WorkflowTaskUpdateGitlabIssue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskUpdateGitlabIssue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskUpdateGitlabIssueState, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateGitlabIssue, error) {
	var resource WorkflowTaskUpdateGitlabIssue
	err := ctx.ReadResource("rootly:index/workflowTaskUpdateGitlabIssue:WorkflowTaskUpdateGitlabIssue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskUpdateGitlabIssue resources.
type workflowTaskUpdateGitlabIssueState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskUpdateGitlabIssueTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskUpdateGitlabIssueState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateGitlabIssueTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskUpdateGitlabIssueState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateGitlabIssueState)(nil)).Elem()
}

type workflowTaskUpdateGitlabIssueArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateGitlabIssueTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskUpdateGitlabIssue resource.
type WorkflowTaskUpdateGitlabIssueArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateGitlabIssueTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskUpdateGitlabIssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateGitlabIssueArgs)(nil)).Elem()
}

type WorkflowTaskUpdateGitlabIssueInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateGitlabIssueOutput() WorkflowTaskUpdateGitlabIssueOutput
	ToWorkflowTaskUpdateGitlabIssueOutputWithContext(ctx context.Context) WorkflowTaskUpdateGitlabIssueOutput
}

func (*WorkflowTaskUpdateGitlabIssue) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateGitlabIssue)(nil)).Elem()
}

func (i *WorkflowTaskUpdateGitlabIssue) ToWorkflowTaskUpdateGitlabIssueOutput() WorkflowTaskUpdateGitlabIssueOutput {
	return i.ToWorkflowTaskUpdateGitlabIssueOutputWithContext(context.Background())
}

func (i *WorkflowTaskUpdateGitlabIssue) ToWorkflowTaskUpdateGitlabIssueOutputWithContext(ctx context.Context) WorkflowTaskUpdateGitlabIssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateGitlabIssueOutput)
}

// WorkflowTaskUpdateGitlabIssueArrayInput is an input type that accepts WorkflowTaskUpdateGitlabIssueArray and WorkflowTaskUpdateGitlabIssueArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateGitlabIssueArrayInput` via:
//
//	WorkflowTaskUpdateGitlabIssueArray{ WorkflowTaskUpdateGitlabIssueArgs{...} }
type WorkflowTaskUpdateGitlabIssueArrayInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateGitlabIssueArrayOutput() WorkflowTaskUpdateGitlabIssueArrayOutput
	ToWorkflowTaskUpdateGitlabIssueArrayOutputWithContext(context.Context) WorkflowTaskUpdateGitlabIssueArrayOutput
}

type WorkflowTaskUpdateGitlabIssueArray []WorkflowTaskUpdateGitlabIssueInput

func (WorkflowTaskUpdateGitlabIssueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateGitlabIssue)(nil)).Elem()
}

func (i WorkflowTaskUpdateGitlabIssueArray) ToWorkflowTaskUpdateGitlabIssueArrayOutput() WorkflowTaskUpdateGitlabIssueArrayOutput {
	return i.ToWorkflowTaskUpdateGitlabIssueArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateGitlabIssueArray) ToWorkflowTaskUpdateGitlabIssueArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateGitlabIssueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateGitlabIssueArrayOutput)
}

// WorkflowTaskUpdateGitlabIssueMapInput is an input type that accepts WorkflowTaskUpdateGitlabIssueMap and WorkflowTaskUpdateGitlabIssueMapOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateGitlabIssueMapInput` via:
//
//	WorkflowTaskUpdateGitlabIssueMap{ "key": WorkflowTaskUpdateGitlabIssueArgs{...} }
type WorkflowTaskUpdateGitlabIssueMapInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateGitlabIssueMapOutput() WorkflowTaskUpdateGitlabIssueMapOutput
	ToWorkflowTaskUpdateGitlabIssueMapOutputWithContext(context.Context) WorkflowTaskUpdateGitlabIssueMapOutput
}

type WorkflowTaskUpdateGitlabIssueMap map[string]WorkflowTaskUpdateGitlabIssueInput

func (WorkflowTaskUpdateGitlabIssueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateGitlabIssue)(nil)).Elem()
}

func (i WorkflowTaskUpdateGitlabIssueMap) ToWorkflowTaskUpdateGitlabIssueMapOutput() WorkflowTaskUpdateGitlabIssueMapOutput {
	return i.ToWorkflowTaskUpdateGitlabIssueMapOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateGitlabIssueMap) ToWorkflowTaskUpdateGitlabIssueMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateGitlabIssueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateGitlabIssueMapOutput)
}

type WorkflowTaskUpdateGitlabIssueOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateGitlabIssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateGitlabIssue)(nil)).Elem()
}

func (o WorkflowTaskUpdateGitlabIssueOutput) ToWorkflowTaskUpdateGitlabIssueOutput() WorkflowTaskUpdateGitlabIssueOutput {
	return o
}

func (o WorkflowTaskUpdateGitlabIssueOutput) ToWorkflowTaskUpdateGitlabIssueOutputWithContext(ctx context.Context) WorkflowTaskUpdateGitlabIssueOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskUpdateGitlabIssueOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateGitlabIssue) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskUpdateGitlabIssueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateGitlabIssue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskUpdateGitlabIssueOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateGitlabIssue) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskUpdateGitlabIssueOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateGitlabIssue) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskUpdateGitlabIssueOutput) TaskParams() WorkflowTaskUpdateGitlabIssueTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateGitlabIssue) WorkflowTaskUpdateGitlabIssueTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskUpdateGitlabIssueTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskUpdateGitlabIssueOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateGitlabIssue) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskUpdateGitlabIssueArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateGitlabIssueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateGitlabIssue)(nil)).Elem()
}

func (o WorkflowTaskUpdateGitlabIssueArrayOutput) ToWorkflowTaskUpdateGitlabIssueArrayOutput() WorkflowTaskUpdateGitlabIssueArrayOutput {
	return o
}

func (o WorkflowTaskUpdateGitlabIssueArrayOutput) ToWorkflowTaskUpdateGitlabIssueArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateGitlabIssueArrayOutput {
	return o
}

func (o WorkflowTaskUpdateGitlabIssueArrayOutput) Index(i pulumi.IntInput) WorkflowTaskUpdateGitlabIssueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateGitlabIssue {
		return vs[0].([]*WorkflowTaskUpdateGitlabIssue)[vs[1].(int)]
	}).(WorkflowTaskUpdateGitlabIssueOutput)
}

type WorkflowTaskUpdateGitlabIssueMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateGitlabIssueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateGitlabIssue)(nil)).Elem()
}

func (o WorkflowTaskUpdateGitlabIssueMapOutput) ToWorkflowTaskUpdateGitlabIssueMapOutput() WorkflowTaskUpdateGitlabIssueMapOutput {
	return o
}

func (o WorkflowTaskUpdateGitlabIssueMapOutput) ToWorkflowTaskUpdateGitlabIssueMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateGitlabIssueMapOutput {
	return o
}

func (o WorkflowTaskUpdateGitlabIssueMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskUpdateGitlabIssueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateGitlabIssue {
		return vs[0].(map[string]*WorkflowTaskUpdateGitlabIssue)[vs[1].(string)]
	}).(WorkflowTaskUpdateGitlabIssueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateGitlabIssueInput)(nil)).Elem(), &WorkflowTaskUpdateGitlabIssue{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateGitlabIssueArrayInput)(nil)).Elem(), WorkflowTaskUpdateGitlabIssueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateGitlabIssueMapInput)(nil)).Elem(), WorkflowTaskUpdateGitlabIssueMap{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateGitlabIssueOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateGitlabIssueArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateGitlabIssueMapOutput{})
}
