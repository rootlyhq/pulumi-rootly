// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow updateZendeskTicket task.
type WorkflowTaskUpdateZendeskTicket struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateZendeskTicketTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskUpdateZendeskTicket registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskUpdateZendeskTicket(ctx *pulumi.Context,
	name string, args *WorkflowTaskUpdateZendeskTicketArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateZendeskTicket, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskUpdateZendeskTicket
	err := ctx.RegisterResource("rootly:index/workflowTaskUpdateZendeskTicket:WorkflowTaskUpdateZendeskTicket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskUpdateZendeskTicket gets an existing WorkflowTaskUpdateZendeskTicket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskUpdateZendeskTicket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskUpdateZendeskTicketState, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateZendeskTicket, error) {
	var resource WorkflowTaskUpdateZendeskTicket
	err := ctx.ReadResource("rootly:index/workflowTaskUpdateZendeskTicket:WorkflowTaskUpdateZendeskTicket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskUpdateZendeskTicket resources.
type workflowTaskUpdateZendeskTicketState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskUpdateZendeskTicketTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskUpdateZendeskTicketState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateZendeskTicketTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskUpdateZendeskTicketState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateZendeskTicketState)(nil)).Elem()
}

type workflowTaskUpdateZendeskTicketArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateZendeskTicketTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskUpdateZendeskTicket resource.
type WorkflowTaskUpdateZendeskTicketArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateZendeskTicketTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskUpdateZendeskTicketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateZendeskTicketArgs)(nil)).Elem()
}

type WorkflowTaskUpdateZendeskTicketInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateZendeskTicketOutput() WorkflowTaskUpdateZendeskTicketOutput
	ToWorkflowTaskUpdateZendeskTicketOutputWithContext(ctx context.Context) WorkflowTaskUpdateZendeskTicketOutput
}

func (*WorkflowTaskUpdateZendeskTicket) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateZendeskTicket)(nil)).Elem()
}

func (i *WorkflowTaskUpdateZendeskTicket) ToWorkflowTaskUpdateZendeskTicketOutput() WorkflowTaskUpdateZendeskTicketOutput {
	return i.ToWorkflowTaskUpdateZendeskTicketOutputWithContext(context.Background())
}

func (i *WorkflowTaskUpdateZendeskTicket) ToWorkflowTaskUpdateZendeskTicketOutputWithContext(ctx context.Context) WorkflowTaskUpdateZendeskTicketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateZendeskTicketOutput)
}

// WorkflowTaskUpdateZendeskTicketArrayInput is an input type that accepts WorkflowTaskUpdateZendeskTicketArray and WorkflowTaskUpdateZendeskTicketArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateZendeskTicketArrayInput` via:
//
//	WorkflowTaskUpdateZendeskTicketArray{ WorkflowTaskUpdateZendeskTicketArgs{...} }
type WorkflowTaskUpdateZendeskTicketArrayInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateZendeskTicketArrayOutput() WorkflowTaskUpdateZendeskTicketArrayOutput
	ToWorkflowTaskUpdateZendeskTicketArrayOutputWithContext(context.Context) WorkflowTaskUpdateZendeskTicketArrayOutput
}

type WorkflowTaskUpdateZendeskTicketArray []WorkflowTaskUpdateZendeskTicketInput

func (WorkflowTaskUpdateZendeskTicketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateZendeskTicket)(nil)).Elem()
}

func (i WorkflowTaskUpdateZendeskTicketArray) ToWorkflowTaskUpdateZendeskTicketArrayOutput() WorkflowTaskUpdateZendeskTicketArrayOutput {
	return i.ToWorkflowTaskUpdateZendeskTicketArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateZendeskTicketArray) ToWorkflowTaskUpdateZendeskTicketArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateZendeskTicketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateZendeskTicketArrayOutput)
}

// WorkflowTaskUpdateZendeskTicketMapInput is an input type that accepts WorkflowTaskUpdateZendeskTicketMap and WorkflowTaskUpdateZendeskTicketMapOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateZendeskTicketMapInput` via:
//
//	WorkflowTaskUpdateZendeskTicketMap{ "key": WorkflowTaskUpdateZendeskTicketArgs{...} }
type WorkflowTaskUpdateZendeskTicketMapInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateZendeskTicketMapOutput() WorkflowTaskUpdateZendeskTicketMapOutput
	ToWorkflowTaskUpdateZendeskTicketMapOutputWithContext(context.Context) WorkflowTaskUpdateZendeskTicketMapOutput
}

type WorkflowTaskUpdateZendeskTicketMap map[string]WorkflowTaskUpdateZendeskTicketInput

func (WorkflowTaskUpdateZendeskTicketMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateZendeskTicket)(nil)).Elem()
}

func (i WorkflowTaskUpdateZendeskTicketMap) ToWorkflowTaskUpdateZendeskTicketMapOutput() WorkflowTaskUpdateZendeskTicketMapOutput {
	return i.ToWorkflowTaskUpdateZendeskTicketMapOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateZendeskTicketMap) ToWorkflowTaskUpdateZendeskTicketMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateZendeskTicketMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateZendeskTicketMapOutput)
}

type WorkflowTaskUpdateZendeskTicketOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateZendeskTicketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateZendeskTicket)(nil)).Elem()
}

func (o WorkflowTaskUpdateZendeskTicketOutput) ToWorkflowTaskUpdateZendeskTicketOutput() WorkflowTaskUpdateZendeskTicketOutput {
	return o
}

func (o WorkflowTaskUpdateZendeskTicketOutput) ToWorkflowTaskUpdateZendeskTicketOutputWithContext(ctx context.Context) WorkflowTaskUpdateZendeskTicketOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskUpdateZendeskTicketOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateZendeskTicket) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskUpdateZendeskTicketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateZendeskTicket) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskUpdateZendeskTicketOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateZendeskTicket) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskUpdateZendeskTicketOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateZendeskTicket) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskUpdateZendeskTicketOutput) TaskParams() WorkflowTaskUpdateZendeskTicketTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateZendeskTicket) WorkflowTaskUpdateZendeskTicketTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskUpdateZendeskTicketTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskUpdateZendeskTicketOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateZendeskTicket) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskUpdateZendeskTicketArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateZendeskTicketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateZendeskTicket)(nil)).Elem()
}

func (o WorkflowTaskUpdateZendeskTicketArrayOutput) ToWorkflowTaskUpdateZendeskTicketArrayOutput() WorkflowTaskUpdateZendeskTicketArrayOutput {
	return o
}

func (o WorkflowTaskUpdateZendeskTicketArrayOutput) ToWorkflowTaskUpdateZendeskTicketArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateZendeskTicketArrayOutput {
	return o
}

func (o WorkflowTaskUpdateZendeskTicketArrayOutput) Index(i pulumi.IntInput) WorkflowTaskUpdateZendeskTicketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateZendeskTicket {
		return vs[0].([]*WorkflowTaskUpdateZendeskTicket)[vs[1].(int)]
	}).(WorkflowTaskUpdateZendeskTicketOutput)
}

type WorkflowTaskUpdateZendeskTicketMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateZendeskTicketMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateZendeskTicket)(nil)).Elem()
}

func (o WorkflowTaskUpdateZendeskTicketMapOutput) ToWorkflowTaskUpdateZendeskTicketMapOutput() WorkflowTaskUpdateZendeskTicketMapOutput {
	return o
}

func (o WorkflowTaskUpdateZendeskTicketMapOutput) ToWorkflowTaskUpdateZendeskTicketMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateZendeskTicketMapOutput {
	return o
}

func (o WorkflowTaskUpdateZendeskTicketMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskUpdateZendeskTicketOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateZendeskTicket {
		return vs[0].(map[string]*WorkflowTaskUpdateZendeskTicket)[vs[1].(string)]
	}).(WorkflowTaskUpdateZendeskTicketOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateZendeskTicketInput)(nil)).Elem(), &WorkflowTaskUpdateZendeskTicket{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateZendeskTicketArrayInput)(nil)).Elem(), WorkflowTaskUpdateZendeskTicketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateZendeskTicketMapInput)(nil)).Elem(), WorkflowTaskUpdateZendeskTicketMap{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateZendeskTicketOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateZendeskTicketArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateZendeskTicketMapOutput{})
}
