// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createLinearSubtaskIssue task.
type WorkflowTaskCreateLinearSubtaskIssue struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateLinearSubtaskIssueTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreateLinearSubtaskIssue registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreateLinearSubtaskIssue(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreateLinearSubtaskIssueArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateLinearSubtaskIssue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreateLinearSubtaskIssue
	err := ctx.RegisterResource("rootly:index/workflowTaskCreateLinearSubtaskIssue:WorkflowTaskCreateLinearSubtaskIssue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreateLinearSubtaskIssue gets an existing WorkflowTaskCreateLinearSubtaskIssue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreateLinearSubtaskIssue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreateLinearSubtaskIssueState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateLinearSubtaskIssue, error) {
	var resource WorkflowTaskCreateLinearSubtaskIssue
	err := ctx.ReadResource("rootly:index/workflowTaskCreateLinearSubtaskIssue:WorkflowTaskCreateLinearSubtaskIssue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreateLinearSubtaskIssue resources.
type workflowTaskCreateLinearSubtaskIssueState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreateLinearSubtaskIssueTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreateLinearSubtaskIssueState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateLinearSubtaskIssueTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreateLinearSubtaskIssueState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateLinearSubtaskIssueState)(nil)).Elem()
}

type workflowTaskCreateLinearSubtaskIssueArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateLinearSubtaskIssueTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreateLinearSubtaskIssue resource.
type WorkflowTaskCreateLinearSubtaskIssueArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateLinearSubtaskIssueTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreateLinearSubtaskIssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateLinearSubtaskIssueArgs)(nil)).Elem()
}

type WorkflowTaskCreateLinearSubtaskIssueInput interface {
	pulumi.Input

	ToWorkflowTaskCreateLinearSubtaskIssueOutput() WorkflowTaskCreateLinearSubtaskIssueOutput
	ToWorkflowTaskCreateLinearSubtaskIssueOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearSubtaskIssueOutput
}

func (*WorkflowTaskCreateLinearSubtaskIssue) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateLinearSubtaskIssue)(nil)).Elem()
}

func (i *WorkflowTaskCreateLinearSubtaskIssue) ToWorkflowTaskCreateLinearSubtaskIssueOutput() WorkflowTaskCreateLinearSubtaskIssueOutput {
	return i.ToWorkflowTaskCreateLinearSubtaskIssueOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreateLinearSubtaskIssue) ToWorkflowTaskCreateLinearSubtaskIssueOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearSubtaskIssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateLinearSubtaskIssueOutput)
}

// WorkflowTaskCreateLinearSubtaskIssueArrayInput is an input type that accepts WorkflowTaskCreateLinearSubtaskIssueArray and WorkflowTaskCreateLinearSubtaskIssueArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateLinearSubtaskIssueArrayInput` via:
//
//	WorkflowTaskCreateLinearSubtaskIssueArray{ WorkflowTaskCreateLinearSubtaskIssueArgs{...} }
type WorkflowTaskCreateLinearSubtaskIssueArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreateLinearSubtaskIssueArrayOutput() WorkflowTaskCreateLinearSubtaskIssueArrayOutput
	ToWorkflowTaskCreateLinearSubtaskIssueArrayOutputWithContext(context.Context) WorkflowTaskCreateLinearSubtaskIssueArrayOutput
}

type WorkflowTaskCreateLinearSubtaskIssueArray []WorkflowTaskCreateLinearSubtaskIssueInput

func (WorkflowTaskCreateLinearSubtaskIssueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateLinearSubtaskIssue)(nil)).Elem()
}

func (i WorkflowTaskCreateLinearSubtaskIssueArray) ToWorkflowTaskCreateLinearSubtaskIssueArrayOutput() WorkflowTaskCreateLinearSubtaskIssueArrayOutput {
	return i.ToWorkflowTaskCreateLinearSubtaskIssueArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateLinearSubtaskIssueArray) ToWorkflowTaskCreateLinearSubtaskIssueArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearSubtaskIssueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateLinearSubtaskIssueArrayOutput)
}

// WorkflowTaskCreateLinearSubtaskIssueMapInput is an input type that accepts WorkflowTaskCreateLinearSubtaskIssueMap and WorkflowTaskCreateLinearSubtaskIssueMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateLinearSubtaskIssueMapInput` via:
//
//	WorkflowTaskCreateLinearSubtaskIssueMap{ "key": WorkflowTaskCreateLinearSubtaskIssueArgs{...} }
type WorkflowTaskCreateLinearSubtaskIssueMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreateLinearSubtaskIssueMapOutput() WorkflowTaskCreateLinearSubtaskIssueMapOutput
	ToWorkflowTaskCreateLinearSubtaskIssueMapOutputWithContext(context.Context) WorkflowTaskCreateLinearSubtaskIssueMapOutput
}

type WorkflowTaskCreateLinearSubtaskIssueMap map[string]WorkflowTaskCreateLinearSubtaskIssueInput

func (WorkflowTaskCreateLinearSubtaskIssueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateLinearSubtaskIssue)(nil)).Elem()
}

func (i WorkflowTaskCreateLinearSubtaskIssueMap) ToWorkflowTaskCreateLinearSubtaskIssueMapOutput() WorkflowTaskCreateLinearSubtaskIssueMapOutput {
	return i.ToWorkflowTaskCreateLinearSubtaskIssueMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateLinearSubtaskIssueMap) ToWorkflowTaskCreateLinearSubtaskIssueMapOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearSubtaskIssueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateLinearSubtaskIssueMapOutput)
}

type WorkflowTaskCreateLinearSubtaskIssueOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateLinearSubtaskIssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateLinearSubtaskIssue)(nil)).Elem()
}

func (o WorkflowTaskCreateLinearSubtaskIssueOutput) ToWorkflowTaskCreateLinearSubtaskIssueOutput() WorkflowTaskCreateLinearSubtaskIssueOutput {
	return o
}

func (o WorkflowTaskCreateLinearSubtaskIssueOutput) ToWorkflowTaskCreateLinearSubtaskIssueOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearSubtaskIssueOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreateLinearSubtaskIssueOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateLinearSubtaskIssue) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreateLinearSubtaskIssueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateLinearSubtaskIssue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreateLinearSubtaskIssueOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateLinearSubtaskIssue) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreateLinearSubtaskIssueOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateLinearSubtaskIssue) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreateLinearSubtaskIssueOutput) TaskParams() WorkflowTaskCreateLinearSubtaskIssueTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateLinearSubtaskIssue) WorkflowTaskCreateLinearSubtaskIssueTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskCreateLinearSubtaskIssueTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreateLinearSubtaskIssueOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateLinearSubtaskIssue) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreateLinearSubtaskIssueArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateLinearSubtaskIssueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateLinearSubtaskIssue)(nil)).Elem()
}

func (o WorkflowTaskCreateLinearSubtaskIssueArrayOutput) ToWorkflowTaskCreateLinearSubtaskIssueArrayOutput() WorkflowTaskCreateLinearSubtaskIssueArrayOutput {
	return o
}

func (o WorkflowTaskCreateLinearSubtaskIssueArrayOutput) ToWorkflowTaskCreateLinearSubtaskIssueArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearSubtaskIssueArrayOutput {
	return o
}

func (o WorkflowTaskCreateLinearSubtaskIssueArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreateLinearSubtaskIssueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreateLinearSubtaskIssue {
		return vs[0].([]*WorkflowTaskCreateLinearSubtaskIssue)[vs[1].(int)]
	}).(WorkflowTaskCreateLinearSubtaskIssueOutput)
}

type WorkflowTaskCreateLinearSubtaskIssueMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateLinearSubtaskIssueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateLinearSubtaskIssue)(nil)).Elem()
}

func (o WorkflowTaskCreateLinearSubtaskIssueMapOutput) ToWorkflowTaskCreateLinearSubtaskIssueMapOutput() WorkflowTaskCreateLinearSubtaskIssueMapOutput {
	return o
}

func (o WorkflowTaskCreateLinearSubtaskIssueMapOutput) ToWorkflowTaskCreateLinearSubtaskIssueMapOutputWithContext(ctx context.Context) WorkflowTaskCreateLinearSubtaskIssueMapOutput {
	return o
}

func (o WorkflowTaskCreateLinearSubtaskIssueMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreateLinearSubtaskIssueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreateLinearSubtaskIssue {
		return vs[0].(map[string]*WorkflowTaskCreateLinearSubtaskIssue)[vs[1].(string)]
	}).(WorkflowTaskCreateLinearSubtaskIssueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateLinearSubtaskIssueInput)(nil)).Elem(), &WorkflowTaskCreateLinearSubtaskIssue{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateLinearSubtaskIssueArrayInput)(nil)).Elem(), WorkflowTaskCreateLinearSubtaskIssueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateLinearSubtaskIssueMapInput)(nil)).Elem(), WorkflowTaskCreateLinearSubtaskIssueMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreateLinearSubtaskIssueOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateLinearSubtaskIssueArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateLinearSubtaskIssueMapOutput{})
}
