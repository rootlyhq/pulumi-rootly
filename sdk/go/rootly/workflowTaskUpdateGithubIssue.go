// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow updateGithubIssue task.
type WorkflowTaskUpdateGithubIssue struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateGithubIssueTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskUpdateGithubIssue registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskUpdateGithubIssue(ctx *pulumi.Context,
	name string, args *WorkflowTaskUpdateGithubIssueArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateGithubIssue, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskUpdateGithubIssue
	err := ctx.RegisterResource("rootly:index/workflowTaskUpdateGithubIssue:WorkflowTaskUpdateGithubIssue", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskUpdateGithubIssue gets an existing WorkflowTaskUpdateGithubIssue resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskUpdateGithubIssue(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskUpdateGithubIssueState, opts ...pulumi.ResourceOption) (*WorkflowTaskUpdateGithubIssue, error) {
	var resource WorkflowTaskUpdateGithubIssue
	err := ctx.ReadResource("rootly:index/workflowTaskUpdateGithubIssue:WorkflowTaskUpdateGithubIssue", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskUpdateGithubIssue resources.
type workflowTaskUpdateGithubIssueState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskUpdateGithubIssueTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskUpdateGithubIssueState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateGithubIssueTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskUpdateGithubIssueState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateGithubIssueState)(nil)).Elem()
}

type workflowTaskUpdateGithubIssueArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateGithubIssueTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskUpdateGithubIssue resource.
type WorkflowTaskUpdateGithubIssueArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskUpdateGithubIssueTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskUpdateGithubIssueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskUpdateGithubIssueArgs)(nil)).Elem()
}

type WorkflowTaskUpdateGithubIssueInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateGithubIssueOutput() WorkflowTaskUpdateGithubIssueOutput
	ToWorkflowTaskUpdateGithubIssueOutputWithContext(ctx context.Context) WorkflowTaskUpdateGithubIssueOutput
}

func (*WorkflowTaskUpdateGithubIssue) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateGithubIssue)(nil)).Elem()
}

func (i *WorkflowTaskUpdateGithubIssue) ToWorkflowTaskUpdateGithubIssueOutput() WorkflowTaskUpdateGithubIssueOutput {
	return i.ToWorkflowTaskUpdateGithubIssueOutputWithContext(context.Background())
}

func (i *WorkflowTaskUpdateGithubIssue) ToWorkflowTaskUpdateGithubIssueOutputWithContext(ctx context.Context) WorkflowTaskUpdateGithubIssueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateGithubIssueOutput)
}

// WorkflowTaskUpdateGithubIssueArrayInput is an input type that accepts WorkflowTaskUpdateGithubIssueArray and WorkflowTaskUpdateGithubIssueArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateGithubIssueArrayInput` via:
//
//	WorkflowTaskUpdateGithubIssueArray{ WorkflowTaskUpdateGithubIssueArgs{...} }
type WorkflowTaskUpdateGithubIssueArrayInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateGithubIssueArrayOutput() WorkflowTaskUpdateGithubIssueArrayOutput
	ToWorkflowTaskUpdateGithubIssueArrayOutputWithContext(context.Context) WorkflowTaskUpdateGithubIssueArrayOutput
}

type WorkflowTaskUpdateGithubIssueArray []WorkflowTaskUpdateGithubIssueInput

func (WorkflowTaskUpdateGithubIssueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateGithubIssue)(nil)).Elem()
}

func (i WorkflowTaskUpdateGithubIssueArray) ToWorkflowTaskUpdateGithubIssueArrayOutput() WorkflowTaskUpdateGithubIssueArrayOutput {
	return i.ToWorkflowTaskUpdateGithubIssueArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateGithubIssueArray) ToWorkflowTaskUpdateGithubIssueArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateGithubIssueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateGithubIssueArrayOutput)
}

// WorkflowTaskUpdateGithubIssueMapInput is an input type that accepts WorkflowTaskUpdateGithubIssueMap and WorkflowTaskUpdateGithubIssueMapOutput values.
// You can construct a concrete instance of `WorkflowTaskUpdateGithubIssueMapInput` via:
//
//	WorkflowTaskUpdateGithubIssueMap{ "key": WorkflowTaskUpdateGithubIssueArgs{...} }
type WorkflowTaskUpdateGithubIssueMapInput interface {
	pulumi.Input

	ToWorkflowTaskUpdateGithubIssueMapOutput() WorkflowTaskUpdateGithubIssueMapOutput
	ToWorkflowTaskUpdateGithubIssueMapOutputWithContext(context.Context) WorkflowTaskUpdateGithubIssueMapOutput
}

type WorkflowTaskUpdateGithubIssueMap map[string]WorkflowTaskUpdateGithubIssueInput

func (WorkflowTaskUpdateGithubIssueMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateGithubIssue)(nil)).Elem()
}

func (i WorkflowTaskUpdateGithubIssueMap) ToWorkflowTaskUpdateGithubIssueMapOutput() WorkflowTaskUpdateGithubIssueMapOutput {
	return i.ToWorkflowTaskUpdateGithubIssueMapOutputWithContext(context.Background())
}

func (i WorkflowTaskUpdateGithubIssueMap) ToWorkflowTaskUpdateGithubIssueMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateGithubIssueMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskUpdateGithubIssueMapOutput)
}

type WorkflowTaskUpdateGithubIssueOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateGithubIssueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskUpdateGithubIssue)(nil)).Elem()
}

func (o WorkflowTaskUpdateGithubIssueOutput) ToWorkflowTaskUpdateGithubIssueOutput() WorkflowTaskUpdateGithubIssueOutput {
	return o
}

func (o WorkflowTaskUpdateGithubIssueOutput) ToWorkflowTaskUpdateGithubIssueOutputWithContext(ctx context.Context) WorkflowTaskUpdateGithubIssueOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskUpdateGithubIssueOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateGithubIssue) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskUpdateGithubIssueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateGithubIssue) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskUpdateGithubIssueOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateGithubIssue) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskUpdateGithubIssueOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateGithubIssue) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskUpdateGithubIssueOutput) TaskParams() WorkflowTaskUpdateGithubIssueTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateGithubIssue) WorkflowTaskUpdateGithubIssueTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskUpdateGithubIssueTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskUpdateGithubIssueOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskUpdateGithubIssue) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskUpdateGithubIssueArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateGithubIssueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskUpdateGithubIssue)(nil)).Elem()
}

func (o WorkflowTaskUpdateGithubIssueArrayOutput) ToWorkflowTaskUpdateGithubIssueArrayOutput() WorkflowTaskUpdateGithubIssueArrayOutput {
	return o
}

func (o WorkflowTaskUpdateGithubIssueArrayOutput) ToWorkflowTaskUpdateGithubIssueArrayOutputWithContext(ctx context.Context) WorkflowTaskUpdateGithubIssueArrayOutput {
	return o
}

func (o WorkflowTaskUpdateGithubIssueArrayOutput) Index(i pulumi.IntInput) WorkflowTaskUpdateGithubIssueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateGithubIssue {
		return vs[0].([]*WorkflowTaskUpdateGithubIssue)[vs[1].(int)]
	}).(WorkflowTaskUpdateGithubIssueOutput)
}

type WorkflowTaskUpdateGithubIssueMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskUpdateGithubIssueMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskUpdateGithubIssue)(nil)).Elem()
}

func (o WorkflowTaskUpdateGithubIssueMapOutput) ToWorkflowTaskUpdateGithubIssueMapOutput() WorkflowTaskUpdateGithubIssueMapOutput {
	return o
}

func (o WorkflowTaskUpdateGithubIssueMapOutput) ToWorkflowTaskUpdateGithubIssueMapOutputWithContext(ctx context.Context) WorkflowTaskUpdateGithubIssueMapOutput {
	return o
}

func (o WorkflowTaskUpdateGithubIssueMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskUpdateGithubIssueOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskUpdateGithubIssue {
		return vs[0].(map[string]*WorkflowTaskUpdateGithubIssue)[vs[1].(string)]
	}).(WorkflowTaskUpdateGithubIssueOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateGithubIssueInput)(nil)).Elem(), &WorkflowTaskUpdateGithubIssue{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateGithubIssueArrayInput)(nil)).Elem(), WorkflowTaskUpdateGithubIssueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskUpdateGithubIssueMapInput)(nil)).Elem(), WorkflowTaskUpdateGithubIssueMap{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateGithubIssueOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateGithubIssueArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskUpdateGithubIssueMapOutput{})
}
