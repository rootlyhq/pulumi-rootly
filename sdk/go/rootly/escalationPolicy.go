// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type EscalationPolicy struct {
	pulumi.CustomResourceState

	// User who created the escalation policy
	CreatedByUserId pulumi.IntOutput `pulumi:"createdByUserId"`
	// The description of the escalation policy
	Description pulumi.StringOutput `pulumi:"description"`
	// Associated groups (alerting the group will trigger escalation policy)
	GroupIds pulumi.StringArrayOutput `pulumi:"groupIds"`
	// User who updated the escalation policy
	LastUpdatedByUserId pulumi.IntOutput `pulumi:"lastUpdatedByUserId"`
	// The name of the escalation policy
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of times this policy will be executed until someone acknowledges the alert
	RepeatCount pulumi.IntOutput `pulumi:"repeatCount"`
	// Associated services (alerting the service will trigger escalation policy)
	ServiceIds pulumi.StringArrayOutput `pulumi:"serviceIds"`
}

// NewEscalationPolicy registers a new resource with the given unique name, arguments, and options.
func NewEscalationPolicy(ctx *pulumi.Context,
	name string, args *EscalationPolicyArgs, opts ...pulumi.ResourceOption) (*EscalationPolicy, error) {
	if args == nil {
		args = &EscalationPolicyArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EscalationPolicy
	err := ctx.RegisterResource("rootly:index/escalationPolicy:EscalationPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEscalationPolicy gets an existing EscalationPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEscalationPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EscalationPolicyState, opts ...pulumi.ResourceOption) (*EscalationPolicy, error) {
	var resource EscalationPolicy
	err := ctx.ReadResource("rootly:index/escalationPolicy:EscalationPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EscalationPolicy resources.
type escalationPolicyState struct {
	// User who created the escalation policy
	CreatedByUserId *int `pulumi:"createdByUserId"`
	// The description of the escalation policy
	Description *string `pulumi:"description"`
	// Associated groups (alerting the group will trigger escalation policy)
	GroupIds []string `pulumi:"groupIds"`
	// User who updated the escalation policy
	LastUpdatedByUserId *int `pulumi:"lastUpdatedByUserId"`
	// The name of the escalation policy
	Name *string `pulumi:"name"`
	// The number of times this policy will be executed until someone acknowledges the alert
	RepeatCount *int `pulumi:"repeatCount"`
	// Associated services (alerting the service will trigger escalation policy)
	ServiceIds []string `pulumi:"serviceIds"`
}

type EscalationPolicyState struct {
	// User who created the escalation policy
	CreatedByUserId pulumi.IntPtrInput
	// The description of the escalation policy
	Description pulumi.StringPtrInput
	// Associated groups (alerting the group will trigger escalation policy)
	GroupIds pulumi.StringArrayInput
	// User who updated the escalation policy
	LastUpdatedByUserId pulumi.IntPtrInput
	// The name of the escalation policy
	Name pulumi.StringPtrInput
	// The number of times this policy will be executed until someone acknowledges the alert
	RepeatCount pulumi.IntPtrInput
	// Associated services (alerting the service will trigger escalation policy)
	ServiceIds pulumi.StringArrayInput
}

func (EscalationPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*escalationPolicyState)(nil)).Elem()
}

type escalationPolicyArgs struct {
	// User who created the escalation policy
	CreatedByUserId *int `pulumi:"createdByUserId"`
	// The description of the escalation policy
	Description *string `pulumi:"description"`
	// Associated groups (alerting the group will trigger escalation policy)
	GroupIds []string `pulumi:"groupIds"`
	// User who updated the escalation policy
	LastUpdatedByUserId *int `pulumi:"lastUpdatedByUserId"`
	// The name of the escalation policy
	Name *string `pulumi:"name"`
	// The number of times this policy will be executed until someone acknowledges the alert
	RepeatCount *int `pulumi:"repeatCount"`
	// Associated services (alerting the service will trigger escalation policy)
	ServiceIds []string `pulumi:"serviceIds"`
}

// The set of arguments for constructing a EscalationPolicy resource.
type EscalationPolicyArgs struct {
	// User who created the escalation policy
	CreatedByUserId pulumi.IntPtrInput
	// The description of the escalation policy
	Description pulumi.StringPtrInput
	// Associated groups (alerting the group will trigger escalation policy)
	GroupIds pulumi.StringArrayInput
	// User who updated the escalation policy
	LastUpdatedByUserId pulumi.IntPtrInput
	// The name of the escalation policy
	Name pulumi.StringPtrInput
	// The number of times this policy will be executed until someone acknowledges the alert
	RepeatCount pulumi.IntPtrInput
	// Associated services (alerting the service will trigger escalation policy)
	ServiceIds pulumi.StringArrayInput
}

func (EscalationPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*escalationPolicyArgs)(nil)).Elem()
}

type EscalationPolicyInput interface {
	pulumi.Input

	ToEscalationPolicyOutput() EscalationPolicyOutput
	ToEscalationPolicyOutputWithContext(ctx context.Context) EscalationPolicyOutput
}

func (*EscalationPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**EscalationPolicy)(nil)).Elem()
}

func (i *EscalationPolicy) ToEscalationPolicyOutput() EscalationPolicyOutput {
	return i.ToEscalationPolicyOutputWithContext(context.Background())
}

func (i *EscalationPolicy) ToEscalationPolicyOutputWithContext(ctx context.Context) EscalationPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyOutput)
}

// EscalationPolicyArrayInput is an input type that accepts EscalationPolicyArray and EscalationPolicyArrayOutput values.
// You can construct a concrete instance of `EscalationPolicyArrayInput` via:
//
//	EscalationPolicyArray{ EscalationPolicyArgs{...} }
type EscalationPolicyArrayInput interface {
	pulumi.Input

	ToEscalationPolicyArrayOutput() EscalationPolicyArrayOutput
	ToEscalationPolicyArrayOutputWithContext(context.Context) EscalationPolicyArrayOutput
}

type EscalationPolicyArray []EscalationPolicyInput

func (EscalationPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EscalationPolicy)(nil)).Elem()
}

func (i EscalationPolicyArray) ToEscalationPolicyArrayOutput() EscalationPolicyArrayOutput {
	return i.ToEscalationPolicyArrayOutputWithContext(context.Background())
}

func (i EscalationPolicyArray) ToEscalationPolicyArrayOutputWithContext(ctx context.Context) EscalationPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyArrayOutput)
}

// EscalationPolicyMapInput is an input type that accepts EscalationPolicyMap and EscalationPolicyMapOutput values.
// You can construct a concrete instance of `EscalationPolicyMapInput` via:
//
//	EscalationPolicyMap{ "key": EscalationPolicyArgs{...} }
type EscalationPolicyMapInput interface {
	pulumi.Input

	ToEscalationPolicyMapOutput() EscalationPolicyMapOutput
	ToEscalationPolicyMapOutputWithContext(context.Context) EscalationPolicyMapOutput
}

type EscalationPolicyMap map[string]EscalationPolicyInput

func (EscalationPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EscalationPolicy)(nil)).Elem()
}

func (i EscalationPolicyMap) ToEscalationPolicyMapOutput() EscalationPolicyMapOutput {
	return i.ToEscalationPolicyMapOutputWithContext(context.Background())
}

func (i EscalationPolicyMap) ToEscalationPolicyMapOutputWithContext(ctx context.Context) EscalationPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EscalationPolicyMapOutput)
}

type EscalationPolicyOutput struct{ *pulumi.OutputState }

func (EscalationPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EscalationPolicy)(nil)).Elem()
}

func (o EscalationPolicyOutput) ToEscalationPolicyOutput() EscalationPolicyOutput {
	return o
}

func (o EscalationPolicyOutput) ToEscalationPolicyOutputWithContext(ctx context.Context) EscalationPolicyOutput {
	return o
}

// User who created the escalation policy
func (o EscalationPolicyOutput) CreatedByUserId() pulumi.IntOutput {
	return o.ApplyT(func(v *EscalationPolicy) pulumi.IntOutput { return v.CreatedByUserId }).(pulumi.IntOutput)
}

// The description of the escalation policy
func (o EscalationPolicyOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *EscalationPolicy) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

// Associated groups (alerting the group will trigger escalation policy)
func (o EscalationPolicyOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EscalationPolicy) pulumi.StringArrayOutput { return v.GroupIds }).(pulumi.StringArrayOutput)
}

// User who updated the escalation policy
func (o EscalationPolicyOutput) LastUpdatedByUserId() pulumi.IntOutput {
	return o.ApplyT(func(v *EscalationPolicy) pulumi.IntOutput { return v.LastUpdatedByUserId }).(pulumi.IntOutput)
}

// The name of the escalation policy
func (o EscalationPolicyOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EscalationPolicy) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The number of times this policy will be executed until someone acknowledges the alert
func (o EscalationPolicyOutput) RepeatCount() pulumi.IntOutput {
	return o.ApplyT(func(v *EscalationPolicy) pulumi.IntOutput { return v.RepeatCount }).(pulumi.IntOutput)
}

// Associated services (alerting the service will trigger escalation policy)
func (o EscalationPolicyOutput) ServiceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EscalationPolicy) pulumi.StringArrayOutput { return v.ServiceIds }).(pulumi.StringArrayOutput)
}

type EscalationPolicyArrayOutput struct{ *pulumi.OutputState }

func (EscalationPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EscalationPolicy)(nil)).Elem()
}

func (o EscalationPolicyArrayOutput) ToEscalationPolicyArrayOutput() EscalationPolicyArrayOutput {
	return o
}

func (o EscalationPolicyArrayOutput) ToEscalationPolicyArrayOutputWithContext(ctx context.Context) EscalationPolicyArrayOutput {
	return o
}

func (o EscalationPolicyArrayOutput) Index(i pulumi.IntInput) EscalationPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EscalationPolicy {
		return vs[0].([]*EscalationPolicy)[vs[1].(int)]
	}).(EscalationPolicyOutput)
}

type EscalationPolicyMapOutput struct{ *pulumi.OutputState }

func (EscalationPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EscalationPolicy)(nil)).Elem()
}

func (o EscalationPolicyMapOutput) ToEscalationPolicyMapOutput() EscalationPolicyMapOutput {
	return o
}

func (o EscalationPolicyMapOutput) ToEscalationPolicyMapOutputWithContext(ctx context.Context) EscalationPolicyMapOutput {
	return o
}

func (o EscalationPolicyMapOutput) MapIndex(k pulumi.StringInput) EscalationPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EscalationPolicy {
		return vs[0].(map[string]*EscalationPolicy)[vs[1].(string)]
	}).(EscalationPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyInput)(nil)).Elem(), &EscalationPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyArrayInput)(nil)).Elem(), EscalationPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EscalationPolicyMapInput)(nil)).Elem(), EscalationPolicyMap{})
	pulumi.RegisterOutputType(EscalationPolicyOutput{})
	pulumi.RegisterOutputType(EscalationPolicyArrayOutput{})
	pulumi.RegisterOutputType(EscalationPolicyMapOutput{})
}
