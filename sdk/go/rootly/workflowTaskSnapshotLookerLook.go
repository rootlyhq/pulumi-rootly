// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow snapshotLookerLook task.
type WorkflowTaskSnapshotLookerLook struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSnapshotLookerLookTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskSnapshotLookerLook registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskSnapshotLookerLook(ctx *pulumi.Context,
	name string, args *WorkflowTaskSnapshotLookerLookArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskSnapshotLookerLook, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskSnapshotLookerLook
	err := ctx.RegisterResource("rootly:index/workflowTaskSnapshotLookerLook:WorkflowTaskSnapshotLookerLook", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskSnapshotLookerLook gets an existing WorkflowTaskSnapshotLookerLook resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskSnapshotLookerLook(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskSnapshotLookerLookState, opts ...pulumi.ResourceOption) (*WorkflowTaskSnapshotLookerLook, error) {
	var resource WorkflowTaskSnapshotLookerLook
	err := ctx.ReadResource("rootly:index/workflowTaskSnapshotLookerLook:WorkflowTaskSnapshotLookerLook", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskSnapshotLookerLook resources.
type workflowTaskSnapshotLookerLookState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskSnapshotLookerLookTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskSnapshotLookerLookState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSnapshotLookerLookTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskSnapshotLookerLookState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskSnapshotLookerLookState)(nil)).Elem()
}

type workflowTaskSnapshotLookerLookArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSnapshotLookerLookTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskSnapshotLookerLook resource.
type WorkflowTaskSnapshotLookerLookArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskSnapshotLookerLookTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskSnapshotLookerLookArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskSnapshotLookerLookArgs)(nil)).Elem()
}

type WorkflowTaskSnapshotLookerLookInput interface {
	pulumi.Input

	ToWorkflowTaskSnapshotLookerLookOutput() WorkflowTaskSnapshotLookerLookOutput
	ToWorkflowTaskSnapshotLookerLookOutputWithContext(ctx context.Context) WorkflowTaskSnapshotLookerLookOutput
}

func (*WorkflowTaskSnapshotLookerLook) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskSnapshotLookerLook)(nil)).Elem()
}

func (i *WorkflowTaskSnapshotLookerLook) ToWorkflowTaskSnapshotLookerLookOutput() WorkflowTaskSnapshotLookerLookOutput {
	return i.ToWorkflowTaskSnapshotLookerLookOutputWithContext(context.Background())
}

func (i *WorkflowTaskSnapshotLookerLook) ToWorkflowTaskSnapshotLookerLookOutputWithContext(ctx context.Context) WorkflowTaskSnapshotLookerLookOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSnapshotLookerLookOutput)
}

// WorkflowTaskSnapshotLookerLookArrayInput is an input type that accepts WorkflowTaskSnapshotLookerLookArray and WorkflowTaskSnapshotLookerLookArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskSnapshotLookerLookArrayInput` via:
//
//	WorkflowTaskSnapshotLookerLookArray{ WorkflowTaskSnapshotLookerLookArgs{...} }
type WorkflowTaskSnapshotLookerLookArrayInput interface {
	pulumi.Input

	ToWorkflowTaskSnapshotLookerLookArrayOutput() WorkflowTaskSnapshotLookerLookArrayOutput
	ToWorkflowTaskSnapshotLookerLookArrayOutputWithContext(context.Context) WorkflowTaskSnapshotLookerLookArrayOutput
}

type WorkflowTaskSnapshotLookerLookArray []WorkflowTaskSnapshotLookerLookInput

func (WorkflowTaskSnapshotLookerLookArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskSnapshotLookerLook)(nil)).Elem()
}

func (i WorkflowTaskSnapshotLookerLookArray) ToWorkflowTaskSnapshotLookerLookArrayOutput() WorkflowTaskSnapshotLookerLookArrayOutput {
	return i.ToWorkflowTaskSnapshotLookerLookArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskSnapshotLookerLookArray) ToWorkflowTaskSnapshotLookerLookArrayOutputWithContext(ctx context.Context) WorkflowTaskSnapshotLookerLookArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSnapshotLookerLookArrayOutput)
}

// WorkflowTaskSnapshotLookerLookMapInput is an input type that accepts WorkflowTaskSnapshotLookerLookMap and WorkflowTaskSnapshotLookerLookMapOutput values.
// You can construct a concrete instance of `WorkflowTaskSnapshotLookerLookMapInput` via:
//
//	WorkflowTaskSnapshotLookerLookMap{ "key": WorkflowTaskSnapshotLookerLookArgs{...} }
type WorkflowTaskSnapshotLookerLookMapInput interface {
	pulumi.Input

	ToWorkflowTaskSnapshotLookerLookMapOutput() WorkflowTaskSnapshotLookerLookMapOutput
	ToWorkflowTaskSnapshotLookerLookMapOutputWithContext(context.Context) WorkflowTaskSnapshotLookerLookMapOutput
}

type WorkflowTaskSnapshotLookerLookMap map[string]WorkflowTaskSnapshotLookerLookInput

func (WorkflowTaskSnapshotLookerLookMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskSnapshotLookerLook)(nil)).Elem()
}

func (i WorkflowTaskSnapshotLookerLookMap) ToWorkflowTaskSnapshotLookerLookMapOutput() WorkflowTaskSnapshotLookerLookMapOutput {
	return i.ToWorkflowTaskSnapshotLookerLookMapOutputWithContext(context.Background())
}

func (i WorkflowTaskSnapshotLookerLookMap) ToWorkflowTaskSnapshotLookerLookMapOutputWithContext(ctx context.Context) WorkflowTaskSnapshotLookerLookMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskSnapshotLookerLookMapOutput)
}

type WorkflowTaskSnapshotLookerLookOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSnapshotLookerLookOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskSnapshotLookerLook)(nil)).Elem()
}

func (o WorkflowTaskSnapshotLookerLookOutput) ToWorkflowTaskSnapshotLookerLookOutput() WorkflowTaskSnapshotLookerLookOutput {
	return o
}

func (o WorkflowTaskSnapshotLookerLookOutput) ToWorkflowTaskSnapshotLookerLookOutputWithContext(ctx context.Context) WorkflowTaskSnapshotLookerLookOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskSnapshotLookerLookOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskSnapshotLookerLook) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskSnapshotLookerLookOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskSnapshotLookerLook) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskSnapshotLookerLookOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskSnapshotLookerLook) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskSnapshotLookerLookOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskSnapshotLookerLook) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskSnapshotLookerLookOutput) TaskParams() WorkflowTaskSnapshotLookerLookTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskSnapshotLookerLook) WorkflowTaskSnapshotLookerLookTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskSnapshotLookerLookTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskSnapshotLookerLookOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskSnapshotLookerLook) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskSnapshotLookerLookArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSnapshotLookerLookArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskSnapshotLookerLook)(nil)).Elem()
}

func (o WorkflowTaskSnapshotLookerLookArrayOutput) ToWorkflowTaskSnapshotLookerLookArrayOutput() WorkflowTaskSnapshotLookerLookArrayOutput {
	return o
}

func (o WorkflowTaskSnapshotLookerLookArrayOutput) ToWorkflowTaskSnapshotLookerLookArrayOutputWithContext(ctx context.Context) WorkflowTaskSnapshotLookerLookArrayOutput {
	return o
}

func (o WorkflowTaskSnapshotLookerLookArrayOutput) Index(i pulumi.IntInput) WorkflowTaskSnapshotLookerLookOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskSnapshotLookerLook {
		return vs[0].([]*WorkflowTaskSnapshotLookerLook)[vs[1].(int)]
	}).(WorkflowTaskSnapshotLookerLookOutput)
}

type WorkflowTaskSnapshotLookerLookMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskSnapshotLookerLookMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskSnapshotLookerLook)(nil)).Elem()
}

func (o WorkflowTaskSnapshotLookerLookMapOutput) ToWorkflowTaskSnapshotLookerLookMapOutput() WorkflowTaskSnapshotLookerLookMapOutput {
	return o
}

func (o WorkflowTaskSnapshotLookerLookMapOutput) ToWorkflowTaskSnapshotLookerLookMapOutputWithContext(ctx context.Context) WorkflowTaskSnapshotLookerLookMapOutput {
	return o
}

func (o WorkflowTaskSnapshotLookerLookMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskSnapshotLookerLookOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskSnapshotLookerLook {
		return vs[0].(map[string]*WorkflowTaskSnapshotLookerLook)[vs[1].(string)]
	}).(WorkflowTaskSnapshotLookerLookOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSnapshotLookerLookInput)(nil)).Elem(), &WorkflowTaskSnapshotLookerLook{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSnapshotLookerLookArrayInput)(nil)).Elem(), WorkflowTaskSnapshotLookerLookArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskSnapshotLookerLookMapInput)(nil)).Elem(), WorkflowTaskSnapshotLookerLookMap{})
	pulumi.RegisterOutputType(WorkflowTaskSnapshotLookerLookOutput{})
	pulumi.RegisterOutputType(WorkflowTaskSnapshotLookerLookArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskSnapshotLookerLookMapOutput{})
}
