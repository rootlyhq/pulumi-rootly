// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createMicrosoftTeamsMeeting task.
type WorkflowTaskCreateMicrosoftTeamsMeeting struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreateMicrosoftTeamsMeeting registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreateMicrosoftTeamsMeeting(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreateMicrosoftTeamsMeetingArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateMicrosoftTeamsMeeting, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreateMicrosoftTeamsMeeting
	err := ctx.RegisterResource("rootly:index/workflowTaskCreateMicrosoftTeamsMeeting:WorkflowTaskCreateMicrosoftTeamsMeeting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreateMicrosoftTeamsMeeting gets an existing WorkflowTaskCreateMicrosoftTeamsMeeting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreateMicrosoftTeamsMeeting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreateMicrosoftTeamsMeetingState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateMicrosoftTeamsMeeting, error) {
	var resource WorkflowTaskCreateMicrosoftTeamsMeeting
	err := ctx.ReadResource("rootly:index/workflowTaskCreateMicrosoftTeamsMeeting:WorkflowTaskCreateMicrosoftTeamsMeeting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreateMicrosoftTeamsMeeting resources.
type workflowTaskCreateMicrosoftTeamsMeetingState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreateMicrosoftTeamsMeetingTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreateMicrosoftTeamsMeetingState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreateMicrosoftTeamsMeetingState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateMicrosoftTeamsMeetingState)(nil)).Elem()
}

type workflowTaskCreateMicrosoftTeamsMeetingArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateMicrosoftTeamsMeetingTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreateMicrosoftTeamsMeeting resource.
type WorkflowTaskCreateMicrosoftTeamsMeetingArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreateMicrosoftTeamsMeetingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateMicrosoftTeamsMeetingArgs)(nil)).Elem()
}

type WorkflowTaskCreateMicrosoftTeamsMeetingInput interface {
	pulumi.Input

	ToWorkflowTaskCreateMicrosoftTeamsMeetingOutput() WorkflowTaskCreateMicrosoftTeamsMeetingOutput
	ToWorkflowTaskCreateMicrosoftTeamsMeetingOutputWithContext(ctx context.Context) WorkflowTaskCreateMicrosoftTeamsMeetingOutput
}

func (*WorkflowTaskCreateMicrosoftTeamsMeeting) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateMicrosoftTeamsMeeting)(nil)).Elem()
}

func (i *WorkflowTaskCreateMicrosoftTeamsMeeting) ToWorkflowTaskCreateMicrosoftTeamsMeetingOutput() WorkflowTaskCreateMicrosoftTeamsMeetingOutput {
	return i.ToWorkflowTaskCreateMicrosoftTeamsMeetingOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreateMicrosoftTeamsMeeting) ToWorkflowTaskCreateMicrosoftTeamsMeetingOutputWithContext(ctx context.Context) WorkflowTaskCreateMicrosoftTeamsMeetingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateMicrosoftTeamsMeetingOutput)
}

// WorkflowTaskCreateMicrosoftTeamsMeetingArrayInput is an input type that accepts WorkflowTaskCreateMicrosoftTeamsMeetingArray and WorkflowTaskCreateMicrosoftTeamsMeetingArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateMicrosoftTeamsMeetingArrayInput` via:
//
//	WorkflowTaskCreateMicrosoftTeamsMeetingArray{ WorkflowTaskCreateMicrosoftTeamsMeetingArgs{...} }
type WorkflowTaskCreateMicrosoftTeamsMeetingArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreateMicrosoftTeamsMeetingArrayOutput() WorkflowTaskCreateMicrosoftTeamsMeetingArrayOutput
	ToWorkflowTaskCreateMicrosoftTeamsMeetingArrayOutputWithContext(context.Context) WorkflowTaskCreateMicrosoftTeamsMeetingArrayOutput
}

type WorkflowTaskCreateMicrosoftTeamsMeetingArray []WorkflowTaskCreateMicrosoftTeamsMeetingInput

func (WorkflowTaskCreateMicrosoftTeamsMeetingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateMicrosoftTeamsMeeting)(nil)).Elem()
}

func (i WorkflowTaskCreateMicrosoftTeamsMeetingArray) ToWorkflowTaskCreateMicrosoftTeamsMeetingArrayOutput() WorkflowTaskCreateMicrosoftTeamsMeetingArrayOutput {
	return i.ToWorkflowTaskCreateMicrosoftTeamsMeetingArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateMicrosoftTeamsMeetingArray) ToWorkflowTaskCreateMicrosoftTeamsMeetingArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateMicrosoftTeamsMeetingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateMicrosoftTeamsMeetingArrayOutput)
}

// WorkflowTaskCreateMicrosoftTeamsMeetingMapInput is an input type that accepts WorkflowTaskCreateMicrosoftTeamsMeetingMap and WorkflowTaskCreateMicrosoftTeamsMeetingMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateMicrosoftTeamsMeetingMapInput` via:
//
//	WorkflowTaskCreateMicrosoftTeamsMeetingMap{ "key": WorkflowTaskCreateMicrosoftTeamsMeetingArgs{...} }
type WorkflowTaskCreateMicrosoftTeamsMeetingMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreateMicrosoftTeamsMeetingMapOutput() WorkflowTaskCreateMicrosoftTeamsMeetingMapOutput
	ToWorkflowTaskCreateMicrosoftTeamsMeetingMapOutputWithContext(context.Context) WorkflowTaskCreateMicrosoftTeamsMeetingMapOutput
}

type WorkflowTaskCreateMicrosoftTeamsMeetingMap map[string]WorkflowTaskCreateMicrosoftTeamsMeetingInput

func (WorkflowTaskCreateMicrosoftTeamsMeetingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateMicrosoftTeamsMeeting)(nil)).Elem()
}

func (i WorkflowTaskCreateMicrosoftTeamsMeetingMap) ToWorkflowTaskCreateMicrosoftTeamsMeetingMapOutput() WorkflowTaskCreateMicrosoftTeamsMeetingMapOutput {
	return i.ToWorkflowTaskCreateMicrosoftTeamsMeetingMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateMicrosoftTeamsMeetingMap) ToWorkflowTaskCreateMicrosoftTeamsMeetingMapOutputWithContext(ctx context.Context) WorkflowTaskCreateMicrosoftTeamsMeetingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateMicrosoftTeamsMeetingMapOutput)
}

type WorkflowTaskCreateMicrosoftTeamsMeetingOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateMicrosoftTeamsMeetingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateMicrosoftTeamsMeeting)(nil)).Elem()
}

func (o WorkflowTaskCreateMicrosoftTeamsMeetingOutput) ToWorkflowTaskCreateMicrosoftTeamsMeetingOutput() WorkflowTaskCreateMicrosoftTeamsMeetingOutput {
	return o
}

func (o WorkflowTaskCreateMicrosoftTeamsMeetingOutput) ToWorkflowTaskCreateMicrosoftTeamsMeetingOutputWithContext(ctx context.Context) WorkflowTaskCreateMicrosoftTeamsMeetingOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreateMicrosoftTeamsMeetingOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateMicrosoftTeamsMeeting) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreateMicrosoftTeamsMeetingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateMicrosoftTeamsMeeting) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreateMicrosoftTeamsMeetingOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateMicrosoftTeamsMeeting) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreateMicrosoftTeamsMeetingOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateMicrosoftTeamsMeeting) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreateMicrosoftTeamsMeetingOutput) TaskParams() WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateMicrosoftTeamsMeeting) WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreateMicrosoftTeamsMeetingOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateMicrosoftTeamsMeeting) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreateMicrosoftTeamsMeetingArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateMicrosoftTeamsMeetingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateMicrosoftTeamsMeeting)(nil)).Elem()
}

func (o WorkflowTaskCreateMicrosoftTeamsMeetingArrayOutput) ToWorkflowTaskCreateMicrosoftTeamsMeetingArrayOutput() WorkflowTaskCreateMicrosoftTeamsMeetingArrayOutput {
	return o
}

func (o WorkflowTaskCreateMicrosoftTeamsMeetingArrayOutput) ToWorkflowTaskCreateMicrosoftTeamsMeetingArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateMicrosoftTeamsMeetingArrayOutput {
	return o
}

func (o WorkflowTaskCreateMicrosoftTeamsMeetingArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreateMicrosoftTeamsMeetingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreateMicrosoftTeamsMeeting {
		return vs[0].([]*WorkflowTaskCreateMicrosoftTeamsMeeting)[vs[1].(int)]
	}).(WorkflowTaskCreateMicrosoftTeamsMeetingOutput)
}

type WorkflowTaskCreateMicrosoftTeamsMeetingMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateMicrosoftTeamsMeetingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateMicrosoftTeamsMeeting)(nil)).Elem()
}

func (o WorkflowTaskCreateMicrosoftTeamsMeetingMapOutput) ToWorkflowTaskCreateMicrosoftTeamsMeetingMapOutput() WorkflowTaskCreateMicrosoftTeamsMeetingMapOutput {
	return o
}

func (o WorkflowTaskCreateMicrosoftTeamsMeetingMapOutput) ToWorkflowTaskCreateMicrosoftTeamsMeetingMapOutputWithContext(ctx context.Context) WorkflowTaskCreateMicrosoftTeamsMeetingMapOutput {
	return o
}

func (o WorkflowTaskCreateMicrosoftTeamsMeetingMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreateMicrosoftTeamsMeetingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreateMicrosoftTeamsMeeting {
		return vs[0].(map[string]*WorkflowTaskCreateMicrosoftTeamsMeeting)[vs[1].(string)]
	}).(WorkflowTaskCreateMicrosoftTeamsMeetingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateMicrosoftTeamsMeetingInput)(nil)).Elem(), &WorkflowTaskCreateMicrosoftTeamsMeeting{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateMicrosoftTeamsMeetingArrayInput)(nil)).Elem(), WorkflowTaskCreateMicrosoftTeamsMeetingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateMicrosoftTeamsMeetingMapInput)(nil)).Elem(), WorkflowTaskCreateMicrosoftTeamsMeetingMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreateMicrosoftTeamsMeetingOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateMicrosoftTeamsMeetingArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateMicrosoftTeamsMeetingMapOutput{})
}
