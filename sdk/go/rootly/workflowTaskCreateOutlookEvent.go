// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createOutlookEvent task.
type WorkflowTaskCreateOutlookEvent struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateOutlookEventTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreateOutlookEvent registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreateOutlookEvent(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreateOutlookEventArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateOutlookEvent, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreateOutlookEvent
	err := ctx.RegisterResource("rootly:index/workflowTaskCreateOutlookEvent:WorkflowTaskCreateOutlookEvent", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreateOutlookEvent gets an existing WorkflowTaskCreateOutlookEvent resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreateOutlookEvent(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreateOutlookEventState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateOutlookEvent, error) {
	var resource WorkflowTaskCreateOutlookEvent
	err := ctx.ReadResource("rootly:index/workflowTaskCreateOutlookEvent:WorkflowTaskCreateOutlookEvent", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreateOutlookEvent resources.
type workflowTaskCreateOutlookEventState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreateOutlookEventTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreateOutlookEventState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateOutlookEventTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreateOutlookEventState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateOutlookEventState)(nil)).Elem()
}

type workflowTaskCreateOutlookEventArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateOutlookEventTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreateOutlookEvent resource.
type WorkflowTaskCreateOutlookEventArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateOutlookEventTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreateOutlookEventArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateOutlookEventArgs)(nil)).Elem()
}

type WorkflowTaskCreateOutlookEventInput interface {
	pulumi.Input

	ToWorkflowTaskCreateOutlookEventOutput() WorkflowTaskCreateOutlookEventOutput
	ToWorkflowTaskCreateOutlookEventOutputWithContext(ctx context.Context) WorkflowTaskCreateOutlookEventOutput
}

func (*WorkflowTaskCreateOutlookEvent) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateOutlookEvent)(nil)).Elem()
}

func (i *WorkflowTaskCreateOutlookEvent) ToWorkflowTaskCreateOutlookEventOutput() WorkflowTaskCreateOutlookEventOutput {
	return i.ToWorkflowTaskCreateOutlookEventOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreateOutlookEvent) ToWorkflowTaskCreateOutlookEventOutputWithContext(ctx context.Context) WorkflowTaskCreateOutlookEventOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateOutlookEventOutput)
}

// WorkflowTaskCreateOutlookEventArrayInput is an input type that accepts WorkflowTaskCreateOutlookEventArray and WorkflowTaskCreateOutlookEventArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateOutlookEventArrayInput` via:
//
//	WorkflowTaskCreateOutlookEventArray{ WorkflowTaskCreateOutlookEventArgs{...} }
type WorkflowTaskCreateOutlookEventArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreateOutlookEventArrayOutput() WorkflowTaskCreateOutlookEventArrayOutput
	ToWorkflowTaskCreateOutlookEventArrayOutputWithContext(context.Context) WorkflowTaskCreateOutlookEventArrayOutput
}

type WorkflowTaskCreateOutlookEventArray []WorkflowTaskCreateOutlookEventInput

func (WorkflowTaskCreateOutlookEventArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateOutlookEvent)(nil)).Elem()
}

func (i WorkflowTaskCreateOutlookEventArray) ToWorkflowTaskCreateOutlookEventArrayOutput() WorkflowTaskCreateOutlookEventArrayOutput {
	return i.ToWorkflowTaskCreateOutlookEventArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateOutlookEventArray) ToWorkflowTaskCreateOutlookEventArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateOutlookEventArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateOutlookEventArrayOutput)
}

// WorkflowTaskCreateOutlookEventMapInput is an input type that accepts WorkflowTaskCreateOutlookEventMap and WorkflowTaskCreateOutlookEventMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateOutlookEventMapInput` via:
//
//	WorkflowTaskCreateOutlookEventMap{ "key": WorkflowTaskCreateOutlookEventArgs{...} }
type WorkflowTaskCreateOutlookEventMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreateOutlookEventMapOutput() WorkflowTaskCreateOutlookEventMapOutput
	ToWorkflowTaskCreateOutlookEventMapOutputWithContext(context.Context) WorkflowTaskCreateOutlookEventMapOutput
}

type WorkflowTaskCreateOutlookEventMap map[string]WorkflowTaskCreateOutlookEventInput

func (WorkflowTaskCreateOutlookEventMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateOutlookEvent)(nil)).Elem()
}

func (i WorkflowTaskCreateOutlookEventMap) ToWorkflowTaskCreateOutlookEventMapOutput() WorkflowTaskCreateOutlookEventMapOutput {
	return i.ToWorkflowTaskCreateOutlookEventMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateOutlookEventMap) ToWorkflowTaskCreateOutlookEventMapOutputWithContext(ctx context.Context) WorkflowTaskCreateOutlookEventMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateOutlookEventMapOutput)
}

type WorkflowTaskCreateOutlookEventOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateOutlookEventOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateOutlookEvent)(nil)).Elem()
}

func (o WorkflowTaskCreateOutlookEventOutput) ToWorkflowTaskCreateOutlookEventOutput() WorkflowTaskCreateOutlookEventOutput {
	return o
}

func (o WorkflowTaskCreateOutlookEventOutput) ToWorkflowTaskCreateOutlookEventOutputWithContext(ctx context.Context) WorkflowTaskCreateOutlookEventOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreateOutlookEventOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateOutlookEvent) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreateOutlookEventOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateOutlookEvent) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreateOutlookEventOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateOutlookEvent) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreateOutlookEventOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateOutlookEvent) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreateOutlookEventOutput) TaskParams() WorkflowTaskCreateOutlookEventTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateOutlookEvent) WorkflowTaskCreateOutlookEventTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskCreateOutlookEventTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreateOutlookEventOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateOutlookEvent) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreateOutlookEventArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateOutlookEventArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateOutlookEvent)(nil)).Elem()
}

func (o WorkflowTaskCreateOutlookEventArrayOutput) ToWorkflowTaskCreateOutlookEventArrayOutput() WorkflowTaskCreateOutlookEventArrayOutput {
	return o
}

func (o WorkflowTaskCreateOutlookEventArrayOutput) ToWorkflowTaskCreateOutlookEventArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateOutlookEventArrayOutput {
	return o
}

func (o WorkflowTaskCreateOutlookEventArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreateOutlookEventOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreateOutlookEvent {
		return vs[0].([]*WorkflowTaskCreateOutlookEvent)[vs[1].(int)]
	}).(WorkflowTaskCreateOutlookEventOutput)
}

type WorkflowTaskCreateOutlookEventMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateOutlookEventMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateOutlookEvent)(nil)).Elem()
}

func (o WorkflowTaskCreateOutlookEventMapOutput) ToWorkflowTaskCreateOutlookEventMapOutput() WorkflowTaskCreateOutlookEventMapOutput {
	return o
}

func (o WorkflowTaskCreateOutlookEventMapOutput) ToWorkflowTaskCreateOutlookEventMapOutputWithContext(ctx context.Context) WorkflowTaskCreateOutlookEventMapOutput {
	return o
}

func (o WorkflowTaskCreateOutlookEventMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreateOutlookEventOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreateOutlookEvent {
		return vs[0].(map[string]*WorkflowTaskCreateOutlookEvent)[vs[1].(string)]
	}).(WorkflowTaskCreateOutlookEventOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateOutlookEventInput)(nil)).Elem(), &WorkflowTaskCreateOutlookEvent{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateOutlookEventArrayInput)(nil)).Elem(), WorkflowTaskCreateOutlookEventArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateOutlookEventMapInput)(nil)).Elem(), WorkflowTaskCreateOutlookEventMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreateOutlookEventOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateOutlookEventArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateOutlookEventMapOutput{})
}
