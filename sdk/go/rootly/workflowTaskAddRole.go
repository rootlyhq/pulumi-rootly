// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow addRole task.
type WorkflowTaskAddRole struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAddRoleTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskAddRole registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskAddRole(ctx *pulumi.Context,
	name string, args *WorkflowTaskAddRoleArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskAddRole, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskAddRole
	err := ctx.RegisterResource("rootly:index/workflowTaskAddRole:WorkflowTaskAddRole", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskAddRole gets an existing WorkflowTaskAddRole resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskAddRole(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskAddRoleState, opts ...pulumi.ResourceOption) (*WorkflowTaskAddRole, error) {
	var resource WorkflowTaskAddRole
	err := ctx.ReadResource("rootly:index/workflowTaskAddRole:WorkflowTaskAddRole", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskAddRole resources.
type workflowTaskAddRoleState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskAddRoleTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskAddRoleState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAddRoleTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskAddRoleState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskAddRoleState)(nil)).Elem()
}

type workflowTaskAddRoleArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAddRoleTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskAddRole resource.
type WorkflowTaskAddRoleArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAddRoleTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskAddRoleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskAddRoleArgs)(nil)).Elem()
}

type WorkflowTaskAddRoleInput interface {
	pulumi.Input

	ToWorkflowTaskAddRoleOutput() WorkflowTaskAddRoleOutput
	ToWorkflowTaskAddRoleOutputWithContext(ctx context.Context) WorkflowTaskAddRoleOutput
}

func (*WorkflowTaskAddRole) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskAddRole)(nil)).Elem()
}

func (i *WorkflowTaskAddRole) ToWorkflowTaskAddRoleOutput() WorkflowTaskAddRoleOutput {
	return i.ToWorkflowTaskAddRoleOutputWithContext(context.Background())
}

func (i *WorkflowTaskAddRole) ToWorkflowTaskAddRoleOutputWithContext(ctx context.Context) WorkflowTaskAddRoleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskAddRoleOutput)
}

// WorkflowTaskAddRoleArrayInput is an input type that accepts WorkflowTaskAddRoleArray and WorkflowTaskAddRoleArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskAddRoleArrayInput` via:
//
//	WorkflowTaskAddRoleArray{ WorkflowTaskAddRoleArgs{...} }
type WorkflowTaskAddRoleArrayInput interface {
	pulumi.Input

	ToWorkflowTaskAddRoleArrayOutput() WorkflowTaskAddRoleArrayOutput
	ToWorkflowTaskAddRoleArrayOutputWithContext(context.Context) WorkflowTaskAddRoleArrayOutput
}

type WorkflowTaskAddRoleArray []WorkflowTaskAddRoleInput

func (WorkflowTaskAddRoleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskAddRole)(nil)).Elem()
}

func (i WorkflowTaskAddRoleArray) ToWorkflowTaskAddRoleArrayOutput() WorkflowTaskAddRoleArrayOutput {
	return i.ToWorkflowTaskAddRoleArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskAddRoleArray) ToWorkflowTaskAddRoleArrayOutputWithContext(ctx context.Context) WorkflowTaskAddRoleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskAddRoleArrayOutput)
}

// WorkflowTaskAddRoleMapInput is an input type that accepts WorkflowTaskAddRoleMap and WorkflowTaskAddRoleMapOutput values.
// You can construct a concrete instance of `WorkflowTaskAddRoleMapInput` via:
//
//	WorkflowTaskAddRoleMap{ "key": WorkflowTaskAddRoleArgs{...} }
type WorkflowTaskAddRoleMapInput interface {
	pulumi.Input

	ToWorkflowTaskAddRoleMapOutput() WorkflowTaskAddRoleMapOutput
	ToWorkflowTaskAddRoleMapOutputWithContext(context.Context) WorkflowTaskAddRoleMapOutput
}

type WorkflowTaskAddRoleMap map[string]WorkflowTaskAddRoleInput

func (WorkflowTaskAddRoleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskAddRole)(nil)).Elem()
}

func (i WorkflowTaskAddRoleMap) ToWorkflowTaskAddRoleMapOutput() WorkflowTaskAddRoleMapOutput {
	return i.ToWorkflowTaskAddRoleMapOutputWithContext(context.Background())
}

func (i WorkflowTaskAddRoleMap) ToWorkflowTaskAddRoleMapOutputWithContext(ctx context.Context) WorkflowTaskAddRoleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskAddRoleMapOutput)
}

type WorkflowTaskAddRoleOutput struct{ *pulumi.OutputState }

func (WorkflowTaskAddRoleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskAddRole)(nil)).Elem()
}

func (o WorkflowTaskAddRoleOutput) ToWorkflowTaskAddRoleOutput() WorkflowTaskAddRoleOutput {
	return o
}

func (o WorkflowTaskAddRoleOutput) ToWorkflowTaskAddRoleOutputWithContext(ctx context.Context) WorkflowTaskAddRoleOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskAddRoleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskAddRole) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskAddRoleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskAddRole) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskAddRoleOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskAddRole) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskAddRoleOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskAddRole) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskAddRoleOutput) TaskParams() WorkflowTaskAddRoleTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskAddRole) WorkflowTaskAddRoleTaskParamsOutput { return v.TaskParams }).(WorkflowTaskAddRoleTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskAddRoleOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskAddRole) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskAddRoleArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskAddRoleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskAddRole)(nil)).Elem()
}

func (o WorkflowTaskAddRoleArrayOutput) ToWorkflowTaskAddRoleArrayOutput() WorkflowTaskAddRoleArrayOutput {
	return o
}

func (o WorkflowTaskAddRoleArrayOutput) ToWorkflowTaskAddRoleArrayOutputWithContext(ctx context.Context) WorkflowTaskAddRoleArrayOutput {
	return o
}

func (o WorkflowTaskAddRoleArrayOutput) Index(i pulumi.IntInput) WorkflowTaskAddRoleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskAddRole {
		return vs[0].([]*WorkflowTaskAddRole)[vs[1].(int)]
	}).(WorkflowTaskAddRoleOutput)
}

type WorkflowTaskAddRoleMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskAddRoleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskAddRole)(nil)).Elem()
}

func (o WorkflowTaskAddRoleMapOutput) ToWorkflowTaskAddRoleMapOutput() WorkflowTaskAddRoleMapOutput {
	return o
}

func (o WorkflowTaskAddRoleMapOutput) ToWorkflowTaskAddRoleMapOutputWithContext(ctx context.Context) WorkflowTaskAddRoleMapOutput {
	return o
}

func (o WorkflowTaskAddRoleMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskAddRoleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskAddRole {
		return vs[0].(map[string]*WorkflowTaskAddRole)[vs[1].(string)]
	}).(WorkflowTaskAddRoleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskAddRoleInput)(nil)).Elem(), &WorkflowTaskAddRole{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskAddRoleArrayInput)(nil)).Elem(), WorkflowTaskAddRoleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskAddRoleMapInput)(nil)).Elem(), WorkflowTaskAddRoleMap{})
	pulumi.RegisterOutputType(WorkflowTaskAddRoleOutput{})
	pulumi.RegisterOutputType(WorkflowTaskAddRoleArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskAddRoleMapOutput{})
}
