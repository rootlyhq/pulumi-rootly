// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages incident types (e.g Cloud, Customer Facing, Security, Training).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-rootly/sdk/go/rootly"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := rootly.NewIncidentType(ctx, "foo", nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import rootly:index/incidentType:IncidentType foo 11111111-2222-3333-4444-555555555555
// ```
type IncidentType struct {
	pulumi.CustomResourceState

	// The cikir of the incident type
	Color pulumi.StringPtrOutput `pulumi:"color"`
	// The description of the incident type
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The name of the incident type
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewIncidentType registers a new resource with the given unique name, arguments, and options.
func NewIncidentType(ctx *pulumi.Context,
	name string, args *IncidentTypeArgs, opts ...pulumi.ResourceOption) (*IncidentType, error) {
	if args == nil {
		args = &IncidentTypeArgs{}
	}

	opts = pkgResourceDefaultOpts(opts)
	var resource IncidentType
	err := ctx.RegisterResource("rootly:index/incidentType:IncidentType", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIncidentType gets an existing IncidentType resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIncidentType(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IncidentTypeState, opts ...pulumi.ResourceOption) (*IncidentType, error) {
	var resource IncidentType
	err := ctx.ReadResource("rootly:index/incidentType:IncidentType", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IncidentType resources.
type incidentTypeState struct {
	// The cikir of the incident type
	Color *string `pulumi:"color"`
	// The description of the incident type
	Description *string `pulumi:"description"`
	// The name of the incident type
	Name *string `pulumi:"name"`
}

type IncidentTypeState struct {
	// The cikir of the incident type
	Color pulumi.StringPtrInput
	// The description of the incident type
	Description pulumi.StringPtrInput
	// The name of the incident type
	Name pulumi.StringPtrInput
}

func (IncidentTypeState) ElementType() reflect.Type {
	return reflect.TypeOf((*incidentTypeState)(nil)).Elem()
}

type incidentTypeArgs struct {
	// The cikir of the incident type
	Color *string `pulumi:"color"`
	// The description of the incident type
	Description *string `pulumi:"description"`
	// The name of the incident type
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a IncidentType resource.
type IncidentTypeArgs struct {
	// The cikir of the incident type
	Color pulumi.StringPtrInput
	// The description of the incident type
	Description pulumi.StringPtrInput
	// The name of the incident type
	Name pulumi.StringPtrInput
}

func (IncidentTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*incidentTypeArgs)(nil)).Elem()
}

type IncidentTypeInput interface {
	pulumi.Input

	ToIncidentTypeOutput() IncidentTypeOutput
	ToIncidentTypeOutputWithContext(ctx context.Context) IncidentTypeOutput
}

func (*IncidentType) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentType)(nil)).Elem()
}

func (i *IncidentType) ToIncidentTypeOutput() IncidentTypeOutput {
	return i.ToIncidentTypeOutputWithContext(context.Background())
}

func (i *IncidentType) ToIncidentTypeOutputWithContext(ctx context.Context) IncidentTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentTypeOutput)
}

// IncidentTypeArrayInput is an input type that accepts IncidentTypeArray and IncidentTypeArrayOutput values.
// You can construct a concrete instance of `IncidentTypeArrayInput` via:
//
//          IncidentTypeArray{ IncidentTypeArgs{...} }
type IncidentTypeArrayInput interface {
	pulumi.Input

	ToIncidentTypeArrayOutput() IncidentTypeArrayOutput
	ToIncidentTypeArrayOutputWithContext(context.Context) IncidentTypeArrayOutput
}

type IncidentTypeArray []IncidentTypeInput

func (IncidentTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IncidentType)(nil)).Elem()
}

func (i IncidentTypeArray) ToIncidentTypeArrayOutput() IncidentTypeArrayOutput {
	return i.ToIncidentTypeArrayOutputWithContext(context.Background())
}

func (i IncidentTypeArray) ToIncidentTypeArrayOutputWithContext(ctx context.Context) IncidentTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentTypeArrayOutput)
}

// IncidentTypeMapInput is an input type that accepts IncidentTypeMap and IncidentTypeMapOutput values.
// You can construct a concrete instance of `IncidentTypeMapInput` via:
//
//          IncidentTypeMap{ "key": IncidentTypeArgs{...} }
type IncidentTypeMapInput interface {
	pulumi.Input

	ToIncidentTypeMapOutput() IncidentTypeMapOutput
	ToIncidentTypeMapOutputWithContext(context.Context) IncidentTypeMapOutput
}

type IncidentTypeMap map[string]IncidentTypeInput

func (IncidentTypeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IncidentType)(nil)).Elem()
}

func (i IncidentTypeMap) ToIncidentTypeMapOutput() IncidentTypeMapOutput {
	return i.ToIncidentTypeMapOutputWithContext(context.Background())
}

func (i IncidentTypeMap) ToIncidentTypeMapOutputWithContext(ctx context.Context) IncidentTypeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IncidentTypeMapOutput)
}

type IncidentTypeOutput struct{ *pulumi.OutputState }

func (IncidentTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IncidentType)(nil)).Elem()
}

func (o IncidentTypeOutput) ToIncidentTypeOutput() IncidentTypeOutput {
	return o
}

func (o IncidentTypeOutput) ToIncidentTypeOutputWithContext(ctx context.Context) IncidentTypeOutput {
	return o
}

type IncidentTypeArrayOutput struct{ *pulumi.OutputState }

func (IncidentTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IncidentType)(nil)).Elem()
}

func (o IncidentTypeArrayOutput) ToIncidentTypeArrayOutput() IncidentTypeArrayOutput {
	return o
}

func (o IncidentTypeArrayOutput) ToIncidentTypeArrayOutputWithContext(ctx context.Context) IncidentTypeArrayOutput {
	return o
}

func (o IncidentTypeArrayOutput) Index(i pulumi.IntInput) IncidentTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IncidentType {
		return vs[0].([]*IncidentType)[vs[1].(int)]
	}).(IncidentTypeOutput)
}

type IncidentTypeMapOutput struct{ *pulumi.OutputState }

func (IncidentTypeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IncidentType)(nil)).Elem()
}

func (o IncidentTypeMapOutput) ToIncidentTypeMapOutput() IncidentTypeMapOutput {
	return o
}

func (o IncidentTypeMapOutput) ToIncidentTypeMapOutputWithContext(ctx context.Context) IncidentTypeMapOutput {
	return o
}

func (o IncidentTypeMapOutput) MapIndex(k pulumi.StringInput) IncidentTypeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IncidentType {
		return vs[0].(map[string]*IncidentType)[vs[1].(string)]
	}).(IncidentTypeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentTypeInput)(nil)).Elem(), &IncidentType{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentTypeArrayInput)(nil)).Elem(), IncidentTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IncidentTypeMapInput)(nil)).Elem(), IncidentTypeMap{})
	pulumi.RegisterOutputType(IncidentTypeOutput{})
	pulumi.RegisterOutputType(IncidentTypeArrayOutput{})
	pulumi.RegisterOutputType(IncidentTypeMapOutput{})
}
