// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createZendeskTicket task.
type WorkflowTaskCreateZendeskTicket struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateZendeskTicketTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreateZendeskTicket registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreateZendeskTicket(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreateZendeskTicketArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateZendeskTicket, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreateZendeskTicket
	err := ctx.RegisterResource("rootly:index/workflowTaskCreateZendeskTicket:WorkflowTaskCreateZendeskTicket", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreateZendeskTicket gets an existing WorkflowTaskCreateZendeskTicket resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreateZendeskTicket(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreateZendeskTicketState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateZendeskTicket, error) {
	var resource WorkflowTaskCreateZendeskTicket
	err := ctx.ReadResource("rootly:index/workflowTaskCreateZendeskTicket:WorkflowTaskCreateZendeskTicket", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreateZendeskTicket resources.
type workflowTaskCreateZendeskTicketState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreateZendeskTicketTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreateZendeskTicketState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateZendeskTicketTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreateZendeskTicketState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateZendeskTicketState)(nil)).Elem()
}

type workflowTaskCreateZendeskTicketArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateZendeskTicketTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreateZendeskTicket resource.
type WorkflowTaskCreateZendeskTicketArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateZendeskTicketTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreateZendeskTicketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateZendeskTicketArgs)(nil)).Elem()
}

type WorkflowTaskCreateZendeskTicketInput interface {
	pulumi.Input

	ToWorkflowTaskCreateZendeskTicketOutput() WorkflowTaskCreateZendeskTicketOutput
	ToWorkflowTaskCreateZendeskTicketOutputWithContext(ctx context.Context) WorkflowTaskCreateZendeskTicketOutput
}

func (*WorkflowTaskCreateZendeskTicket) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateZendeskTicket)(nil)).Elem()
}

func (i *WorkflowTaskCreateZendeskTicket) ToWorkflowTaskCreateZendeskTicketOutput() WorkflowTaskCreateZendeskTicketOutput {
	return i.ToWorkflowTaskCreateZendeskTicketOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreateZendeskTicket) ToWorkflowTaskCreateZendeskTicketOutputWithContext(ctx context.Context) WorkflowTaskCreateZendeskTicketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateZendeskTicketOutput)
}

// WorkflowTaskCreateZendeskTicketArrayInput is an input type that accepts WorkflowTaskCreateZendeskTicketArray and WorkflowTaskCreateZendeskTicketArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateZendeskTicketArrayInput` via:
//
//	WorkflowTaskCreateZendeskTicketArray{ WorkflowTaskCreateZendeskTicketArgs{...} }
type WorkflowTaskCreateZendeskTicketArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreateZendeskTicketArrayOutput() WorkflowTaskCreateZendeskTicketArrayOutput
	ToWorkflowTaskCreateZendeskTicketArrayOutputWithContext(context.Context) WorkflowTaskCreateZendeskTicketArrayOutput
}

type WorkflowTaskCreateZendeskTicketArray []WorkflowTaskCreateZendeskTicketInput

func (WorkflowTaskCreateZendeskTicketArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateZendeskTicket)(nil)).Elem()
}

func (i WorkflowTaskCreateZendeskTicketArray) ToWorkflowTaskCreateZendeskTicketArrayOutput() WorkflowTaskCreateZendeskTicketArrayOutput {
	return i.ToWorkflowTaskCreateZendeskTicketArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateZendeskTicketArray) ToWorkflowTaskCreateZendeskTicketArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateZendeskTicketArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateZendeskTicketArrayOutput)
}

// WorkflowTaskCreateZendeskTicketMapInput is an input type that accepts WorkflowTaskCreateZendeskTicketMap and WorkflowTaskCreateZendeskTicketMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateZendeskTicketMapInput` via:
//
//	WorkflowTaskCreateZendeskTicketMap{ "key": WorkflowTaskCreateZendeskTicketArgs{...} }
type WorkflowTaskCreateZendeskTicketMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreateZendeskTicketMapOutput() WorkflowTaskCreateZendeskTicketMapOutput
	ToWorkflowTaskCreateZendeskTicketMapOutputWithContext(context.Context) WorkflowTaskCreateZendeskTicketMapOutput
}

type WorkflowTaskCreateZendeskTicketMap map[string]WorkflowTaskCreateZendeskTicketInput

func (WorkflowTaskCreateZendeskTicketMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateZendeskTicket)(nil)).Elem()
}

func (i WorkflowTaskCreateZendeskTicketMap) ToWorkflowTaskCreateZendeskTicketMapOutput() WorkflowTaskCreateZendeskTicketMapOutput {
	return i.ToWorkflowTaskCreateZendeskTicketMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateZendeskTicketMap) ToWorkflowTaskCreateZendeskTicketMapOutputWithContext(ctx context.Context) WorkflowTaskCreateZendeskTicketMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateZendeskTicketMapOutput)
}

type WorkflowTaskCreateZendeskTicketOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateZendeskTicketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateZendeskTicket)(nil)).Elem()
}

func (o WorkflowTaskCreateZendeskTicketOutput) ToWorkflowTaskCreateZendeskTicketOutput() WorkflowTaskCreateZendeskTicketOutput {
	return o
}

func (o WorkflowTaskCreateZendeskTicketOutput) ToWorkflowTaskCreateZendeskTicketOutputWithContext(ctx context.Context) WorkflowTaskCreateZendeskTicketOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreateZendeskTicketOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateZendeskTicket) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreateZendeskTicketOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateZendeskTicket) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreateZendeskTicketOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateZendeskTicket) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreateZendeskTicketOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateZendeskTicket) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreateZendeskTicketOutput) TaskParams() WorkflowTaskCreateZendeskTicketTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateZendeskTicket) WorkflowTaskCreateZendeskTicketTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskCreateZendeskTicketTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreateZendeskTicketOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateZendeskTicket) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreateZendeskTicketArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateZendeskTicketArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateZendeskTicket)(nil)).Elem()
}

func (o WorkflowTaskCreateZendeskTicketArrayOutput) ToWorkflowTaskCreateZendeskTicketArrayOutput() WorkflowTaskCreateZendeskTicketArrayOutput {
	return o
}

func (o WorkflowTaskCreateZendeskTicketArrayOutput) ToWorkflowTaskCreateZendeskTicketArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateZendeskTicketArrayOutput {
	return o
}

func (o WorkflowTaskCreateZendeskTicketArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreateZendeskTicketOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreateZendeskTicket {
		return vs[0].([]*WorkflowTaskCreateZendeskTicket)[vs[1].(int)]
	}).(WorkflowTaskCreateZendeskTicketOutput)
}

type WorkflowTaskCreateZendeskTicketMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateZendeskTicketMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateZendeskTicket)(nil)).Elem()
}

func (o WorkflowTaskCreateZendeskTicketMapOutput) ToWorkflowTaskCreateZendeskTicketMapOutput() WorkflowTaskCreateZendeskTicketMapOutput {
	return o
}

func (o WorkflowTaskCreateZendeskTicketMapOutput) ToWorkflowTaskCreateZendeskTicketMapOutputWithContext(ctx context.Context) WorkflowTaskCreateZendeskTicketMapOutput {
	return o
}

func (o WorkflowTaskCreateZendeskTicketMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreateZendeskTicketOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreateZendeskTicket {
		return vs[0].(map[string]*WorkflowTaskCreateZendeskTicket)[vs[1].(string)]
	}).(WorkflowTaskCreateZendeskTicketOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateZendeskTicketInput)(nil)).Elem(), &WorkflowTaskCreateZendeskTicket{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateZendeskTicketArrayInput)(nil)).Elem(), WorkflowTaskCreateZendeskTicketArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateZendeskTicketMapInput)(nil)).Elem(), WorkflowTaskCreateZendeskTicketMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreateZendeskTicketOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateZendeskTicketArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateZendeskTicketMapOutput{})
}
