// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow callPeople task.
//
// ## Example Usage
type WorkflowTaskCallPeople struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCallPeopleTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCallPeople registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCallPeople(ctx *pulumi.Context,
	name string, args *WorkflowTaskCallPeopleArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCallPeople, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCallPeople
	err := ctx.RegisterResource("rootly:index/workflowTaskCallPeople:WorkflowTaskCallPeople", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCallPeople gets an existing WorkflowTaskCallPeople resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCallPeople(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCallPeopleState, opts ...pulumi.ResourceOption) (*WorkflowTaskCallPeople, error) {
	var resource WorkflowTaskCallPeople
	err := ctx.ReadResource("rootly:index/workflowTaskCallPeople:WorkflowTaskCallPeople", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCallPeople resources.
type workflowTaskCallPeopleState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCallPeopleTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCallPeopleState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCallPeopleTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCallPeopleState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCallPeopleState)(nil)).Elem()
}

type workflowTaskCallPeopleArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCallPeopleTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCallPeople resource.
type WorkflowTaskCallPeopleArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCallPeopleTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCallPeopleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCallPeopleArgs)(nil)).Elem()
}

type WorkflowTaskCallPeopleInput interface {
	pulumi.Input

	ToWorkflowTaskCallPeopleOutput() WorkflowTaskCallPeopleOutput
	ToWorkflowTaskCallPeopleOutputWithContext(ctx context.Context) WorkflowTaskCallPeopleOutput
}

func (*WorkflowTaskCallPeople) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCallPeople)(nil)).Elem()
}

func (i *WorkflowTaskCallPeople) ToWorkflowTaskCallPeopleOutput() WorkflowTaskCallPeopleOutput {
	return i.ToWorkflowTaskCallPeopleOutputWithContext(context.Background())
}

func (i *WorkflowTaskCallPeople) ToWorkflowTaskCallPeopleOutputWithContext(ctx context.Context) WorkflowTaskCallPeopleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCallPeopleOutput)
}

// WorkflowTaskCallPeopleArrayInput is an input type that accepts WorkflowTaskCallPeopleArray and WorkflowTaskCallPeopleArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCallPeopleArrayInput` via:
//
//	WorkflowTaskCallPeopleArray{ WorkflowTaskCallPeopleArgs{...} }
type WorkflowTaskCallPeopleArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCallPeopleArrayOutput() WorkflowTaskCallPeopleArrayOutput
	ToWorkflowTaskCallPeopleArrayOutputWithContext(context.Context) WorkflowTaskCallPeopleArrayOutput
}

type WorkflowTaskCallPeopleArray []WorkflowTaskCallPeopleInput

func (WorkflowTaskCallPeopleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCallPeople)(nil)).Elem()
}

func (i WorkflowTaskCallPeopleArray) ToWorkflowTaskCallPeopleArrayOutput() WorkflowTaskCallPeopleArrayOutput {
	return i.ToWorkflowTaskCallPeopleArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCallPeopleArray) ToWorkflowTaskCallPeopleArrayOutputWithContext(ctx context.Context) WorkflowTaskCallPeopleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCallPeopleArrayOutput)
}

// WorkflowTaskCallPeopleMapInput is an input type that accepts WorkflowTaskCallPeopleMap and WorkflowTaskCallPeopleMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCallPeopleMapInput` via:
//
//	WorkflowTaskCallPeopleMap{ "key": WorkflowTaskCallPeopleArgs{...} }
type WorkflowTaskCallPeopleMapInput interface {
	pulumi.Input

	ToWorkflowTaskCallPeopleMapOutput() WorkflowTaskCallPeopleMapOutput
	ToWorkflowTaskCallPeopleMapOutputWithContext(context.Context) WorkflowTaskCallPeopleMapOutput
}

type WorkflowTaskCallPeopleMap map[string]WorkflowTaskCallPeopleInput

func (WorkflowTaskCallPeopleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCallPeople)(nil)).Elem()
}

func (i WorkflowTaskCallPeopleMap) ToWorkflowTaskCallPeopleMapOutput() WorkflowTaskCallPeopleMapOutput {
	return i.ToWorkflowTaskCallPeopleMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCallPeopleMap) ToWorkflowTaskCallPeopleMapOutputWithContext(ctx context.Context) WorkflowTaskCallPeopleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCallPeopleMapOutput)
}

type WorkflowTaskCallPeopleOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCallPeopleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCallPeople)(nil)).Elem()
}

func (o WorkflowTaskCallPeopleOutput) ToWorkflowTaskCallPeopleOutput() WorkflowTaskCallPeopleOutput {
	return o
}

func (o WorkflowTaskCallPeopleOutput) ToWorkflowTaskCallPeopleOutputWithContext(ctx context.Context) WorkflowTaskCallPeopleOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCallPeopleOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCallPeople) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCallPeopleOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCallPeople) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCallPeopleOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCallPeople) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCallPeopleOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCallPeople) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCallPeopleOutput) TaskParams() WorkflowTaskCallPeopleTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCallPeople) WorkflowTaskCallPeopleTaskParamsOutput { return v.TaskParams }).(WorkflowTaskCallPeopleTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCallPeopleOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCallPeople) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCallPeopleArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCallPeopleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCallPeople)(nil)).Elem()
}

func (o WorkflowTaskCallPeopleArrayOutput) ToWorkflowTaskCallPeopleArrayOutput() WorkflowTaskCallPeopleArrayOutput {
	return o
}

func (o WorkflowTaskCallPeopleArrayOutput) ToWorkflowTaskCallPeopleArrayOutputWithContext(ctx context.Context) WorkflowTaskCallPeopleArrayOutput {
	return o
}

func (o WorkflowTaskCallPeopleArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCallPeopleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCallPeople {
		return vs[0].([]*WorkflowTaskCallPeople)[vs[1].(int)]
	}).(WorkflowTaskCallPeopleOutput)
}

type WorkflowTaskCallPeopleMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCallPeopleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCallPeople)(nil)).Elem()
}

func (o WorkflowTaskCallPeopleMapOutput) ToWorkflowTaskCallPeopleMapOutput() WorkflowTaskCallPeopleMapOutput {
	return o
}

func (o WorkflowTaskCallPeopleMapOutput) ToWorkflowTaskCallPeopleMapOutputWithContext(ctx context.Context) WorkflowTaskCallPeopleMapOutput {
	return o
}

func (o WorkflowTaskCallPeopleMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCallPeopleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCallPeople {
		return vs[0].(map[string]*WorkflowTaskCallPeople)[vs[1].(string)]
	}).(WorkflowTaskCallPeopleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCallPeopleInput)(nil)).Elem(), &WorkflowTaskCallPeople{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCallPeopleArrayInput)(nil)).Elem(), WorkflowTaskCallPeopleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCallPeopleMapInput)(nil)).Elem(), WorkflowTaskCallPeopleMap{})
	pulumi.RegisterOutputType(WorkflowTaskCallPeopleOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCallPeopleArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCallPeopleMapOutput{})
}
