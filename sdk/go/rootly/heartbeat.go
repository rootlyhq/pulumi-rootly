// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type Heartbeat struct {
	pulumi.CustomResourceState

	// Summary of alerts triggered when heartbeat expires.
	AlertSummary pulumi.StringOutput `pulumi:"alertSummary"`
	// The description of the heartbeat
	Description pulumi.StringOutput  `pulumi:"description"`
	Enabled     pulumi.BoolPtrOutput `pulumi:"enabled"`
	// When heartbeat expires
	ExpiresAt pulumi.StringOutput `pulumi:"expiresAt"`
	Interval  pulumi.IntOutput    `pulumi:"interval"`
	// Value must be one of `seconds`, `minutes`, `hours`.
	IntervalUnit pulumi.StringPtrOutput `pulumi:"intervalUnit"`
	// When the heartbeat was last pinged.
	LastPingedAt pulumi.StringOutput `pulumi:"lastPingedAt"`
	// The name of the heartbeat
	Name                 pulumi.StringOutput `pulumi:"name"`
	NotificationTargetId pulumi.StringOutput `pulumi:"notificationTargetId"`
	// Value must be one of `User`, `Group`, `Service`, `EscalationPolicy`.
	NotificationTargetType pulumi.StringPtrOutput `pulumi:"notificationTargetType"`
	// Value must be one of `waiting`, `active`, `expired`.
	Status pulumi.StringPtrOutput `pulumi:"status"`
}

// NewHeartbeat registers a new resource with the given unique name, arguments, and options.
func NewHeartbeat(ctx *pulumi.Context,
	name string, args *HeartbeatArgs, opts ...pulumi.ResourceOption) (*Heartbeat, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AlertSummary == nil {
		return nil, errors.New("invalid value for required argument 'AlertSummary'")
	}
	if args.Interval == nil {
		return nil, errors.New("invalid value for required argument 'Interval'")
	}
	if args.NotificationTargetId == nil {
		return nil, errors.New("invalid value for required argument 'NotificationTargetId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource Heartbeat
	err := ctx.RegisterResource("rootly:index/heartbeat:Heartbeat", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHeartbeat gets an existing Heartbeat resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHeartbeat(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HeartbeatState, opts ...pulumi.ResourceOption) (*Heartbeat, error) {
	var resource Heartbeat
	err := ctx.ReadResource("rootly:index/heartbeat:Heartbeat", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Heartbeat resources.
type heartbeatState struct {
	// Summary of alerts triggered when heartbeat expires.
	AlertSummary *string `pulumi:"alertSummary"`
	// The description of the heartbeat
	Description *string `pulumi:"description"`
	Enabled     *bool   `pulumi:"enabled"`
	// When heartbeat expires
	ExpiresAt *string `pulumi:"expiresAt"`
	Interval  *int    `pulumi:"interval"`
	// Value must be one of `seconds`, `minutes`, `hours`.
	IntervalUnit *string `pulumi:"intervalUnit"`
	// When the heartbeat was last pinged.
	LastPingedAt *string `pulumi:"lastPingedAt"`
	// The name of the heartbeat
	Name                 *string `pulumi:"name"`
	NotificationTargetId *string `pulumi:"notificationTargetId"`
	// Value must be one of `User`, `Group`, `Service`, `EscalationPolicy`.
	NotificationTargetType *string `pulumi:"notificationTargetType"`
	// Value must be one of `waiting`, `active`, `expired`.
	Status *string `pulumi:"status"`
}

type HeartbeatState struct {
	// Summary of alerts triggered when heartbeat expires.
	AlertSummary pulumi.StringPtrInput
	// The description of the heartbeat
	Description pulumi.StringPtrInput
	Enabled     pulumi.BoolPtrInput
	// When heartbeat expires
	ExpiresAt pulumi.StringPtrInput
	Interval  pulumi.IntPtrInput
	// Value must be one of `seconds`, `minutes`, `hours`.
	IntervalUnit pulumi.StringPtrInput
	// When the heartbeat was last pinged.
	LastPingedAt pulumi.StringPtrInput
	// The name of the heartbeat
	Name                 pulumi.StringPtrInput
	NotificationTargetId pulumi.StringPtrInput
	// Value must be one of `User`, `Group`, `Service`, `EscalationPolicy`.
	NotificationTargetType pulumi.StringPtrInput
	// Value must be one of `waiting`, `active`, `expired`.
	Status pulumi.StringPtrInput
}

func (HeartbeatState) ElementType() reflect.Type {
	return reflect.TypeOf((*heartbeatState)(nil)).Elem()
}

type heartbeatArgs struct {
	// Summary of alerts triggered when heartbeat expires.
	AlertSummary string `pulumi:"alertSummary"`
	// The description of the heartbeat
	Description *string `pulumi:"description"`
	Enabled     *bool   `pulumi:"enabled"`
	// When heartbeat expires
	ExpiresAt *string `pulumi:"expiresAt"`
	Interval  int     `pulumi:"interval"`
	// Value must be one of `seconds`, `minutes`, `hours`.
	IntervalUnit *string `pulumi:"intervalUnit"`
	// When the heartbeat was last pinged.
	LastPingedAt *string `pulumi:"lastPingedAt"`
	// The name of the heartbeat
	Name                 *string `pulumi:"name"`
	NotificationTargetId string  `pulumi:"notificationTargetId"`
	// Value must be one of `User`, `Group`, `Service`, `EscalationPolicy`.
	NotificationTargetType *string `pulumi:"notificationTargetType"`
	// Value must be one of `waiting`, `active`, `expired`.
	Status *string `pulumi:"status"`
}

// The set of arguments for constructing a Heartbeat resource.
type HeartbeatArgs struct {
	// Summary of alerts triggered when heartbeat expires.
	AlertSummary pulumi.StringInput
	// The description of the heartbeat
	Description pulumi.StringPtrInput
	Enabled     pulumi.BoolPtrInput
	// When heartbeat expires
	ExpiresAt pulumi.StringPtrInput
	Interval  pulumi.IntInput
	// Value must be one of `seconds`, `minutes`, `hours`.
	IntervalUnit pulumi.StringPtrInput
	// When the heartbeat was last pinged.
	LastPingedAt pulumi.StringPtrInput
	// The name of the heartbeat
	Name                 pulumi.StringPtrInput
	NotificationTargetId pulumi.StringInput
	// Value must be one of `User`, `Group`, `Service`, `EscalationPolicy`.
	NotificationTargetType pulumi.StringPtrInput
	// Value must be one of `waiting`, `active`, `expired`.
	Status pulumi.StringPtrInput
}

func (HeartbeatArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*heartbeatArgs)(nil)).Elem()
}

type HeartbeatInput interface {
	pulumi.Input

	ToHeartbeatOutput() HeartbeatOutput
	ToHeartbeatOutputWithContext(ctx context.Context) HeartbeatOutput
}

func (*Heartbeat) ElementType() reflect.Type {
	return reflect.TypeOf((**Heartbeat)(nil)).Elem()
}

func (i *Heartbeat) ToHeartbeatOutput() HeartbeatOutput {
	return i.ToHeartbeatOutputWithContext(context.Background())
}

func (i *Heartbeat) ToHeartbeatOutputWithContext(ctx context.Context) HeartbeatOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatOutput)
}

// HeartbeatArrayInput is an input type that accepts HeartbeatArray and HeartbeatArrayOutput values.
// You can construct a concrete instance of `HeartbeatArrayInput` via:
//
//	HeartbeatArray{ HeartbeatArgs{...} }
type HeartbeatArrayInput interface {
	pulumi.Input

	ToHeartbeatArrayOutput() HeartbeatArrayOutput
	ToHeartbeatArrayOutputWithContext(context.Context) HeartbeatArrayOutput
}

type HeartbeatArray []HeartbeatInput

func (HeartbeatArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Heartbeat)(nil)).Elem()
}

func (i HeartbeatArray) ToHeartbeatArrayOutput() HeartbeatArrayOutput {
	return i.ToHeartbeatArrayOutputWithContext(context.Background())
}

func (i HeartbeatArray) ToHeartbeatArrayOutputWithContext(ctx context.Context) HeartbeatArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatArrayOutput)
}

// HeartbeatMapInput is an input type that accepts HeartbeatMap and HeartbeatMapOutput values.
// You can construct a concrete instance of `HeartbeatMapInput` via:
//
//	HeartbeatMap{ "key": HeartbeatArgs{...} }
type HeartbeatMapInput interface {
	pulumi.Input

	ToHeartbeatMapOutput() HeartbeatMapOutput
	ToHeartbeatMapOutputWithContext(context.Context) HeartbeatMapOutput
}

type HeartbeatMap map[string]HeartbeatInput

func (HeartbeatMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Heartbeat)(nil)).Elem()
}

func (i HeartbeatMap) ToHeartbeatMapOutput() HeartbeatMapOutput {
	return i.ToHeartbeatMapOutputWithContext(context.Background())
}

func (i HeartbeatMap) ToHeartbeatMapOutputWithContext(ctx context.Context) HeartbeatMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HeartbeatMapOutput)
}

type HeartbeatOutput struct{ *pulumi.OutputState }

func (HeartbeatOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Heartbeat)(nil)).Elem()
}

func (o HeartbeatOutput) ToHeartbeatOutput() HeartbeatOutput {
	return o
}

func (o HeartbeatOutput) ToHeartbeatOutputWithContext(ctx context.Context) HeartbeatOutput {
	return o
}

// Summary of alerts triggered when heartbeat expires.
func (o HeartbeatOutput) AlertSummary() pulumi.StringOutput {
	return o.ApplyT(func(v *Heartbeat) pulumi.StringOutput { return v.AlertSummary }).(pulumi.StringOutput)
}

// The description of the heartbeat
func (o HeartbeatOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *Heartbeat) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o HeartbeatOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *Heartbeat) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// When heartbeat expires
func (o HeartbeatOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Heartbeat) pulumi.StringOutput { return v.ExpiresAt }).(pulumi.StringOutput)
}

func (o HeartbeatOutput) Interval() pulumi.IntOutput {
	return o.ApplyT(func(v *Heartbeat) pulumi.IntOutput { return v.Interval }).(pulumi.IntOutput)
}

// Value must be one of `seconds`, `minutes`, `hours`.
func (o HeartbeatOutput) IntervalUnit() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Heartbeat) pulumi.StringPtrOutput { return v.IntervalUnit }).(pulumi.StringPtrOutput)
}

// When the heartbeat was last pinged.
func (o HeartbeatOutput) LastPingedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *Heartbeat) pulumi.StringOutput { return v.LastPingedAt }).(pulumi.StringOutput)
}

// The name of the heartbeat
func (o HeartbeatOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *Heartbeat) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o HeartbeatOutput) NotificationTargetId() pulumi.StringOutput {
	return o.ApplyT(func(v *Heartbeat) pulumi.StringOutput { return v.NotificationTargetId }).(pulumi.StringOutput)
}

// Value must be one of `User`, `Group`, `Service`, `EscalationPolicy`.
func (o HeartbeatOutput) NotificationTargetType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Heartbeat) pulumi.StringPtrOutput { return v.NotificationTargetType }).(pulumi.StringPtrOutput)
}

// Value must be one of `waiting`, `active`, `expired`.
func (o HeartbeatOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *Heartbeat) pulumi.StringPtrOutput { return v.Status }).(pulumi.StringPtrOutput)
}

type HeartbeatArrayOutput struct{ *pulumi.OutputState }

func (HeartbeatArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Heartbeat)(nil)).Elem()
}

func (o HeartbeatArrayOutput) ToHeartbeatArrayOutput() HeartbeatArrayOutput {
	return o
}

func (o HeartbeatArrayOutput) ToHeartbeatArrayOutputWithContext(ctx context.Context) HeartbeatArrayOutput {
	return o
}

func (o HeartbeatArrayOutput) Index(i pulumi.IntInput) HeartbeatOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Heartbeat {
		return vs[0].([]*Heartbeat)[vs[1].(int)]
	}).(HeartbeatOutput)
}

type HeartbeatMapOutput struct{ *pulumi.OutputState }

func (HeartbeatMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Heartbeat)(nil)).Elem()
}

func (o HeartbeatMapOutput) ToHeartbeatMapOutput() HeartbeatMapOutput {
	return o
}

func (o HeartbeatMapOutput) ToHeartbeatMapOutputWithContext(ctx context.Context) HeartbeatMapOutput {
	return o
}

func (o HeartbeatMapOutput) MapIndex(k pulumi.StringInput) HeartbeatOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Heartbeat {
		return vs[0].(map[string]*Heartbeat)[vs[1].(string)]
	}).(HeartbeatOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatInput)(nil)).Elem(), &Heartbeat{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatArrayInput)(nil)).Elem(), HeartbeatArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*HeartbeatMapInput)(nil)).Elem(), HeartbeatMap{})
	pulumi.RegisterOutputType(HeartbeatOutput{})
	pulumi.RegisterOutputType(HeartbeatArrayOutput{})
	pulumi.RegisterOutputType(HeartbeatMapOutput{})
}
