// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow addToTimeline task.
type WorkflowTaskAddToTimeline struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAddToTimelineTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskAddToTimeline registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskAddToTimeline(ctx *pulumi.Context,
	name string, args *WorkflowTaskAddToTimelineArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskAddToTimeline, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskAddToTimeline
	err := ctx.RegisterResource("rootly:index/workflowTaskAddToTimeline:WorkflowTaskAddToTimeline", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskAddToTimeline gets an existing WorkflowTaskAddToTimeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskAddToTimeline(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskAddToTimelineState, opts ...pulumi.ResourceOption) (*WorkflowTaskAddToTimeline, error) {
	var resource WorkflowTaskAddToTimeline
	err := ctx.ReadResource("rootly:index/workflowTaskAddToTimeline:WorkflowTaskAddToTimeline", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskAddToTimeline resources.
type workflowTaskAddToTimelineState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskAddToTimelineTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskAddToTimelineState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAddToTimelineTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskAddToTimelineState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskAddToTimelineState)(nil)).Elem()
}

type workflowTaskAddToTimelineArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAddToTimelineTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskAddToTimeline resource.
type WorkflowTaskAddToTimelineArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskAddToTimelineTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskAddToTimelineArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskAddToTimelineArgs)(nil)).Elem()
}

type WorkflowTaskAddToTimelineInput interface {
	pulumi.Input

	ToWorkflowTaskAddToTimelineOutput() WorkflowTaskAddToTimelineOutput
	ToWorkflowTaskAddToTimelineOutputWithContext(ctx context.Context) WorkflowTaskAddToTimelineOutput
}

func (*WorkflowTaskAddToTimeline) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskAddToTimeline)(nil)).Elem()
}

func (i *WorkflowTaskAddToTimeline) ToWorkflowTaskAddToTimelineOutput() WorkflowTaskAddToTimelineOutput {
	return i.ToWorkflowTaskAddToTimelineOutputWithContext(context.Background())
}

func (i *WorkflowTaskAddToTimeline) ToWorkflowTaskAddToTimelineOutputWithContext(ctx context.Context) WorkflowTaskAddToTimelineOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskAddToTimelineOutput)
}

// WorkflowTaskAddToTimelineArrayInput is an input type that accepts WorkflowTaskAddToTimelineArray and WorkflowTaskAddToTimelineArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskAddToTimelineArrayInput` via:
//
//	WorkflowTaskAddToTimelineArray{ WorkflowTaskAddToTimelineArgs{...} }
type WorkflowTaskAddToTimelineArrayInput interface {
	pulumi.Input

	ToWorkflowTaskAddToTimelineArrayOutput() WorkflowTaskAddToTimelineArrayOutput
	ToWorkflowTaskAddToTimelineArrayOutputWithContext(context.Context) WorkflowTaskAddToTimelineArrayOutput
}

type WorkflowTaskAddToTimelineArray []WorkflowTaskAddToTimelineInput

func (WorkflowTaskAddToTimelineArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskAddToTimeline)(nil)).Elem()
}

func (i WorkflowTaskAddToTimelineArray) ToWorkflowTaskAddToTimelineArrayOutput() WorkflowTaskAddToTimelineArrayOutput {
	return i.ToWorkflowTaskAddToTimelineArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskAddToTimelineArray) ToWorkflowTaskAddToTimelineArrayOutputWithContext(ctx context.Context) WorkflowTaskAddToTimelineArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskAddToTimelineArrayOutput)
}

// WorkflowTaskAddToTimelineMapInput is an input type that accepts WorkflowTaskAddToTimelineMap and WorkflowTaskAddToTimelineMapOutput values.
// You can construct a concrete instance of `WorkflowTaskAddToTimelineMapInput` via:
//
//	WorkflowTaskAddToTimelineMap{ "key": WorkflowTaskAddToTimelineArgs{...} }
type WorkflowTaskAddToTimelineMapInput interface {
	pulumi.Input

	ToWorkflowTaskAddToTimelineMapOutput() WorkflowTaskAddToTimelineMapOutput
	ToWorkflowTaskAddToTimelineMapOutputWithContext(context.Context) WorkflowTaskAddToTimelineMapOutput
}

type WorkflowTaskAddToTimelineMap map[string]WorkflowTaskAddToTimelineInput

func (WorkflowTaskAddToTimelineMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskAddToTimeline)(nil)).Elem()
}

func (i WorkflowTaskAddToTimelineMap) ToWorkflowTaskAddToTimelineMapOutput() WorkflowTaskAddToTimelineMapOutput {
	return i.ToWorkflowTaskAddToTimelineMapOutputWithContext(context.Background())
}

func (i WorkflowTaskAddToTimelineMap) ToWorkflowTaskAddToTimelineMapOutputWithContext(ctx context.Context) WorkflowTaskAddToTimelineMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskAddToTimelineMapOutput)
}

type WorkflowTaskAddToTimelineOutput struct{ *pulumi.OutputState }

func (WorkflowTaskAddToTimelineOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskAddToTimeline)(nil)).Elem()
}

func (o WorkflowTaskAddToTimelineOutput) ToWorkflowTaskAddToTimelineOutput() WorkflowTaskAddToTimelineOutput {
	return o
}

func (o WorkflowTaskAddToTimelineOutput) ToWorkflowTaskAddToTimelineOutputWithContext(ctx context.Context) WorkflowTaskAddToTimelineOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskAddToTimelineOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskAddToTimeline) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskAddToTimelineOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskAddToTimeline) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskAddToTimelineOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskAddToTimeline) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskAddToTimelineOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskAddToTimeline) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskAddToTimelineOutput) TaskParams() WorkflowTaskAddToTimelineTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskAddToTimeline) WorkflowTaskAddToTimelineTaskParamsOutput { return v.TaskParams }).(WorkflowTaskAddToTimelineTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskAddToTimelineOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskAddToTimeline) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskAddToTimelineArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskAddToTimelineArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskAddToTimeline)(nil)).Elem()
}

func (o WorkflowTaskAddToTimelineArrayOutput) ToWorkflowTaskAddToTimelineArrayOutput() WorkflowTaskAddToTimelineArrayOutput {
	return o
}

func (o WorkflowTaskAddToTimelineArrayOutput) ToWorkflowTaskAddToTimelineArrayOutputWithContext(ctx context.Context) WorkflowTaskAddToTimelineArrayOutput {
	return o
}

func (o WorkflowTaskAddToTimelineArrayOutput) Index(i pulumi.IntInput) WorkflowTaskAddToTimelineOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskAddToTimeline {
		return vs[0].([]*WorkflowTaskAddToTimeline)[vs[1].(int)]
	}).(WorkflowTaskAddToTimelineOutput)
}

type WorkflowTaskAddToTimelineMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskAddToTimelineMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskAddToTimeline)(nil)).Elem()
}

func (o WorkflowTaskAddToTimelineMapOutput) ToWorkflowTaskAddToTimelineMapOutput() WorkflowTaskAddToTimelineMapOutput {
	return o
}

func (o WorkflowTaskAddToTimelineMapOutput) ToWorkflowTaskAddToTimelineMapOutputWithContext(ctx context.Context) WorkflowTaskAddToTimelineMapOutput {
	return o
}

func (o WorkflowTaskAddToTimelineMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskAddToTimelineOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskAddToTimeline {
		return vs[0].(map[string]*WorkflowTaskAddToTimeline)[vs[1].(string)]
	}).(WorkflowTaskAddToTimelineOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskAddToTimelineInput)(nil)).Elem(), &WorkflowTaskAddToTimeline{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskAddToTimelineArrayInput)(nil)).Elem(), WorkflowTaskAddToTimelineArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskAddToTimelineMapInput)(nil)).Elem(), WorkflowTaskAddToTimelineMap{})
	pulumi.RegisterOutputType(WorkflowTaskAddToTimelineOutput{})
	pulumi.RegisterOutputType(WorkflowTaskAddToTimelineArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskAddToTimelineMapOutput{})
}
