// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// ## Example Usage
type WorkflowIncident struct {
	pulumi.CustomResourceState

	CauseIds pulumi.StringArrayOutput `pulumi:"causeIds"`
	// Workflow command
	Command pulumi.StringOutput `pulumi:"command"`
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled pulumi.BoolOutput `pulumi:"commandFeedbackEnabled"`
	// The description of the workflow
	Description      pulumi.StringOutput      `pulumi:"description"`
	Enabled          pulumi.BoolPtrOutput     `pulumi:"enabled"`
	EnvironmentIds   pulumi.StringArrayOutput `pulumi:"environmentIds"`
	FunctionalityIds pulumi.StringArrayOutput `pulumi:"functionalityIds"`
	GroupIds         pulumi.StringArrayOutput `pulumi:"groupIds"`
	IncidentRoleIds  pulumi.StringArrayOutput `pulumi:"incidentRoleIds"`
	IncidentTypeIds  pulumi.StringArrayOutput `pulumi:"incidentTypeIds"`
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked pulumi.BoolOutput `pulumi:"locked"`
	// The title of the workflow
	Name pulumi.StringOutput `pulumi:"name"`
	// The order which the workflow should run with other workflows.
	Position pulumi.IntOutput `pulumi:"position"`
	// Repeat workflow every duration
	RepeatEveryDuration pulumi.StringOutput `pulumi:"repeatEveryDuration"`
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   pulumi.StringArrayOutput `pulumi:"repeatOns"`
	ServiceIds  pulumi.StringArrayOutput `pulumi:"serviceIds"`
	SeverityIds pulumi.StringArrayOutput `pulumi:"severityIds"`
	// The slug of the workflow
	Slug          pulumi.StringOutput                 `pulumi:"slug"`
	TriggerParams WorkflowIncidentTriggerParamsOutput `pulumi:"triggerParams"`
	// Wait this duration before executing
	Wait pulumi.StringOutput `pulumi:"wait"`
	// The group this workflow belongs to.
	WorkflowGroupId pulumi.StringOutput `pulumi:"workflowGroupId"`
}

// NewWorkflowIncident registers a new resource with the given unique name, arguments, and options.
func NewWorkflowIncident(ctx *pulumi.Context,
	name string, args *WorkflowIncidentArgs, opts ...pulumi.ResourceOption) (*WorkflowIncident, error) {
	if args == nil {
		args = &WorkflowIncidentArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowIncident
	err := ctx.RegisterResource("rootly:index/workflowIncident:WorkflowIncident", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowIncident gets an existing WorkflowIncident resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowIncident(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowIncidentState, opts ...pulumi.ResourceOption) (*WorkflowIncident, error) {
	var resource WorkflowIncident
	err := ctx.ReadResource("rootly:index/workflowIncident:WorkflowIncident", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowIncident resources.
type workflowIncidentState struct {
	CauseIds []string `pulumi:"causeIds"`
	// Workflow command
	Command *string `pulumi:"command"`
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled *bool `pulumi:"commandFeedbackEnabled"`
	// The description of the workflow
	Description      *string  `pulumi:"description"`
	Enabled          *bool    `pulumi:"enabled"`
	EnvironmentIds   []string `pulumi:"environmentIds"`
	FunctionalityIds []string `pulumi:"functionalityIds"`
	GroupIds         []string `pulumi:"groupIds"`
	IncidentRoleIds  []string `pulumi:"incidentRoleIds"`
	IncidentTypeIds  []string `pulumi:"incidentTypeIds"`
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked *bool `pulumi:"locked"`
	// The title of the workflow
	Name *string `pulumi:"name"`
	// The order which the workflow should run with other workflows.
	Position *int `pulumi:"position"`
	// Repeat workflow every duration
	RepeatEveryDuration *string `pulumi:"repeatEveryDuration"`
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   []string `pulumi:"repeatOns"`
	ServiceIds  []string `pulumi:"serviceIds"`
	SeverityIds []string `pulumi:"severityIds"`
	// The slug of the workflow
	Slug          *string                        `pulumi:"slug"`
	TriggerParams *WorkflowIncidentTriggerParams `pulumi:"triggerParams"`
	// Wait this duration before executing
	Wait *string `pulumi:"wait"`
	// The group this workflow belongs to.
	WorkflowGroupId *string `pulumi:"workflowGroupId"`
}

type WorkflowIncidentState struct {
	CauseIds pulumi.StringArrayInput
	// Workflow command
	Command pulumi.StringPtrInput
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled pulumi.BoolPtrInput
	// The description of the workflow
	Description      pulumi.StringPtrInput
	Enabled          pulumi.BoolPtrInput
	EnvironmentIds   pulumi.StringArrayInput
	FunctionalityIds pulumi.StringArrayInput
	GroupIds         pulumi.StringArrayInput
	IncidentRoleIds  pulumi.StringArrayInput
	IncidentTypeIds  pulumi.StringArrayInput
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked pulumi.BoolPtrInput
	// The title of the workflow
	Name pulumi.StringPtrInput
	// The order which the workflow should run with other workflows.
	Position pulumi.IntPtrInput
	// Repeat workflow every duration
	RepeatEveryDuration pulumi.StringPtrInput
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   pulumi.StringArrayInput
	ServiceIds  pulumi.StringArrayInput
	SeverityIds pulumi.StringArrayInput
	// The slug of the workflow
	Slug          pulumi.StringPtrInput
	TriggerParams WorkflowIncidentTriggerParamsPtrInput
	// Wait this duration before executing
	Wait pulumi.StringPtrInput
	// The group this workflow belongs to.
	WorkflowGroupId pulumi.StringPtrInput
}

func (WorkflowIncidentState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowIncidentState)(nil)).Elem()
}

type workflowIncidentArgs struct {
	CauseIds []string `pulumi:"causeIds"`
	// Workflow command
	Command *string `pulumi:"command"`
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled *bool `pulumi:"commandFeedbackEnabled"`
	// The description of the workflow
	Description      *string  `pulumi:"description"`
	Enabled          *bool    `pulumi:"enabled"`
	EnvironmentIds   []string `pulumi:"environmentIds"`
	FunctionalityIds []string `pulumi:"functionalityIds"`
	GroupIds         []string `pulumi:"groupIds"`
	IncidentRoleIds  []string `pulumi:"incidentRoleIds"`
	IncidentTypeIds  []string `pulumi:"incidentTypeIds"`
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked *bool `pulumi:"locked"`
	// The title of the workflow
	Name *string `pulumi:"name"`
	// The order which the workflow should run with other workflows.
	Position *int `pulumi:"position"`
	// Repeat workflow every duration
	RepeatEveryDuration *string `pulumi:"repeatEveryDuration"`
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   []string `pulumi:"repeatOns"`
	ServiceIds  []string `pulumi:"serviceIds"`
	SeverityIds []string `pulumi:"severityIds"`
	// The slug of the workflow
	Slug          *string                        `pulumi:"slug"`
	TriggerParams *WorkflowIncidentTriggerParams `pulumi:"triggerParams"`
	// Wait this duration before executing
	Wait *string `pulumi:"wait"`
	// The group this workflow belongs to.
	WorkflowGroupId *string `pulumi:"workflowGroupId"`
}

// The set of arguments for constructing a WorkflowIncident resource.
type WorkflowIncidentArgs struct {
	CauseIds pulumi.StringArrayInput
	// Workflow command
	Command pulumi.StringPtrInput
	// This will notify you back when the workflow is starting. Value must be one of true or false
	CommandFeedbackEnabled pulumi.BoolPtrInput
	// The description of the workflow
	Description      pulumi.StringPtrInput
	Enabled          pulumi.BoolPtrInput
	EnvironmentIds   pulumi.StringArrayInput
	FunctionalityIds pulumi.StringArrayInput
	GroupIds         pulumi.StringArrayInput
	IncidentRoleIds  pulumi.StringArrayInput
	IncidentTypeIds  pulumi.StringArrayInput
	// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
	Locked pulumi.BoolPtrInput
	// The title of the workflow
	Name pulumi.StringPtrInput
	// The order which the workflow should run with other workflows.
	Position pulumi.IntPtrInput
	// Repeat workflow every duration
	RepeatEveryDuration pulumi.StringPtrInput
	// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	RepeatOns   pulumi.StringArrayInput
	ServiceIds  pulumi.StringArrayInput
	SeverityIds pulumi.StringArrayInput
	// The slug of the workflow
	Slug          pulumi.StringPtrInput
	TriggerParams WorkflowIncidentTriggerParamsPtrInput
	// Wait this duration before executing
	Wait pulumi.StringPtrInput
	// The group this workflow belongs to.
	WorkflowGroupId pulumi.StringPtrInput
}

func (WorkflowIncidentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowIncidentArgs)(nil)).Elem()
}

type WorkflowIncidentInput interface {
	pulumi.Input

	ToWorkflowIncidentOutput() WorkflowIncidentOutput
	ToWorkflowIncidentOutputWithContext(ctx context.Context) WorkflowIncidentOutput
}

func (*WorkflowIncident) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowIncident)(nil)).Elem()
}

func (i *WorkflowIncident) ToWorkflowIncidentOutput() WorkflowIncidentOutput {
	return i.ToWorkflowIncidentOutputWithContext(context.Background())
}

func (i *WorkflowIncident) ToWorkflowIncidentOutputWithContext(ctx context.Context) WorkflowIncidentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowIncidentOutput)
}

// WorkflowIncidentArrayInput is an input type that accepts WorkflowIncidentArray and WorkflowIncidentArrayOutput values.
// You can construct a concrete instance of `WorkflowIncidentArrayInput` via:
//
//	WorkflowIncidentArray{ WorkflowIncidentArgs{...} }
type WorkflowIncidentArrayInput interface {
	pulumi.Input

	ToWorkflowIncidentArrayOutput() WorkflowIncidentArrayOutput
	ToWorkflowIncidentArrayOutputWithContext(context.Context) WorkflowIncidentArrayOutput
}

type WorkflowIncidentArray []WorkflowIncidentInput

func (WorkflowIncidentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowIncident)(nil)).Elem()
}

func (i WorkflowIncidentArray) ToWorkflowIncidentArrayOutput() WorkflowIncidentArrayOutput {
	return i.ToWorkflowIncidentArrayOutputWithContext(context.Background())
}

func (i WorkflowIncidentArray) ToWorkflowIncidentArrayOutputWithContext(ctx context.Context) WorkflowIncidentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowIncidentArrayOutput)
}

// WorkflowIncidentMapInput is an input type that accepts WorkflowIncidentMap and WorkflowIncidentMapOutput values.
// You can construct a concrete instance of `WorkflowIncidentMapInput` via:
//
//	WorkflowIncidentMap{ "key": WorkflowIncidentArgs{...} }
type WorkflowIncidentMapInput interface {
	pulumi.Input

	ToWorkflowIncidentMapOutput() WorkflowIncidentMapOutput
	ToWorkflowIncidentMapOutputWithContext(context.Context) WorkflowIncidentMapOutput
}

type WorkflowIncidentMap map[string]WorkflowIncidentInput

func (WorkflowIncidentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowIncident)(nil)).Elem()
}

func (i WorkflowIncidentMap) ToWorkflowIncidentMapOutput() WorkflowIncidentMapOutput {
	return i.ToWorkflowIncidentMapOutputWithContext(context.Background())
}

func (i WorkflowIncidentMap) ToWorkflowIncidentMapOutputWithContext(ctx context.Context) WorkflowIncidentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowIncidentMapOutput)
}

type WorkflowIncidentOutput struct{ *pulumi.OutputState }

func (WorkflowIncidentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowIncident)(nil)).Elem()
}

func (o WorkflowIncidentOutput) ToWorkflowIncidentOutput() WorkflowIncidentOutput {
	return o
}

func (o WorkflowIncidentOutput) ToWorkflowIncidentOutputWithContext(ctx context.Context) WorkflowIncidentOutput {
	return o
}

func (o WorkflowIncidentOutput) CauseIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.StringArrayOutput { return v.CauseIds }).(pulumi.StringArrayOutput)
}

// Workflow command
func (o WorkflowIncidentOutput) Command() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.StringOutput { return v.Command }).(pulumi.StringOutput)
}

// This will notify you back when the workflow is starting. Value must be one of true or false
func (o WorkflowIncidentOutput) CommandFeedbackEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.BoolOutput { return v.CommandFeedbackEnabled }).(pulumi.BoolOutput)
}

// The description of the workflow
func (o WorkflowIncidentOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o WorkflowIncidentOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

func (o WorkflowIncidentOutput) EnvironmentIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.StringArrayOutput { return v.EnvironmentIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowIncidentOutput) FunctionalityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.StringArrayOutput { return v.FunctionalityIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowIncidentOutput) GroupIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.StringArrayOutput { return v.GroupIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowIncidentOutput) IncidentRoleIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.StringArrayOutput { return v.IncidentRoleIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowIncidentOutput) IncidentTypeIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.StringArrayOutput { return v.IncidentTypeIds }).(pulumi.StringArrayOutput)
}

// Restricts workflow edits to admins when turned on. Only admins can set this field.. Value must be one of true or false
func (o WorkflowIncidentOutput) Locked() pulumi.BoolOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.BoolOutput { return v.Locked }).(pulumi.BoolOutput)
}

// The title of the workflow
func (o WorkflowIncidentOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The order which the workflow should run with other workflows.
func (o WorkflowIncidentOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Repeat workflow every duration
func (o WorkflowIncidentOutput) RepeatEveryDuration() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.StringOutput { return v.RepeatEveryDuration }).(pulumi.StringOutput)
}

// Repeat on weekdays. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
func (o WorkflowIncidentOutput) RepeatOns() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.StringArrayOutput { return v.RepeatOns }).(pulumi.StringArrayOutput)
}

func (o WorkflowIncidentOutput) ServiceIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.StringArrayOutput { return v.ServiceIds }).(pulumi.StringArrayOutput)
}

func (o WorkflowIncidentOutput) SeverityIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.StringArrayOutput { return v.SeverityIds }).(pulumi.StringArrayOutput)
}

// The slug of the workflow
func (o WorkflowIncidentOutput) Slug() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.StringOutput { return v.Slug }).(pulumi.StringOutput)
}

func (o WorkflowIncidentOutput) TriggerParams() WorkflowIncidentTriggerParamsOutput {
	return o.ApplyT(func(v *WorkflowIncident) WorkflowIncidentTriggerParamsOutput { return v.TriggerParams }).(WorkflowIncidentTriggerParamsOutput)
}

// Wait this duration before executing
func (o WorkflowIncidentOutput) Wait() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.StringOutput { return v.Wait }).(pulumi.StringOutput)
}

// The group this workflow belongs to.
func (o WorkflowIncidentOutput) WorkflowGroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowIncident) pulumi.StringOutput { return v.WorkflowGroupId }).(pulumi.StringOutput)
}

type WorkflowIncidentArrayOutput struct{ *pulumi.OutputState }

func (WorkflowIncidentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowIncident)(nil)).Elem()
}

func (o WorkflowIncidentArrayOutput) ToWorkflowIncidentArrayOutput() WorkflowIncidentArrayOutput {
	return o
}

func (o WorkflowIncidentArrayOutput) ToWorkflowIncidentArrayOutputWithContext(ctx context.Context) WorkflowIncidentArrayOutput {
	return o
}

func (o WorkflowIncidentArrayOutput) Index(i pulumi.IntInput) WorkflowIncidentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowIncident {
		return vs[0].([]*WorkflowIncident)[vs[1].(int)]
	}).(WorkflowIncidentOutput)
}

type WorkflowIncidentMapOutput struct{ *pulumi.OutputState }

func (WorkflowIncidentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowIncident)(nil)).Elem()
}

func (o WorkflowIncidentMapOutput) ToWorkflowIncidentMapOutput() WorkflowIncidentMapOutput {
	return o
}

func (o WorkflowIncidentMapOutput) ToWorkflowIncidentMapOutputWithContext(ctx context.Context) WorkflowIncidentMapOutput {
	return o
}

func (o WorkflowIncidentMapOutput) MapIndex(k pulumi.StringInput) WorkflowIncidentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowIncident {
		return vs[0].(map[string]*WorkflowIncident)[vs[1].(string)]
	}).(WorkflowIncidentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowIncidentInput)(nil)).Elem(), &WorkflowIncident{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowIncidentArrayInput)(nil)).Elem(), WorkflowIncidentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowIncidentMapInput)(nil)).Elem(), WorkflowIncidentMap{})
	pulumi.RegisterOutputType(WorkflowIncidentOutput{})
	pulumi.RegisterOutputType(WorkflowIncidentArrayOutput{})
	pulumi.RegisterOutputType(WorkflowIncidentMapOutput{})
}
