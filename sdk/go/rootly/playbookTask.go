// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type PlaybookTask struct {
	pulumi.CustomResourceState

	// The description of task
	Description pulumi.StringOutput `pulumi:"description"`
	PlaybookId  pulumi.StringOutput `pulumi:"playbookId"`
	// The position of the task
	Position pulumi.IntOutput `pulumi:"position"`
	// The task of the task
	Task pulumi.StringOutput `pulumi:"task"`
}

// NewPlaybookTask registers a new resource with the given unique name, arguments, and options.
func NewPlaybookTask(ctx *pulumi.Context,
	name string, args *PlaybookTaskArgs, opts ...pulumi.ResourceOption) (*PlaybookTask, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Task == nil {
		return nil, errors.New("invalid value for required argument 'Task'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PlaybookTask
	err := ctx.RegisterResource("rootly:index/playbookTask:PlaybookTask", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPlaybookTask gets an existing PlaybookTask resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPlaybookTask(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PlaybookTaskState, opts ...pulumi.ResourceOption) (*PlaybookTask, error) {
	var resource PlaybookTask
	err := ctx.ReadResource("rootly:index/playbookTask:PlaybookTask", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PlaybookTask resources.
type playbookTaskState struct {
	// The description of task
	Description *string `pulumi:"description"`
	PlaybookId  *string `pulumi:"playbookId"`
	// The position of the task
	Position *int `pulumi:"position"`
	// The task of the task
	Task *string `pulumi:"task"`
}

type PlaybookTaskState struct {
	// The description of task
	Description pulumi.StringPtrInput
	PlaybookId  pulumi.StringPtrInput
	// The position of the task
	Position pulumi.IntPtrInput
	// The task of the task
	Task pulumi.StringPtrInput
}

func (PlaybookTaskState) ElementType() reflect.Type {
	return reflect.TypeOf((*playbookTaskState)(nil)).Elem()
}

type playbookTaskArgs struct {
	// The description of task
	Description *string `pulumi:"description"`
	PlaybookId  *string `pulumi:"playbookId"`
	// The position of the task
	Position *int `pulumi:"position"`
	// The task of the task
	Task string `pulumi:"task"`
}

// The set of arguments for constructing a PlaybookTask resource.
type PlaybookTaskArgs struct {
	// The description of task
	Description pulumi.StringPtrInput
	PlaybookId  pulumi.StringPtrInput
	// The position of the task
	Position pulumi.IntPtrInput
	// The task of the task
	Task pulumi.StringInput
}

func (PlaybookTaskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*playbookTaskArgs)(nil)).Elem()
}

type PlaybookTaskInput interface {
	pulumi.Input

	ToPlaybookTaskOutput() PlaybookTaskOutput
	ToPlaybookTaskOutputWithContext(ctx context.Context) PlaybookTaskOutput
}

func (*PlaybookTask) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybookTask)(nil)).Elem()
}

func (i *PlaybookTask) ToPlaybookTaskOutput() PlaybookTaskOutput {
	return i.ToPlaybookTaskOutputWithContext(context.Background())
}

func (i *PlaybookTask) ToPlaybookTaskOutputWithContext(ctx context.Context) PlaybookTaskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybookTaskOutput)
}

// PlaybookTaskArrayInput is an input type that accepts PlaybookTaskArray and PlaybookTaskArrayOutput values.
// You can construct a concrete instance of `PlaybookTaskArrayInput` via:
//
//	PlaybookTaskArray{ PlaybookTaskArgs{...} }
type PlaybookTaskArrayInput interface {
	pulumi.Input

	ToPlaybookTaskArrayOutput() PlaybookTaskArrayOutput
	ToPlaybookTaskArrayOutputWithContext(context.Context) PlaybookTaskArrayOutput
}

type PlaybookTaskArray []PlaybookTaskInput

func (PlaybookTaskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlaybookTask)(nil)).Elem()
}

func (i PlaybookTaskArray) ToPlaybookTaskArrayOutput() PlaybookTaskArrayOutput {
	return i.ToPlaybookTaskArrayOutputWithContext(context.Background())
}

func (i PlaybookTaskArray) ToPlaybookTaskArrayOutputWithContext(ctx context.Context) PlaybookTaskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybookTaskArrayOutput)
}

// PlaybookTaskMapInput is an input type that accepts PlaybookTaskMap and PlaybookTaskMapOutput values.
// You can construct a concrete instance of `PlaybookTaskMapInput` via:
//
//	PlaybookTaskMap{ "key": PlaybookTaskArgs{...} }
type PlaybookTaskMapInput interface {
	pulumi.Input

	ToPlaybookTaskMapOutput() PlaybookTaskMapOutput
	ToPlaybookTaskMapOutputWithContext(context.Context) PlaybookTaskMapOutput
}

type PlaybookTaskMap map[string]PlaybookTaskInput

func (PlaybookTaskMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlaybookTask)(nil)).Elem()
}

func (i PlaybookTaskMap) ToPlaybookTaskMapOutput() PlaybookTaskMapOutput {
	return i.ToPlaybookTaskMapOutputWithContext(context.Background())
}

func (i PlaybookTaskMap) ToPlaybookTaskMapOutputWithContext(ctx context.Context) PlaybookTaskMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PlaybookTaskMapOutput)
}

type PlaybookTaskOutput struct{ *pulumi.OutputState }

func (PlaybookTaskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PlaybookTask)(nil)).Elem()
}

func (o PlaybookTaskOutput) ToPlaybookTaskOutput() PlaybookTaskOutput {
	return o
}

func (o PlaybookTaskOutput) ToPlaybookTaskOutputWithContext(ctx context.Context) PlaybookTaskOutput {
	return o
}

// The description of task
func (o PlaybookTaskOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v *PlaybookTask) pulumi.StringOutput { return v.Description }).(pulumi.StringOutput)
}

func (o PlaybookTaskOutput) PlaybookId() pulumi.StringOutput {
	return o.ApplyT(func(v *PlaybookTask) pulumi.StringOutput { return v.PlaybookId }).(pulumi.StringOutput)
}

// The position of the task
func (o PlaybookTaskOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *PlaybookTask) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// The task of the task
func (o PlaybookTaskOutput) Task() pulumi.StringOutput {
	return o.ApplyT(func(v *PlaybookTask) pulumi.StringOutput { return v.Task }).(pulumi.StringOutput)
}

type PlaybookTaskArrayOutput struct{ *pulumi.OutputState }

func (PlaybookTaskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PlaybookTask)(nil)).Elem()
}

func (o PlaybookTaskArrayOutput) ToPlaybookTaskArrayOutput() PlaybookTaskArrayOutput {
	return o
}

func (o PlaybookTaskArrayOutput) ToPlaybookTaskArrayOutputWithContext(ctx context.Context) PlaybookTaskArrayOutput {
	return o
}

func (o PlaybookTaskArrayOutput) Index(i pulumi.IntInput) PlaybookTaskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PlaybookTask {
		return vs[0].([]*PlaybookTask)[vs[1].(int)]
	}).(PlaybookTaskOutput)
}

type PlaybookTaskMapOutput struct{ *pulumi.OutputState }

func (PlaybookTaskMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PlaybookTask)(nil)).Elem()
}

func (o PlaybookTaskMapOutput) ToPlaybookTaskMapOutput() PlaybookTaskMapOutput {
	return o
}

func (o PlaybookTaskMapOutput) ToPlaybookTaskMapOutputWithContext(ctx context.Context) PlaybookTaskMapOutput {
	return o
}

func (o PlaybookTaskMapOutput) MapIndex(k pulumi.StringInput) PlaybookTaskOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PlaybookTask {
		return vs[0].(map[string]*PlaybookTask)[vs[1].(string)]
	}).(PlaybookTaskOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybookTaskInput)(nil)).Elem(), &PlaybookTask{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybookTaskArrayInput)(nil)).Elem(), PlaybookTaskArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PlaybookTaskMapInput)(nil)).Elem(), PlaybookTaskMap{})
	pulumi.RegisterOutputType(PlaybookTaskOutput{})
	pulumi.RegisterOutputType(PlaybookTaskArrayOutput{})
	pulumi.RegisterOutputType(PlaybookTaskMapOutput{})
}
