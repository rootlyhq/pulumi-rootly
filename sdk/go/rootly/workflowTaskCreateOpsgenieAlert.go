// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createOpsgenieAlert task.
type WorkflowTaskCreateOpsgenieAlert struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateOpsgenieAlertTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreateOpsgenieAlert registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreateOpsgenieAlert(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreateOpsgenieAlertArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateOpsgenieAlert, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreateOpsgenieAlert
	err := ctx.RegisterResource("rootly:index/workflowTaskCreateOpsgenieAlert:WorkflowTaskCreateOpsgenieAlert", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreateOpsgenieAlert gets an existing WorkflowTaskCreateOpsgenieAlert resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreateOpsgenieAlert(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreateOpsgenieAlertState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateOpsgenieAlert, error) {
	var resource WorkflowTaskCreateOpsgenieAlert
	err := ctx.ReadResource("rootly:index/workflowTaskCreateOpsgenieAlert:WorkflowTaskCreateOpsgenieAlert", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreateOpsgenieAlert resources.
type workflowTaskCreateOpsgenieAlertState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreateOpsgenieAlertTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreateOpsgenieAlertState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateOpsgenieAlertTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreateOpsgenieAlertState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateOpsgenieAlertState)(nil)).Elem()
}

type workflowTaskCreateOpsgenieAlertArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateOpsgenieAlertTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreateOpsgenieAlert resource.
type WorkflowTaskCreateOpsgenieAlertArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateOpsgenieAlertTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreateOpsgenieAlertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateOpsgenieAlertArgs)(nil)).Elem()
}

type WorkflowTaskCreateOpsgenieAlertInput interface {
	pulumi.Input

	ToWorkflowTaskCreateOpsgenieAlertOutput() WorkflowTaskCreateOpsgenieAlertOutput
	ToWorkflowTaskCreateOpsgenieAlertOutputWithContext(ctx context.Context) WorkflowTaskCreateOpsgenieAlertOutput
}

func (*WorkflowTaskCreateOpsgenieAlert) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateOpsgenieAlert)(nil)).Elem()
}

func (i *WorkflowTaskCreateOpsgenieAlert) ToWorkflowTaskCreateOpsgenieAlertOutput() WorkflowTaskCreateOpsgenieAlertOutput {
	return i.ToWorkflowTaskCreateOpsgenieAlertOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreateOpsgenieAlert) ToWorkflowTaskCreateOpsgenieAlertOutputWithContext(ctx context.Context) WorkflowTaskCreateOpsgenieAlertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateOpsgenieAlertOutput)
}

// WorkflowTaskCreateOpsgenieAlertArrayInput is an input type that accepts WorkflowTaskCreateOpsgenieAlertArray and WorkflowTaskCreateOpsgenieAlertArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateOpsgenieAlertArrayInput` via:
//
//	WorkflowTaskCreateOpsgenieAlertArray{ WorkflowTaskCreateOpsgenieAlertArgs{...} }
type WorkflowTaskCreateOpsgenieAlertArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreateOpsgenieAlertArrayOutput() WorkflowTaskCreateOpsgenieAlertArrayOutput
	ToWorkflowTaskCreateOpsgenieAlertArrayOutputWithContext(context.Context) WorkflowTaskCreateOpsgenieAlertArrayOutput
}

type WorkflowTaskCreateOpsgenieAlertArray []WorkflowTaskCreateOpsgenieAlertInput

func (WorkflowTaskCreateOpsgenieAlertArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateOpsgenieAlert)(nil)).Elem()
}

func (i WorkflowTaskCreateOpsgenieAlertArray) ToWorkflowTaskCreateOpsgenieAlertArrayOutput() WorkflowTaskCreateOpsgenieAlertArrayOutput {
	return i.ToWorkflowTaskCreateOpsgenieAlertArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateOpsgenieAlertArray) ToWorkflowTaskCreateOpsgenieAlertArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateOpsgenieAlertArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateOpsgenieAlertArrayOutput)
}

// WorkflowTaskCreateOpsgenieAlertMapInput is an input type that accepts WorkflowTaskCreateOpsgenieAlertMap and WorkflowTaskCreateOpsgenieAlertMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateOpsgenieAlertMapInput` via:
//
//	WorkflowTaskCreateOpsgenieAlertMap{ "key": WorkflowTaskCreateOpsgenieAlertArgs{...} }
type WorkflowTaskCreateOpsgenieAlertMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreateOpsgenieAlertMapOutput() WorkflowTaskCreateOpsgenieAlertMapOutput
	ToWorkflowTaskCreateOpsgenieAlertMapOutputWithContext(context.Context) WorkflowTaskCreateOpsgenieAlertMapOutput
}

type WorkflowTaskCreateOpsgenieAlertMap map[string]WorkflowTaskCreateOpsgenieAlertInput

func (WorkflowTaskCreateOpsgenieAlertMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateOpsgenieAlert)(nil)).Elem()
}

func (i WorkflowTaskCreateOpsgenieAlertMap) ToWorkflowTaskCreateOpsgenieAlertMapOutput() WorkflowTaskCreateOpsgenieAlertMapOutput {
	return i.ToWorkflowTaskCreateOpsgenieAlertMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateOpsgenieAlertMap) ToWorkflowTaskCreateOpsgenieAlertMapOutputWithContext(ctx context.Context) WorkflowTaskCreateOpsgenieAlertMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateOpsgenieAlertMapOutput)
}

type WorkflowTaskCreateOpsgenieAlertOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateOpsgenieAlertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateOpsgenieAlert)(nil)).Elem()
}

func (o WorkflowTaskCreateOpsgenieAlertOutput) ToWorkflowTaskCreateOpsgenieAlertOutput() WorkflowTaskCreateOpsgenieAlertOutput {
	return o
}

func (o WorkflowTaskCreateOpsgenieAlertOutput) ToWorkflowTaskCreateOpsgenieAlertOutputWithContext(ctx context.Context) WorkflowTaskCreateOpsgenieAlertOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreateOpsgenieAlertOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateOpsgenieAlert) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreateOpsgenieAlertOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateOpsgenieAlert) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreateOpsgenieAlertOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateOpsgenieAlert) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreateOpsgenieAlertOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateOpsgenieAlert) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreateOpsgenieAlertOutput) TaskParams() WorkflowTaskCreateOpsgenieAlertTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateOpsgenieAlert) WorkflowTaskCreateOpsgenieAlertTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskCreateOpsgenieAlertTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreateOpsgenieAlertOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateOpsgenieAlert) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreateOpsgenieAlertArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateOpsgenieAlertArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateOpsgenieAlert)(nil)).Elem()
}

func (o WorkflowTaskCreateOpsgenieAlertArrayOutput) ToWorkflowTaskCreateOpsgenieAlertArrayOutput() WorkflowTaskCreateOpsgenieAlertArrayOutput {
	return o
}

func (o WorkflowTaskCreateOpsgenieAlertArrayOutput) ToWorkflowTaskCreateOpsgenieAlertArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateOpsgenieAlertArrayOutput {
	return o
}

func (o WorkflowTaskCreateOpsgenieAlertArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreateOpsgenieAlertOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreateOpsgenieAlert {
		return vs[0].([]*WorkflowTaskCreateOpsgenieAlert)[vs[1].(int)]
	}).(WorkflowTaskCreateOpsgenieAlertOutput)
}

type WorkflowTaskCreateOpsgenieAlertMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateOpsgenieAlertMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateOpsgenieAlert)(nil)).Elem()
}

func (o WorkflowTaskCreateOpsgenieAlertMapOutput) ToWorkflowTaskCreateOpsgenieAlertMapOutput() WorkflowTaskCreateOpsgenieAlertMapOutput {
	return o
}

func (o WorkflowTaskCreateOpsgenieAlertMapOutput) ToWorkflowTaskCreateOpsgenieAlertMapOutputWithContext(ctx context.Context) WorkflowTaskCreateOpsgenieAlertMapOutput {
	return o
}

func (o WorkflowTaskCreateOpsgenieAlertMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreateOpsgenieAlertOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreateOpsgenieAlert {
		return vs[0].(map[string]*WorkflowTaskCreateOpsgenieAlert)[vs[1].(string)]
	}).(WorkflowTaskCreateOpsgenieAlertOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateOpsgenieAlertInput)(nil)).Elem(), &WorkflowTaskCreateOpsgenieAlert{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateOpsgenieAlertArrayInput)(nil)).Elem(), WorkflowTaskCreateOpsgenieAlertArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateOpsgenieAlertMapInput)(nil)).Elem(), WorkflowTaskCreateOpsgenieAlertMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreateOpsgenieAlertOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateOpsgenieAlertArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateOpsgenieAlertMapOutput{})
}
