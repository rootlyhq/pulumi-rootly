// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

type ScheduleRotationActiveDay struct {
	pulumi.CustomResourceState

	// Schedule rotation active times per day
	ActiveTimeAttributes ScheduleRotationActiveDayActiveTimeAttributeArrayOutput `pulumi:"activeTimeAttributes"`
	// Schedule rotation day name for which active times to be created. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	DayName            pulumi.StringPtrOutput `pulumi:"dayName"`
	ScheduleRotationId pulumi.StringOutput    `pulumi:"scheduleRotationId"`
}

// NewScheduleRotationActiveDay registers a new resource with the given unique name, arguments, and options.
func NewScheduleRotationActiveDay(ctx *pulumi.Context,
	name string, args *ScheduleRotationActiveDayArgs, opts ...pulumi.ResourceOption) (*ScheduleRotationActiveDay, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ActiveTimeAttributes == nil {
		return nil, errors.New("invalid value for required argument 'ActiveTimeAttributes'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ScheduleRotationActiveDay
	err := ctx.RegisterResource("rootly:index/scheduleRotationActiveDay:ScheduleRotationActiveDay", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScheduleRotationActiveDay gets an existing ScheduleRotationActiveDay resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScheduleRotationActiveDay(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScheduleRotationActiveDayState, opts ...pulumi.ResourceOption) (*ScheduleRotationActiveDay, error) {
	var resource ScheduleRotationActiveDay
	err := ctx.ReadResource("rootly:index/scheduleRotationActiveDay:ScheduleRotationActiveDay", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScheduleRotationActiveDay resources.
type scheduleRotationActiveDayState struct {
	// Schedule rotation active times per day
	ActiveTimeAttributes []ScheduleRotationActiveDayActiveTimeAttribute `pulumi:"activeTimeAttributes"`
	// Schedule rotation day name for which active times to be created. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	DayName            *string `pulumi:"dayName"`
	ScheduleRotationId *string `pulumi:"scheduleRotationId"`
}

type ScheduleRotationActiveDayState struct {
	// Schedule rotation active times per day
	ActiveTimeAttributes ScheduleRotationActiveDayActiveTimeAttributeArrayInput
	// Schedule rotation day name for which active times to be created. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	DayName            pulumi.StringPtrInput
	ScheduleRotationId pulumi.StringPtrInput
}

func (ScheduleRotationActiveDayState) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleRotationActiveDayState)(nil)).Elem()
}

type scheduleRotationActiveDayArgs struct {
	// Schedule rotation active times per day
	ActiveTimeAttributes []ScheduleRotationActiveDayActiveTimeAttribute `pulumi:"activeTimeAttributes"`
	// Schedule rotation day name for which active times to be created. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	DayName            *string `pulumi:"dayName"`
	ScheduleRotationId *string `pulumi:"scheduleRotationId"`
}

// The set of arguments for constructing a ScheduleRotationActiveDay resource.
type ScheduleRotationActiveDayArgs struct {
	// Schedule rotation active times per day
	ActiveTimeAttributes ScheduleRotationActiveDayActiveTimeAttributeArrayInput
	// Schedule rotation day name for which active times to be created. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
	DayName            pulumi.StringPtrInput
	ScheduleRotationId pulumi.StringPtrInput
}

func (ScheduleRotationActiveDayArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scheduleRotationActiveDayArgs)(nil)).Elem()
}

type ScheduleRotationActiveDayInput interface {
	pulumi.Input

	ToScheduleRotationActiveDayOutput() ScheduleRotationActiveDayOutput
	ToScheduleRotationActiveDayOutputWithContext(ctx context.Context) ScheduleRotationActiveDayOutput
}

func (*ScheduleRotationActiveDay) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleRotationActiveDay)(nil)).Elem()
}

func (i *ScheduleRotationActiveDay) ToScheduleRotationActiveDayOutput() ScheduleRotationActiveDayOutput {
	return i.ToScheduleRotationActiveDayOutputWithContext(context.Background())
}

func (i *ScheduleRotationActiveDay) ToScheduleRotationActiveDayOutputWithContext(ctx context.Context) ScheduleRotationActiveDayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationActiveDayOutput)
}

// ScheduleRotationActiveDayArrayInput is an input type that accepts ScheduleRotationActiveDayArray and ScheduleRotationActiveDayArrayOutput values.
// You can construct a concrete instance of `ScheduleRotationActiveDayArrayInput` via:
//
//	ScheduleRotationActiveDayArray{ ScheduleRotationActiveDayArgs{...} }
type ScheduleRotationActiveDayArrayInput interface {
	pulumi.Input

	ToScheduleRotationActiveDayArrayOutput() ScheduleRotationActiveDayArrayOutput
	ToScheduleRotationActiveDayArrayOutputWithContext(context.Context) ScheduleRotationActiveDayArrayOutput
}

type ScheduleRotationActiveDayArray []ScheduleRotationActiveDayInput

func (ScheduleRotationActiveDayArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScheduleRotationActiveDay)(nil)).Elem()
}

func (i ScheduleRotationActiveDayArray) ToScheduleRotationActiveDayArrayOutput() ScheduleRotationActiveDayArrayOutput {
	return i.ToScheduleRotationActiveDayArrayOutputWithContext(context.Background())
}

func (i ScheduleRotationActiveDayArray) ToScheduleRotationActiveDayArrayOutputWithContext(ctx context.Context) ScheduleRotationActiveDayArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationActiveDayArrayOutput)
}

// ScheduleRotationActiveDayMapInput is an input type that accepts ScheduleRotationActiveDayMap and ScheduleRotationActiveDayMapOutput values.
// You can construct a concrete instance of `ScheduleRotationActiveDayMapInput` via:
//
//	ScheduleRotationActiveDayMap{ "key": ScheduleRotationActiveDayArgs{...} }
type ScheduleRotationActiveDayMapInput interface {
	pulumi.Input

	ToScheduleRotationActiveDayMapOutput() ScheduleRotationActiveDayMapOutput
	ToScheduleRotationActiveDayMapOutputWithContext(context.Context) ScheduleRotationActiveDayMapOutput
}

type ScheduleRotationActiveDayMap map[string]ScheduleRotationActiveDayInput

func (ScheduleRotationActiveDayMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScheduleRotationActiveDay)(nil)).Elem()
}

func (i ScheduleRotationActiveDayMap) ToScheduleRotationActiveDayMapOutput() ScheduleRotationActiveDayMapOutput {
	return i.ToScheduleRotationActiveDayMapOutputWithContext(context.Background())
}

func (i ScheduleRotationActiveDayMap) ToScheduleRotationActiveDayMapOutputWithContext(ctx context.Context) ScheduleRotationActiveDayMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScheduleRotationActiveDayMapOutput)
}

type ScheduleRotationActiveDayOutput struct{ *pulumi.OutputState }

func (ScheduleRotationActiveDayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScheduleRotationActiveDay)(nil)).Elem()
}

func (o ScheduleRotationActiveDayOutput) ToScheduleRotationActiveDayOutput() ScheduleRotationActiveDayOutput {
	return o
}

func (o ScheduleRotationActiveDayOutput) ToScheduleRotationActiveDayOutputWithContext(ctx context.Context) ScheduleRotationActiveDayOutput {
	return o
}

// Schedule rotation active times per day
func (o ScheduleRotationActiveDayOutput) ActiveTimeAttributes() ScheduleRotationActiveDayActiveTimeAttributeArrayOutput {
	return o.ApplyT(func(v *ScheduleRotationActiveDay) ScheduleRotationActiveDayActiveTimeAttributeArrayOutput {
		return v.ActiveTimeAttributes
	}).(ScheduleRotationActiveDayActiveTimeAttributeArrayOutput)
}

// Schedule rotation day name for which active times to be created. Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
func (o ScheduleRotationActiveDayOutput) DayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScheduleRotationActiveDay) pulumi.StringPtrOutput { return v.DayName }).(pulumi.StringPtrOutput)
}

func (o ScheduleRotationActiveDayOutput) ScheduleRotationId() pulumi.StringOutput {
	return o.ApplyT(func(v *ScheduleRotationActiveDay) pulumi.StringOutput { return v.ScheduleRotationId }).(pulumi.StringOutput)
}

type ScheduleRotationActiveDayArrayOutput struct{ *pulumi.OutputState }

func (ScheduleRotationActiveDayArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScheduleRotationActiveDay)(nil)).Elem()
}

func (o ScheduleRotationActiveDayArrayOutput) ToScheduleRotationActiveDayArrayOutput() ScheduleRotationActiveDayArrayOutput {
	return o
}

func (o ScheduleRotationActiveDayArrayOutput) ToScheduleRotationActiveDayArrayOutputWithContext(ctx context.Context) ScheduleRotationActiveDayArrayOutput {
	return o
}

func (o ScheduleRotationActiveDayArrayOutput) Index(i pulumi.IntInput) ScheduleRotationActiveDayOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScheduleRotationActiveDay {
		return vs[0].([]*ScheduleRotationActiveDay)[vs[1].(int)]
	}).(ScheduleRotationActiveDayOutput)
}

type ScheduleRotationActiveDayMapOutput struct{ *pulumi.OutputState }

func (ScheduleRotationActiveDayMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScheduleRotationActiveDay)(nil)).Elem()
}

func (o ScheduleRotationActiveDayMapOutput) ToScheduleRotationActiveDayMapOutput() ScheduleRotationActiveDayMapOutput {
	return o
}

func (o ScheduleRotationActiveDayMapOutput) ToScheduleRotationActiveDayMapOutputWithContext(ctx context.Context) ScheduleRotationActiveDayMapOutput {
	return o
}

func (o ScheduleRotationActiveDayMapOutput) MapIndex(k pulumi.StringInput) ScheduleRotationActiveDayOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScheduleRotationActiveDay {
		return vs[0].(map[string]*ScheduleRotationActiveDay)[vs[1].(string)]
	}).(ScheduleRotationActiveDayOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationActiveDayInput)(nil)).Elem(), &ScheduleRotationActiveDay{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationActiveDayArrayInput)(nil)).Elem(), ScheduleRotationActiveDayArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScheduleRotationActiveDayMapInput)(nil)).Elem(), ScheduleRotationActiveDayMap{})
	pulumi.RegisterOutputType(ScheduleRotationActiveDayOutput{})
	pulumi.RegisterOutputType(ScheduleRotationActiveDayArrayOutput{})
	pulumi.RegisterOutputType(ScheduleRotationActiveDayMapOutput{})
}
