// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package rootly

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/rootlyhq/pulumi-rootly/sdk/go/rootly/internal"
)

// Manages workflow createZendeskJiraLink task.
type WorkflowTaskCreateZendeskJiraLink struct {
	pulumi.CustomResourceState

	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Name of the workflow task
	Name pulumi.StringOutput `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntOutput `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrOutput `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateZendeskJiraLinkTaskParamsOutput `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId pulumi.StringOutput `pulumi:"workflowId"`
}

// NewWorkflowTaskCreateZendeskJiraLink registers a new resource with the given unique name, arguments, and options.
func NewWorkflowTaskCreateZendeskJiraLink(ctx *pulumi.Context,
	name string, args *WorkflowTaskCreateZendeskJiraLinkArgs, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateZendeskJiraLink, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.TaskParams == nil {
		return nil, errors.New("invalid value for required argument 'TaskParams'")
	}
	if args.WorkflowId == nil {
		return nil, errors.New("invalid value for required argument 'WorkflowId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource WorkflowTaskCreateZendeskJiraLink
	err := ctx.RegisterResource("rootly:index/workflowTaskCreateZendeskJiraLink:WorkflowTaskCreateZendeskJiraLink", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetWorkflowTaskCreateZendeskJiraLink gets an existing WorkflowTaskCreateZendeskJiraLink resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetWorkflowTaskCreateZendeskJiraLink(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *WorkflowTaskCreateZendeskJiraLinkState, opts ...pulumi.ResourceOption) (*WorkflowTaskCreateZendeskJiraLink, error) {
	var resource WorkflowTaskCreateZendeskJiraLink
	err := ctx.ReadResource("rootly:index/workflowTaskCreateZendeskJiraLink:WorkflowTaskCreateZendeskJiraLink", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering WorkflowTaskCreateZendeskJiraLink resources.
type workflowTaskCreateZendeskJiraLinkState struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams *WorkflowTaskCreateZendeskJiraLinkTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId *string `pulumi:"workflowId"`
}

type WorkflowTaskCreateZendeskJiraLinkState struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateZendeskJiraLinkTaskParamsPtrInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringPtrInput
}

func (WorkflowTaskCreateZendeskJiraLinkState) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateZendeskJiraLinkState)(nil)).Elem()
}

type workflowTaskCreateZendeskJiraLinkArgs struct {
	// Enable/disable this workflow task
	Enabled *bool `pulumi:"enabled"`
	// Name of the workflow task
	Name *string `pulumi:"name"`
	// The position of the workflow task (1 being top of list)
	Position *int `pulumi:"position"`
	// Skip workflow task if any failures
	SkipOnFailure *bool `pulumi:"skipOnFailure"`
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateZendeskJiraLinkTaskParams `pulumi:"taskParams"`
	// The ID of the parent workflow
	WorkflowId string `pulumi:"workflowId"`
}

// The set of arguments for constructing a WorkflowTaskCreateZendeskJiraLink resource.
type WorkflowTaskCreateZendeskJiraLinkArgs struct {
	// Enable/disable this workflow task
	Enabled pulumi.BoolPtrInput
	// Name of the workflow task
	Name pulumi.StringPtrInput
	// The position of the workflow task (1 being top of list)
	Position pulumi.IntPtrInput
	// Skip workflow task if any failures
	SkipOnFailure pulumi.BoolPtrInput
	// The parameters for this workflow task.
	TaskParams WorkflowTaskCreateZendeskJiraLinkTaskParamsInput
	// The ID of the parent workflow
	WorkflowId pulumi.StringInput
}

func (WorkflowTaskCreateZendeskJiraLinkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*workflowTaskCreateZendeskJiraLinkArgs)(nil)).Elem()
}

type WorkflowTaskCreateZendeskJiraLinkInput interface {
	pulumi.Input

	ToWorkflowTaskCreateZendeskJiraLinkOutput() WorkflowTaskCreateZendeskJiraLinkOutput
	ToWorkflowTaskCreateZendeskJiraLinkOutputWithContext(ctx context.Context) WorkflowTaskCreateZendeskJiraLinkOutput
}

func (*WorkflowTaskCreateZendeskJiraLink) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateZendeskJiraLink)(nil)).Elem()
}

func (i *WorkflowTaskCreateZendeskJiraLink) ToWorkflowTaskCreateZendeskJiraLinkOutput() WorkflowTaskCreateZendeskJiraLinkOutput {
	return i.ToWorkflowTaskCreateZendeskJiraLinkOutputWithContext(context.Background())
}

func (i *WorkflowTaskCreateZendeskJiraLink) ToWorkflowTaskCreateZendeskJiraLinkOutputWithContext(ctx context.Context) WorkflowTaskCreateZendeskJiraLinkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateZendeskJiraLinkOutput)
}

// WorkflowTaskCreateZendeskJiraLinkArrayInput is an input type that accepts WorkflowTaskCreateZendeskJiraLinkArray and WorkflowTaskCreateZendeskJiraLinkArrayOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateZendeskJiraLinkArrayInput` via:
//
//	WorkflowTaskCreateZendeskJiraLinkArray{ WorkflowTaskCreateZendeskJiraLinkArgs{...} }
type WorkflowTaskCreateZendeskJiraLinkArrayInput interface {
	pulumi.Input

	ToWorkflowTaskCreateZendeskJiraLinkArrayOutput() WorkflowTaskCreateZendeskJiraLinkArrayOutput
	ToWorkflowTaskCreateZendeskJiraLinkArrayOutputWithContext(context.Context) WorkflowTaskCreateZendeskJiraLinkArrayOutput
}

type WorkflowTaskCreateZendeskJiraLinkArray []WorkflowTaskCreateZendeskJiraLinkInput

func (WorkflowTaskCreateZendeskJiraLinkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateZendeskJiraLink)(nil)).Elem()
}

func (i WorkflowTaskCreateZendeskJiraLinkArray) ToWorkflowTaskCreateZendeskJiraLinkArrayOutput() WorkflowTaskCreateZendeskJiraLinkArrayOutput {
	return i.ToWorkflowTaskCreateZendeskJiraLinkArrayOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateZendeskJiraLinkArray) ToWorkflowTaskCreateZendeskJiraLinkArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateZendeskJiraLinkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateZendeskJiraLinkArrayOutput)
}

// WorkflowTaskCreateZendeskJiraLinkMapInput is an input type that accepts WorkflowTaskCreateZendeskJiraLinkMap and WorkflowTaskCreateZendeskJiraLinkMapOutput values.
// You can construct a concrete instance of `WorkflowTaskCreateZendeskJiraLinkMapInput` via:
//
//	WorkflowTaskCreateZendeskJiraLinkMap{ "key": WorkflowTaskCreateZendeskJiraLinkArgs{...} }
type WorkflowTaskCreateZendeskJiraLinkMapInput interface {
	pulumi.Input

	ToWorkflowTaskCreateZendeskJiraLinkMapOutput() WorkflowTaskCreateZendeskJiraLinkMapOutput
	ToWorkflowTaskCreateZendeskJiraLinkMapOutputWithContext(context.Context) WorkflowTaskCreateZendeskJiraLinkMapOutput
}

type WorkflowTaskCreateZendeskJiraLinkMap map[string]WorkflowTaskCreateZendeskJiraLinkInput

func (WorkflowTaskCreateZendeskJiraLinkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateZendeskJiraLink)(nil)).Elem()
}

func (i WorkflowTaskCreateZendeskJiraLinkMap) ToWorkflowTaskCreateZendeskJiraLinkMapOutput() WorkflowTaskCreateZendeskJiraLinkMapOutput {
	return i.ToWorkflowTaskCreateZendeskJiraLinkMapOutputWithContext(context.Background())
}

func (i WorkflowTaskCreateZendeskJiraLinkMap) ToWorkflowTaskCreateZendeskJiraLinkMapOutputWithContext(ctx context.Context) WorkflowTaskCreateZendeskJiraLinkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(WorkflowTaskCreateZendeskJiraLinkMapOutput)
}

type WorkflowTaskCreateZendeskJiraLinkOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateZendeskJiraLinkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**WorkflowTaskCreateZendeskJiraLink)(nil)).Elem()
}

func (o WorkflowTaskCreateZendeskJiraLinkOutput) ToWorkflowTaskCreateZendeskJiraLinkOutput() WorkflowTaskCreateZendeskJiraLinkOutput {
	return o
}

func (o WorkflowTaskCreateZendeskJiraLinkOutput) ToWorkflowTaskCreateZendeskJiraLinkOutputWithContext(ctx context.Context) WorkflowTaskCreateZendeskJiraLinkOutput {
	return o
}

// Enable/disable this workflow task
func (o WorkflowTaskCreateZendeskJiraLinkOutput) Enabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateZendeskJiraLink) pulumi.BoolPtrOutput { return v.Enabled }).(pulumi.BoolPtrOutput)
}

// Name of the workflow task
func (o WorkflowTaskCreateZendeskJiraLinkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateZendeskJiraLink) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The position of the workflow task (1 being top of list)
func (o WorkflowTaskCreateZendeskJiraLinkOutput) Position() pulumi.IntOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateZendeskJiraLink) pulumi.IntOutput { return v.Position }).(pulumi.IntOutput)
}

// Skip workflow task if any failures
func (o WorkflowTaskCreateZendeskJiraLinkOutput) SkipOnFailure() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateZendeskJiraLink) pulumi.BoolPtrOutput { return v.SkipOnFailure }).(pulumi.BoolPtrOutput)
}

// The parameters for this workflow task.
func (o WorkflowTaskCreateZendeskJiraLinkOutput) TaskParams() WorkflowTaskCreateZendeskJiraLinkTaskParamsOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateZendeskJiraLink) WorkflowTaskCreateZendeskJiraLinkTaskParamsOutput {
		return v.TaskParams
	}).(WorkflowTaskCreateZendeskJiraLinkTaskParamsOutput)
}

// The ID of the parent workflow
func (o WorkflowTaskCreateZendeskJiraLinkOutput) WorkflowId() pulumi.StringOutput {
	return o.ApplyT(func(v *WorkflowTaskCreateZendeskJiraLink) pulumi.StringOutput { return v.WorkflowId }).(pulumi.StringOutput)
}

type WorkflowTaskCreateZendeskJiraLinkArrayOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateZendeskJiraLinkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*WorkflowTaskCreateZendeskJiraLink)(nil)).Elem()
}

func (o WorkflowTaskCreateZendeskJiraLinkArrayOutput) ToWorkflowTaskCreateZendeskJiraLinkArrayOutput() WorkflowTaskCreateZendeskJiraLinkArrayOutput {
	return o
}

func (o WorkflowTaskCreateZendeskJiraLinkArrayOutput) ToWorkflowTaskCreateZendeskJiraLinkArrayOutputWithContext(ctx context.Context) WorkflowTaskCreateZendeskJiraLinkArrayOutput {
	return o
}

func (o WorkflowTaskCreateZendeskJiraLinkArrayOutput) Index(i pulumi.IntInput) WorkflowTaskCreateZendeskJiraLinkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *WorkflowTaskCreateZendeskJiraLink {
		return vs[0].([]*WorkflowTaskCreateZendeskJiraLink)[vs[1].(int)]
	}).(WorkflowTaskCreateZendeskJiraLinkOutput)
}

type WorkflowTaskCreateZendeskJiraLinkMapOutput struct{ *pulumi.OutputState }

func (WorkflowTaskCreateZendeskJiraLinkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*WorkflowTaskCreateZendeskJiraLink)(nil)).Elem()
}

func (o WorkflowTaskCreateZendeskJiraLinkMapOutput) ToWorkflowTaskCreateZendeskJiraLinkMapOutput() WorkflowTaskCreateZendeskJiraLinkMapOutput {
	return o
}

func (o WorkflowTaskCreateZendeskJiraLinkMapOutput) ToWorkflowTaskCreateZendeskJiraLinkMapOutputWithContext(ctx context.Context) WorkflowTaskCreateZendeskJiraLinkMapOutput {
	return o
}

func (o WorkflowTaskCreateZendeskJiraLinkMapOutput) MapIndex(k pulumi.StringInput) WorkflowTaskCreateZendeskJiraLinkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *WorkflowTaskCreateZendeskJiraLink {
		return vs[0].(map[string]*WorkflowTaskCreateZendeskJiraLink)[vs[1].(string)]
	}).(WorkflowTaskCreateZendeskJiraLinkOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateZendeskJiraLinkInput)(nil)).Elem(), &WorkflowTaskCreateZendeskJiraLink{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateZendeskJiraLinkArrayInput)(nil)).Elem(), WorkflowTaskCreateZendeskJiraLinkArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*WorkflowTaskCreateZendeskJiraLinkMapInput)(nil)).Elem(), WorkflowTaskCreateZendeskJiraLinkMap{})
	pulumi.RegisterOutputType(WorkflowTaskCreateZendeskJiraLinkOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateZendeskJiraLinkArrayOutput{})
	pulumi.RegisterOutputType(WorkflowTaskCreateZendeskJiraLinkMapOutput{})
}
