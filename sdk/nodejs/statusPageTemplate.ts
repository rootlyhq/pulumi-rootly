// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class StatusPageTemplate extends pulumi.CustomResource {
    /**
     * Get an existing StatusPageTemplate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StatusPageTemplateState, opts?: pulumi.CustomResourceOptions): StatusPageTemplate {
        return new StatusPageTemplate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rootly:index/statusPageTemplate:StatusPageTemplate';

    /**
     * Returns true if the given object is an instance of StatusPageTemplate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StatusPageTemplate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StatusPageTemplate.__pulumiType;
    }

    /**
     * Description of the event the template will populate
     */
    public readonly body!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * The kind of the status page template. Value must be one of `normal`, `scheduled`.
     */
    public readonly kind!: pulumi.Output<string | undefined>;
    /**
     * Position of the workflow task
     */
    public readonly position!: pulumi.Output<number>;
    /**
     * Controls if incident subscribers should be notified. Value must be one of true or false
     */
    public readonly shouldNotifySubscribers!: pulumi.Output<boolean>;
    public readonly statusPageId!: pulumi.Output<string>;
    /**
     * Title of the template
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * Status of the event the template will populate
     */
    public readonly updateStatus!: pulumi.Output<string>;

    /**
     * Create a StatusPageTemplate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StatusPageTemplateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StatusPageTemplateArgs | StatusPageTemplateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StatusPageTemplateState | undefined;
            resourceInputs["body"] = state ? state.body : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["kind"] = state ? state.kind : undefined;
            resourceInputs["position"] = state ? state.position : undefined;
            resourceInputs["shouldNotifySubscribers"] = state ? state.shouldNotifySubscribers : undefined;
            resourceInputs["statusPageId"] = state ? state.statusPageId : undefined;
            resourceInputs["title"] = state ? state.title : undefined;
            resourceInputs["updateStatus"] = state ? state.updateStatus : undefined;
        } else {
            const args = argsOrState as StatusPageTemplateArgs | undefined;
            if ((!args || args.body === undefined) && !opts.urn) {
                throw new Error("Missing required property 'body'");
            }
            if ((!args || args.title === undefined) && !opts.urn) {
                throw new Error("Missing required property 'title'");
            }
            resourceInputs["body"] = args ? args.body : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["kind"] = args ? args.kind : undefined;
            resourceInputs["position"] = args ? args.position : undefined;
            resourceInputs["shouldNotifySubscribers"] = args ? args.shouldNotifySubscribers : undefined;
            resourceInputs["statusPageId"] = args ? args.statusPageId : undefined;
            resourceInputs["title"] = args ? args.title : undefined;
            resourceInputs["updateStatus"] = args ? args.updateStatus : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StatusPageTemplate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StatusPageTemplate resources.
 */
export interface StatusPageTemplateState {
    /**
     * Description of the event the template will populate
     */
    body?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    /**
     * The kind of the status page template. Value must be one of `normal`, `scheduled`.
     */
    kind?: pulumi.Input<string>;
    /**
     * Position of the workflow task
     */
    position?: pulumi.Input<number>;
    /**
     * Controls if incident subscribers should be notified. Value must be one of true or false
     */
    shouldNotifySubscribers?: pulumi.Input<boolean>;
    statusPageId?: pulumi.Input<string>;
    /**
     * Title of the template
     */
    title?: pulumi.Input<string>;
    /**
     * Status of the event the template will populate
     */
    updateStatus?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StatusPageTemplate resource.
 */
export interface StatusPageTemplateArgs {
    /**
     * Description of the event the template will populate
     */
    body: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    /**
     * The kind of the status page template. Value must be one of `normal`, `scheduled`.
     */
    kind?: pulumi.Input<string>;
    /**
     * Position of the workflow task
     */
    position?: pulumi.Input<number>;
    /**
     * Controls if incident subscribers should be notified. Value must be one of true or false
     */
    shouldNotifySubscribers?: pulumi.Input<boolean>;
    statusPageId?: pulumi.Input<string>;
    /**
     * Title of the template
     */
    title: pulumi.Input<string>;
    /**
     * Status of the event the template will populate
     */
    updateStatus?: pulumi.Input<string>;
}
