// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./cause";
export * from "./functionality";
export * from "./incidentRole";
export * from "./incidentType";
export * from "./provider";
export * from "./service";
export * from "./severity";
export * from "./team";

// Export sub-modules:
import * as config from "./config";

export {
    config,
};

// Import resources to register:
import { Cause } from "./cause";
import { Functionality } from "./functionality";
import { IncidentRole } from "./incidentRole";
import { IncidentType } from "./incidentType";
import { Service } from "./service";
import { Severity } from "./severity";
import { Team } from "./team";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "rootly:index/cause:Cause":
                return new Cause(name, <any>undefined, { urn })
            case "rootly:index/functionality:Functionality":
                return new Functionality(name, <any>undefined, { urn })
            case "rootly:index/incidentRole:IncidentRole":
                return new IncidentRole(name, <any>undefined, { urn })
            case "rootly:index/incidentType:IncidentType":
                return new IncidentType(name, <any>undefined, { urn })
            case "rootly:index/service:Service":
                return new Service(name, <any>undefined, { urn })
            case "rootly:index/severity:Severity":
                return new Severity(name, <any>undefined, { urn })
            case "rootly:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("rootly", "index/cause", _module)
pulumi.runtime.registerResourceModule("rootly", "index/functionality", _module)
pulumi.runtime.registerResourceModule("rootly", "index/incidentRole", _module)
pulumi.runtime.registerResourceModule("rootly", "index/incidentType", _module)
pulumi.runtime.registerResourceModule("rootly", "index/service", _module)
pulumi.runtime.registerResourceModule("rootly", "index/severity", _module)
pulumi.runtime.registerResourceModule("rootly", "index/team", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("rootly", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:rootly") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
