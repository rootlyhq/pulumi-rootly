// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Manages dashboard_panels.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rootly from "@pulumi/rootly";
 *
 * const overview = new rootly.Dashboard("overview", {});
 * const incidentsBySeverity = new rootly.DashboardPanel("incidentsBySeverity", {
 *     dashboardId: rootly_dashboard.foo.id,
 *     params: {
 *         display: "line_chart",
 *         datasets: [{
 *             collection: "incidents",
 *             filters: [{
 *                 operation: "and",
 *                 rules: [{
 *                     operation: "and",
 *                     condition: "=",
 *                     key: "status",
 *                     value: "started",
 *                 }],
 *             }],
 *             groupBy: "severity",
 *             aggregate: {
 *                 cumulative: false,
 *                 key: "results",
 *                 operation: "count",
 *             },
 *         }],
 *     },
 * });
 * ```
 */
export class DashboardPanel extends pulumi.CustomResource {
    /**
     * Get an existing DashboardPanel resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardPanelState, opts?: pulumi.CustomResourceOptions): DashboardPanel {
        return new DashboardPanel(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rootly:index/dashboardPanel:DashboardPanel';

    /**
     * Returns true if the given object is an instance of DashboardPanel.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DashboardPanel {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DashboardPanel.__pulumiType;
    }

    /**
     * The id of the parent dashboard
     */
    public readonly dashboardId!: pulumi.Output<string>;
    /**
     * The name of the dashboard_panel
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The params JSON of the dashboard_panel. See rootly API docs for schema.
     */
    public readonly params!: pulumi.Output<outputs.DashboardPanelParams>;

    /**
     * Create a DashboardPanel resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DashboardPanelArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardPanelArgs | DashboardPanelState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardPanelState | undefined;
            resourceInputs["dashboardId"] = state ? state.dashboardId : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["params"] = state ? state.params : undefined;
        } else {
            const args = argsOrState as DashboardPanelArgs | undefined;
            if ((!args || args.dashboardId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dashboardId'");
            }
            if ((!args || args.params === undefined) && !opts.urn) {
                throw new Error("Missing required property 'params'");
            }
            resourceInputs["dashboardId"] = args ? args.dashboardId : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["params"] = args ? args.params : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DashboardPanel.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DashboardPanel resources.
 */
export interface DashboardPanelState {
    /**
     * The id of the parent dashboard
     */
    dashboardId?: pulumi.Input<string>;
    /**
     * The name of the dashboard_panel
     */
    name?: pulumi.Input<string>;
    /**
     * The params JSON of the dashboard_panel. See rootly API docs for schema.
     */
    params?: pulumi.Input<inputs.DashboardPanelParams>;
}

/**
 * The set of arguments for constructing a DashboardPanel resource.
 */
export interface DashboardPanelArgs {
    /**
     * The id of the parent dashboard
     */
    dashboardId: pulumi.Input<string>;
    /**
     * The name of the dashboard_panel
     */
    name?: pulumi.Input<string>;
    /**
     * The params JSON of the dashboard_panel. See rootly API docs for schema.
     */
    params: pulumi.Input<inputs.DashboardPanelParams>;
}
