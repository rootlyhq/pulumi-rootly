// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 */
export class FormFieldOption extends pulumi.CustomResource {
    /**
     * Get an existing FormFieldOption resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FormFieldOptionState, opts?: pulumi.CustomResourceOptions): FormFieldOption {
        return new FormFieldOption(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rootly:index/formFieldOption:FormFieldOption';

    /**
     * Returns true if the given object is an instance of FormFieldOption.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FormFieldOption {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FormFieldOption.__pulumiType;
    }

    /**
     * The hex color of the form*field*option
     */
    public readonly color!: pulumi.Output<string>;
    /**
     * Value must be one of true or false
     */
    public readonly default!: pulumi.Output<boolean>;
    /**
     * The ID of the parent custom field
     */
    public readonly formFieldId!: pulumi.Output<string>;
    /**
     * The position of the form*field*option
     */
    public readonly position!: pulumi.Output<number>;
    /**
     * The value of the form*field*option
     */
    public readonly value!: pulumi.Output<string>;

    /**
     * Create a FormFieldOption resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FormFieldOptionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FormFieldOptionArgs | FormFieldOptionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FormFieldOptionState | undefined;
            resourceInputs["color"] = state ? state.color : undefined;
            resourceInputs["default"] = state ? state.default : undefined;
            resourceInputs["formFieldId"] = state ? state.formFieldId : undefined;
            resourceInputs["position"] = state ? state.position : undefined;
            resourceInputs["value"] = state ? state.value : undefined;
        } else {
            const args = argsOrState as FormFieldOptionArgs | undefined;
            if ((!args || args.formFieldId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'formFieldId'");
            }
            if ((!args || args.value === undefined) && !opts.urn) {
                throw new Error("Missing required property 'value'");
            }
            resourceInputs["color"] = args ? args.color : undefined;
            resourceInputs["default"] = args ? args.default : undefined;
            resourceInputs["formFieldId"] = args ? args.formFieldId : undefined;
            resourceInputs["position"] = args ? args.position : undefined;
            resourceInputs["value"] = args ? args.value : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FormFieldOption.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FormFieldOption resources.
 */
export interface FormFieldOptionState {
    /**
     * The hex color of the form*field*option
     */
    color?: pulumi.Input<string>;
    /**
     * Value must be one of true or false
     */
    default?: pulumi.Input<boolean>;
    /**
     * The ID of the parent custom field
     */
    formFieldId?: pulumi.Input<string>;
    /**
     * The position of the form*field*option
     */
    position?: pulumi.Input<number>;
    /**
     * The value of the form*field*option
     */
    value?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FormFieldOption resource.
 */
export interface FormFieldOptionArgs {
    /**
     * The hex color of the form*field*option
     */
    color?: pulumi.Input<string>;
    /**
     * Value must be one of true or false
     */
    default?: pulumi.Input<boolean>;
    /**
     * The ID of the parent custom field
     */
    formFieldId: pulumi.Input<string>;
    /**
     * The position of the form*field*option
     */
    position?: pulumi.Input<number>;
    /**
     * The value of the form*field*option
     */
    value: pulumi.Input<string>;
}
