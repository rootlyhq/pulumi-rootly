// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface DashboardPanelParams {
    datasets?: pulumi.Input<pulumi.Input<inputs.DashboardPanelParamsDataset>[]>;
    display: pulumi.Input<string>;
}

export interface DashboardPanelParamsDataset {
    aggregate?: pulumi.Input<inputs.DashboardPanelParamsDatasetAggregate>;
    collection: pulumi.Input<string>;
    filters?: pulumi.Input<pulumi.Input<inputs.DashboardPanelParamsDatasetFilter>[]>;
    groupBy?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}

export interface DashboardPanelParamsDatasetAggregate {
    cumulative: pulumi.Input<boolean>;
    key: pulumi.Input<string>;
    operation: pulumi.Input<string>;
}

export interface DashboardPanelParamsDatasetFilter {
    operation: pulumi.Input<string>;
    rules?: pulumi.Input<pulumi.Input<inputs.DashboardPanelParamsDatasetFilterRule>[]>;
}

export interface DashboardPanelParamsDatasetFilterRule {
    condition: pulumi.Input<string>;
    key: pulumi.Input<string>;
    operation: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface FunctionalitySlackAlias {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface FunctionalitySlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface ServiceSlackAlias {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface ServiceSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface TeamSlackAlias {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface TeamSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowActionItemTriggerParams {
    incidentActionItemCondition?: pulumi.Input<string>;
    incidentActionItemConditionGroup?: pulumi.Input<string>;
    incidentActionItemConditionKind?: pulumi.Input<string>;
    incidentActionItemConditionPriority?: pulumi.Input<string>;
    incidentActionItemConditionStatus?: pulumi.Input<string>;
    incidentActionItemGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    incidentActionItemKinds?: pulumi.Input<pulumi.Input<string>[]>;
    incidentActionItemPriorities?: pulumi.Input<pulumi.Input<string>[]>;
    incidentActionItemStatuses?: pulumi.Input<pulumi.Input<string>[]>;
    incidentCondition?: pulumi.Input<string>;
    incidentConditionAcknowledgedAt?: pulumi.Input<string>;
    incidentConditionDetectedAt?: pulumi.Input<string>;
    incidentConditionEnvironment?: pulumi.Input<string>;
    incidentConditionFunctionality?: pulumi.Input<string>;
    incidentConditionGroup?: pulumi.Input<string>;
    incidentConditionIncidentRoles?: pulumi.Input<string>;
    incidentConditionIncidentType?: pulumi.Input<string>;
    incidentConditionKind?: pulumi.Input<string>;
    incidentConditionMitigatedAt?: pulumi.Input<string>;
    incidentConditionResolvedAt?: pulumi.Input<string>;
    incidentConditionService?: pulumi.Input<string>;
    incidentConditionSeverity?: pulumi.Input<string>;
    incidentConditionStartedAt?: pulumi.Input<string>;
    incidentConditionStatus?: pulumi.Input<string>;
    incidentConditionSummary?: pulumi.Input<string>;
    incidentConditionVisibility?: pulumi.Input<string>;
    incidentConditionalInactivity?: pulumi.Input<string>;
    incidentKinds?: pulumi.Input<pulumi.Input<string>[]>;
    incidentStatuses?: pulumi.Input<pulumi.Input<string>[]>;
    incidentVisibilities?: pulumi.Input<pulumi.Input<string>[]>;
    triggerType?: pulumi.Input<string>;
    triggers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WorkflowAlertTriggerParams {
    alertCondition?: pulumi.Input<string>;
    alertConditionLabel?: pulumi.Input<string>;
    alertConditionLabelUseRegexp?: pulumi.Input<boolean>;
    alertConditionPayload?: pulumi.Input<string>;
    alertConditionPayloadUseRegexp?: pulumi.Input<boolean>;
    alertConditionSource?: pulumi.Input<string>;
    alertConditionSourceUseRegexp?: pulumi.Input<boolean>;
    alertLabels?: pulumi.Input<pulumi.Input<string>[]>;
    alertPayloads?: pulumi.Input<pulumi.Input<string>[]>;
    alertQueryPayload?: pulumi.Input<string>;
    alertSources?: pulumi.Input<pulumi.Input<string>[]>;
    triggerType?: pulumi.Input<string>;
    triggers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WorkflowIncidentTriggerParams {
    incidentCondition?: pulumi.Input<string>;
    incidentConditionAcknowledgedAt?: pulumi.Input<string>;
    incidentConditionDetectedAt?: pulumi.Input<string>;
    incidentConditionEnvironment?: pulumi.Input<string>;
    incidentConditionFunctionality?: pulumi.Input<string>;
    incidentConditionGroup?: pulumi.Input<string>;
    incidentConditionIncidentRoles?: pulumi.Input<string>;
    incidentConditionIncidentType?: pulumi.Input<string>;
    incidentConditionKind?: pulumi.Input<string>;
    incidentConditionMitigatedAt?: pulumi.Input<string>;
    incidentConditionResolvedAt?: pulumi.Input<string>;
    incidentConditionService?: pulumi.Input<string>;
    incidentConditionSeverity?: pulumi.Input<string>;
    incidentConditionStartedAt?: pulumi.Input<string>;
    incidentConditionStatus?: pulumi.Input<string>;
    incidentConditionSummary?: pulumi.Input<string>;
    incidentConditionVisibility?: pulumi.Input<string>;
    incidentConditionalInactivity?: pulumi.Input<string>;
    incidentKinds?: pulumi.Input<pulumi.Input<string>[]>;
    incidentStatuses?: pulumi.Input<pulumi.Input<string>[]>;
    incidentVisibilities?: pulumi.Input<pulumi.Input<string>[]>;
    triggerType?: pulumi.Input<string>;
    triggers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WorkflowPostMortemTriggerParams {
    incidentCondition?: pulumi.Input<string>;
    incidentConditionAcknowledgedAt?: pulumi.Input<string>;
    incidentConditionDetectedAt?: pulumi.Input<string>;
    incidentConditionEnvironment?: pulumi.Input<string>;
    incidentConditionFunctionality?: pulumi.Input<string>;
    incidentConditionGroup?: pulumi.Input<string>;
    incidentConditionIncidentRoles?: pulumi.Input<string>;
    incidentConditionIncidentType?: pulumi.Input<string>;
    incidentConditionKind?: pulumi.Input<string>;
    incidentConditionMitigatedAt?: pulumi.Input<string>;
    incidentConditionResolvedAt?: pulumi.Input<string>;
    incidentConditionService?: pulumi.Input<string>;
    incidentConditionSeverity?: pulumi.Input<string>;
    incidentConditionStartedAt?: pulumi.Input<string>;
    incidentConditionStatus?: pulumi.Input<string>;
    incidentConditionSummary?: pulumi.Input<string>;
    incidentConditionVisibility?: pulumi.Input<string>;
    incidentConditionalInactivity?: pulumi.Input<string>;
    incidentKinds?: pulumi.Input<pulumi.Input<string>[]>;
    incidentPostMortemCauseIds?: pulumi.Input<pulumi.Input<string>[]>;
    incidentPostMortemCondition?: pulumi.Input<string>;
    incidentPostMortemConditionCause?: pulumi.Input<string>;
    incidentPostMortemConditionStatus?: pulumi.Input<string>;
    incidentPostMortemStatuses?: pulumi.Input<pulumi.Input<string>[]>;
    incidentStatuses?: pulumi.Input<pulumi.Input<string>[]>;
    incidentVisibilities?: pulumi.Input<pulumi.Input<string>[]>;
    triggerType?: pulumi.Input<string>;
    triggers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WorkflowPulseTriggerParams {
    pulseCondition?: pulumi.Input<string>;
    pulseConditionLabel?: pulumi.Input<string>;
    pulseConditionLabelUseRegexp?: pulumi.Input<boolean>;
    pulseConditionPayload?: pulumi.Input<string>;
    pulseConditionPayloadUseRegexp?: pulumi.Input<boolean>;
    pulseConditionSource?: pulumi.Input<string>;
    pulseConditionSourceUseRegexp?: pulumi.Input<boolean>;
    pulseLabels?: pulumi.Input<pulumi.Input<string>[]>;
    pulsePayloads?: pulumi.Input<pulumi.Input<string>[]>;
    pulseQueryPayload?: pulumi.Input<string>;
    pulseSources?: pulumi.Input<pulumi.Input<string>[]>;
    triggerType?: pulumi.Input<string>;
    triggers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WorkflowSimpleTriggerParams {
    triggerType?: pulumi.Input<string>;
    triggers?: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WorkflowTaskAddActionItemTaskParams {
    assignedToUserId?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    kind?: pulumi.Input<string>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskAddActionItemTaskParamsPostToSlackChannel>[]>;
    priority: pulumi.Input<string>;
    status: pulumi.Input<string>;
    summary: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskAddActionItemTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskAddRoleTaskParams {
    assignedToUserId?: pulumi.Input<string>;
    incidentRoleId: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskAddSlackBookmarkTaskParams {
    channel: pulumi.Input<{[key: string]: any}>;
    emoji?: pulumi.Input<string>;
    link?: pulumi.Input<string>;
    playbookId?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
}

export interface WorkflowTaskAddTeamTaskParams {
    groupId: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskAddToTimelineTaskParams {
    event: pulumi.Input<string>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskAddToTimelineTaskParamsPostToSlackChannel>[]>;
    taskType?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface WorkflowTaskAddToTimelineTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskArchiveSlackChannelsTaskParams {
    channels: pulumi.Input<pulumi.Input<inputs.WorkflowTaskArchiveSlackChannelsTaskParamsChannel>[]>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskArchiveSlackChannelsTaskParamsChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskAttachDatadogDashboardsTaskParams {
    dashboards: pulumi.Input<pulumi.Input<inputs.WorkflowTaskAttachDatadogDashboardsTaskParamsDashboard>[]>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskAttachDatadogDashboardsTaskParamsPostToSlackChannel>[]>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskAttachDatadogDashboardsTaskParamsDashboard {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskAttachDatadogDashboardsTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskAutoAssignRoleOpsgenieTaskParams {
    incidentRoleId: pulumi.Input<string>;
    schedule: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskAutoAssignRolePagerdutyTaskParams {
    escalationPolicy?: pulumi.Input<{[key: string]: any}>;
    incidentRoleId: pulumi.Input<string>;
    schedule?: pulumi.Input<{[key: string]: any}>;
    service?: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskAutoAssignRoleVictorOpsTaskParams {
    incidentRoleId: pulumi.Input<string>;
    schedule: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskCallPeopleTaskParams {
    content: pulumi.Input<string>;
    name: pulumi.Input<string>;
    phoneNumbers: pulumi.Input<pulumi.Input<string>[]>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskCreateAirtableTableRecordTaskParams {
    base: pulumi.Input<{[key: string]: any}>;
    customFieldsMapping?: pulumi.Input<string>;
    table: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskCreateAsanaSubtaskTaskParams {
    assignUserEmail?: pulumi.Input<string>;
    completion: pulumi.Input<{[key: string]: any}>;
    customFieldsMapping?: pulumi.Input<string>;
    notes?: pulumi.Input<string>;
    parentTaskId: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    title: pulumi.Input<string>;
}

export interface WorkflowTaskCreateAsanaTaskTaskParams {
    assignUserEmail?: pulumi.Input<string>;
    completion: pulumi.Input<{[key: string]: any}>;
    customFieldsMapping?: pulumi.Input<string>;
    projects: pulumi.Input<pulumi.Input<inputs.WorkflowTaskCreateAsanaTaskTaskParamsProject>[]>;
    taskType?: pulumi.Input<string>;
    title: pulumi.Input<string>;
    workspace: pulumi.Input<{[key: string]: any}>;
}

export interface WorkflowTaskCreateAsanaTaskTaskParamsProject {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskCreateConfluencePageTaskParams {
    ancestor?: pulumi.Input<{[key: string]: any}>;
    content?: pulumi.Input<string>;
    postMortemTemplateId?: pulumi.Input<string>;
    space: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
    template?: pulumi.Input<{[key: string]: any}>;
    title: pulumi.Input<string>;
}

export interface WorkflowTaskCreateDatadogNotebookTaskParams {
    content?: pulumi.Input<string>;
    kind: pulumi.Input<string>;
    postMortemTemplateId?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    title: pulumi.Input<string>;
}

export interface WorkflowTaskCreateDropboxPaperPageTaskParams {
    content?: pulumi.Input<string>;
    namespace?: pulumi.Input<{[key: string]: any}>;
    parentFolder?: pulumi.Input<{[key: string]: any}>;
    postMortemTemplateId?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    title: pulumi.Input<string>;
}

export interface WorkflowTaskCreateGithubIssueTaskParams {
    body?: pulumi.Input<string>;
    repository: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
    title: pulumi.Input<string>;
}

export interface WorkflowTaskCreateGoToMeetingTaskParams {
    conferenceCallInfo?: pulumi.Input<string>;
    passwordRequired?: pulumi.Input<boolean>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskCreateGoToMeetingTaskParamsPostToSlackChannel>[]>;
    subject: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskCreateGoToMeetingTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskCreateGoogleCalendarEventTaskParams {
    attendees: pulumi.Input<pulumi.Input<string>[]>;
    canGuestsInviteOthers?: pulumi.Input<boolean>;
    canGuestsModifyEvent?: pulumi.Input<boolean>;
    canGuestsSeeOtherGuests?: pulumi.Input<boolean>;
    conferenceSolutionKey?: pulumi.Input<string>;
    daysUntilMeeting: pulumi.Input<number>;
    description: pulumi.Input<string>;
    excludeWeekends?: pulumi.Input<boolean>;
    meetingDuration: pulumi.Input<string>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskCreateGoogleCalendarEventTaskParamsPostToSlackChannel>[]>;
    sendUpdates?: pulumi.Input<boolean>;
    summary: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    timeOfMeeting: pulumi.Input<string>;
    timeZone?: pulumi.Input<string>;
}

export interface WorkflowTaskCreateGoogleCalendarEventTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskCreateGoogleDocsPageTaskParams {
    content?: pulumi.Input<string>;
    drive?: pulumi.Input<{[key: string]: any}>;
    parentFolder?: pulumi.Input<{[key: string]: any}>;
    permissions?: pulumi.Input<string>;
    postMortemTemplateId?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    templateId?: pulumi.Input<string>;
    title: pulumi.Input<string>;
}

export interface WorkflowTaskCreateGoogleMeetingTaskParams {
    conferenceSolutionKey?: pulumi.Input<string>;
    description: pulumi.Input<string>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskCreateGoogleMeetingTaskParamsPostToSlackChannel>[]>;
    summary: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskCreateGoogleMeetingTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskCreateIncidentTaskParams {
    customFieldsMapping?: pulumi.Input<string>;
    environmentIds?: pulumi.Input<pulumi.Input<string>[]>;
    functionalityIds?: pulumi.Input<pulumi.Input<string>[]>;
    groupIds?: pulumi.Input<pulumi.Input<string>[]>;
    incidentTypeIds?: pulumi.Input<pulumi.Input<string>[]>;
    private?: pulumi.Input<boolean>;
    serviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    severityId?: pulumi.Input<string>;
    summary?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    title: pulumi.Input<string>;
}

export interface WorkflowTaskCreateJiraIssueTaskParams {
    assignUserEmail?: pulumi.Input<string>;
    customFieldsMapping?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dueDate?: pulumi.Input<string>;
    issueType: pulumi.Input<{[key: string]: any}>;
    labels?: pulumi.Input<string>;
    priority?: pulumi.Input<{[key: string]: any}>;
    projectKey: pulumi.Input<string>;
    reporterUserEmail?: pulumi.Input<string>;
    status?: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
    title: pulumi.Input<string>;
    updatePayload?: pulumi.Input<string>;
}

export interface WorkflowTaskCreateJiraSubtaskTaskParams {
    assignUserEmail?: pulumi.Input<string>;
    customFieldsMapping?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dueDate?: pulumi.Input<string>;
    labels?: pulumi.Input<string>;
    parentIssueId: pulumi.Input<string>;
    priority?: pulumi.Input<{[key: string]: any}>;
    projectKey: pulumi.Input<string>;
    reporterUserEmail?: pulumi.Input<string>;
    status?: pulumi.Input<{[key: string]: any}>;
    subtaskIssueType: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
    title: pulumi.Input<string>;
    updatePayload?: pulumi.Input<string>;
}

export interface WorkflowTaskCreateLinearIssueCommentTaskParams {
    body: pulumi.Input<string>;
    issueId: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskCreateLinearIssueTaskParams {
    description?: pulumi.Input<string>;
    priority?: pulumi.Input<{[key: string]: any}>;
    state: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
    team: pulumi.Input<{[key: string]: any}>;
    title: pulumi.Input<string>;
}

export interface WorkflowTaskCreateLinearSubtaskIssueTaskParams {
    description?: pulumi.Input<string>;
    parentIssueId: pulumi.Input<string>;
    priority?: pulumi.Input<{[key: string]: any}>;
    state: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
    title: pulumi.Input<string>;
}

export interface WorkflowTaskCreateMicrosoftTeamsMeetingTaskParams {
    name: pulumi.Input<string>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsPostToSlackChannel>[]>;
    subject: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskCreateMicrosoftTeamsMeetingTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskCreateNotionPageTaskParams {
    parentPage: pulumi.Input<{[key: string]: any}>;
    postMortemTemplateId?: pulumi.Input<string>;
    showActionItemsAsTable?: pulumi.Input<boolean>;
    showTimelineAsTable?: pulumi.Input<boolean>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskCreateOpsgenieAlertTaskParams {
    description?: pulumi.Input<string>;
    escalations?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskCreateOpsgenieAlertTaskParamsEscalation>[]>;
    message: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    schedules?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskCreateOpsgenieAlertTaskParamsSchedule>[]>;
    taskType?: pulumi.Input<string>;
    teams?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskCreateOpsgenieAlertTaskParamsTeam>[]>;
    users?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskCreateOpsgenieAlertTaskParamsUser>[]>;
}

export interface WorkflowTaskCreateOpsgenieAlertTaskParamsEscalation {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskCreateOpsgenieAlertTaskParamsSchedule {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskCreateOpsgenieAlertTaskParamsTeam {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskCreateOpsgenieAlertTaskParamsUser {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskCreatePagertreeAlertTaskParams {
    description?: pulumi.Input<string>;
    incident?: pulumi.Input<boolean>;
    severity?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    teams?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskCreatePagertreeAlertTaskParamsTeam>[]>;
    title?: pulumi.Input<string>;
    urgency?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskCreatePagertreeAlertTaskParamsUser>[]>;
}

export interface WorkflowTaskCreatePagertreeAlertTaskParamsTeam {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskCreatePagertreeAlertTaskParamsUser {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskCreateQuipPageTaskParams {
    content?: pulumi.Input<string>;
    parentFolderId?: pulumi.Input<string>;
    postMortemTemplateId?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    templateId?: pulumi.Input<string>;
    title: pulumi.Input<string>;
}

export interface WorkflowTaskCreateServiceNowIncidentTaskParams {
    completion?: pulumi.Input<{[key: string]: any}>;
    customFieldsMapping?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    priority?: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
    title: pulumi.Input<string>;
}

export interface WorkflowTaskCreateShortcutStoryTaskParams {
    archivation: pulumi.Input<{[key: string]: any}>;
    description?: pulumi.Input<string>;
    dueDate?: pulumi.Input<string>;
    kind: pulumi.Input<string>;
    labels?: pulumi.Input<string>;
    project: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
    title: pulumi.Input<string>;
}

export interface WorkflowTaskCreateShortcutTaskTaskParams {
    completion: pulumi.Input<{[key: string]: any}>;
    description: pulumi.Input<string>;
    parentStoryId: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskCreateSlackChannelTaskParams {
    private?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    title: pulumi.Input<string>;
    workspace: pulumi.Input<{[key: string]: any}>;
}

export interface WorkflowTaskCreateTrelloCardTaskParams {
    archivation?: pulumi.Input<{[key: string]: any}>;
    board: pulumi.Input<{[key: string]: any}>;
    description?: pulumi.Input<string>;
    dueDate?: pulumi.Input<string>;
    labels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskCreateTrelloCardTaskParamsLabel>[]>;
    list: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
    title: pulumi.Input<string>;
}

export interface WorkflowTaskCreateTrelloCardTaskParamsLabel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskCreateWebexMeetingTaskParams {
    password?: pulumi.Input<string>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskCreateWebexMeetingTaskParamsPostToSlackChannel>[]>;
    taskType?: pulumi.Input<string>;
    topic: pulumi.Input<string>;
}

export interface WorkflowTaskCreateWebexMeetingTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskCreateZendeskTicketTaskParams {
    comment?: pulumi.Input<string>;
    completion?: pulumi.Input<{[key: string]: any}>;
    kind: pulumi.Input<string>;
    priority?: pulumi.Input<{[key: string]: any}>;
    subject: pulumi.Input<string>;
    tags?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskCreateZoomMeetingTaskParams {
    alternativeHosts?: pulumi.Input<pulumi.Input<string>[]>;
    autoRecording?: pulumi.Input<string>;
    createAsEmail?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskCreateZoomMeetingTaskParamsPostToSlackChannel>[]>;
    taskType?: pulumi.Input<string>;
    topic: pulumi.Input<string>;
}

export interface WorkflowTaskCreateZoomMeetingTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskGetAlertsTaskParams {
    environmentIds?: pulumi.Input<pulumi.Input<string>[]>;
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    pastDuration: pulumi.Input<string>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskGetAlertsTaskParamsPostToSlackChannel>[]>;
    serviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    sources?: pulumi.Input<pulumi.Input<string>[]>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskGetAlertsTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskGetGithubCommitsTaskParams {
    branch: pulumi.Input<string>;
    githubRepositoryNames?: pulumi.Input<pulumi.Input<string>[]>;
    pastDuration: pulumi.Input<string>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskGetGithubCommitsTaskParamsPostToSlackChannel>[]>;
    serviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskGetGithubCommitsTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskGetGitlabCommitsTaskParams {
    branch: pulumi.Input<string>;
    gitlabRepositoryNames?: pulumi.Input<pulumi.Input<string>[]>;
    pastDuration: pulumi.Input<string>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskGetGitlabCommitsTaskParamsPostToSlackChannel>[]>;
    serviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskGetGitlabCommitsTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskGetPulsesTaskParams {
    environmentIds?: pulumi.Input<pulumi.Input<string>[]>;
    labels?: pulumi.Input<pulumi.Input<string>[]>;
    pastDuration: pulumi.Input<string>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskGetPulsesTaskParamsPostToSlackChannel>[]>;
    refs?: pulumi.Input<pulumi.Input<string>[]>;
    serviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    sources?: pulumi.Input<pulumi.Input<string>[]>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskGetPulsesTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskHTTPClientTaskParams {
    body?: pulumi.Input<string>;
    eventMessage?: pulumi.Input<string>;
    eventUrl?: pulumi.Input<string>;
    headers?: pulumi.Input<string>;
    method?: pulumi.Input<string>;
    params?: pulumi.Input<string>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskHTTPClientTaskParamsPostToSlackChannel>[]>;
    succeedOnStatus: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
}

export interface WorkflowTaskHTTPClientTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskInviteToSlackChannelOpsgenieTaskParams {
    channels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskInviteToSlackChannelOpsgenieTaskParamsChannel>[]>;
    schedule: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskInviteToSlackChannelOpsgenieTaskParamsChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskInviteToSlackChannelPagerdutyTaskParams {
    channels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskInviteToSlackChannelPagerdutyTaskParamsChannel>[]>;
    escalationPolicy?: pulumi.Input<{[key: string]: any}>;
    schedule?: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskInviteToSlackChannelPagerdutyTaskParamsChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskInviteToSlackChannelTaskParams {
    channel: pulumi.Input<{[key: string]: any}>;
    slackUserGroups?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskInviteToSlackChannelTaskParamsSlackUserGroup>[]>;
    slackUsers?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskInviteToSlackChannelTaskParamsSlackUser>[]>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskInviteToSlackChannelTaskParamsSlackUser {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskInviteToSlackChannelTaskParamsSlackUserGroup {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskInviteToSlackChannelVictorOpsTaskParams {
    channels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskInviteToSlackChannelVictorOpsTaskParamsChannel>[]>;
    schedule: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskInviteToSlackChannelVictorOpsTaskParamsChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskPageOpsgenieOnCallRespondersTaskParams {
    priority?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    teams?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsTeam>[]>;
    users?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsUser>[]>;
}

export interface WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsTeam {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskPageOpsgenieOnCallRespondersTaskParamsUser {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskPagePagerdutyOnCallRespondersTaskParams {
    escalationPolicies?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsEscalationPolicy>[]>;
    message?: pulumi.Input<string>;
    service: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
    urgency?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsUser>[]>;
}

export interface WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsEscalationPolicy {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskPagePagerdutyOnCallRespondersTaskParamsUser {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskPageVictorOpsOnCallRespondersTaskParams {
    escalationPolicies?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsEscalationPolicy>[]>;
    taskType?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsUser>[]>;
}

export interface WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsEscalationPolicy {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskPageVictorOpsOnCallRespondersTaskParamsUser {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskPrintTaskParams {
    message: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskPublishIncidentTaskParams {
    event: pulumi.Input<string>;
    incident: pulumi.Input<{[key: string]: any}>;
    publicTitle: pulumi.Input<string>;
    status: pulumi.Input<string>;
    statusPageId: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskRedisClientTaskParams {
    commands: pulumi.Input<string>;
    eventMessage?: pulumi.Input<string>;
    eventUrl?: pulumi.Input<string>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskRedisClientTaskParamsPostToSlackChannel>[]>;
    taskType?: pulumi.Input<string>;
    url: pulumi.Input<string>;
}

export interface WorkflowTaskRedisClientTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskRenameSlackChannelTaskParams {
    channel?: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
    title: pulumi.Input<string>;
}

export interface WorkflowTaskRunCommandHerokuTaskParams {
    appName: pulumi.Input<string>;
    command: pulumi.Input<string>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskRunCommandHerokuTaskParamsPostToSlackChannel>[]>;
    size: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskRunCommandHerokuTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskSendDashboardReportTaskParams {
    body: pulumi.Input<string>;
    dashboardIds: pulumi.Input<pulumi.Input<string>[]>;
    from?: pulumi.Input<string>;
    preheader?: pulumi.Input<string>;
    subject: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    tos: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WorkflowTaskSendEmailTaskParams {
    body: pulumi.Input<string>;
    customLogoUrl?: pulumi.Input<string>;
    from?: pulumi.Input<string>;
    includeFooter?: pulumi.Input<boolean>;
    includeHeader?: pulumi.Input<boolean>;
    preheader?: pulumi.Input<string>;
    subject: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    tos: pulumi.Input<pulumi.Input<string>[]>;
}

export interface WorkflowTaskSendSlackBlocksTaskParams {
    attachments?: pulumi.Input<string>;
    blocks: pulumi.Input<string>;
    broadcastThreadReplyToChannel?: pulumi.Input<boolean>;
    channels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskSendSlackBlocksTaskParamsChannel>[]>;
    message?: pulumi.Input<string>;
    parentMessageThreadTask?: pulumi.Input<{[key: string]: any}>;
    sendAsEphemeral?: pulumi.Input<boolean>;
    slackUserGroups?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskSendSlackBlocksTaskParamsSlackUserGroup>[]>;
    slackUsers?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskSendSlackBlocksTaskParamsSlackUser>[]>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskSendSlackBlocksTaskParamsChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskSendSlackBlocksTaskParamsSlackUser {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskSendSlackBlocksTaskParamsSlackUserGroup {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskSendSlackMessageTaskParams {
    actionables?: pulumi.Input<pulumi.Input<string>[]>;
    broadcastThreadReplyToChannel?: pulumi.Input<boolean>;
    channels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskSendSlackMessageTaskParamsChannel>[]>;
    parentMessageThreadTask?: pulumi.Input<{[key: string]: any}>;
    sendAsEphemeral?: pulumi.Input<boolean>;
    slackUserGroups?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskSendSlackMessageTaskParamsSlackUserGroup>[]>;
    slackUsers?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskSendSlackMessageTaskParamsSlackUser>[]>;
    taskType?: pulumi.Input<string>;
    text: pulumi.Input<string>;
}

export interface WorkflowTaskSendSlackMessageTaskParamsChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskSendSlackMessageTaskParamsSlackUser {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskSendSlackMessageTaskParamsSlackUserGroup {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskSendSmsTaskParams {
    content: pulumi.Input<string>;
    name: pulumi.Input<string>;
    phoneNumbers: pulumi.Input<pulumi.Input<string>[]>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskSnapshotDatadogGraphTaskParams {
    dashboards?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskSnapshotDatadogGraphTaskParamsDashboard>[]>;
    metricQueries?: pulumi.Input<pulumi.Input<string>[]>;
    pastDuration: pulumi.Input<string>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskSnapshotDatadogGraphTaskParamsPostToSlackChannel>[]>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskSnapshotDatadogGraphTaskParamsDashboard {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskSnapshotDatadogGraphTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskSnapshotGrafanaDashboardTaskParams {
    dashboards: pulumi.Input<pulumi.Input<inputs.WorkflowTaskSnapshotGrafanaDashboardTaskParamsDashboard>[]>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskSnapshotGrafanaDashboardTaskParamsPostToSlackChannel>[]>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskSnapshotGrafanaDashboardTaskParamsDashboard {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskSnapshotGrafanaDashboardTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskSnapshotLookerLookTaskParams {
    dashboards: pulumi.Input<pulumi.Input<inputs.WorkflowTaskSnapshotLookerLookTaskParamsDashboard>[]>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskSnapshotLookerLookTaskParamsPostToSlackChannel>[]>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskSnapshotLookerLookTaskParamsDashboard {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskSnapshotLookerLookTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskSnapshotNewRelicGraphTaskParams {
    metricQuery: pulumi.Input<string>;
    metricType: pulumi.Input<string>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskSnapshotNewRelicGraphTaskParamsPostToSlackChannel>[]>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskSnapshotNewRelicGraphTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskTriggerWorkflowTaskParams {
    kind?: pulumi.Input<string>;
    resource?: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
    workflow: pulumi.Input<{[key: string]: any}>;
}

export interface WorkflowTaskTweetTwitterMessageTaskParams {
    message: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateAirtableTableRecordTaskParams {
    baseKey: pulumi.Input<string>;
    customFieldsMapping?: pulumi.Input<string>;
    recordId: pulumi.Input<string>;
    tableName: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateAsanaTaskTaskParams {
    assignUserEmail?: pulumi.Input<string>;
    completion: pulumi.Input<{[key: string]: any}>;
    customFieldsMapping?: pulumi.Input<string>;
    taskId: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateGithubIssueTaskParams {
    body?: pulumi.Input<string>;
    completion: pulumi.Input<{[key: string]: any}>;
    issueId: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateGoogleCalendarEventTaskParams {
    adjustmentDays?: pulumi.Input<number>;
    attendees?: pulumi.Input<pulumi.Input<string>[]>;
    canGuestsInviteOthers?: pulumi.Input<boolean>;
    canGuestsModifyEvent?: pulumi.Input<boolean>;
    canGuestsSeeOtherGuests?: pulumi.Input<boolean>;
    conferenceSolutionKey?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    eventId: pulumi.Input<string>;
    meetingDuration?: pulumi.Input<string>;
    postToIncidentTimeline?: pulumi.Input<boolean>;
    postToSlackChannels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskUpdateGoogleCalendarEventTaskParamsPostToSlackChannel>[]>;
    replaceAttendees?: pulumi.Input<boolean>;
    sendUpdates?: pulumi.Input<boolean>;
    summary?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    timeOfMeeting?: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateGoogleCalendarEventTaskParamsPostToSlackChannel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateIncidentPostmortemTaskParams {
    postmortemId?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateIncidentTaskParams {
    acknowledgedAt?: pulumi.Input<string>;
    attributeToQueryBy?: pulumi.Input<string>;
    customFieldsMapping?: pulumi.Input<string>;
    detectedAt?: pulumi.Input<string>;
    environmentIds?: pulumi.Input<pulumi.Input<string>[]>;
    functionalityIds?: pulumi.Input<pulumi.Input<string>[]>;
    groupIds?: pulumi.Input<pulumi.Input<string>[]>;
    incidentId?: pulumi.Input<string>;
    incidentTypeIds?: pulumi.Input<pulumi.Input<string>[]>;
    mitigatedAt?: pulumi.Input<string>;
    private?: pulumi.Input<boolean>;
    resolvedAt?: pulumi.Input<string>;
    serviceIds?: pulumi.Input<pulumi.Input<string>[]>;
    severityId?: pulumi.Input<string>;
    startedAt?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    summary?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateJiraIssueTaskParams {
    assignUserEmail?: pulumi.Input<string>;
    customFieldsMapping?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    issueId: pulumi.Input<string>;
    labels?: pulumi.Input<string>;
    priority?: pulumi.Input<{[key: string]: any}>;
    projectKey: pulumi.Input<string>;
    reporterUserEmail?: pulumi.Input<string>;
    status?: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    updatePayload?: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateLinearIssueTaskParams {
    description?: pulumi.Input<string>;
    issueId: pulumi.Input<string>;
    priority?: pulumi.Input<{[key: string]: any}>;
    state?: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateOpsgenieAlertTaskParams {
    completion: pulumi.Input<{[key: string]: any}>;
    description?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    priority: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateOpsgenieIncidentTaskParams {
    description?: pulumi.Input<string>;
    message?: pulumi.Input<string>;
    opsgenieIncidentId: pulumi.Input<string>;
    priority?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskUpdatePagerdutyIncidentTaskParams {
    escalationLevel?: pulumi.Input<number>;
    pagerdutyIncidentId: pulumi.Input<string>;
    resolution?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    urgency?: pulumi.Input<string>;
}

export interface WorkflowTaskUpdatePagertreeAlertTaskParams {
    description?: pulumi.Input<string>;
    incident?: pulumi.Input<boolean>;
    pagertreeAlertId?: pulumi.Input<string>;
    severity?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    teams?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskUpdatePagertreeAlertTaskParamsTeam>[]>;
    title?: pulumi.Input<string>;
    urgency?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskUpdatePagertreeAlertTaskParamsUser>[]>;
}

export interface WorkflowTaskUpdatePagertreeAlertTaskParamsTeam {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskUpdatePagertreeAlertTaskParamsUser {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateServiceNowIncidentTaskParams {
    completion?: pulumi.Input<{[key: string]: any}>;
    customFieldsMapping?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    incidentId: pulumi.Input<string>;
    priority?: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateShortcutStoryTaskParams {
    archivation: pulumi.Input<{[key: string]: any}>;
    description?: pulumi.Input<string>;
    dueDate?: pulumi.Input<string>;
    labels?: pulumi.Input<string>;
    storyId: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateShortcutTaskTaskParams {
    completion: pulumi.Input<{[key: string]: any}>;
    description?: pulumi.Input<string>;
    parentStoryId: pulumi.Input<string>;
    taskId: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateSlackChannelTopicTaskParams {
    channel: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
    topic: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateStatusTaskParams {
    inactivityTimeout?: pulumi.Input<string>;
    status: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateTrelloCardTaskParams {
    archivation: pulumi.Input<{[key: string]: any}>;
    board?: pulumi.Input<{[key: string]: any}>;
    cardId: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    dueDate?: pulumi.Input<string>;
    labels?: pulumi.Input<pulumi.Input<inputs.WorkflowTaskUpdateTrelloCardTaskParamsLabel>[]>;
    list?: pulumi.Input<{[key: string]: any}>;
    taskType?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateTrelloCardTaskParamsLabel {
    id: pulumi.Input<string>;
    name: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateVictorOpsIncidentTaskParams {
    resolutionMessage?: pulumi.Input<string>;
    status: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    victorOpsIncidentId: pulumi.Input<string>;
}

export interface WorkflowTaskUpdateZendeskTicketTaskParams {
    completion?: pulumi.Input<{[key: string]: any}>;
    priority?: pulumi.Input<{[key: string]: any}>;
    subject?: pulumi.Input<string>;
    tags?: pulumi.Input<string>;
    taskType?: pulumi.Input<string>;
    ticketId: pulumi.Input<string>;
}
