// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Heartbeat extends pulumi.CustomResource {
    /**
     * Get an existing Heartbeat resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: HeartbeatState, opts?: pulumi.CustomResourceOptions): Heartbeat {
        return new Heartbeat(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rootly:index/heartbeat:Heartbeat';

    /**
     * Returns true if the given object is an instance of Heartbeat.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Heartbeat {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Heartbeat.__pulumiType;
    }

    /**
     * Summary of alerts triggered when heartbeat expires.
     */
    public readonly alertSummary!: pulumi.Output<string>;
    /**
     * The description of the heartbeat
     */
    public readonly description!: pulumi.Output<string>;
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * When heartbeat expires
     */
    public readonly expiresAt!: pulumi.Output<string>;
    public readonly interval!: pulumi.Output<number>;
    /**
     * Value must be one of `seconds`, `minutes`, `hours`.
     */
    public readonly intervalUnit!: pulumi.Output<string | undefined>;
    /**
     * When the heartbeat was last pinged.
     */
    public readonly lastPingedAt!: pulumi.Output<string>;
    /**
     * The name of the heartbeat
     */
    public readonly name!: pulumi.Output<string>;
    public readonly notificationTargetId!: pulumi.Output<string>;
    /**
     * Value must be one of `User`, `Group`, `Service`, `EscalationPolicy`.
     */
    public readonly notificationTargetType!: pulumi.Output<string | undefined>;
    /**
     * Value must be one of `waiting`, `active`, `expired`.
     */
    public readonly status!: pulumi.Output<string | undefined>;

    /**
     * Create a Heartbeat resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: HeartbeatArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: HeartbeatArgs | HeartbeatState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as HeartbeatState | undefined;
            resourceInputs["alertSummary"] = state ? state.alertSummary : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["expiresAt"] = state ? state.expiresAt : undefined;
            resourceInputs["interval"] = state ? state.interval : undefined;
            resourceInputs["intervalUnit"] = state ? state.intervalUnit : undefined;
            resourceInputs["lastPingedAt"] = state ? state.lastPingedAt : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notificationTargetId"] = state ? state.notificationTargetId : undefined;
            resourceInputs["notificationTargetType"] = state ? state.notificationTargetType : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as HeartbeatArgs | undefined;
            if ((!args || args.alertSummary === undefined) && !opts.urn) {
                throw new Error("Missing required property 'alertSummary'");
            }
            if ((!args || args.interval === undefined) && !opts.urn) {
                throw new Error("Missing required property 'interval'");
            }
            if ((!args || args.notificationTargetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'notificationTargetId'");
            }
            resourceInputs["alertSummary"] = args ? args.alertSummary : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["expiresAt"] = args ? args.expiresAt : undefined;
            resourceInputs["interval"] = args ? args.interval : undefined;
            resourceInputs["intervalUnit"] = args ? args.intervalUnit : undefined;
            resourceInputs["lastPingedAt"] = args ? args.lastPingedAt : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["notificationTargetId"] = args ? args.notificationTargetId : undefined;
            resourceInputs["notificationTargetType"] = args ? args.notificationTargetType : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Heartbeat.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Heartbeat resources.
 */
export interface HeartbeatState {
    /**
     * Summary of alerts triggered when heartbeat expires.
     */
    alertSummary?: pulumi.Input<string>;
    /**
     * The description of the heartbeat
     */
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    /**
     * When heartbeat expires
     */
    expiresAt?: pulumi.Input<string>;
    interval?: pulumi.Input<number>;
    /**
     * Value must be one of `seconds`, `minutes`, `hours`.
     */
    intervalUnit?: pulumi.Input<string>;
    /**
     * When the heartbeat was last pinged.
     */
    lastPingedAt?: pulumi.Input<string>;
    /**
     * The name of the heartbeat
     */
    name?: pulumi.Input<string>;
    notificationTargetId?: pulumi.Input<string>;
    /**
     * Value must be one of `User`, `Group`, `Service`, `EscalationPolicy`.
     */
    notificationTargetType?: pulumi.Input<string>;
    /**
     * Value must be one of `waiting`, `active`, `expired`.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Heartbeat resource.
 */
export interface HeartbeatArgs {
    /**
     * Summary of alerts triggered when heartbeat expires.
     */
    alertSummary: pulumi.Input<string>;
    /**
     * The description of the heartbeat
     */
    description?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    /**
     * When heartbeat expires
     */
    expiresAt?: pulumi.Input<string>;
    interval: pulumi.Input<number>;
    /**
     * Value must be one of `seconds`, `minutes`, `hours`.
     */
    intervalUnit?: pulumi.Input<string>;
    /**
     * When the heartbeat was last pinged.
     */
    lastPingedAt?: pulumi.Input<string>;
    /**
     * The name of the heartbeat
     */
    name?: pulumi.Input<string>;
    notificationTargetId: pulumi.Input<string>;
    /**
     * Value must be one of `User`, `Group`, `Service`, `EscalationPolicy`.
     */
    notificationTargetType?: pulumi.Input<string>;
    /**
     * Value must be one of `waiting`, `active`, `expired`.
     */
    status?: pulumi.Input<string>;
}
