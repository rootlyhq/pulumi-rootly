// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Manages dashboards.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as rootly from "@pulumi/rootly";
 *
 * const overview = new rootly.Dashboard("overview", {});
 * const incidentsBySeverity = new rootly.DashboardPanel("incidentsBySeverity", {
 *     dashboardId: rootly_dashboard.foo.id,
 *     params: {
 *         display: "line_chart",
 *         datasets: [{
 *             collection: "incidents",
 *             filters: [{
 *                 operation: "and",
 *                 rules: [{
 *                     operation: "and",
 *                     condition: "=",
 *                     key: "status",
 *                     value: "started",
 *                 }],
 *             }],
 *             groupBy: "severity",
 *             aggregate: {
 *                 cumulative: false,
 *                 key: "results",
 *                 operation: "count",
 *             },
 *         }],
 *     },
 * });
 * ```
 */
export class Dashboard extends pulumi.CustomResource {
    /**
     * Get an existing Dashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardState, opts?: pulumi.CustomResourceOptions): Dashboard {
        return new Dashboard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rootly:index/dashboard:Dashboard';

    /**
     * Returns true if the given object is an instance of Dashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dashboard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dashboard.__pulumiType;
    }

    /**
     * The name of the dashboard
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether the dashboard is owned by organization or user.
     */
    public readonly owner!: pulumi.Output<string | undefined>;
    /**
     * Whether the dashboard is public
     */
    public readonly public!: pulumi.Output<boolean | undefined>;
    /**
     * The slug of the dashboard
     */
    public /*out*/ readonly slug!: pulumi.Output<string>;
    /**
     * The userId of the dashboard, for dashboards with owner == user
     */
    public /*out*/ readonly userId!: pulumi.Output<number>;

    /**
     * Create a Dashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DashboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardArgs | DashboardState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DashboardState | undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["owner"] = state ? state.owner : undefined;
            resourceInputs["public"] = state ? state.public : undefined;
            resourceInputs["slug"] = state ? state.slug : undefined;
            resourceInputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as DashboardArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["public"] = args ? args.public : undefined;
            resourceInputs["slug"] = undefined /*out*/;
            resourceInputs["userId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Dashboard.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Dashboard resources.
 */
export interface DashboardState {
    /**
     * The name of the dashboard
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the dashboard is owned by organization or user.
     */
    owner?: pulumi.Input<string>;
    /**
     * Whether the dashboard is public
     */
    public?: pulumi.Input<boolean>;
    /**
     * The slug of the dashboard
     */
    slug?: pulumi.Input<string>;
    /**
     * The userId of the dashboard, for dashboards with owner == user
     */
    userId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Dashboard resource.
 */
export interface DashboardArgs {
    /**
     * The name of the dashboard
     */
    name?: pulumi.Input<string>;
    /**
     * Whether the dashboard is owned by organization or user.
     */
    owner?: pulumi.Input<string>;
    /**
     * Whether the dashboard is public
     */
    public?: pulumi.Input<boolean>;
}
