// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class ScheduleRotation extends pulumi.CustomResource {
    /**
     * Get an existing ScheduleRotation resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ScheduleRotationState, opts?: pulumi.CustomResourceOptions): ScheduleRotation {
        return new ScheduleRotation(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'rootly:index/scheduleRotation:ScheduleRotation';

    /**
     * Returns true if the given object is an instance of ScheduleRotation.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ScheduleRotation {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ScheduleRotation.__pulumiType;
    }

    /**
     * Schedule rotation active all week?. Value must be one of true or false
     */
    public readonly activeAllWeek!: pulumi.Output<boolean>;
    /**
     * Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
     */
    public readonly activeDays!: pulumi.Output<string[]>;
    /**
     * Schedule rotation's active times
     */
    public readonly activeTimeAttributes!: pulumi.Output<outputs.ScheduleRotationActiveTimeAttribute[]>;
    public readonly activeTimeType!: pulumi.Output<string>;
    /**
     * The name of the schedule rotation
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Position of the schedule rotation
     */
    public readonly position!: pulumi.Output<number>;
    /**
     * The ID of parent schedule
     */
    public readonly scheduleId!: pulumi.Output<string>;
    public readonly scheduleRotationableAttributes!: pulumi.Output<{[key: string]: string}>;
    /**
     * Schedule rotation type. Value must be one of `ScheduleDailyRotation`, `ScheduleWeeklyRotation`, `ScheduleBiweeklyRotation`, `ScheduleMonthlyRotation`, `ScheduleCustomRotation`.
     */
    public readonly scheduleRotationableType!: pulumi.Output<string | undefined>;
    /**
     * A valid IANA time zone name.
     */
    public readonly timeZone!: pulumi.Output<string | undefined>;

    /**
     * Create a ScheduleRotation resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ScheduleRotationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ScheduleRotationArgs | ScheduleRotationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ScheduleRotationState | undefined;
            resourceInputs["activeAllWeek"] = state ? state.activeAllWeek : undefined;
            resourceInputs["activeDays"] = state ? state.activeDays : undefined;
            resourceInputs["activeTimeAttributes"] = state ? state.activeTimeAttributes : undefined;
            resourceInputs["activeTimeType"] = state ? state.activeTimeType : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["position"] = state ? state.position : undefined;
            resourceInputs["scheduleId"] = state ? state.scheduleId : undefined;
            resourceInputs["scheduleRotationableAttributes"] = state ? state.scheduleRotationableAttributes : undefined;
            resourceInputs["scheduleRotationableType"] = state ? state.scheduleRotationableType : undefined;
            resourceInputs["timeZone"] = state ? state.timeZone : undefined;
        } else {
            const args = argsOrState as ScheduleRotationArgs | undefined;
            if ((!args || args.scheduleRotationableAttributes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scheduleRotationableAttributes'");
            }
            resourceInputs["activeAllWeek"] = args ? args.activeAllWeek : undefined;
            resourceInputs["activeDays"] = args ? args.activeDays : undefined;
            resourceInputs["activeTimeAttributes"] = args ? args.activeTimeAttributes : undefined;
            resourceInputs["activeTimeType"] = args ? args.activeTimeType : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["position"] = args ? args.position : undefined;
            resourceInputs["scheduleId"] = args ? args.scheduleId : undefined;
            resourceInputs["scheduleRotationableAttributes"] = args ? args.scheduleRotationableAttributes : undefined;
            resourceInputs["scheduleRotationableType"] = args ? args.scheduleRotationableType : undefined;
            resourceInputs["timeZone"] = args ? args.timeZone : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ScheduleRotation.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ScheduleRotation resources.
 */
export interface ScheduleRotationState {
    /**
     * Schedule rotation active all week?. Value must be one of true or false
     */
    activeAllWeek?: pulumi.Input<boolean>;
    /**
     * Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
     */
    activeDays?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Schedule rotation's active times
     */
    activeTimeAttributes?: pulumi.Input<pulumi.Input<inputs.ScheduleRotationActiveTimeAttribute>[]>;
    activeTimeType?: pulumi.Input<string>;
    /**
     * The name of the schedule rotation
     */
    name?: pulumi.Input<string>;
    /**
     * Position of the schedule rotation
     */
    position?: pulumi.Input<number>;
    /**
     * The ID of parent schedule
     */
    scheduleId?: pulumi.Input<string>;
    scheduleRotationableAttributes?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Schedule rotation type. Value must be one of `ScheduleDailyRotation`, `ScheduleWeeklyRotation`, `ScheduleBiweeklyRotation`, `ScheduleMonthlyRotation`, `ScheduleCustomRotation`.
     */
    scheduleRotationableType?: pulumi.Input<string>;
    /**
     * A valid IANA time zone name.
     */
    timeZone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ScheduleRotation resource.
 */
export interface ScheduleRotationArgs {
    /**
     * Schedule rotation active all week?. Value must be one of true or false
     */
    activeAllWeek?: pulumi.Input<boolean>;
    /**
     * Value must be one of `S`, `M`, `T`, `W`, `R`, `F`, `U`.
     */
    activeDays?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Schedule rotation's active times
     */
    activeTimeAttributes?: pulumi.Input<pulumi.Input<inputs.ScheduleRotationActiveTimeAttribute>[]>;
    activeTimeType?: pulumi.Input<string>;
    /**
     * The name of the schedule rotation
     */
    name?: pulumi.Input<string>;
    /**
     * Position of the schedule rotation
     */
    position?: pulumi.Input<number>;
    /**
     * The ID of parent schedule
     */
    scheduleId?: pulumi.Input<string>;
    scheduleRotationableAttributes: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Schedule rotation type. Value must be one of `ScheduleDailyRotation`, `ScheduleWeeklyRotation`, `ScheduleBiweeklyRotation`, `ScheduleMonthlyRotation`, `ScheduleCustomRotation`.
     */
    scheduleRotationableType?: pulumi.Input<string>;
    /**
     * A valid IANA time zone name.
     */
    timeZone?: pulumi.Input<string>;
}
